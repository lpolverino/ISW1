

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (21 March 2023 12:52:48) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!


ObjectBuilder create: #Bil asChildOf: DenotativeObject collaboratorNames: '' in: 'Zombie'!

!classDefinition: #Bil category: 'Zombie' stamp: 'JB 3/21/2023 12:53:55'!
DenotativeObject subclass: #Bil
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Zombie'!

!classDefinition: 'Bil class' category: 'Zombie' stamp: 'JB 3/21/2023 12:53:55'!
Bil class
	instanceVariableNames: ''!
!Bil class methodsFor: 'Hablar' stamp: 'JB 3/21/2023 12:55:40'!
grito
	 ^'AHHHH!!'! !

Bil grito!

!classDefinition: 'Bil class' category: 'Zombie' stamp: 'JB 3/21/2023 12:58:08'!
Bil class
	instanceVariableNames: 'energia'!

!classDefinition: 'Bil class' category: 'Zombie' stamp: 'JB 3/21/2023 12:58:30'!
Bil class
	instanceVariableNames: 'energia recorrido'!

recorrido !

recorrido!
!Bil class methodsFor: 'constructor' stamp: 'JB 3/21/2023 12:59:00'!
nace
	energia := 0.
	recorrido := 0 ! !
!Bil class methodsFor: 'energia' stamp: 'JB 3/21/2023 12:59:25'!
energia
	^energia! !
!Bil class methodsFor: 'movimiento' stamp: 'JB 3/21/2023 13:01:03'!
caminar:km
	recorrido:= recorrido + km.
	energia := energia - 3 - km 
	 
	! !

Bil nace !

Bil energia !
!Bil class methodsFor: 'constructor' stamp: 'JB 3/21/2023 13:01:46' prior: 50603965!
nace
	energia := 28.
	recorrido := 0 ! !

Bil nace!

Bil energia !

Bil caminar:3!

Bil  energia!
!Bil class methodsFor: 'alimentarse' stamp: 'JB 3/21/2023 13:07:45'!
comer:comida
	energia := energia + 4  + comida! !

----QUIT----(21 March 2023 13:09:40) CuisUniversity-5706.image priorSource: 8713034!

----STARTUP---- (23 March 2023 18:09:19) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!


nil  print !

nil  print !

nil  print !

nil  print !

ObjectBuilder create: #teorica asChildOf: DenotativeObject collaboratorNames: '' in: 'teorica'!

!classDefinition: #teorica category: 'teorica' stamp: 'JB 3/23/2023 18:59:20'!
DenotativeObject subclass: #teorica
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'teorica'!

!classDefinition: 'teorica class' category: 'teorica' stamp: 'JB 3/23/2023 18:59:20'!
teorica class
	instanceVariableNames: ''!
!teorica class methodsFor: 'nil' stamp: 'JB 3/23/2023 19:00:25'!
apagar
! !
!teorica class methodsFor: 'nil' stamp: 'JB 3/23/2023 19:00:34'!
prender! !
!teorica class methodsFor: 'nil' stamp: 'JB 3/23/2023 19:00:55'!
abrirBaul! !

ObjectBuilder create: #alanKay asChildOf: DenotativeObject collaboratorNames: '' in: 'teorica'!

!classDefinition: #alanKay category: 'teorica' stamp: 'JB 3/23/2023 19:30:58'!
DenotativeObject subclass: #alanKay
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'teorica'!

!classDefinition: 'alanKay class' category: 'teorica' stamp: 'JB 3/23/2023 19:30:58'!
alanKay class
	instanceVariableNames: ''!
!alanKay class methodsFor: 'nil' stamp: 'JB 3/23/2023 19:31:52'!
fechaDeNacimiento
	^April/23/1950! !

alanKay fechaDeNacimiento !

ObjectBuilder create: #ingels asChildOf: DenotativeObject collaboratorNames: '' in: 'teorica'!

!classDefinition: #ingels category: 'teorica' stamp: 'JB 3/23/2023 19:32:16'!
DenotativeObject subclass: #ingels
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'teorica'!

!classDefinition: 'ingels class' category: 'teorica' stamp: 'JB 3/23/2023 19:32:16'!
ingels class
	instanceVariableNames: ''!
!ingels class methodsFor: 'nil' stamp: 'JB 3/23/2023 19:32:57'!
fechaDeNacimiento 
 ^ April/23/1950 next: 10*Year  ! !

ingels fechaDeNacimiento!
!ingels class methodsFor: 'as yet unclassified' stamp: 'JB 3/23/2023 19:34:09' prior: 50604051!
fechaDeNacimiento 
 ^ alanKay  fechaDeNacimiento  next:10*Year  ! !

ingels fechaDeNacimiento!
!ingels class methodsFor: 'as yet unclassified' stamp: 'JB 3/23/2023 19:34:31' prior: 50604057!
fechaDeNacimiento 
 ^ alanKay  fechaDeNacimiento  next: 10*Year  ! !

ingels fechaDeNacimiento!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/linux64/Packages/TerseGuide.pck.st----!

----QUIT----(23 March 2023 21:31:57) CuisUniversity-5706.image priorSource: 8714801!

----STARTUP---- (30 March 2023 12:42:11) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!


!classRemoval: #teorica stamp: 'JB 3/30/2023 12:44:50'!
DenotativeObject subclass: #teorica
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'teorica'!

!classRemoval: #ingels stamp: 'JB 3/30/2023 12:44:50'!
DenotativeObject subclass: #ingels
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'teorica'!

!classRemoval: #alanKay stamp: 'JB 3/30/2023 12:44:51'!
DenotativeObject subclass: #alanKay
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'teorica'!

!classRemoval: #Bil stamp: 'JB 3/30/2023 12:45:00'!
DenotativeObject subclass: #Bil
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Zombie'!

ObjectBuilder create: #I
	collaboratorNames: ''
	in: 'Naturales'
	!

!classDefinition: #I category: 'Naturales' stamp: 'JB 3/30/2023 12:45:30'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: 'I class' category: 'Naturales' stamp: 'JB 3/30/2023 12:45:30'!
I class
	instanceVariableNames: ''!

!classDefinition: 'I class' category: 'Naturales' stamp: 'JB 3/30/2023 12:47:44'!
I class
	instanceVariableNames: 'sucessor'!
!I class methodsFor: 'peano' stamp: 'JB 3/30/2023 12:47:41'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: [self name , 'I']].
	^sucessor! !

I next !
!I class methodsFor: 'peano' stamp: 'JB 3/30/2023 12:48:37' prior: 50607034!
next 
	
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'].
	^sucessor! !
!I class methodsFor: 'peano' stamp: 'JB 3/30/2023 12:48:47' prior: 50607040!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'].
	^sucessor! !

I next !

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #II category: 'Naturales' stamp: 'JB 3/30/2023 12:48:52'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

II class
	instanceVariableNames: 'sucessor'!

!classDefinition: 'II class' category: 'Naturales' stamp: 'JB 3/30/2023 12:48:52'!
II class
	instanceVariableNames: 'sucessor'!
!II class methodsFor: 'peano' stamp: 'JB 3/30/2023 12:48:52'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'].
	^sucessor! !

I next !
!I class methodsFor: 'operations' stamp: 'JB 3/30/2023 12:49:41'!
+ aNumber
	^aNumber  next ! !
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 12:59:32'!
+ aNumber
	^self predecessor + aNumber next ! !

!classDefinition: 'II class' category: 'Naturales' stamp: 'JB 3/30/2023 12:59:38'!
II class
	instanceVariableNames: 'sucessor predecessor'!

predecessor!
!II class methodsFor: 'private' stamp: 'JB 3/30/2023 13:00:27'!
setPredecessor:aNumber
	predecessor:= aNumber! !
!II class methodsFor: 'private' stamp: 'JB 3/30/2023 13:00:35' prior: 50607085!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!II class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:01:06' prior: 50607067!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !
!I class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:01:16' prior: 50607046!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'. sucessor  setPredecessor: self ].
	^sucessor! !

I + II !

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #III category: 'Naturales' stamp: 'JB 3/30/2023 13:01:51'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

III class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'III class' category: 'Naturales' stamp: 'JB 3/30/2023 13:01:51'!
III class
	instanceVariableNames: 'sucessor predecessor'!
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:01:51'!
+ aNumber
	^self predecessor + aNumber next ! !
!III class methodsFor: 'private' stamp: 'JB 3/30/2023 13:01:51'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!III class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:01:51'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

II  +  III!
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:02:34'!
predecessor 
	^predecessor! !

II  +  III!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #IIII category: 'Naturales' stamp: 'JB 3/30/2023 13:02:40'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

IIII class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'IIII class' category: 'Naturales' stamp: 'JB 3/30/2023 13:02:40'!
IIII class
	instanceVariableNames: 'sucessor predecessor'!
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:02:40'!
+ aNumber
	^self predecessor + aNumber next ! !
!IIII class methodsFor: 'private' stamp: 'JB 3/30/2023 13:02:40'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!IIII class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:02:40'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #IIIII category: 'Naturales' stamp: 'JB 3/30/2023 13:02:40'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

IIIII class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'IIIII class' category: 'Naturales' stamp: 'JB 3/30/2023 13:02:41'!
IIIII class
	instanceVariableNames: 'sucessor predecessor'!
!IIIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:02:41'!
+ aNumber
	^self predecessor + aNumber next ! !
!IIIII class methodsFor: 'private' stamp: 'JB 3/30/2023 13:02:41'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!IIIII class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:02:41'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

!classRemoval: #III stamp: 'JB 3/30/2023 13:02:52'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #IIII stamp: 'JB 3/30/2023 13:02:55'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #IIIII stamp: 'JB 3/30/2023 13:02:58'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!
!I class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:03:27'!
* aNumber
	 ^aNumber ! !

!methodRemoval: I class #* stamp: 'JB 3/30/2023 13:03:44'!
* aNumber
	 ^aNumber !
!I class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:03:57'!
* aNumber
 	^aNumber ! !
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:05:49'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !

I * II !

II * II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #III category: 'Naturales' stamp: 'JB 3/30/2023 13:06:00'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

III class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'III class' category: 'Naturales' stamp: 'JB 3/30/2023 13:06:00'!
III class
	instanceVariableNames: 'sucessor predecessor'!
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:06:00'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:06:00'!
+ aNumber
	^self predecessor + aNumber next ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:06:00'!
predecessor 
	^predecessor! !
!III class methodsFor: 'private' stamp: 'JB 3/30/2023 13:06:00'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!III class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:06:00'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #IIII category: 'Naturales' stamp: 'JB 3/30/2023 13:06:00'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

IIII class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'IIII class' category: 'Naturales' stamp: 'JB 3/30/2023 13:06:00'!
IIII class
	instanceVariableNames: 'sucessor predecessor'!
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:06:00'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:06:00'!
+ aNumber
	^self predecessor + aNumber next ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:06:00'!
predecessor 
	^predecessor! !
!IIII class methodsFor: 'private' stamp: 'JB 3/30/2023 13:06:00'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!IIII class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:06:00'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:10:03'!
- aNumber 
	aNumber = I ifTrue: [self predecessor ].
	^self predecessor  - aNumber  predecessor ! !

!classRemoval: #IIII stamp: 'JB 3/30/2023 13:10:09'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #III stamp: 'JB 3/30/2023 13:10:11'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

II * II !

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #III category: 'Naturales' stamp: 'JB 3/30/2023 13:10:30'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

III class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'III class' category: 'Naturales' stamp: 'JB 3/30/2023 13:10:30'!
III class
	instanceVariableNames: 'sucessor predecessor'!
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:10:30'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:10:30'!
+ aNumber
	^self predecessor + aNumber next ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:10:30'!
- aNumber 
	aNumber = I ifTrue: [self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:10:30'!
predecessor 
	^predecessor! !
!III class methodsFor: 'private' stamp: 'JB 3/30/2023 13:10:30'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!III class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:10:30'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #IIII category: 'Naturales' stamp: 'JB 3/30/2023 13:10:30'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

IIII class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'IIII class' category: 'Naturales' stamp: 'JB 3/30/2023 13:10:30'!
IIII class
	instanceVariableNames: 'sucessor predecessor'!
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:10:30'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:10:30'!
+ aNumber
	^self predecessor + aNumber next ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:10:30'!
- aNumber 
	aNumber = I ifTrue: [self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:10:30'!
predecessor 
	^predecessor! !
!IIII class methodsFor: 'private' stamp: 'JB 3/30/2023 13:10:30'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!IIII class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:10:30'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

IIII - III !
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:11:24' prior: 50607318!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !

!classRemoval: #IIII stamp: 'JB 3/30/2023 13:11:32'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #III stamp: 'JB 3/30/2023 13:11:34'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

II * II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #III category: 'Naturales' stamp: 'JB 3/30/2023 13:11:49'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

III class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'III class' category: 'Naturales' stamp: 'JB 3/30/2023 13:11:49'!
III class
	instanceVariableNames: 'sucessor predecessor'!
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:11:49'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:11:49'!
+ aNumber
	^self predecessor + aNumber next ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:11:49'!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:11:49'!
predecessor 
	^predecessor! !
!III class methodsFor: 'private' stamp: 'JB 3/30/2023 13:11:49'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!III class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:11:49'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #IIII category: 'Naturales' stamp: 'JB 3/30/2023 13:11:49'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

IIII class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'IIII class' category: 'Naturales' stamp: 'JB 3/30/2023 13:11:49'!
IIII class
	instanceVariableNames: 'sucessor predecessor'!
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:11:49'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:11:49'!
+ aNumber
	^self predecessor + aNumber next ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:11:49'!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:11:49'!
predecessor 
	^predecessor! !
!IIII class methodsFor: 'private' stamp: 'JB 3/30/2023 13:11:49'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!IIII class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:11:49'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

IIII - III!

!classRemoval: #IIII stamp: 'JB 3/30/2023 13:16:30'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #III stamp: 'JB 3/30/2023 13:16:32'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:16:55'!
/ aNumber
	! !
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:23:02' prior: 50607549!
/ divisor
	self  > divisor ifTrue: [^I + (self - divisor / divisor)].
	^I! !
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:26:10'!
> aNumber
 	aNumber  = I ifTrue:  [^true]. 
	^self predecessor  > aNumber  predecessor ! !
!I class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:13'!
> aNumber
	aNumber = I ifTrue:  [^false]. 
	^true! !

II * II !

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #III category: 'Naturales' stamp: 'JB 3/30/2023 13:27:31'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

III class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'III class' category: 'Naturales' stamp: 'JB 3/30/2023 13:27:31'!
III class
	instanceVariableNames: 'sucessor predecessor'!
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:31'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:31'!
+ aNumber
	^self predecessor + aNumber next ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:31'!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:31'!
/ divisor
	self  > divisor ifTrue: [^I + (self - divisor / divisor)].
	^I! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:31'!
> aNumber
 	aNumber  = I ifTrue:  [^true]. 
	^self predecessor  > aNumber  predecessor ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:31'!
predecessor 
	^predecessor! !
!III class methodsFor: 'private' stamp: 'JB 3/30/2023 13:27:31'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!III class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:27:31'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #IIII category: 'Naturales' stamp: 'JB 3/30/2023 13:27:31'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

IIII class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'IIII class' category: 'Naturales' stamp: 'JB 3/30/2023 13:27:31'!
IIII class
	instanceVariableNames: 'sucessor predecessor'!
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:31'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:31'!
+ aNumber
	^self predecessor + aNumber next ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:31'!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:31'!
/ divisor
	self  > divisor ifTrue: [^I + (self - divisor / divisor)].
	^I! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:31'!
> aNumber
 	aNumber  = I ifTrue:  [^true]. 
	^self predecessor  > aNumber  predecessor ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:27:31'!
predecessor 
	^predecessor! !
!IIII class methodsFor: 'private' stamp: 'JB 3/30/2023 13:27:31'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!IIII class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:27:31'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

II > I!

I  > IIII!

II >III!
!I class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:13' prior: 50607563!
> aNumber
	^false! !

!classRemoval: #IIII stamp: 'JB 3/30/2023 13:29:21'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #III stamp: 'JB 3/30/2023 13:29:25'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

II * II !

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #III category: 'Naturales' stamp: 'JB 3/30/2023 13:29:37'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

III class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'III class' category: 'Naturales' stamp: 'JB 3/30/2023 13:29:37'!
III class
	instanceVariableNames: 'sucessor predecessor'!
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:37'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:37'!
+ aNumber
	^self predecessor + aNumber next ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:37'!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:37'!
/ divisor
	self  > divisor ifTrue: [^I + (self - divisor / divisor)].
	^I! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:37'!
> aNumber
 	aNumber  = I ifTrue:  [^true]. 
	^self predecessor  > aNumber  predecessor ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:37'!
predecessor 
	^predecessor! !
!III class methodsFor: 'private' stamp: 'JB 3/30/2023 13:29:37'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!III class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:29:37'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #IIII category: 'Naturales' stamp: 'JB 3/30/2023 13:29:37'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

IIII class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'IIII class' category: 'Naturales' stamp: 'JB 3/30/2023 13:29:37'!
IIII class
	instanceVariableNames: 'sucessor predecessor'!
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:37'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:37'!
+ aNumber
	^self predecessor + aNumber next ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:37'!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:37'!
/ divisor
	self  > divisor ifTrue: [^I + (self - divisor / divisor)].
	^I! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:37'!
> aNumber
 	aNumber  = I ifTrue:  [^true]. 
	^self predecessor  > aNumber  predecessor ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:29:37'!
predecessor 
	^predecessor! !
!IIII class methodsFor: 'private' stamp: 'JB 3/30/2023 13:29:37'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!IIII class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:29:37'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

II > IIII!

III > II!

III > III!

III > II!

II / I!
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:30:55' prior: 50607553!
/ divisor
	self  > divisor ifTrue: [^I + ((self - divisor) / divisor)].
	^I! !

!classRemoval: #IIII stamp: 'JB 3/30/2023 13:31:11'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #III stamp: 'JB 3/30/2023 13:31:14'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

II / I   !
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:28' prior: 50607810!
/ divisor
	divisor = I ifTrue:  [^self]. 
	self  > divisor ifTrue: [^I + ((self - divisor) / divisor)].
	^I! !

II / I   !

II * II !

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #III category: 'Naturales' stamp: 'JB 3/30/2023 13:32:43'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

III class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'III class' category: 'Naturales' stamp: 'JB 3/30/2023 13:32:43'!
III class
	instanceVariableNames: 'sucessor predecessor'!
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:43'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:43'!
+ aNumber
	^self predecessor + aNumber next ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:43'!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:43'!
/ divisor
	divisor = I ifTrue:  [^self]. 
	self  > divisor ifTrue: [^I + ((self - divisor) / divisor)].
	^I! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:43'!
> aNumber
 	aNumber  = I ifTrue:  [^true]. 
	^self predecessor  > aNumber  predecessor ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:43'!
predecessor 
	^predecessor! !
!III class methodsFor: 'private' stamp: 'JB 3/30/2023 13:32:43'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!III class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:32:43'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #IIII category: 'Naturales' stamp: 'JB 3/30/2023 13:32:43'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

IIII class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'IIII class' category: 'Naturales' stamp: 'JB 3/30/2023 13:32:43'!
IIII class
	instanceVariableNames: 'sucessor predecessor'!
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:43'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:43'!
+ aNumber
	^self predecessor + aNumber next ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:43'!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:43'!
/ divisor
	divisor = I ifTrue:  [^self]. 
	self  > divisor ifTrue: [^I + ((self - divisor) / divisor)].
	^I! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:43'!
> aNumber
 	aNumber  = I ifTrue:  [^true]. 
	^self predecessor  > aNumber  predecessor ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:32:43'!
predecessor 
	^predecessor! !
!IIII class methodsFor: 'private' stamp: 'JB 3/30/2023 13:32:43'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!IIII class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:32:43'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

IIII  / II !

IIII  / III !

!classRemoval: #III stamp: 'JB 3/30/2023 13:34:25'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #IIII stamp: 'JB 3/30/2023 13:34:27'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:50' prior: 50607827!
/ divisor
	self - divisor = I ifTrue:  [^I]. 
	"self  > divisor ifTrue: [^I + ((self - divisor) / divisor)]."
	^I + ((self - divisor) / divisor)! !

II * II  !

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #III category: 'Naturales' stamp: 'JB 3/30/2023 13:35:59'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

III class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'III class' category: 'Naturales' stamp: 'JB 3/30/2023 13:35:59'!
III class
	instanceVariableNames: 'sucessor predecessor'!
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:59'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:59'!
+ aNumber
	^self predecessor + aNumber next ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:59'!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:59'!
/ divisor
	self - divisor = I ifTrue:  [^I]. 
	"self  > divisor ifTrue: [^I + ((self - divisor) / divisor)]."
	^I + ((self - divisor) / divisor)! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:59'!
> aNumber
 	aNumber  = I ifTrue:  [^true]. 
	^self predecessor  > aNumber  predecessor ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:59'!
predecessor 
	^predecessor! !
!III class methodsFor: 'private' stamp: 'JB 3/30/2023 13:35:59'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!III class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:35:59'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #IIII category: 'Naturales' stamp: 'JB 3/30/2023 13:35:59'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

IIII class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'IIII class' category: 'Naturales' stamp: 'JB 3/30/2023 13:35:59'!
IIII class
	instanceVariableNames: 'sucessor predecessor'!
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:59'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:59'!
+ aNumber
	^self predecessor + aNumber next ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:59'!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:59'!
/ divisor
	self - divisor = I ifTrue:  [^I]. 
	"self  > divisor ifTrue: [^I + ((self - divisor) / divisor)]."
	^I + ((self - divisor) / divisor)! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:59'!
> aNumber
 	aNumber  = I ifTrue:  [^true]. 
	^self predecessor  > aNumber  predecessor ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:35:59'!
predecessor 
	^predecessor! !
!IIII class methodsFor: 'private' stamp: 'JB 3/30/2023 13:35:59'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!IIII class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:35:59'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

IIII / II!
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:38:52' prior: 50607961!
/ divisor
	
	self  > divisor ifTrue: [self - divisor = I ifTrue:  [^I]. ^I + ((self - divisor) / divisor)].
	^I! !
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:39:10' prior: 50608085!
/ divisor
	
	self  > divisor ifTrue: [self - divisor = I ifTrue:  [^I]. ^I + ((self - divisor) / divisor)].
	^'not defined'! !
!II class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:39:49' prior: 50608092!
/ divisor
	
	self  > divisor ifTrue: [self - divisor = I ifTrue:  [^I]. ^I + ((self - divisor) / divisor)].
	^I! !

!classRemoval: #IIII stamp: 'JB 3/30/2023 13:39:57'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #III stamp: 'JB 3/30/2023 13:39:59'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

II * II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #III category: 'Naturales' stamp: 'JB 3/30/2023 13:40:15'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

III class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'III class' category: 'Naturales' stamp: 'JB 3/30/2023 13:40:15'!
III class
	instanceVariableNames: 'sucessor predecessor'!
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:40:15'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:40:15'!
+ aNumber
	^self predecessor + aNumber next ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:40:15'!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:40:15'!
/ divisor
	
	self  > divisor ifTrue: [self - divisor = I ifTrue:  [^I]. ^I + ((self - divisor) / divisor)].
	^I! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:40:15'!
> aNumber
 	aNumber  = I ifTrue:  [^true]. 
	^self predecessor  > aNumber  predecessor ! !
!III class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:40:15'!
predecessor 
	^predecessor! !
!III class methodsFor: 'private' stamp: 'JB 3/30/2023 13:40:15'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!III class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:40:15'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classDefinition: #IIII category: 'Naturales' stamp: 'JB 3/30/2023 13:40:15'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

IIII class
	instanceVariableNames: 'sucessor predecessor'!

!classDefinition: 'IIII class' category: 'Naturales' stamp: 'JB 3/30/2023 13:40:15'!
IIII class
	instanceVariableNames: 'sucessor predecessor'!
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:40:15'!
* aNumber 
	aNumber  = I ifTrue:  [aNumber *self] . 
	^aNumber predecessor  * (self + self)! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:40:15'!
+ aNumber
	^self predecessor + aNumber next ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:40:15'!
- aNumber 
	aNumber = I ifTrue: [^self predecessor ].
	^self predecessor  - aNumber  predecessor ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:40:16'!
/ divisor
	
	self  > divisor ifTrue: [self - divisor = I ifTrue:  [^I]. ^I + ((self - divisor) / divisor)].
	^I! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:40:16'!
> aNumber
 	aNumber  = I ifTrue:  [^true]. 
	^self predecessor  > aNumber  predecessor ! !
!IIII class methodsFor: 'operations' stamp: 'JB 3/30/2023 13:40:16'!
predecessor 
	^predecessor! !
!IIII class methodsFor: 'private' stamp: 'JB 3/30/2023 13:40:16'!
setPredecessor:aNumber
	predecessor:= aNumber ! !
!IIII class methodsFor: 'peano' stamp: 'JB 3/30/2023 13:40:16'!
next 
	sucessor ifNil: [sucessor:= self cloneNamed: self name , 'I'.  sucessor  setPredecessor: self ].
	^sucessor! !

  IIII / II!

IIII / III!

II / II!

II / I!
!I class methodsFor: '--** private fileout/in **--' stamp: 'JB 3/30/2023 13:45:52' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	sucessor := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'JB 3/30/2023 13:45:52' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	sucessor := III.
	predecessor := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'JB 3/30/2023 13:45:52' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	sucessor := IIII.
	predecessor := II.! !
!IIII class methodsFor: '--** private fileout/in **--' stamp: 'JB 3/30/2023 13:45:52' overrides: 50557545!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	sucessor := nil.
	predecessor := III.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'JB 3/30/2023 13:45:52'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	sucessor := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'JB 3/30/2023 13:45:52'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	sucessor := III.
	predecessor := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'JB 3/30/2023 13:45:52'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	sucessor := IIII.
	predecessor := II.!

!methodRemoval: IIII class #initializeCollaboratorsFromFile stamp: 'JB 3/30/2023 13:45:52'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	sucessor := nil.
	predecessor := III.!

----QUIT----(30 March 2023 13:45:58) CuisUniversity-5706.image priorSource: 8810822!

----STARTUP---- (10 April 2023 10:37:05) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!



Object subclass: #XXX
        instanceVariableNames: ''
        classVariableNames: ''
        poolDictionaries: ''
        category: 'CollectionExercise'
!

!classDefinition: #XXX category: 'CollectionExercise' stamp: 'JB 4/10/2023 10:41:33'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CollectionExercise'!
!XXX methodsFor: 'nil' stamp: 'JB 4/10/2023 10:43:16'!
findOddsPart0

        | elements index odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
        index := 1.

        [index <= elements size]
        whileTrue: [
                ((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
                index := index +1.
                ].
        ^odds! !

XXX new findOddsPart0 !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 10:48:17'!
findOddsPart1

        | elements index odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
        index := 1.

	elements  do: [:number| number odd ifTrue:  [odds add: number]].

        ^odds! !

XXX new findOddsPart1!

XXX new findOddsPart0!

XXX new findOddsPart1!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 10:52:02'!
findOddsPart2

	^#(1 2 5 6 9)  select: [:number| number odd].

    ! !

XXX new findOddsPart2!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 10:56:25'!
findDoublesWhile

        | elements index doubleCollection |

        elements:= #(1 2 5 6 9).

	doubleCollection := OrderedCollection new.
        index := 1.

        [index <= elements size]
        whileTrue: [
                doubleCollection  add: (elements at: index) *2 .
                index := index +1.
                ].
        ^doubleCollection ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 10:56:55'!
findDoublesWhi

        | elements index doubleCollection |

        elements:= #(1 2 5 6 9).

	doubleCollection := OrderedCollection new.
        index := 1.

        [index <= elements size]
        whileTrue: [
                doubleCollection  add: (elements at: index) *2 .
                index := index +1.
                ].
        ^doubleCollection ! !

XXX new !

XXX new findDoublesWhile.!

!methodRemoval: XXX #findDoublesWhi stamp: 'JB 4/10/2023 10:58:11'!
findDoublesWhi

        | elements index doubleCollection |

        elements:= #(1 2 5 6 9).

	doubleCollection := OrderedCollection new.
        index := 1.

        [index <= elements size]
        whileTrue: [
                doubleCollection  add: (elements at: index) *2 .
                index := index +1.
                ].
        ^doubleCollection !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 10:59:09' prior: 50608342!
findDoublesWhile

        |  doubleCollection |

         #(1 2 5 6 9) do: [:element| doubleCollection  add: element *2].

        ^doubleCollection ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 10:59:48'!
findDoublesDO

        |  doubleCollection |

         #(1 2 5 6 9) do: [:element| doubleCollection  add: element *2].

        ^doubleCollection ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 10:59:54' prior: 50608392!
findDoublesDO
        |  doubleCollection |

         #(1 2 5 6 9) do: [:element| doubleCollection  add: element *2].

        ^doubleCollection ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:00:01' prior: 50608400!
findDoublesDO
        |  doubleCollection |
         #(1 2 5 6 9) do: [:element| doubleCollection  add: element *2].

        ^doubleCollection ! !

XXX new findDoublesDO!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:00:49' prior: 50608408!
findDoublesDO
        |  doubleCollection |
	doubleCollection:= 
         #(1 2 5 6 9) do: [:element| doubleCollection  add: element *2].

        ^doubleCollection ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:01:13'!
findDoublesDo
        |  doubleCollection |
	doubleCollection:= OrderedCollection  new. 
         #(1 2 5 6 9) do: [:element| doubleCollection  add: element *2].

        ^doubleCollection ! !

!methodRemoval: XXX #findDoublesDo stamp: 'JB 4/10/2023 11:01:21'!
findDoublesDo
        |  doubleCollection |
	doubleCollection:= OrderedCollection  new. 
         #(1 2 5 6 9) do: [:element| doubleCollection  add: element *2].

        ^doubleCollection !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:03:13' prior: 50608385!
findDoublesWhile

        |  elements index doubleCollection |
	elements :=   #(1 2 5 6 9). 
	index:=0. 
	doubleCollection  := OrderedCollection  new. 
	[index < elements  size ] ifTrue:  [
		doubleCollection add: (elements at: index )*2.
		].

        ^doubleCollection ! !

XXX new findDoublesWhile!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:04:14' prior: 50608442!
findDoublesWhile

        |  elements index doubleCollection |
	elements :=   #(1 2 5 6 9). 
	index:=0. 
	doubleCollection  := OrderedCollection  new. 
	[index < (elements  size) ] ifTrue:  [
		doubleCollection add: (elements at: index )*2.
		].

        ^doubleCollection ! !

XXX new findDoublesWhile!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:04:38' prior: 50608455!
findDoublesWhile

        |  elements index doubleCollection |
	elements :=   #(1 2 5 6 9). 
	index:=0. 
	doubleCollection  := OrderedCollection  new. 
	[index < (elements  size) ] ifTrue:  [
		doubleCollection add: (elements at: index )*2.
		index:= index+1.
		].

        ^doubleCollection ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:04:50' prior: 50608468!
findDoublesWhile

        |  elements index doubleCollection |
	elements :=   #(1 2 5 6 9). 
	index:=0. 
	doubleCollection  := OrderedCollection  new. 
	[index < (elements  size) ] whileTrue:  [
		doubleCollection add: (elements at: index )*2.
		index:= index+1.
		].

        ^doubleCollection ! !

XXX new findDoublesWhile!

elements at: index !

#(1 2 5 6 9) at: 0!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:07:45' prior: 50608480!
findDoublesWhile

        |  elements index doubleCollection |
	elements :=   #(1 2 5 6 9). 
	index:=1. 
	doubleCollection  := OrderedCollection  new. 
	[index <= (elements  size) ] whileTrue:  [
		doubleCollection add: (elements at: index )*2.
		index:= index+1.
		].

        ^doubleCollection ! !

XXX new findDoublesWhile!

XXX new findDoublesDo!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:08:30'!
findDoublesDo
        |  doubleCollection |
	doubleCollection:= OrderedCollection  new.
         #(1 2 5 6 9) do: [:element| doubleCollection  add: element *2].

        ^doubleCollection ! !

!methodRemoval: XXX #findDoublesDO stamp: 'JB 4/10/2023 11:08:34'!
findDoublesDO
        |  doubleCollection |
	doubleCollection:= 
         #(1 2 5 6 9) do: [:element| doubleCollection  add: element *2].

        ^doubleCollection !

XXX new findDoublesDo!

#(1 2 5 6 9)*2!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:10:33'!
findDoublesBest
        ^ #(1 2 5 6 9)*2 ! !

XXX new findDoublesBest !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:29:14'!
findFirstEven
        ^ #(1 2 5 6 9) detect: [:element| element  even].! !

XXX new findFirstEven!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:30:16'!
findFirstEvenWithoutMatching
        ^ #(1 5 9) detect: [:element| element  even].! !

XXX new findFirstEvenWithoutMatching!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:31:52'!
findFirstEvenWithoutMatchingReturnString
        ^ #(1 5 9) detect: [:element| element  even] ifNone: [^' no hay pares' ].! !

XXX new findFirstEvenWithoutMatchingReturnString!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:32:57'!
findFirstEvenWithoutMatchingThrowsException
        ^ #(1 5 9) detect: [:element| element  even] ifNone: [ Error ].! !

XXX new findFirstEvenWithoutMatchingThrowsException!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:35:32' prior: 50608552!
findFirstEvenWithoutMatchingThrowsException
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [Error signal: 'no hay pares' ].! !

XXX new findFirstEvenWithoutMatchingThrowsException !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:36:31' prior: 50608561!
findFirstEvenWithoutMatchingThrowsException
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [Error signal].! !

XXX new findFirstEvenWithoutMatchingThrowsException !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:36:56' prior: 50608570!
findFirstEvenWithoutMatchingThrowsException
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [Error new signal].! !

XXX new findFirstEvenWithoutMatchingThrowsException !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:37:30' prior: 50608579!
findFirstEvenWithoutMatchingThrowsException
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [Exception  signal:'no hay pares'].! !

XXX new findFirstEvenWithoutMatchingThrowsException !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:38:43' prior: 50608588!
findFirstEvenWithoutMatchingThrowsException
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [Exception].! !

XXX new findFirstEvenWithoutMatchingThrowsException !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:39:01' prior: 50608597!
findFirstEvenWithoutMatchingThrowsException
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [^Exception].! !

XXX new findFirstEvenWithoutMatchingThrowsException !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:39:20' prior: 50608606!
findFirstEvenWithoutMatchingThrowsException
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [Exception new].! !

XXX new findFirstEvenWithoutMatchingThrowsException  !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:39:38' prior: 50608615!
findFirstEvenWithoutMatchingThrowsException
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [Exception new signal:'no hayb p'].! !

XXX new findFirstEvenWithoutMatchingThrowsException!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:40:48' prior: 50608624!
findFirstEvenWithoutMatchingThrowsException
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [Error message:'no hay pares'].! !

XXX new findFirstEvenWithoutMatchingThrowsException!

XXX new findFirstEvenWithoutMatchingThrowsException!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:44:16' prior: 50608633!
findFirstEvenWithoutMatchingThrowsException
	|error|
	error:= Exception  new. 
	error messageText:' no hay pares'. 
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [error messageText ].! !

XXX new findFirstEvenWithoutMatchingThrowsException!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:44:41' prior: 50608644!
findFirstEvenWithoutMatchingThrowsException
	|error|
	error:= Exception  new. 
	error messageText:' no hay pares'. 
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [error  ].! !

XXX new findFirstEvenWithoutMatchingThrowsException !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:45:06' prior: 50608655!
findFirstEvenWithoutMatchingThrowsException
	|error|
	error:= Exception  new. 
	error messageText:' no hay pares'. 
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [error signal  ].! !

XXX new findFirstEvenWithoutMatchingThrowsException!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:46:01' prior: 50608666!
findFirstEvenWithoutMatchingThrowsException
	|error|
	error:= Exception  new. 
	error signal:' no hay pares'. 
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [error signal  ].! !

XXX new findFirstEvenWithoutMatchingThrowsException!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:53:25'!
sumElementsSum
	 
        ^ #(1 2 5 6 9) sum! !

XXX new sum!

#(1 2 5 6 9) sum!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:54:27' prior: 50608687!
sumElementsSum
	 
        ^ #(1 2 5 6 9) sum ! !

XXX new sumElementsSum!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:59:42'!
sumElementsInjecting
	 
        ^ #(1 2 5 6 9)  inject: 0 into: [:subTotal :next | subTotal + next].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 12:01:48'!
extractVowels
	 
        ^'abcdefguijp' select: [:aLetter|aLetter  vowels ].! !

XXX new extractVowels!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 12:02:40' prior: 50608704!
extractVowels
	 
        ^'abcdefguijp' select: [:aLetter|aLetter  isVowel ].! !

XXX new extractVowels!

Object subclass: #YYY
        instanceVariableNames: ''
        classVariableNames: ''
        poolDictionaries: ''
        category: 'MeasuresExercise'!

!classDefinition: #YYY category: 'MeasuresExercise' stamp: 'JB 4/10/2023 13:22:35'!
Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MeasuresExercise'!

Object subclass: #YYY
        instanceVariableNames: ''
        classVariableNames: ''
        poolDictionaries: ''
        category: 'MeasuresExercise'!

!classDefinition: #YYY category: 'MeasuresExercise' stamp: 'JB 4/10/2023 13:22:37'!
Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MeasuresExercise'!

Object subclass: #YYY
        instanceVariableNames: ''
        classVariableNames: ''
        poolDictionaries: ''
        category: 'MeasuresExercise'!

!classDefinition: #YYY category: 'MeasuresExercise' stamp: 'JB 4/10/2023 13:22:37'!
Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MeasuresExercise'!
!YYY methodsFor: 'nil' stamp: 'JB 4/10/2023 13:25:47'!
add10MetersPlus500Centimeters
	| metros |
	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.
	^10 * metros.

! !

YYY new add10MetersPlus500Centimeters !

metros!
!YYY methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 13:33:48' prior: 50608750!
add10MetersPlus500Centimeters
	| metros centimetros |
	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.
	centimetros:= ProportionalDerivedUnit  	initializeBaseUnit: metros conversionFactor: 0.01*metros   nameForOne: 'centimetro' nameForMany: 'centimetros'.

	^10 * metros + 500*centimetros . 

! !

YYY new add10MetersPlus500Centimeters !
!YYY methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 13:35:15' prior: 50608759!
add10MetersPlus500Centimeters
	| metros centimetros |
	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.
	centimetros:= ProportionalDerivedUnit  new 	initializeBaseUnit: metros conversionFactor: 0.01*metros   nameForOne: 'centimetro' nameForMany: 'centimetros'.

	^10 * metros + 500*centimetros . 

! !

YYY new add10MetersPlus500Centimeters !
!YYY methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 13:37:37' prior: 50608773!
add10MetersPlus500Centimeters
	| metros centimetros |
	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.
	centimetros:= ProportionalDerivedUnit  new.
	centimetros  initializeBaseUnit:  metros conversionFactor: 0.01*metros   nameForOne: 'centimetro' nameForMany: 'centimetros'.

	^10 * metros + 500*centimetros . 

! !

YYY new add10MetersPlus500Centimeters!

YYY new add10MetersPlus500Centimeters  . !
!YYY methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 13:39:33' prior: 50608787!
add10MetersPlus500Centimeters
	| metros centimetros |
	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.
	centimetros:= ProportionalDerivedUnit  new.
	centimetros  initializeBaseUnit:  metros conversionFactor: 0.01*metros   nameForOne: 'centimetro' nameForMany: 'centimetros' sign:1.

	^10 * metros + 500*centimetros . 

! !

YYY new add10MetersPlus500Centimeters  . !
!YYY methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 13:40:35' prior: 50608803!
add10MetersPlus500Centimeters
	| metros centimetros |
	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.
	centimetros:= ProportionalDerivedUnit  new.
	centimetros  initializeBaseUnit:  metros conversionFactor: 0.01  nameForOne: 'centimetro' nameForMany: 'centimetros' sign:1.

	^10 * metros + 500*centimetros . 

! !

YYY new add10MetersPlus500Centimeters  . !

YYY new add10MetersPlus500Centimeters  . !
!YYY methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 13:43:26' prior: 50608818!
add10MetersPlus500Centimeters
	| metros centimetros |
	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.
	centimetros:= ProportionalDerivedUnit  new.
	centimetros  initializeBaseUnit:  metros conversionFactor: 0.01  nameForOne: 'centimetro' nameForMany: 'centimetros' sign:1.

	^(10 * metros) + (500*centimetros) . 

! !

YYY new add10MetersPlus500Centimeters  . !
!YYY methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 13:45:44' prior: 50608834!
add10MetersPlus500Centimeters
	| metros centimetros |
	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.
	centimetros:= ProportionalDerivedUnit  new.
	centimetros  initializeBaseUnit:  metros conversionFactor: 0.01  nameForOne: 'centimetro' nameForMany: 'centimetros' .

	^(10 * metros) + (500*centimetros) . 

! !

YYY new add10MetersPlus500Centimeters  .!
!YYY methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 13:46:10' prior: 50608849!
add10MetersPlus500Centimeters
	| metros centimetros |
	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.
	centimetros:= ProportionalDerivedUnit  new.
	centimetros  initializeBaseUnit:  metros conversionFactor: 0.01  nameForOne: 'centimetro' nameForMany: 'centimetros' sign:''.

	^(10 * metros) + (500*centimetros) . 

! !

YYY new add10MetersPlus500Centimeters !
!YYY methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 13:48:57'!
add10MetersPlus60Inches
	| metros pulgadas |
	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.
	pulgadas = ProportionalDerivedUnit  new.
	pulgadas  initializeBaseUnit:  metros conversionFactor: 0.0254  nameForOne: 'pulgada' nameForMany: 'pulgadas' sign:''.

	^(10 * metros) + (60*pulgadas) . 

! !
!YYY methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 13:49:21' prior: 50608878!
add10MetersPlus60Inches
	| metros pulgadas |
	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.
	pulgadas := ProportionalDerivedUnit  new.
	pulgadas  initializeBaseUnit:  metros conversionFactor: 0.0254  nameForOne: 'pulgada' nameForMany: 'pulgadas' sign:''.

	^(10 * metros) + (60*pulgadas) . 

! !

YYY new add10MetersPlus60Inches!
!YYY methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 14:06:46'!
add1btcPlus10000Pesos
	| metros btc |
	metros := BaseUnit nameForOne:  'metro' nameForMany:  'metros'.
	btc := MeasureConverter new .
	btc initializeWith: #(1*metros,1*btc).
	 

	^(10 * metros) + (60*btc) . 

! !

YYY new add1btcPlus10000Pesos !

----QUIT----(11 April 2023 23:15:36) CuisUniversity-5706.image priorSource: 8852521!

----STARTUP---- (12 April 2023 09:10:37) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!


!classRemoval: #YYY stamp: 'JB 4/12/2023 09:11:56'!
Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MeasuresExercise'!

!classRemoval: #XXX stamp: 'JB 4/12/2023 09:12:00'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CollectionExercise'!

!classRemoval: #IIII stamp: 'JB 4/12/2023 09:12:04'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #III stamp: 'JB 4/12/2023 09:12:05'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #II stamp: 'JB 4/12/2023 09:12:05'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #I stamp: 'JB 4/12/2023 09:12:06'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/git/2023-1c/01-CodigoRepetido/CodigoRepetido-Ejercicio.st----!
!CustomerBook methodsFor: 'customer management' stamp: 'JB 4/12/2023 09:16:58'!
addCustomerNamedCopy: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'JB 4/12/2023 09:18:19' prior: 50609159!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	(self includesCustomerNamed: aName ) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 4/12/2023 09:18:21'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 4/12/2023 09:18:21'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 4/12/2023 09:18:21'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 4/12/2023 09:18:21'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 4/12/2023 09:18:21'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 4/12/2023 09:18:21'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 4/12/2023 09:18:21'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 4/12/2023 09:18:21'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 4/12/2023 09:18:26'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 4/12/2023 09:18:26'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 4/12/2023 09:18:26'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 4/12/2023 09:18:26'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 4/12/2023 09:18:26'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 4/12/2023 09:18:26'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 4/12/2023 09:18:26'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 4/12/2023 09:18:26'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'JB 4/12/2023 09:19:18'!
removeCustomerNamedCopy: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'JB 4/12/2023 09:25:55' prior: 50609182!
removeCustomerNamed: aName 
 
	active remove: aName  ifAbsent: [suspended remove: aName ifAbsent: [	^ NotFound signal].].  
	 
	
	! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 4/12/2023 09:25:56'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 4/12/2023 09:25:56'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 4/12/2023 09:25:56'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 4/12/2023 09:25:56'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 4/12/2023 09:25:56'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 4/12/2023 09:25:56'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 4/12/2023 09:25:56'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 4/12/2023 09:25:56'!
PASSED!

CustomerBook  new initialize !

|A|
A:=CustomerBook  new initialize addCustomerNamed: 'JB'!

|A|
A:=CustomerBook  new initialize addCustomerNamed: 'JB'. A removeCustomerNamed:'JB'!

|A|
A:=CustomerBook  new initialize addCustomerNamed: 'JB'.!
!CustomerBook methodsFor: 'customer management' stamp: 'JB 4/12/2023 09:42:18'!
numberOfCustomersCopy
	
	^active size + suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'JB 4/12/2023 09:42:42' prior: 50609173!
numberOfCustomers
	
	^self numberOfActiveCustomers + self numberOfSuspendedCustomers ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 4/12/2023 09:42:44'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 4/12/2023 09:42:44'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 4/12/2023 09:42:44'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 4/12/2023 09:42:44'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 4/12/2023 09:42:44'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 4/12/2023 09:42:44'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 4/12/2023 09:42:44'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 4/12/2023 09:42:44'!
PASSED!

----STARTUP---- (18 April 2023 20:13:46) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!


!classRemoval: #XXX stamp: 'JB 4/18/2023 20:14:39'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CollectionExercise'!

!classRemoval: #YYY stamp: 'JB 4/18/2023 20:14:42'!
Object subclass: #YYY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MeasuresExercise'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/git/ISW1-2023-1c/Numero-Exercise.st----!

Entero subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Negativo category: 'Numero-Exercise' stamp: 'JB 4/18/2023 20:16:34'!
Entero subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Positivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Positivo category: 'Numero-Exercise' stamp: 'JB 4/18/2023 20:16:42'!
Entero subclass: #Positivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Zero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Zero category: 'Numero-Exercise' stamp: 'JB 4/18/2023 20:16:48'!
Entero subclass: #Zero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'JB 4/18/2023 20:16:52'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Negativo methodsFor: 'nil' stamp: 'JB 4/18/2023 20:17:11' overrides: 50609855!
fibonacci
^nil! !
!Negativo methodsFor: 'as yet unclassified' stamp: 'JB 4/18/2023 20:17:59' prior: 50610202 overrides: 50609855!
fibonacci
^self error: Entero negativeFibonacciErrorDescription! !
!Positivo methodsFor: 'nil' stamp: 'JB 4/18/2023 20:18:46' overrides: 50609855!
fibonacci
	^nil
	"^(self - one) fibonacci + (self - two) fibonacci"! !
!Positivo methodsFor: 'as yet unclassified' stamp: 'JB 4/18/2023 20:19:09' prior: 50610212 overrides: 50609855!
fibonacci
	| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	^(self - one) fibonacci + (self - two) ! !
!Uno methodsFor: 'nil' stamp: 'JB 4/18/2023 20:20:06' overrides: 50609855!
fibonacci
	|one|
	one := Entero with: 1.
	^one! !
!Zero methodsFor: 'nil' stamp: 'JB 4/18/2023 20:20:18' overrides: 50609855!
fibonacci
	|one|
	one := Entero with: 1.
	^one! !
!Entero methodsFor: 'arithmetic operations' stamp: 'JB 4/18/2023 20:20:39' prior: 50609855!
fibonacci
	^self subclassResponsibility ! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/18/2023 20:20:43'!
ERROR!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/18/2023 20:20:43'!
ERROR!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/18/2023 20:20:43'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/18/2023 20:20:43'!
FAILURE!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/18/2023 20:20:43'!
PASSED!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'JB 4/18/2023 20:25:39'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/18/2023 20:25:15' prior: 50609963!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue =0) :[^Uno initialize]. 
	(aValue = 1):[^Cero initialize]. 
	(aValue  < 0 ): [^Negativo new initalizeWith: aValue]. 
	
	^Positivo new initalizeWith: aValue! !

!classRemoval: #Zero stamp: 'JB 4/18/2023 20:25:49'!
Entero subclass: #Zero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Cero class methodsFor: 'nil' stamp: 'JB 4/18/2023 20:26:11'!
fibonacci
	
	^Uno intialize! !
!Uno class methodsFor: 'nil' stamp: 'JB 4/18/2023 20:27:40' overrides: 16904184!
initialize
	^Uno initializeWith: 1 ! !

!methodRemoval: Cero class #fibonacci stamp: 'JB 4/18/2023 20:27:57'!
fibonacci
	
	^Uno intialize!
!Cero class methodsFor: 'nil' stamp: 'JB 4/18/2023 20:28:21' overrides: 16904184!
initialize
	^Cero initializeWith: 0.! !
!Cero methodsFor: 'nil' stamp: 'JB 4/18/2023 20:28:47' overrides: 50610233!
fibonacci
	^Uno initialize! !

Entero  initializeWith: 0!

Entero  with: 0!
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/18/2023 20:31:33' prior: 50610380!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue =0) :[^Uno initialize]. 
	(aValue = 1):[^Cero initialize]. 
	(aValue  < 0 ): [^Negativo  With: aValue]. 
	
	^Positivo With: aValue! !
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/18/2023 20:31:39' prior: 50610421!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue =0) :[^Uno initialize]. 
	(aValue = 1):[^Cero initialize]. 
	(aValue  < 0 ): [^Negativo  with: aValue]. 
	
	^Positivo With: aValue! !
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/18/2023 20:31:43' prior: 50610436!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	(aValue =0) :[^Uno initialize]. 
	(aValue = 1):[^Cero initialize]. 
	(aValue  < 0 ): [^Negativo  with: aValue]. 
	
	^Positivo with: aValue! !
!Cero class methodsFor: 'as yet unclassified' stamp: 'JB 4/18/2023 20:32:05' prior: 50610411 overrides: 16904184!
initialize
	^self new initializeWith: 0.! !
!Uno class methodsFor: 'as yet unclassified' stamp: 'JB 4/18/2023 20:32:32' prior: 50610404 overrides: 16904184!
initialize
	^self new initializeWith: 1 ! !

Entero  with: 0!

!classRemoval: #Fraccion stamp: 'JB 4/18/2023 20:35:57'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'JB 4/18/2023 20:35:57'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Positivo stamp: 'JB 4/18/2023 20:35:57'!
Entero subclass: #Positivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Negativo stamp: 'JB 4/18/2023 20:35:58'!
Entero subclass: #Negativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'JB 4/18/2023 20:35:58'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'JB 4/18/2023 20:35:59'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'JB 4/18/2023 20:35:59'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'JB 4/18/2023 20:36:00'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/git/ISW1-2023-1c/Numero-Exercise.st----!

Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'JB 4/18/2023 20:38:29'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Cero class methodsFor: 'nil' stamp: 'JB 4/18/2023 20:39:02'!
XXX
	^self new initializeWith: 0 ! !
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/18/2023 20:39:33' prior: 50611058!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	(aValue  =0 ) ifTrue: [^Cero XXX ].
	^self new initalizeWith: aValue! !

Entero  with: 0!

Entero  with: 1!
!Cero class methodsFor: 'as yet unclassified' stamp: 'JB 4/18/2023 20:40:43' prior: 50611264!
XXX
	^self new with: 0 ! !

Entero  with: 0!
!Cero class methodsFor: 'as yet unclassified' stamp: 'JB 4/18/2023 20:41:18' prior: 50611282!
XXX
	^self new initializeWith: 0 
	! !

Entero  with: 0!
!Cero class methodsFor: 'as yet unclassified' stamp: 'JB 4/18/2023 20:43:03' prior: 50611287!
XXX
	^Entero new initializeWith: 0 
	! !

Entero  with: 0!
!Cero class methodsFor: 'as yet unclassified' stamp: 'JB 4/18/2023 20:43:30' prior: 50611292!
XXX
	^self new initialize: 0 
	! !
!Cero methodsFor: 'nil' stamp: 'JB 4/18/2023 20:43:40' overrides: 16920235!
initialize
	value:=0! !

Entero  with: 0!
!Cero class methodsFor: 'as yet unclassified' stamp: 'JB 4/18/2023 20:44:21' prior: 50611297!
XXX
	^self new initialize 
	! !

Entero  with: 0!

Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'JB 4/18/2023 20:44:58'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Uno class methodsFor: 'nil' stamp: 'JB 4/18/2023 20:45:17'!
YYY
	^self new initialize! !
!Uno methodsFor: 'nil' stamp: 'JB 4/18/2023 20:45:30' overrides: 16920235!
initialize
	value:= 1! !

Entero  with: 1!
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/18/2023 20:46:01' prior: 50611269!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	(aValue  =0 ) ifTrue: [^Cero XXX ].
	(aValue =1) ifTrue: [^Uno YYY ]. 
	^self new initalizeWith: aValue! !

Entero  with: 1!
!Cero methodsFor: 'nil' stamp: 'JB 4/18/2023 20:46:40' overrides: 50610950!
fibonacci
	^Uno YYY ! !
!Uno methodsFor: 'nil' stamp: 'JB 4/18/2023 20:46:55' overrides: 50610950!
fibonacci
	^self! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/18/2023 20:46:58'!
FAILURE!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/18/2023 20:46:58'!
FAILURE!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/18/2023 20:46:58'!
PASSED!

Entero  with: 1 +  Uno YYY !

(Entero  with: 1) + ( Uno YYY )!

----QUIT----(19 April 2023 08:34:48) CuisUniversity-5706.image priorSource: 8872469!

----STARTUP---- (19 April 2023 19:35:50) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!


Entero  with: 1!

----QUIT----(19 April 2023 19:38:19) CuisUniversity-5706.image priorSource: 8954776!

----STARTUP---- (19 April 2023 19:41:55) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!

!Cero methodsFor: 'as yet unclassified' stamp: 'JB 4/19/2023 19:44:42' overrides: 50610910!
+ aValue
	^super + aValue ! !

(Entero  with: 1) + ( Uno YYY )!
!Uno methodsFor: 'as yet unclassified' stamp: 'JB 4/19/2023 19:45:20' overrides: 50610910!
+ aVaule 
	^super + aVaule ! !

(Entero  with: 1) + ( Uno YYY )!

(Entero  with: 1) + ( Uno YYY )!

(Entero  with: 1) + ( Uno YYY )!

Uno YYY!

super!

!classRemoval: #Fraccion stamp: 'JB 4/20/2023 09:29:59'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'JB 4/20/2023 09:30:00'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'JB 4/20/2023 09:30:00'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'JB 4/20/2023 09:30:01'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'JB 4/20/2023 09:30:01'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'JB 4/20/2023 09:30:02'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/git/ISW1-2023-1c/02-Numeros/Numero-Exercise.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/20/2023 09:30:32'!
PASSED!

a:= Entero with: 8. 
b:= Entero with:  9.!

a!

b!

b:= Entero with:  -9.!

a*b. !

b*a.!

self !

self class!

a*b.!

a:= Entero with: -8.!

a*b. !

a*b. !

a!

b!
!Entero methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:37:35' prior: 50612044!
sumToAnInteger: anIntegerAdder
"sumToanInterger:anIntergerToAdd/Adder
	^anAdder IntergerValue + value
	
	^Entero with: value + anAdder integerValue
"
	^Entero with:anIntegerAdder integerValue + value
! !
!Entero methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:37:40' prior: 50612566!
sumToAnInteger: anIntegerAdder
"sumToanInterger:anIntergerToAdd/Adder
	^anAdder IntergerValue + value
	
	^Entero with: value + anAdder integerValue
"
	^Entero with: anIntegerAdder integerValue + value
! !
!Entero methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:38:03' prior: 50612575!
sumToAnInteger: anIntegerAdder

	^Entero with: anIntegerAdder integerValue + value
! !

self class!
!Entero methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:39:00' prior: 50612584!
sumToAnInteger: anIntegerAdder

	^self class with: anIntegerAdder integerValue + value
! !

a+b.!

a:= Entero with: 0.!

a*b.!

a:= Entero with: 1.!

a*b. !

b*a.!

b:= Entero with:  1.!

b*a. !

a:= Entero with: -1. 
b:= Entero with:  -8.!

b*a. !

a-b.!

b-a.!

a:= Entero with: -1. 
b:= Entero with:  -8.!

b-a.!

b!

a!
!Entero methodsFor: 'arithmetic operations' stamp: 'JB 4/20/2023 09:41:36' prior: 50611942 overrides: 50611871!
- aSubtrahend 
	
	^aSubtrahend  subtractToAnInteger: self.
	! !
!Entero methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:41:58' prior: 50612033!
subtractToAnInteger: anIntegerSubtrahend 
		
	^ self class with: anIntegerSubtrahend integerValue- value.! !

b-a.!

b-a.!

value!

anIntegerSubtrahend integerValue!

anIntegerSubtrahend integerValue- value.!

a-b.!

a-b.!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 09:43:56'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/20/2023 09:43:56'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/20/2023 09:43:56'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 09:44:08'!
FAILURE!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/20/2023 09:44:08'!
FAILURE!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/20/2023 09:44:08'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/20/2023 09:44:08'!
PASSED!
!Entero methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:45:18' prior: 50612025!
subtractToAFraction: aFractionSubtrahend 
		^Fraccion  with: aFractionSubtrahend  numerator - (aFractionSubtrahend  denominator *self )   over: aFractionSubtrahend  denominator . 
	! !
!Entero methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:45:57' prior: 50612891!
subtractToAFraction: aFractionToSubstract 
		^Fraccion  with: aFractionToSubstract   numerator - (aFractionToSubstract   denominator *self )   over: aFractionToSubstract   denominator . 
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'JB 4/20/2023 09:46:19' prior: 50612282 overrides: 50611871!
- aSubtrahend 
	^aSubtrahend subtractToAFraction:self .

! !
!Fraccion methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:46:59' prior: 50612383!
subtractToAnInteger: anIntegerSustrahend

			
		^Fraccion  with: (   (self denominator  * anIntegerSustrahend  ) -  self numerator )  over: (self denominator) .
	 
	! !
!Fraccion methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:47:43' prior: 50612371!
subtractToAFraction: aFractionSubtrahend 
	

	| newNumerator newDenominator |
	
	
	newNumerator :=  (denominator * aFractionSubtrahend numerator) - (numerator * aFractionSubtrahend denominator).
	newDenominator := denominator * aFractionSubtrahend denominator.
	
	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/20/2023 09:47:50'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/20/2023 09:47:50'!
PASSED!
!EnteroPositvo methodsFor: 'as yet unclassified' stamp: 'JB 4/20/2023 09:52:18' prior: 50612201 overrides: 50612064!
makeFraccionWith: aDividend
	
	| greatestCommonDivisor numerator denominator |

	greatestCommonDivisor := aDividend greatestCommonDivisorWith: self. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := self // greatestCommonDivisor.
	
	^denominator getResultOfDividing: numerator.
	! !

!methodRemoval: Uno class #xxx stamp: 'JB 4/20/2023 09:53:42'!
xxx
	^self new initialize !

!methodRemoval: Cero class #xxx stamp: 'JB 4/20/2023 09:54:24'!
xxx
	^self new initialize. !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/20/2023 09:54:29'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/20/2023 09:54:29'!
PASSED!
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/20/2023 09:54:59' prior: 50612082!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	(aValue=1) ifTrue:[^Uno new initalizeWith:1].
	(aValue = 0) ifTrue: [^Cero new initalizeWith:0].
	(aValue<0) ifTrue: [^(EnteroNegativo new) initalizeWith:aValue ].
	
	^EnteroPositvo new initalizeWith: aValue
	
! !
!Integer methodsFor: 'converting' stamp: 'JB 4/20/2023 09:57:24'!
adaptToEntero
	(self=1) ifTrue:[^Uno new initalizeWith:1].
	(self = 0) ifTrue: [^Cero new initalizeWith:0].
	(self<0) ifTrue: [^(EnteroNegativo new) initalizeWith:self ].
	
	^EnteroPositvo new initalizeWith: self
	! !
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/20/2023 09:57:46' prior: 50613228!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^aValue adaptToEntero 
	
	"(aValue=1) ifTrue:[^Uno new initalizeWith:1].
	(aValue = 0) ifTrue: [^Cero new initalizeWith:0].
	(aValue<0) ifTrue: [^(EnteroNegativo new) initalizeWith:aValue ].
	
	^EnteroPositvo new initalizeWith: aValue
	"
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/20/2023 09:57:53'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/20/2023 09:57:53'!
PASSED!
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/20/2023 09:58:25' prior: 50613254!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^aValue adaptToEntero 
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'JB 4/20/2023 09:59:43' prior: 50611948 overrides: 50611876!
/ aDivisor 
	^aDivisor divideTheInteger: self	
! !
!Entero methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 10:00:16' prior: 50612001!
divideTheFraction: aFractionToDivide
			

	^( aFractionToDivide  numerator ) / (aFractionToDivide  denominator  * self)
! !

Uno new!

!methodRemoval: Uno #isOne stamp: 'JB 4/20/2023 10:02:12'!
isOne
	
	^true
	!

Uno new isOne !

!methodRemoval: Cero #isZero stamp: 'JB 4/20/2023 10:02:43'!
isZero
	
	^true!

!methodRemoval: EnteroNegativo #isOne stamp: 'JB 4/20/2023 10:02:47'!
isOne
	
	^false!

!methodRemoval: EnteroNegativo #isZero stamp: 'JB 4/20/2023 10:02:49'!
isZero
	
	^false!

!methodRemoval: EnteroNegativo #isNegative stamp: 'JB 4/20/2023 10:02:52'!
isNegative
	^true!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:03:00'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/20/2023 10:03:01'!
PASSED!

!methodRemoval: Uno #initialize stamp: 'JB 4/20/2023 10:03:09'!
initialize
	value :=1!

!methodRemoval: EnteroPositvo #initalizeWith: stamp: 'JB 4/20/2023 10:03:27'!
initalizeWith: aValue 
	
	value := aValue!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/20/2023 10:03:30'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/20/2023 10:03:30'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/20/2023 10:03:30'!
PASSED!

Uno new!
!Uno methodsFor: 'as yet unclassified' stamp: 'JB 4/20/2023 10:04:55' overrides: 16920235!
initialize
	value  := 1! !

Uno new!
!Cero methodsFor: 'as yet unclassified' stamp: 'JB 4/20/2023 10:05:21' overrides: 16920235!
initialize
	value:=0! !
!Integer methodsFor: 'converting' stamp: 'JB 4/20/2023 10:05:37' prior: 50613244!
adaptToEntero
	(self=1) ifTrue:[^Uno new].
	(self = 0) ifTrue: [^Cero new].
	(self<0) ifTrue: [^(EnteroNegativo new) initalizeWith:self ].
	
	^EnteroPositvo new initalizeWith: self
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:05:46'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/20/2023 10:05:47'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/20/2023 10:05:47'!
PASSED!
!NumeroTest methodsFor: 'setup' stamp: 'JB 4/20/2023 10:09:46' prior: 50611836 overrides: 16961394!
setUp


	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !

#(1 2 3 4)!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/20/2023 10:32:01'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/20/2023 10:34:13'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/20/2023 10:34:13'!
PASSED!
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/20/2023 10:40:36' prior: 50613408!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	"^aValue adaptToEntero"
	(self=1) ifTrue:[^Uno new].
	(self = 0) ifTrue: [^Cero new].
	(self<0) ifTrue: [^(EnteroNegativo new) initalizeWith:self ].
	
	^EnteroPositvo new initalizeWith: self
	 
	
	! !
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/20/2023 10:41:14' prior: 50614169!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	"^aValue adaptToEntero"
	(aValue =1) ifTrue:[^Uno new].
	(aValue  = 0) ifTrue: [^Cero new].
	(aValue <0) ifTrue: [^(EnteroNegativo new) initalizeWith:self ].
	
	^EnteroPositvo new initalizeWith: self
	 
	
	! !
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/20/2023 10:41:45' prior: 50614185!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	"^aValue adaptToEntero"
	(aValue =1) ifTrue:[^Uno new].
	(aValue  = 0) ifTrue: [^Cero new].
	(aValue <0) ifTrue: [^(EnteroNegativo new) initalizeWith:aValue ].
	
	^EnteroPositvo new initalizeWith: aValue 
	 
	
	! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'JB 4/20/2023 10:41:48'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'JB 4/20/2023 10:41:48'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'JB 4/20/2023 10:41:49'!
PASSED!

!classRemoval: #Fraccion stamp: 'JB 4/21/2023 10:57:03'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'JB 4/21/2023 10:57:04'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroPositvo stamp: 'JB 4/21/2023 10:57:04'!
Entero subclass: #EnteroPositvo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegativo stamp: 'JB 4/21/2023 10:57:05'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'JB 4/21/2023 10:57:05'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'JB 4/21/2023 10:57:05'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'JB 4/21/2023 10:57:06'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'JB 4/21/2023 10:57:06'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/git/ISW1-2023-1c/Collections-Sequenceable.st----!

!classRemoval: #IIII stamp: 'JB 4/21/2023 10:57:37'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #III stamp: 'JB 4/21/2023 10:57:37'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #II stamp: 'JB 4/21/2023 10:57:37'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

!classRemoval: #I stamp: 'JB 4/21/2023 10:57:38'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Naturales'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/git/ISW1-2023-1c/Collections-Sequenceable.st----!

----QUIT----(21 April 2023 10:58:08) CuisUniversity-5706.image priorSource: 8955001!

----STARTUP---- (21 April 2023 10:58:17) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!


----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/git/ISW1-2023-1c/Collections-Sequenceable.st----!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/git/2023-1c/03-Stack/Stack-Exercise.st----!

Object subclass: #NameOfSubclass
	instanceVariableNames: 'lenght collection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #NameOfSubclass category: 'Stack-Exercise' stamp: 'JB 4/21/2023 11:00:43'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'lenght collection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!NameOfSubclass methodsFor: 'nil' stamp: 'JB 4/21/2023 11:02:40'!
pop
	|element|
	(self isEmpty) ifTrue: [self error: self class  stackEmptyErrorDescription ].
	element := collection at: lenght. 
	collection remove: element . 
	lenght := lenght -1. 
	^element. ! !
!NameOfSubclass methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:02:58'!
isEmpty 
	^(lenght =0 )! !
!NameOfSubclass methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:03:41'!
push: anElement
	collection add: anElement . 
	lenght := lenght +1. 
! !
!NameOfSubclass methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:03:54'!
top
	|element|
	(self isEmpty) ifTrue: [self error: self class  stackEmptyErrorDescription ].
	element := collection at: lenght. 
	^element. ! !
!NameOfSubclass methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:04:04' overrides: 16901663!
size 
	^lenght! !

!classRenamed: #OOStack as: #OOStack1 stamp: 'JB 4/21/2023 11:05:01'!
Smalltalk renameClassNamed: #OOStack as: #OOStack1!
!OOStackTest methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:05:01' prior: 50621443!
test02PushAddElementsToTheStack

	| stack |
	
	stack := OOStack1 new.
	stack push: 'something'.
	
	self deny: stack isEmpty! !
!OOStackTest methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:05:01' prior: 50621486!
test07TopDoesNotRemoveObjectFromStack

	| stack pushedObject |
	
	stack := OOStack1 new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack size = 1.
	stack top.
	self assert: stack size = 1.
	! !
!OOStackTest methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:05:01' prior: 50621520!
test10CanNotTopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack1 new.
	self
		should: [ stack top ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack1 stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:05:01' prior: 50621496!
test08CanNotPopWhenThereAreNoObjectsInTheStack

	| stack  |
	
	stack := OOStack1 new.
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack1 stackEmptyErrorDescription ]
		
! !
!OOStackTest methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:05:01' prior: 50621478!
test06TopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack1 new.
	pushedObject := 'something'.
	
	stack push: pushedObject.
	
	self assert: stack top = pushedObject.
	! !
!OOStackTest methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:05:01' prior: 50621464!
test05StackBehavesLIFO

	| stack firstPushedObject secondPushedObject |
	
	stack := OOStack1 new.
	firstPushedObject := 'firstSomething'.
	secondPushedObject := 'secondSomething'.
	
	stack push: firstPushedObject.
	stack push: secondPushedObject.
	
	self assert: stack pop = secondPushedObject.
	self assert: stack pop = firstPushedObject.
	self assert: stack isEmpty 
	! !
!OOStackTest methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:05:01' prior: 50621437!
test01StackShouldBeEmptyWhenCreated

	| stack |
	
	stack := OOStack1 new.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:05:01' prior: 50621449!
test03PopRemovesElementsFromTheStack

	| stack |
	
	stack := OOStack1 new.
	stack push: 'something'.
	stack pop.
	
	self assert: stack isEmpty! !
!OOStackTest methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:05:01' prior: 50621456!
test04PopReturnsLastPushedObject

	| stack pushedObject |
	
	stack := OOStack1 new.
	pushedObject := 'something'.
	stack push: pushedObject.
	
	self assert: stack pop = pushedObject! !
!OOStackTest methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:05:01' prior: 50621507!
test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects

	| stack  |
	
	stack := OOStack1 new.
	stack push: 'something'.
	stack pop.
	
	self
		should: [ stack pop ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText = OOStack1 stackEmptyErrorDescription ]
		
! !

!classRemoval: #SentenceFinderByPrefix stamp: 'JB 4/21/2023 11:06:02'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack1 stamp: 'JB 4/21/2023 11:06:03'!
Object subclass: #OOStack1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #NameOfSubclass stamp: 'JB 4/21/2023 11:06:03'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'lenght collection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'JB 4/21/2023 11:06:04'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'JB 4/21/2023 11:06:04'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/git/2023-1c/03-Stack/Stack-Exercise.st----!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'JB 4/21/2023 11:08:13'!
Object subclass: #OOStack
	instanceVariableNames: 'collection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'nil' stamp: 'JB 4/21/2023 11:08:32'!
pop
	|element|
	(self isEmpty) ifTrue: [self error: self class stackEmptyErrorDescription ].
	element := collection at: (collection size). 
	collection remove: element. 
	^element  ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:08:58'!
isEmpty 
	^(collection size =0)! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:09:13'!
top
	|element|
	(self isEmpty) ifTrue: [self error: self class stackEmptyErrorDescription ].
	element := collection at: (collection size). 
	^element  ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:09:24' prior: 50621940!
top
	
	(self isEmpty) ifTrue: [self error: self class stackEmptyErrorDescription ].
	 ^collection at: (collection size). 
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:09:47'!
push: anElement
	
	collection add: anElement .	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:09:48' prior: 50621955!
push: anElement
	
	collection add: anElement	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:09:59' overrides: 16901663!
size 
	^collection  size ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/21/2023 11:10:01'!
ERROR!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/21/2023 11:10:01'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/21/2023 11:10:01'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/21/2023 11:10:01'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/21/2023 11:10:01'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/21/2023 11:10:01'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/21/2023 11:10:01'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 11:10:01'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/21/2023 11:10:01'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 11:10:01'!
FAILURE!
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:10:22' overrides: 16920235!
initialize
	collection := OrderedCollection  new. ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/21/2023 11:10:25'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/21/2023 11:10:25'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/21/2023 11:10:25'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/21/2023 11:10:25'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/21/2023 11:10:25'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/21/2023 11:10:25'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/21/2023 11:10:25'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 11:10:25'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/21/2023 11:10:25'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 11:10:25'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/21/2023 11:15:08'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/21/2023 11:15:08'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/21/2023 11:15:08'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/21/2023 11:15:08'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/21/2023 11:15:08'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/21/2023 11:15:08'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/21/2023 11:15:08'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 11:15:08'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/21/2023 11:15:08'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 11:15:08'!
PASSED!

OOStack subclass: #emptyNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #EmptyNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EmptyNode category: 'Stack-Exercise' stamp: 'JB 4/21/2023 11:26:00'!
OOStack subclass: #EmptyNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!EmptyNode methodsFor: 'nil' stamp: 'JB 4/21/2023 11:26:19' overrides: 50621936!
isEmpty 
	^true! !
!EmptyNode methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:26:41' overrides: 50621948!
top 
	^self error: OOStack stackEmptyErrorDescription ! !
!EmptyNode methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:26:45' overrides: 50621927!
pop 
	^self error: OOStack stackEmptyErrorDescription ! !

OOStack subclass: #ElementNode
	instanceVariableNames: 'collection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #ElementNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #ElementNode category: 'Stack-Exercise' stamp: 'JB 4/21/2023 11:28:06'!
OOStack subclass: #ElementNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #ElementNode
	instanceVariableNames: 'element next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #ElementNode category: 'Stack-Exercise' stamp: 'JB 4/21/2023 11:28:16'!
OOStack subclass: #ElementNode
	instanceVariableNames: 'element next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!ElementNode methodsFor: 'nil' stamp: 'JB 4/21/2023 11:29:23'!
with: anElement  next: aNode
	element  := anElement . 
	next := aNode
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:31:52'!
isEmptyCopy
	^(collection size =0)! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:31:57'!
popCopy
	|element|
	(self isEmpty) ifTrue: [self error: self class stackEmptyErrorDescription ].
	element := collection at: (collection size). 
	collection remove: element. 
	^element  ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:32:03'!
pushCopy: anElement
	
	collection add: anElement	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:32:09'!
sizeCopy
	^collection  size ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:32:14'!
topCopy
	
	(self isEmpty) ifTrue: [self error: self class stackEmptyErrorDescription ].
	 ^collection at: (collection size). 
	! !

Object subclass: #OOStack
	instanceVariableNames: 'collection top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'JB 4/21/2023 11:32:36'!
Object subclass: #OOStack
	instanceVariableNames: 'collection top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:32:57' prior: 50622002 overrides: 16920235!
initialize
	collection := OrderedCollection  new. 
	top := EmptyNode new. ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:33:14' prior: 50621936!
isEmpty 
	^top isEmpty! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:34:20' prior: 50621960!
push: anElement
	
	|newNode |
	newNode := ElementNode new. 
	newNode with:  anElement  next: top.
	top := newNode . ! !

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'JB 4/21/2023 11:34:43'!
Object subclass: #OOStack
	instanceVariableNames: 'collection top lenght'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:34:41' prior: 50621965 overrides: 16901663!
size 
	^lenght ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:34:54' prior: 50622180!
isEmpty 
	^lenght =0 ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:35:04' prior: 50622184!
push: anElement
	
	|newNode |
	newNode := ElementNode new. 
	newNode with:  anElement  next: top.
	top := newNode . 
	lenght := lenght +1.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:35:11' prior: 50622174 overrides: 16920235!
initialize
	collection := OrderedCollection  new. 
	top := EmptyNode new. 
	lenght := 0! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:36:06' prior: 50621927!
pop 
	top := top next.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:49:43' prior: 50622221!
pop 
	^top canPop ! !
!ElementNode methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:50:07'!
canPop
	^self error: OOStack  stackEmptyErrorDescription ! !
!EmptyNode methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:51:50'!
canPop: aStack
	^aStack popNotEmptyStack
	! !
!ElementNode methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:52:39'!
canPop:aStack 
	^aStack  cantPopEmptyStack! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:53:13'!
cantPopEmptyStack
	^self error: self class stackEmptyErrorDescription

! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:53:33'!
popNotEmptyStack 

^nil
! !
!ElementNode methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:53:58' prior: 50622238!
canPop:aStack 
	^aStack popNotEmptyStack
	
	! !
!EmptyNode methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:54:05' prior: 50622234!
canPop: aStack
	^aStack! !
!EmptyNode methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:54:07' prior: 50622256!
canPop: aStack
	^aStack  cantPopEmptyStack! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:55:55' prior: 50622247!
popNotEmptyStack
		|element| 
		element := top value.
		 top :=  top next. 
		lenght := lenght  -1 . 
		^element.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:56:27'!
topNotEmptyStack

		^ top value.
		! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:56:57' prior: 50621948!
top
	^top canTop: self! !
!ElementNode methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:57:15'!
canTop:aStack 
	^aStack topNotEmptyStack
	
	! !
!EmptyNode methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:57:31'!
canTop: aStack
	^aStack  cantTopEmptyStack! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:57:44'!
cantTopEmptyStack
	^self error: self class stackEmptyErrorDescription

! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:58:27' prior: 50622215 overrides: 16920235!
initialize
	collection := OrderedCollection  new.
	top := EmptyNode new. 
	lenght := 0! !
!ElementNode methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:59:16' overrides: 16902254!
value
	^element ! !
!ElementNode methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 11:59:23'!
next 
	^next ! !

!classDefinition: #Node category: 'Stack-Exercise' stamp: 'JB 4/21/2023 12:01:47'!
OOStack subclass: #Node
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #ElementNode category: 'Stack-Exercise' stamp: 'JB 4/21/2023 12:01:47'!
Node subclass: #ElementNode
	instanceVariableNames: 'element next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OONode
	instanceVariableNames: 'collection top lenght'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OONode category: 'Stack-Exercise' stamp: 'JB 4/21/2023 12:03:07'!
Object subclass: #OONode
	instanceVariableNames: 'collection top lenght'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OOEmptyNode
	instanceVariableNames: 'collection top lenght'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOEmptyNode category: 'Stack-Exercise' stamp: 'JB 4/21/2023 12:03:16'!
Object subclass: #OOEmptyNode
	instanceVariableNames: 'collection top lenght'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOEmptyNode stamp: 'JB 4/21/2023 12:03:22'!
Object subclass: #OOEmptyNode
	instanceVariableNames: 'collection top lenght'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OONode subclass: #OONodeEmpty
	instanceVariableNames: 'collection top lenght'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OONode subclass: #OONodeEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OONodeEmpty category: 'Stack-Exercise' stamp: 'JB 4/21/2023 12:03:44'!
OONode subclass: #OONodeEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OONode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OONode category: 'Stack-Exercise' stamp: 'JB 4/21/2023 12:03:52'!
Object subclass: #OONode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OONode subclass: #OONodeNotEmpty
	instanceVariableNames: 'value next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OONodeNotEmpty category: 'Stack-Exercise' stamp: 'JB 4/21/2023 12:04:09'!
OONode subclass: #OONodeNotEmpty
	instanceVariableNames: 'value next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OONodeNotEmpty methodsFor: 'nil' stamp: 'JB 4/21/2023 12:07:32'!
canPop: aStack
	^aStack  cantPopEmptyStack! !
!OONodeNotEmpty methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:07:41'!
canTop: aStack
	^aStack  cantTopEmptyStack! !
!OONodeEmpty methodsFor: 'nil' stamp: 'JB 4/21/2023 12:08:10'!
canPop:aStack 
	^aStack popNotEmptyStack
	
	! !
!OONodeEmpty methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:08:19'!
canTop:aStack 
	^aStack topNotEmptyStack
	
	! !
!OONodeNotEmpty methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:09:10' prior: 50622391!
canPop: aStack
	^aStack  popNotEmptyStack! !
!OONodeNotEmpty methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:09:21' prior: 50622395!
canTop: aStack
	^aStack  popNotEmptyStack! !
!OONodeNotEmpty methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:09:30'!
next 
	^next ! !
!OONodeNotEmpty methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:09:43' overrides: 16902254!
value
	^value! !
!OONodeNotEmpty methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:10:42'!
with: anElement next: aNode
	value := anElement.
	next := aNode! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:11:19' prior: 50622294 overrides: 16920235!
initialize
	collection := OrderedCollection  new.
	top := OONodeEmpty new. 
	lenght := 0! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:11:39' prior: 50622207!
push: anElement
	
	|newNode |
	newNode := OONodeNotEmpty new. 
	newNode with:  anElement  next: top.
	top := newNode . 
	lenght := lenght +1.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/21/2023 12:11:50'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/21/2023 12:11:50'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/21/2023 12:11:50'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/21/2023 12:11:50'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/21/2023 12:11:50'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/21/2023 12:11:50'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/21/2023 12:11:50'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 12:11:50'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/21/2023 12:11:50'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 12:11:50'!
FAILURE!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/21/2023 12:12:02'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/21/2023 12:12:35'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:13:24' prior: 50622225!
pop 
	^top canPop:self! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/21/2023 12:13:42'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/21/2023 12:13:42'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/21/2023 12:13:42'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/21/2023 12:13:42'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/21/2023 12:13:42'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/21/2023 12:13:42'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/21/2023 12:13:42'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 12:13:42'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/21/2023 12:13:42'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 12:13:42'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/21/2023 12:13:57'!
FAILURE!

stack size!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/21/2023 12:15:17'!
FAILURE!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/21/2023 12:15:17'!
FAILURE!

stack size!

newNode!

top!

stack  size !
!OONodeNotEmpty methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:17:56' prior: 50622413!
canTop: aStack
	^aStack  topNotEmptyStack! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/21/2023 12:18:00'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/21/2023 12:18:00'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/21/2023 12:18:00'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/21/2023 12:18:00'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/21/2023 12:18:00'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/21/2023 12:18:00'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/21/2023 12:18:00'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 12:18:00'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/21/2023 12:18:00'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 12:18:00'!
FAILURE!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 12:18:12'!
ERROR!

stack !
!OONodeEmpty methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:19:12' prior: 50622399!
canPop:aStack 
	^aStack cantPopEmptyStack 
	
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/21/2023 12:19:58'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/21/2023 12:19:58'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/21/2023 12:19:58'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/21/2023 12:19:58'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/21/2023 12:19:58'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/21/2023 12:19:58'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/21/2023 12:19:58'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 12:19:58'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/21/2023 12:19:58'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 12:19:58'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 12:19:58'!
FAILURE!

stack !
!OONodeEmpty methodsFor: 'as yet unclassified' stamp: 'JB 4/21/2023 12:20:50' prior: 50622403!
canTop:aStack 
	^aStack cantTopEmptyStack 
	
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/21/2023 12:20:57'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/21/2023 12:20:57'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/21/2023 12:20:57'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/21/2023 12:20:57'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/21/2023 12:20:57'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/21/2023 12:20:57'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/21/2023 12:20:57'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 12:20:57'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/21/2023 12:20:57'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/21/2023 12:20:57'!
PASSED!

----QUIT----(22 April 2023 09:43:43) CuisUniversity-5706.image priorSource: 9198017!

----STARTUP---- (23 April 2023 16:55:01) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!


----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/Practica/collectionExcersise/CollectionExercise.st----!

----STARTUP---- (24 April 2023 07:38:48) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'JB 4/24/2023 07:38:56'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #ElementNode stamp: 'JB 4/24/2023 07:38:56'!
Node subclass: #ElementNode
	instanceVariableNames: 'element next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Node stamp: 'JB 4/24/2023 07:38:57'!
OOStack subclass: #Node
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #EmptyNode stamp: 'JB 4/24/2023 07:38:57'!
OOStack subclass: #EmptyNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'JB 4/24/2023 07:38:57'!
Object subclass: #OOStack
	instanceVariableNames: 'collection top lenght'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OONodeNotEmpty stamp: 'JB 4/24/2023 07:38:58'!
OONode subclass: #OONodeNotEmpty
	instanceVariableNames: 'value next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OONodeEmpty stamp: 'JB 4/24/2023 07:38:58'!
OONode subclass: #OONodeEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OONode stamp: 'JB 4/24/2023 07:38:59'!
Object subclass: #OONode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'JB 4/24/2023 07:38:59'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'JB 4/24/2023 07:38:59'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/git/ISW1-2023-1c/Stack-Exercise.st----!

Object subclass: #OOStack
	instanceVariableNames: 'lenght top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'JB 4/24/2023 07:53:09'!
Object subclass: #OOStack
	instanceVariableNames: 'lenght top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'initialization' stamp: 'JB 4/24/2023 07:53:20' prior: 50623198 overrides: 16920235!
initialize

	lenght := 0.
	top := OOAbsentNode new.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/24/2023 07:53:29'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/24/2023 07:53:29'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/24/2023 07:53:29'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/24/2023 07:53:29'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/24/2023 07:53:29'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/24/2023 07:53:29'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/24/2023 07:53:29'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 07:53:29'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/24/2023 07:53:29'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 07:53:29'!
PASSED!
!OOStack methodsFor: 'removing' stamp: 'JB 4/24/2023 07:54:50' prior: 50623182!
pop
	|outdatedTop|
	
	outdatedTop := self top.
	self changeTop.
	^outdatedTop
	"
	|nextTop topElement|
	lenght := lenght-1.
	nextTop := top getNextNodeFailIfAbsent.
	topElement:=self top.
	top := nextTop.
	^topElement
	
	"
	
	
	! !
!OOStack methodsFor: 'removing' stamp: 'JB 4/24/2023 07:55:48' prior: 50623349!
pop
	
	|outdatedTop|

	outdatedTop := self top.
	self changeTop.

	^outdatedTop getValueFailIfAbsent:self
	"
	|nextTop topElement|
	lenght := lenght-1.
	nextTop := top getNextNodeFailIfAbsent.
	topElement:=self top.
	top := nextTop.
	^topElement
	
	"
	
	
	! !
!OOStack methodsFor: 'removing' stamp: 'JB 4/24/2023 07:55:52' prior: 50623359!
pop
	
	|outdatedTop|
	

	outdatedTop := self top.
	self changeTop.


	^outdatedTop getValueFailIfAbsent:self
	"
	|nextTop topElement|
	lenght := lenght-1.
	nextTop := top getNextNodeFailIfAbsent.
	topElement:=self top.
	top := nextTop.
	^topElement
	
	"
	
	
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/24/2023 07:56:00'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/24/2023 07:56:00'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/24/2023 07:56:00'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/24/2023 07:56:00'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/24/2023 07:56:00'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/24/2023 07:56:00'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/24/2023 07:56:00'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 07:56:00'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/24/2023 07:56:00'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 07:56:00'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/24/2023 07:56:26'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/24/2023 07:56:46'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/24/2023 07:57:09'!
ERROR!

stack!
!OOStack methodsFor: 'removing' stamp: 'JB 4/24/2023 07:59:13' prior: 50623370!
pop
	
	|topValue|
	

	topValue := self top.
	self changeTop.


	^topValue
	"
	|nextTop topElement|
	lenght := lenght-1.
	nextTop := top getNextNodeFailIfAbsent.
	topElement:=self top.
	top := nextTop.
	^topElement
	
	"
	
	
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/24/2023 07:59:32'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/24/2023 07:59:32'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/24/2023 07:59:32'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/24/2023 07:59:32'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/24/2023 07:59:32'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/24/2023 07:59:32'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/24/2023 07:59:32'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 07:59:32'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/24/2023 07:59:32'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 07:59:32'!
PASSED!
!OOStack methodsFor: 'removing' stamp: 'JB 4/24/2023 08:01:20' prior: 50623423!
pop
	|topValue|
	topValue := self top.
	self changeTop.
	^topValue
	
	
	! !
!OOStack methodsFor: 'removing' stamp: 'JB 4/24/2023 08:01:28' prior: 50623466!
pop
	
	|topValue|
	

	topValue := self top.
	self changeTop.


	^topValue
	
	! !
!OOStack methodsFor: 'removing' stamp: 'JB 4/24/2023 08:02:10' prior: 50623471!
pop
	|topValue|
	topValue := self top.
	self changeTop.
	^topValue
	
	
	! !
!OOStack methodsFor: 'removing' stamp: 'JB 4/24/2023 08:02:19' prior: 50623477!
pop
	|topValue|
	topValue := self top.
	self changeTop.
	^topValue
	
	
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 08:50:23'!
test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack
	
	self assertIfFilteringWith:'algo' to:stack returns: emptyColection andCheckIfTheStackIsTheSameWIth:stackEmpty .! !

!methodRemoval: SentenceFinderByPrefixTest #test01UnStackVacioNoDevuelveNadaYMantieneElStackVacio stamp: 'JB 4/24/2023 08:50:23'!
test01UnStackVacioNoDevuelveNadaYMantieneElStackVacio
	
	self assertIfFilteringWith:'algo' to:stack returns: emptyColection andCheckIfTheStackIsTheSameWIth:stackEmpty .!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 08:51:43'!
test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStack
	
	self
		should: [ finder filter:stackError byPrefix:'' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix elementIsNotString.
				self assert: (self thisStack:stackError isEqualTo:stackErrorCopy).]
	! !

!methodRemoval: SentenceFinderByPrefixTest #test02StackConAlgunElementoNoStringDevuelveError stamp: 'JB 4/24/2023 08:51:43'!
test02StackConAlgunElementoNoStringDevuelveError
	
	self
		should: [ finder filter:stackError byPrefix:'' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix elementIsNotString.
				self assert: (self thisStack:stackError isEqualTo:stackErrorCopy).]
	!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 08:52:32'!
test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact
	
	self
		should: [ finder filter:stackError byPrefix:'' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix elementIsNotString.
				self assert: (self thisStack:stackError isEqualTo:stackErrorCopy).]
	! !

!methodRemoval: SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStack stamp: 'JB 4/24/2023 08:52:32'!
test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStack
	
	self
		should: [ finder filter:stackError byPrefix:'' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix elementIsNotString.
				self assert: (self thisStack:stackError isEqualTo:stackErrorCopy).]
	!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 08:54:11'!
test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact

	|colectionWithOneString|.
	
	colectionWithOneString := OrderedCollection new.
	colectionWithOneString add:'Jorge'.
	
	self assertIfFilteringWith:'Jor' to:stackWithOneElement returns: colectionWithOneString andCheckIfTheStackIsTheSameWIth:stackWithOneElementCopy .! !

!methodRemoval: SentenceFinderByPrefixTest #test03UnStackDeUnElementoFIltradoConUnPrefijoDevuelveUnaColeccionDeUnElementoCorrecta stamp: 'JB 4/24/2023 08:54:11'!
test03UnStackDeUnElementoFIltradoConUnPrefijoDevuelveUnaColeccionDeUnElementoCorrecta

	|colectionWithOneString|.
	
	colectionWithOneString := OrderedCollection new.
	colectionWithOneString add:'Jorge'.
	
	self assertIfFilteringWith:'Jor' to:stackWithOneElement returns: colectionWithOneString andCheckIfTheStackIsTheSameWIth:stackWithOneElementCopy .!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 08:55:46'!
test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact

	|abcColection|
	
	abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	abcColection add:'abcdd'.
	abcColection add:'abcde'.
	abcColection add:'abcd'.
	abcColection add:'abc'.
	
	self assertIfFilteringWith: 'abc' to:stackWithManyElement returns: abcColection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
	
	! !

!methodRemoval: SentenceFinderByPrefixTest #test04UnStackPobladoFiltradoConUnPrefijoComunDevuelveUnaColeccionCorrecta stamp: 'JB 4/24/2023 08:55:46'!
test04UnStackPobladoFiltradoConUnPrefijoComunDevuelveUnaColeccionCorrecta

	|abcColection|
	
	abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	abcColection add:'abcdd'.
	abcColection add:'abcde'.
	abcColection add:'abcd'.
	abcColection add:'abc'.
	
	self assertIfFilteringWith: 'abc' to:stackWithManyElement returns: abcColection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
	
	!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 08:57:24'!
test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact
"¿es necesario?"
	
	"self assert:(finder filter:stackWithManyElement byPrefix:'jorge' ) equals:emptyColection .
	self assert: (self thisStack:stackWithManyElement isEqualTo:stackWithManyElementCopy).	"
	
	self assertIfFilteringWith:'jorge' to:stackWithManyElement returns: emptyColection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .! !

!methodRemoval: SentenceFinderByPrefixTest #test06FIltrarElStackSinElementosConElPrefijoDevuelveUnaColeccionVacia stamp: 'JB 4/24/2023 08:57:24'!
test06FIltrarElStackSinElementosConElPrefijoDevuelveUnaColeccionVacia
"¿es necesario?"
	
	"self assert:(finder filter:stackWithManyElement byPrefix:'jorge' ) equals:emptyColection .
	self assert: (self thisStack:stackWithManyElement isEqualTo:stackWithManyElementCopy).	"
	
	self assertIfFilteringWith:'jorge' to:stackWithManyElement returns: emptyColection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 09:06:32'!
test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact

	|abcColection|
	
	abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	abcColection add:'abcde'.

	self assertIfFilteringWith:'abcde'  to:stackWithManyElement returns: abcColection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .! !

!methodRemoval: SentenceFinderByPrefixTest #test07UnStackFiltradoConAlgunasSentenciasConUnPrefijoDevuelveUnaColeccionCorrecta stamp: 'JB 4/24/2023 09:06:32'!
test07UnStackFiltradoConAlgunasSentenciasConUnPrefijoDevuelveUnaColeccionCorrecta

	|abcColection|
	
	abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	abcColection add:'abcde'.

	self assertIfFilteringWith:'abcde'  to:stackWithManyElement returns: abcColection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .!
!SentenceFinderByPrefixTest methodsFor: 'auxiliar' stamp: 'JB 4/24/2023 09:11:10'!
thisStack: aStack1 hasTheSameSizeAs: aStack2

	^ aStack1 size = aStack2 size! !
!SentenceFinderByPrefixTest methodsFor: 'auxiliar' stamp: 'JB 4/24/2023 09:11:10' prior: 50623050!
thisStack:aStack1 isEqualTo:aStack2
	
	((self thisStack: aStack1 hasTheSameSizeAs: aStack2)) ifFalse: [^false].
	^ self thisStack:aStack1 hasTheSameElementsAs:aStack2
	! !
!SentenceFinderByPrefixTest methodsFor: 'auxiliar' stamp: 'JB 4/24/2023 09:12:12' prior: 50623699!
thisStack:aStack isEqualTo:aStackToCompare
	((self thisStack: aStack hasTheSameSizeAs: aStackToCompare )) ifFalse: [^false].
	^ self thisStack:aStack hasTheSameElementsAs:aStackToCompare
	! !
!SentenceFinderByPrefixTest methodsFor: 'auxiliar' stamp: 'JB 4/24/2023 09:12:21' prior: 50623708!
thisStack:aStack isEqualTo:aStackToCompare
	((self thisStack: aStack hasTheSameSizeAs: aStackToCompare )) ifFalse: [^false].
	^ self thisStack:aStack hasTheSameElementsAs:aStackToCompare
	! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 09:12:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:12:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:12:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:12:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05UnStackFiltradoConUnPrefijoDeUnaSolaSentenciaDevuelveUnaColeccionCorrecta stamp: 'JB 4/24/2023 09:12:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:12:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:12:30'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08UnStackDondeTodosLosElementosCompartenUnPrefijoMenosUnoDevuelveUnaColeccionCorrecta stamp: 'JB 4/24/2023 09:12:30'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'auxiliar' stamp: 'JB 4/24/2023 09:13:28' prior: 50623718!
thisStack:aStack isEqualTo:aStackToCompare
	((self thisStack: aStack hasTheSameSizeAs: aStackToCompare )) ifTrue: [
		^ self thisStack:aStack hasTheSameElementsAs:aStackToCompare
		].
	^false
	! !
!SentenceFinderByPrefixTest methodsFor: 'auxiliar' stamp: 'JB 4/24/2023 09:13:36' prior: 50623770!
thisStack:aStack isEqualTo:aStackToCompare
	((self thisStack: aStack hasTheSameSizeAs: aStackToCompare )) ifTrue: [
		^ self thisStack:aStack hasTheSameElementsAs:aStackToCompare
		].
	^false
	! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 09:13:40'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:13:40'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:13:40'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:13:40'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05UnStackFiltradoConUnPrefijoDeUnaSolaSentenciaDevuelveUnaColeccionCorrecta stamp: 'JB 4/24/2023 09:13:40'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:13:40'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:13:40'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08UnStackDondeTodosLosElementosCompartenUnPrefijoMenosUnoDevuelveUnaColeccionCorrecta stamp: 'JB 4/24/2023 09:13:40'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 09:42:42'!
test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact

	|abcColection|
	
	abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	
	self assertIfFilteringWith:'abcdef' to:stackWithManyElement returns: abcColection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
! !

!methodRemoval: SentenceFinderByPrefixTest #test05UnStackFiltradoConUnPrefijoDeUnaSolaSentenciaDevuelveUnaColeccionCorrecta stamp: 'JB 4/24/2023 09:42:42'!
test05UnStackFiltradoConUnPrefijoDeUnaSolaSentenciaDevuelveUnaColeccionCorrecta

	|abcColection|
	
	abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	
	self assertIfFilteringWith:'abcdef' to:stackWithManyElement returns: abcColection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
!

!methodRemoval: SentenceFinderByPrefixTest #test08UnStackDondeTodosLosElementosCompartenUnPrefijoMenosUnoDevuelveUnaColeccionCorrecta stamp: 'JB 4/24/2023 09:42:52'!
test08UnStackDondeTodosLosElementosCompartenUnPrefijoMenosUnoDevuelveUnaColeccionCorrecta

	|abcColection|
	
	abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	abcColection add:'abcdd'.
	abcColection add:'abcde'.
	abcColection add:'abcd'.

	self assertIfFilteringWith:'abcd'  to:stackWithManyElement returns: abcColection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
	!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 09:43:46' prior: 50623832!
test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact	
	
	self assertIfFilteringWith:'abc def' to:stackWithManyElement returns: OrderedCollection new andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 09:43:56' prior: 50623878!
test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact	
	self assertIfFilteringWith:'abc def' to:stackWithManyElement returns: OrderedCollection new andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
! !

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 09:44:01'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 09:44:14'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 09:44:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 09:44:17'!
PASSED!
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'JB 4/24/2023 09:49:52'!
prefixIsEmptyErrorDescription
	^'The Prefix should not be empty'! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'JB 4/24/2023 09:53:50'!
prefixHasWhiteSpaceErrorDescription
	^'The Prefix should not have white spaces'! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 09:56:05'!
test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact

	|abcColection|
	
	abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	abcColection add:'abcde'.

	self assertIfFilteringWith:'abcde'  to:stackWithManyElement returns: abcColection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .! !
!SentenceFinderByPrefixTest methodsFor: 'setUp' stamp: 'JB 4/24/2023 09:56:26' prior: 50622856!
setUpColections
	
	emptyColection := OrderedCollection new.

	stringsWithabcdef := (OrderedCollection new) add:'abcdef'.
	
	
	"|abcColection|
	
	abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	abcColection add:'abcdd'.
	abcColection add:'abcde'.
	abcColection add:'abcd'.
	abcColection add:'abc'."! !

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack finder stackEmpty stackError stackErrorCopy stackWithOneElement stackWithManyElement stackWithOneElementCopy stackWithManyElementCopy emptyColection stringsWithabcdef
	
	multiElementCollection
	
	'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'JB 4/24/2023 09:57:04'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack finder stackEmpty stackError stackErrorCopy stackWithOneElement stackWithManyElement stackWithOneElementCopy stackWithManyElementCopy emptyColection stringsWithabcdef multiElementCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefixTest methodsFor: 'setUp' stamp: 'JB 4/24/2023 09:57:37' prior: 50623946!
setUpColections
	
	emptyColection := OrderedCollection new.

	stringsWithabcdef := (OrderedCollection new) add:'abcdef'.
		
	
	
	
	multiElementCollection := OrderedCollection new.
	multiElementCollection add:'abcdef'.
	multiElementCollection add:'abcdd'.
	multiElementCollection add:'abcde'.
	multiElementCollection add:'abcd'.
	multiElementCollection add:'abc'.! !
!SentenceFinderByPrefixTest methodsFor: 'setUp' stamp: 'JB 4/24/2023 09:57:52' prior: 50623985!
setUpColections
	
	emptyColection := OrderedCollection new.

	stringsWithabcdef := (OrderedCollection new) add:'abcdef'.
		
	multiElementCollection := OrderedCollection new.
	multiElementCollection add:'abcdef'.
	multiElementCollection add:'abcdd'.
	multiElementCollection add:'abcde'.
	multiElementCollection add:'abcd'.
	multiElementCollection add:'abc'.! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 09:58:29' prior: 50623594!
test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact

	
	
	"abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	abcColection add:'abcdd'.
	abcColection add:'abcde'.
	abcColection add:'abcd'.
	abcColection add:'abc'.
"	
	self assertIfFilteringWith: 'abc' to:stackWithManyElement returns: multiElementCollection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
	
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 09:58:56' prior: 50624015!
test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact

	|abcColection|
	
	
	abcColection := OrderedCollection new.
	"abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	abcColection add:'abcdd'.
	abcColection add:'abcde'.
	abcColection add:'abcd'.
	abcColection add:'abc'."	
	self assertIfFilteringWith: 'abc' to:stackWithManyElement returns: multiElementCollection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
	
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 09:59:41' prior: 50624032!
test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact
"
	|abcColection|
	
	
	abcColection := OrderedCollection new.
	abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	abcColection add:'abcdd'.
	abcColection add:'abcde'.
	abcColection add:'abcd'.
	abcColection add:'abc'.
	
	abcColection add:'abc'."	
	self assertIfFilteringWith: 'abc' to:stackWithManyElement returns: multiElementCollection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
	
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 09:59:48' prior: 50624051!
test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact

"
	|abcColection|
	
	
	abcColection := OrderedCollection new.
	abcColection := OrderedCollection new.
	abcColection := OrderedCollection new.
	abcColection add:'abcdef'.
	abcColection add:'abcdd'.
	abcColection add:'abcde'.
	abcColection add:'abcd'.
	abcColection add:'abc'.
	
	abcColection add:'abc'."	
	self assertIfFilteringWith: 'abc' to:stackWithManyElement returns: multiElementCollection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
	
	! !

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:59:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 09:59:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:59:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:59:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:59:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 09:59:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:59:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 09:59:53'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 09:59:53'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:00:06' prior: 50624071!
test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact

	self assertIfFilteringWith: 'abc' to:stackWithManyElement returns: multiElementCollection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
	
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:00:13' prior: 50624139!
test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact


	self assertIfFilteringWith: 'abc' to:stackWithManyElement returns: multiElementCollection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
	
	! !

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:00:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:00:17'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:00:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:00:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:00:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:00:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:00:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:00:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:00:18'!
PASSED!

----QUIT----(24 April 2023 10:00:45) CuisUniversity-5706.image priorSource: 9312037!

----STARTUP---- (24 April 2023 10:01:07) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!


!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:02:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:02:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:02:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:02:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:02:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:02:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:02:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:02:47'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:02:55'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:03:30'!
test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact	
	self assertIfFilteringWith:'abc def' to:stackWithManyElement returns: OrderedCollection new andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
! !

!methodRemoval: SentenceFinderByPrefixTest #test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:03:30'!
test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact	
	self assertIfFilteringWith:'abc def' to:stackWithManyElement returns: OrderedCollection new andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:03:33'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:05:19' prior: 50624262!
test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact	
	
	self
		should: [ finder filter:stackWithManyElement byPrefix:'abc def' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixHasWhiteSpaceErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:05:27' prior: 50624290!
test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact	
	self
		should: [ finder filter:stackWithManyElement byPrefix:'abc def' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixHasWhiteSpaceErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:05:51' prior: 50623932!
test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact
		
	self
		should: [ finder filter:stackWithManyElement byPrefix:'' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixHasWhiteSpaceErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:05:58' prior: 50624324!
test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact

	self
		should: [ finder filter:stackWithManyElement byPrefix:'' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixHasWhiteSpaceErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:06:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:06:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:06:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:06:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:06:06'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:06:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:06:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:06:06'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:06:13'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:06:54'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:21:12' prior: 50623269!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError | 
			self error: SentenceFinderByPrefix  	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 10:24:54'!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  = '') ifTrue:  [^Error signal]. 
	! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 10:30:03' prior: 50624427!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^Error signal].
	(aPrefixToCheck  findString: ' ' startingAt: 1  = 0 )ifFalse:  [^Error signal].
	! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 10:30:09' prior: 50624433!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^Error signal].
	(aPrefixToCheck  findString: ' ' startingAt: 1  = 0 )ifFalse:  [^Error signal].
	! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:31:11'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:31:11'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:31:11'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:31:11'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:31:11'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:31:11'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:31:11'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:31:11'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:31:59' prior: 50624409!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError | 
			^self error: SentenceFinderByPrefix  	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:32:03' prior: 50624493!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError | 
			
			^self error: SentenceFinderByPrefix  	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:32:06'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:32:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:32:06'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:32:06'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:32:06'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:32:06'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:32:06'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:32:06'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:32:45' prior: 50624511!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError | 
			
			^self error: self class 	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:32:51' prior: 50624571!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError | 
			
		
			^self error: self class 	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:33:06' prior: 50624589!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [
			
		
			^self error: self class 	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:33:10' prior: 50624607!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	
	do: [
			
		
			^self error: self class 	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:33:14'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:33:14'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:33:14'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:33:14'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:33:14'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:33:14'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:33:14'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:33:14'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:33:18'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:34:17'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:35:24' prior: 50624625!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [
		^self error: self class 	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:36:24'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:36:24'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:36:24'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:36:24'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:36:24'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:36:24'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:36:24'!
ERROR!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:36:24'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:36:31'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 10:37:31' prior: 50624442!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^Error signal].
	"(aPrefixToCheck  findString: ' ' startingAt: 1  = 0 )ifFalse:  [^Error signal]."
	! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:37:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:37:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:37:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:37:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:37:35'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:37:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:37:35'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:37:35'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:38:27' prior: 50624340!
test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact

	self
		should: [ finder filter:stackWithManyElement byPrefix:'' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixIsEmptyErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:38:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:38:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:38:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:38:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:38:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:38:36'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:38:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:38:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:38:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:38:36'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 10:39:08' prior: 50624758!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^Error signal].
	((aPrefixToCheck  findString: ' ' startingAt: 1)  = 0 )ifFalse:  [^Error signal].
	! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:39:19'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:39:19'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:39:19'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:39:19'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:39:19'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:39:19'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:39:19'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:39:19'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:39:19'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:39:49' prior: 50624307!
test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact	
	self
		should: [ finder filter:stackWithManyElement byPrefix:'abc def' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixIsEmptyErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 10:39:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:39:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:39:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:39:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:39:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:39:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 10:39:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:39:54'!
PASSED!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/Practica/CollectionExercise.st----!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/Practica/Numero-Exercise.st----!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/Practica/CodigoRepetido-Ejercicio.st----!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 4/24/2023 10:49:57'!
PASSED!

----STARTUP---- (24 April 2023 10:53:30) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!

!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:03:30'!
test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact	
	self assertIfFilteringWith:'abc def' to:stackWithManyElement returns: OrderedCollection new andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
! !

!methodRemoval: SentenceFinderByPrefixTest #test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 10:53:44'!
test05filteringAStackWithANonValidStringShouldRaiseAnErrorAndKeepTheStackIntact	
	self assertIfFilteringWith:'abc def' to:stackWithManyElement returns: OrderedCollection new andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .
!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:05:19' prior: 50626200!
test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact	
	
	self
		should: [ finder filter:stackWithManyElement byPrefix:'abc def' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixHasWhiteSpaceErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:05:27' prior: 50626223!
test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact	
	self
		should: [ finder filter:stackWithManyElement byPrefix:'abc def' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixHasWhiteSpaceErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:05:51' prior: 50623932!
test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact
		
	self
		should: [ finder filter:stackWithManyElement byPrefix:'' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixHasWhiteSpaceErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:05:58' prior: 50626257!
test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact

	self
		should: [ finder filter:stackWithManyElement byPrefix:'' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixHasWhiteSpaceErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:21:12' prior: 50623269!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError | 
			self error: SentenceFinderByPrefix  	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 10:24:54'!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  = '') ifTrue:  [^Error signal]. 
	! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 10:30:03' prior: 50626307!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^Error signal].
	(aPrefixToCheck  findString: ' ' startingAt: 1  = 0 )ifFalse:  [^Error signal].
	! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 10:30:09' prior: 50626313!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^Error signal].
	(aPrefixToCheck  findString: ' ' startingAt: 1  = 0 )ifFalse:  [^Error signal].
	! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:31:59' prior: 50626289!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError | 
			^self error: SentenceFinderByPrefix  	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:32:03' prior: 50626331!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError | 
			
			^self error: SentenceFinderByPrefix  	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:32:45' prior: 50626349!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError | 
			
			^self error: self class 	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:32:51' prior: 50626367!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError | 
			
		
			^self error: self class 	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:33:06' prior: 50626385!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [
			
		
			^self error: self class 	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:33:10' prior: 50626403!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	
	do: [
			
		
			^self error: self class 	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 10:35:24' prior: 50626421!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self class elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [
		^self error: self class 	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 10:37:31' prior: 50626322!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^Error signal].
	"(aPrefixToCheck  findString: ' ' startingAt: 1  = 0 )ifFalse:  [^Error signal]."
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:38:27' prior: 50626273!
test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact

	self
		should: [ finder filter:stackWithManyElement byPrefix:'' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixIsEmptyErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 10:39:08' prior: 50626456!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^Error signal].
	((aPrefixToCheck  findString: ' ' startingAt: 1)  = 0 )ifFalse:  [^Error signal].
	! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 10:39:49' prior: 50626240!
test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact	
	self
		should: [ finder filter:stackWithManyElement byPrefix:'abc def' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixIsEmptyErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !

!classDefinition: #XXX category: 'CollectionExercise' stamp: 'JB 4/24/2023 10:53:44'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CollectionExercise'!

!classDefinition: #XXX category: 'CollectionExercise' stamp: 'JB 4/24/2023 10:53:44'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CollectionExercise'!
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 12:02:40'!
extractVowels
	 
        ^'abcdefguijp' select: [:aLetter|aLetter  isVowel ].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:10:33'!
findDoublesBest
        ^ #(1 2 5 6 9)*2 ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:08:30'!
findDoublesDo
        |  doubleCollection |
	doubleCollection:= OrderedCollection  new.
         #(1 2 5 6 9) do: [:element| doubleCollection  add: element *2].

        ^doubleCollection ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:07:45'!
findDoublesWhile

        |  elements index doubleCollection |
	elements :=   #(1 2 5 6 9). 
	index:=1. 
	doubleCollection  := OrderedCollection  new. 
	[index <= (elements  size) ] whileTrue:  [
		doubleCollection add: (elements at: index )*2.
		index:= index+1.
		].

        ^doubleCollection ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:29:14'!
findFirstEven
        ^ #(1 2 5 6 9) detect: [:element| element  even].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:30:16'!
findFirstEvenWithoutMatching
        ^ #(1 5 9) detect: [:element| element  even].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:31:52'!
findFirstEvenWithoutMatchingReturnString
        ^ #(1 5 9) detect: [:element| element  even] ifNone: [^' no hay pares' ].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:46:01'!
findFirstEvenWithoutMatchingThrowsException
	|error|
	error:= Exception  new. 
	error signal:' no hay pares'. 
        ^ #(1 5 9) detect: [:element| element  even] ifNone:  [error signal  ].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 10:43:16'!
findOddsPart0

        | elements index odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
        index := 1.

        [index <= elements size]
        whileTrue: [
                ((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
                index := index +1.
                ].
        ^odds! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 10:48:17'!
findOddsPart1

        | elements index odds |

        elements:= #(1 2 5 6 9).

        odds := OrderedCollection new.
        index := 1.

	elements  do: [:number| number odd ifTrue:  [odds add: number]].

        ^odds! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 10:52:02'!
findOddsPart2

	^#(1 2 5 6 9)  select: [:number| number odd].

    ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:59:42'!
sumElementsInjecting
	 
        ^ #(1 2 5 6 9)  inject: 0 into: [:subTotal :next | subTotal + next].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'JB 4/10/2023 11:54:27'!
sumElementsSum
	 
        ^ #(1 2 5 6 9) sum ! !

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:44'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #NumeroTest category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:44'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:11'!
test01isCeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:12'!
test02isCeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:13'!
test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:14'!
test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:18'!
test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:20'!
test07EnteroDividesEnteroCorrectly

	self assert: two / two equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:38'!
test08FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := (Entero with: 7) / (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:52'!
test09FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 20:56'!
test10FraccionDividesFraccionCorrectly
"
    La division de fracciones es:
	 
	(a/b) / (c/d) = (a.d) / (b.c)
"

	self assert: oneHalf / oneFifth equals: fiveHalfs! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test11EnteroAddsFraccionCorrectly
"
	Ahora empieza la diversion!!
"

	self assert: one + oneFifth equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:07'!
test12FraccionAddsEnteroCorrectly

	self assert: oneFifth + one equals: (Entero with: 6) / (Entero with: 5)! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:50'!
test13EnteroMultipliesFraccionCorrectly

	self assert: two * oneFifth equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:52'!
test14FraccionMultipliesEnteroCorrectly

	self assert: oneFifth * two equals: twoFifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:57'!
test15EnteroDividesFraccionCorrectly

	self assert: one / twoFifth equals: fiveHalfs  ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 21:59'!
test16FraccionDividesEnteroCorrectly

	self assert: twoFifth / five equals: twoTwentyfifth ! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:38'!
test17AFraccionCanBeEqualToAnEntero

	self assert: two equals: four / two! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:39'!
test18AparentFraccionesAreEqual

	self assert: oneHalf equals: two / four! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:40'!
test19AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test20MultiplyingFraccionesCanReturnAnEntero

	self assert: (two/five) * (five/two) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:42'!
test21DividingFraccionesCanReturnAnEntero

	self assert: oneHalf / oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:43'!
test22DividingEnterosCanReturnAFraccion

	self assert: two / four equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test23CanNotDivideEnteroByZero

	self 
		should: [ one / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:46'!
test24CanNotDivideFraccionByZero

	self 
		should: [ oneHalf / zero ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Numero canNotDivideByZeroErrorDescription ]
	! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test25AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'HernanWilkinson 5/7/2016 22:50'!
test26AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 4/15/2021 16:45:35'!
test27EnteroSubstractsEnteroCorrectly

	self assert: four - one equals: three! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:47:41'!
test28FraccionSubstractsFraccionCorrectly
	
	self assert: twoFifth - oneFifth equals: oneFifth.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:00'!
test29EnteroSubstractsFraccionCorrectly

	self assert: one - oneHalf equals: oneHalf! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:05'!
test30FraccionSubstractsEnteroCorrectly

	| sixFifth |
	
	sixFifth := (Entero with: 6) / (Entero with: 5).
	
	self assert: sixFifth - one equals: oneFifth! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:08'!
test31SubstractingFraccionesCanReturnAnEntero

	| threeHalfs |
	
	threeHalfs := (Entero with: 3) / (Entero with: 2).
	
	self assert: threeHalfs - oneHalf equals: one.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:48:48'!
test32SubstractingSameEnterosReturnsZero

	self assert: one - one equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:01'!
test33SubstractingSameFraccionesReturnsZero

	self assert: oneHalf - oneHalf equals: zero.! !
!NumeroTest methodsFor: 'tests' stamp: 'HAW 9/24/2018 08:48:14'!
test34SubstractingAHigherValueToANumberReturnsANegativeNumber

	| negativeThreeHalfs |
	
	negativeThreeHalfs := (Entero with: -3) / (Entero with: 2).	

	self assert: one - fiveHalfs equals: negativeThreeHalfs.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:23'!
test35FibonacciZeroIsOne

	self assert: zero fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:32'!
test36FibonacciOneIsOne

	self assert: one fibonacci equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:39'!
test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros

	self assert: four fibonacci equals: five.
	self assert: three fibonacci equals: three. 
	self assert: five fibonacci equals: four fibonacci + three fibonacci.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:47'!
test38FibonacciNotDefinedForNegativeNumbers

	self 
		should: [negativeOne fibonacci]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: Entero negativeFibonacciErrorDescription ].! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:49:55'!
test39NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.
		! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:03'!
test40NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: negativeOne / two.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:11'!
test41SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (negativeOne / negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/23/2018 23:50:17'!
test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (one / negativeTwo)! !
!NumeroTest methodsFor: 'setup' stamp: 'JB 4/20/2023 10:09:46' overrides: 16961394!
setUp


	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := one / two.
	oneFifth := one / five.
	twoFifth := two / five.
	twoTwentyfifth := two / (Entero with: 25).
	fiveHalfs := five / two.
	! !

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
* aMultiplier

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
+ anAdder

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 22:21:28'!
- aSubtrahend

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:49'!
/ aDivisor

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 22:48'!
invalidNumberType

	self error: self class invalidNumberTypeErrorDescription! !
!Numero methodsFor: 'arithmetic operations' stamp: 'NR 9/23/2018 23:37:13'!
negated
	
	^self * (Entero with: -1)! !
!Numero methodsFor: 'testing' stamp: 'NR 9/23/2018 23:36:49'!
isNegative

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isOne

	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:49'!
isZero

	self subclassResponsibility ! !

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:02'!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero!!!!!!'! !
!Numero class methodsFor: 'error descriptions' stamp: 'NR 4/15/2021 16:42:09'!
invalidNumberTypeErrorDescription
	
	^ 'Tipo de número inválido!!!!!!'! !

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'arithmetic operations' stamp: 'LP 4/19/2023 23:47:02' overrides: 50626929!
* aMultiplier 
	^aMultiplier  multiplyToAnInteger: self. 
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LP 4/19/2023 23:51:04' overrides: 50626934!
+ anAdder 
	^anAdder sumToAnInteger: self.
	
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'JB 4/20/2023 09:41:36' overrides: 50626938!
- aSubtrahend 
	
	^aSubtrahend  subtractToAnInteger: self.
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'JB 4/20/2023 09:59:43' overrides: 50626943!
/ aDivisor 
	^aDivisor divideTheInteger: self	
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:55'!
// aDivisor 
	
	^self class with: value // aDivisor integerValue! !
!Entero methodsFor: 'arithmetic operations' stamp: 'LP 4/19/2023 20:35:20'!
fibonacci

	^self subclassResponsibility 
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 21:00'!
greatestCommonDivisorWith: anEntero 
	
	^self class with: (value gcd: anEntero integerValue)! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 21:01' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ value = anObject integerValue ]! !
!Entero methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:17' overrides: 16901788!
hash

	^value hash! !
!Entero methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 20:09'!
initalizeWith: aValue 
	
	value := aValue! !
!Entero methodsFor: 'value' stamp: 'HernanWilkinson 5/7/2016 21:02'!
integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!Entero methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:53:19' overrides: 16902975!
printOn: aStream

	aStream print: value ! !
!Entero methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 10:00:16'!
divideTheFraction: aFractionToDivide
			

	^( aFractionToDivide  numerator ) / (aFractionToDivide  denominator  * self)
! !
!Entero methodsFor: 'auxiliar' stamp: 'jb 4/16/2023 20:42:48'!
divideTheInteger: anIntegerToDivide
		^Fraccion with:  anIntegerToDivide over: self. 	

! !
!Entero methodsFor: 'auxiliar' stamp: 'LP 4/20/2023 00:18:46'!
multiplyToAFraction: aFractionMultiplier

		^Fraccion  with:  (aFractionMultiplier numerator * self ) over:  aFractionMultiplier  denominator .
		

! !
!Entero methodsFor: 'auxiliar' stamp: 'LP 4/20/2023 00:19:20'!
multiplyToAnInteger: anIntegerMultiplier 
	^self class with: anIntegerMultiplier integerValue	 * value 
! !
!Entero methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:45:57'!
subtractToAFraction: aFractionToSubstract 
		^Fraccion  with: aFractionToSubstract   numerator - (aFractionToSubstract   denominator *self )   over: aFractionToSubstract   denominator . 
	! !
!Entero methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:41:58'!
subtractToAnInteger: anIntegerSubtrahend 
		
	^ self class with: anIntegerSubtrahend integerValue- value.! !
!Entero methodsFor: 'auxiliar' stamp: 'LP 4/19/2023 23:58:18'!
sumToAFraction: aFractionAdder
	
	^aFractionAdder sumToAnInteger: self.

! !
!Entero methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:39:00'!
sumToAnInteger: anIntegerAdder

	^self class with: anIntegerAdder integerValue + value
! !
!Entero methodsFor: 'testing' stamp: 'LP 4/19/2023 09:59:32' overrides: 50626957!
isNegative
	
	^false! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:14' overrides: 50626961!
isOne
	
	^value = 1! !
!Entero methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 20:12' overrides: 50626965!
isZero
	
	^value = 0! !
!Entero methodsFor: 'testing' stamp: 'LP 4/19/2023 21:34:41'!
makeFraccionWith:aDividend
 	^self subclassResponsibility ! !

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Entero class
	instanceVariableNames: ''!

!classDefinition: 'Entero class' category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Entero class
	instanceVariableNames: ''!
!Entero class methodsFor: 'instance creation' stamp: 'NR 4/15/2021 16:42:24'!
negativeFibonacciErrorDescription
	^ ' Fibonacci no está definido aquí para Enteros Negativos!!!!!!'! !
!Entero class methodsFor: 'instance creation' stamp: 'JB 4/20/2023 10:41:45'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	"^aValue adaptToEntero"
	(aValue =1) ifTrue:[^Uno new].
	(aValue  = 0) ifTrue: [^Cero new].
	(aValue <0) ifTrue: [^(EnteroNegativo new) initalizeWith:aValue ].
	
	^EnteroPositvo new initalizeWith: aValue 
	 
	
	! !

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Cero methodsFor: 'as yet unclassified' stamp: 'LP 4/19/2023 22:25:23' overrides: 50627028!
fibonacci
	^Uno new! !
!Cero methodsFor: 'as yet unclassified' stamp: 'JB 4/20/2023 10:05:21' overrides: 16920235!
initialize
	value:=0! !
!Cero methodsFor: 'as yet unclassified' stamp: 'LP 4/19/2023 21:34:41' overrides: 50627125!
makeFraccionWith:aDividend
	^self error: self class canNotDivideByZeroErrorDescription ! !

!classDefinition: #EnteroNegativo category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroNegativo category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!EnteroNegativo methodsFor: 'as yet unclassified' stamp: 'LP 4/19/2023 20:32:28' overrides: 50627028!
fibonacci
	^self error: Entero negativeFibonacciErrorDescription! !
!EnteroNegativo methodsFor: 'as yet unclassified' stamp: 'LP 4/19/2023 21:34:41' overrides: 50627125!
makeFraccionWith: aDividend
	
	^aDividend negated / self negated! !

!classDefinition: #EnteroPositvo category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Entero subclass: #EnteroPositvo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroPositvo category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Entero subclass: #EnteroPositvo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!EnteroPositvo methodsFor: 'as yet unclassified' stamp: 'LP 4/19/2023 20:33:31' overrides: 50627028!
fibonacci

	| one two |
	one := Entero with: 1.
	two := Entero with: 2.
	^(self - one) fibonacci + (self - two) fibonacci! !
!EnteroPositvo methodsFor: 'as yet unclassified' stamp: 'LP 4/19/2023 21:48:39'!
getResultOfDividing:aNumerator

	^Fraccion new initializeWith: aNumerator over: self ! !
!EnteroPositvo methodsFor: 'as yet unclassified' stamp: 'JB 4/20/2023 09:52:18' overrides: 50627125!
makeFraccionWith: aDividend
	
	| greatestCommonDivisor numerator denominator |

	greatestCommonDivisor := aDividend greatestCommonDivisorWith: self. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := self // greatestCommonDivisor.
	
	^denominator getResultOfDividing: numerator.
	! !

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Uno methodsFor: 'as yet unclassified' stamp: 'LP 4/19/2023 20:42:39' overrides: 50627028!
fibonacci
	^self! !
!Uno methodsFor: 'as yet unclassified' stamp: 'LP 4/19/2023 21:49:18'!
getResultOfDividing: aNumerator

 	^aNumerator ! !
!Uno methodsFor: 'as yet unclassified' stamp: 'JB 4/20/2023 10:04:55' overrides: 16920235!
initialize
	value  := 1! !
!Uno methodsFor: 'as yet unclassified' stamp: 'LP 4/19/2023 21:34:41' overrides: 50627125!
makeFraccionWith: aDividend
	 ^aDividend! !

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fraccion category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LP 4/19/2023 23:53:55' overrides: 50626929!
* aMultiplier 
	^aMultiplier multiplyToAFraction: self. 
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'LP 4/19/2023 23:54:39' overrides: 50626934!
+ anAdder 
	^ anAdder sumToAFraction: self. 
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'JB 4/20/2023 09:46:19' overrides: 50626938!
- aSubtrahend 
	^aSubtrahend subtractToAFraction:self .

! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'jb 4/16/2023 20:42:55' overrides: 50626943!
/ aDivisor
	^aDivisor divideTheFraction: self
! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:42' overrides: 16901772!
= anObject

	^(anObject isKindOf: self class) and: [ (numerator * anObject denominator) = (denominator * anObject numerator) ]! !
!Fraccion methodsFor: 'comparing' stamp: 'HernanWilkinson 5/7/2016 20:50' overrides: 16901788!
hash

	^(numerator hash / denominator hash) hash! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
denominator

	^ denominator! !
!Fraccion methodsFor: 'accessing' stamp: 'HernanWilkinson 5/7/2016 21:56'!
numerator

	^ numerator! !
!Fraccion methodsFor: 'initialization' stamp: 'HernanWilkinson 5/7/2016 22:54'!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	numerator := aNumerator.
	denominator := aDenominator ! !
!Fraccion methodsFor: 'testing' stamp: 'NR 9/23/2018 23:41:38' overrides: 50626957!
isNegative
	
	^numerator < 0! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' overrides: 50626961!
isOne
	
	^false! !
!Fraccion methodsFor: 'testing' stamp: 'HernanWilkinson 5/7/2016 22:51' overrides: 50626965!
isZero
	
	^false! !
!Fraccion methodsFor: 'printing' stamp: 'HAW 9/24/2018 08:54:46' overrides: 16902975!
printOn: aStream

	aStream 
		print: numerator;
		nextPut: $/;
		print: denominator ! !
!Fraccion methodsFor: 'auxiliar' stamp: 'jb 4/16/2023 20:43:02'!
divideTheFraction: aFractionToDivide
	^(aFractionToDivide  numerator *  denominator) / ( aFractionToDivide  denominator *  numerator)
! !
!Fraccion methodsFor: 'auxiliar' stamp: 'jb 4/16/2023 20:35:42'!
divideTheInteger: anIntegerToDivide
	^Fraccion  with: ( denominator * anIntegerToDivide )  over: numerator .! !
!Fraccion methodsFor: 'auxiliar' stamp: 'LP 4/20/2023 00:22:04'!
multiplyToAFraction:  aFractionMultiplier 
	
	^( aFractionMultiplier numerator * numerator) / ( aFractionMultiplier denominator * denominator )
	! !
!Fraccion methodsFor: 'auxiliar' stamp: 'LP 4/19/2023 23:54:11'!
multiplyToAnInteger:  anIntegerMultiplier 
	^ Fraccion  with: anIntegerMultiplier  * numerator  over: denominator ! !
!Fraccion methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:47:43'!
subtractToAFraction: aFractionSubtrahend 
	

	| newNumerator newDenominator |
	
	
	newNumerator :=  (denominator * aFractionSubtrahend numerator) - (numerator * aFractionSubtrahend denominator).
	newDenominator := denominator * aFractionSubtrahend denominator.
	
	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'auxiliar' stamp: 'JB 4/20/2023 09:46:59'!
subtractToAnInteger: anIntegerSustrahend

			
		^Fraccion  with: (   (self denominator  * anIntegerSustrahend  ) -  self numerator )  over: (self denominator) .
	 
	! !
!Fraccion methodsFor: 'auxiliar' stamp: 'LP 4/20/2023 00:27:53'!
sumToAFraction: anAdder 
	
	
	| newNumerator newDenominator |
	
	
	
	newNumerator := (anAdder numerator * denominator ) + (numerator * anAdder denominator).
	newDenominator :=  anAdder denominator * denominator .
	
	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'auxiliar' stamp: 'LP 4/20/2023 00:23:21'!
sumToAnInteger: anIntegerAdder 

			^Fraccion  with: ( (  anIntegerAdder  *  denominator ) + numerator  )  over: ( denominator) .

! !

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Fraccion class
	instanceVariableNames: ''!

!classDefinition: 'Fraccion class' category: 'Numero-Exercise' stamp: 'JB 4/24/2023 10:53:45'!
Fraccion class
	instanceVariableNames: ''!
!Fraccion class methodsFor: 'intance creation' stamp: 'LP 4/19/2023 21:51:15'!
with: aDividend over: aDivisor

	^aDivisor makeFraccionWith: aDividend

	! !

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'JB 4/24/2023 10:53:45'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CantSuspend category: 'CodigoRepetido-Ejercicio' stamp: 'JB 4/24/2023 10:53:45'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'JB 4/24/2023 10:53:45'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #NotFound category: 'CodigoRepetido-Ejercicio' stamp: 'JB 4/24/2023 10:53:45'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'JB 4/24/2023 10:53:45'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'JB 4/24/2023 10:53:46'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:19'!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:13'!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HernanWilkinson 5/9/2012 18:12'!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'HAW 8/28/2017 08:57:25'!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:25'!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 4/3/2019 10:50:28'!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/17/2020 06:03:47'!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'NR 9/19/2018 17:57:11'!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'JB 4/24/2023 10:53:46'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBook category: 'CodigoRepetido-Ejercicio' stamp: 'JB 4/24/2023 10:53:46'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26'!
includesCustomerNamed: aName

	^(active includes: aName) or: [ suspended includes: aName ]! !
!CustomerBook methodsFor: 'testing' stamp: 'NR 4/3/2019 10:14:26'!
isEmpty
	
	^active isEmpty and: [ suspended isEmpty ]! !
!CustomerBook methodsFor: 'initialization' stamp: 'NR 9/17/2020 07:23:04' overrides: 16920235!
initialize

	active := OrderedCollection new.
	suspended:= OrderedCollection new.! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	((active includes: aName) or: [suspended includes: aName]) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
numberOfActiveCustomers
	
	^active size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
numberOfCustomers
	
	^active size + suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 9/19/2018 17:36:09'!
numberOfSuspendedCustomers
	
	^suspended size! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
removeCustomerNamed: aName 
 
	1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:52'!
signalCustomerAlreadyExists 

	self error: self class customerAlreadyExistsErrorMessage! !
!CustomerBook methodsFor: 'customer management' stamp: 'HernanWilkinson 7/6/2011 17:51'!
signalCustomerNameCannotBeEmpty 

	self error: self class customerCanNotBeEmptyErrorMessage ! !
!CustomerBook methodsFor: 'customer management' stamp: 'NR 4/3/2019 10:14:26'!
suspendCustomerNamed: aName 
	
	(active includes: aName) ifFalse: [^CantSuspend signal].
	
	active remove: aName.
	
	suspended add: aName
! !

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'JB 4/24/2023 10:53:46'!
CustomerBook class
	instanceVariableNames: ''!

!classDefinition: 'CustomerBook class' category: 'CodigoRepetido-Ejercicio' stamp: 'JB 4/24/2023 10:53:46'!
CustomerBook class
	instanceVariableNames: ''!
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/11/2022 07:18:12'!
customerAlreadyExistsErrorMessage

	^'Customer already exists!!!!!!'! !
!CustomerBook class methodsFor: 'error messages' stamp: 'NR 4/11/2022 07:18:16'!
customerCanNotBeEmptyErrorMessage

	^'Customer name cannot be empty!!!!!!'! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 11:02:30' prior: 50626481!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [Error signal. ^self error: self class  prefixIsEmptyErrorDescription ].
	((aPrefixToCheck  findString: ' ' startingAt: 1)  = 0 )ifFalse:  [ Error signal. ^self error: self class prefixHasWhiteSpaceErrorDescription ].
	! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 11:03:03' prior: 50626439!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[:anError| ^anError ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [
		^self error: self class 	prefixIsEmptyErrorDescription 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:03:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:03:06'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:03:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:03:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:03:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:03:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:03:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:03:06'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:03:06'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 11:03:34' prior: 50626490!
test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact	
	self
		should: [ finder filter:stackWithManyElement byPrefix:'abc def' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix  prefixHasWhiteSpaceErrorDescription .
				self assert: (self thisStack:stackWithManyElement  isEqualTo:stackWithManyElementCopy ).]
	! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:03:37'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:03:37'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:03:37'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:03:37'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:03:37'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:03:37'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:03:37'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:03:37'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:03:44'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 11:16:51' prior: 50627755!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[:anError| ^anError ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError|
		^anError
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !

s := OOStack  new. 
pf := SentenceFinderByPrefix  new. !

s := OOStack  new. 
pf := SentenceFinderByPrefix  new. !

s := OOStack  new. 
pf := SentenceFinderByPrefix  new. !

s := OOStack  new. 
pf := SentenceFinderByPrefix  new. !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:17:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:17:33'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:17:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:17:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:17:33'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:17:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:17:33'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:17:33'!
FAILURE!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 11:17:49' prior: 50623534!
test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact
	
	self
		should: [ finder filter:stackError byPrefix:'algo' ]
			raise: Error - MessageNotUnderstood 
			withExceptionDo: [ :anError |
				self assert: anError messageText = SentenceFinderByPrefix elementIsNotString.
				self assert: (self thisStack:stackError isEqualTo:stackErrorCopy).]
	! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:17:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:17:54'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:17:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:17:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:17:54'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:17:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:17:54'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:17:54'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 11:19:25' prior: 50627883!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[:anError| ^anError ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError|
		^anError messageText 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:19:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:19:32'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:19:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:19:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:19:32'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:19:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:19:32'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:19:32'!
FAILURE!
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 11:20:52' prior: 50628005!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self  class  elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: Error
	do: [:anError|
		^anError messageText 
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:20:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:20:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:20:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:20:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:20:55'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:20:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:20:55'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:20:55'!
FAILURE!

Object subclass: #PrefixEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #PrefixEmpty category: 'Stack-Exercise' stamp: 'JB 4/24/2023 11:22:06'!
Object subclass: #PrefixEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #PrefixWithWhiteSpaces
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #PrefixWithWhiteSpaces category: 'Stack-Exercise' stamp: 'JB 4/24/2023 11:22:14'!
Object subclass: #PrefixWithWhiteSpaces
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 11:23:49' prior: 50627742!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^PrefixEmpty  signal ].
	((aPrefixToCheck  findString: ' ' startingAt: 1)  = 0 )ifFalse:  [ Error signal. ^self error: self class prefixHasWhiteSpaceErrorDescription ].
	! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 11:24:25' prior: 50628063!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self  class  elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: PrefixEmpty 
	do: [:anError|
		^self error: self class  prefixIsEmptyErrorDescription .
		].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:24:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:24:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:24:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:24:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:24:31'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:24:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:24:31'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:24:31'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 11:26:13' prior: 50628156!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self  class  elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
	on: PrefixEmpty 
	do: [^self error: self class  prefixIsEmptyErrorDescription .
		] 
	on: PrefixWithWhiteSpaces 
	
	 do:[^self  error: self  class  prefixHasWhiteSpaceErrorDescription ].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:26:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:26:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:26:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:26:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:26:18'!
FAILURE!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:26:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:26:18'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:26:18'!
ERROR!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 11:26:45' prior: 50628145!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^PrefixEmpty  signal ].
	((aPrefixToCheck  findString: ' ' startingAt: 1)  = 0 )ifFalse:  [ ^PrefixWithWhiteSpaces ].
	! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 11:26:47' prior: 50628279!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^PrefixEmpty  signal ].
	((aPrefixToCheck  findString: ' ' startingAt: 1)  = 0 )ifFalse:  [ ^PrefixWithWhiteSpaces  signal].
	! !

Error subclass: #PrefixEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #PrefixEmpty category: 'Stack-Exercise' stamp: 'JB 4/24/2023 11:26:54'!
Error subclass: #PrefixEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Error subclass: #PrefixWithWhiteSpaces
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #PrefixWithWhiteSpaces category: 'Stack-Exercise' stamp: 'JB 4/24/2023 11:27:04'!
Error subclass: #PrefixWithWhiteSpaces
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:27:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:27:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:27:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:27:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:27:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:27:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:27:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:27:12'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 11:28:56' prior: 50628216!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self  class  elementIsNotString ].
		
	[self  checkIfValidPrefix: aPrefix]
		on: PrefixEmpty 
		do: [^self error: self class  prefixIsEmptyErrorDescription .
		] 
		on: PrefixWithWhiteSpaces 
		 do:[^self  error: self  class  prefixHasWhiteSpaceErrorDescription ].	
		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:29:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:29:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:29:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:29:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:29:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:29:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:29:00'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:29:00'!
PASSED!
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 11:29:40' prior: 50623628!
test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact

	
	self assertIfFilteringWith:'jorge' to:stackWithManyElement returns: emptyColection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .! !
!SentenceFinderByPrefixTest methodsFor: 'setUp' stamp: 'JB 4/24/2023 11:30:45' prior: 50624000!
setUpColections
	
	emptyColection := OrderedCollection new.

	stringsWithabcdef := (OrderedCollection new) add:'abcdef'.
		
	multiElementCollection := OrderedCollection new.
	multiElementCollection add:'abcdef'.
	multiElementCollection add:'abcdd'.
	multiElementCollection add:'abcde'.
	multiElementCollection add:'abcd'.
	multiElementCollection add:'abc'.
	
	
	
	"
	pairCollection := OrderedCollection new.
	pairCollection add:'abcdef'.
	pairCollection add:'abcde'.
"! !

!classRemoval: #Fraccion stamp: 'JB 4/24/2023 11:30:56'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'JB 4/24/2023 11:30:57'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroPositvo stamp: 'JB 4/24/2023 11:30:57'!
Entero subclass: #EnteroPositvo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroNegativo stamp: 'JB 4/24/2023 11:30:58'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Cero stamp: 'JB 4/24/2023 11:30:58'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'JB 4/24/2023 11:30:59'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'JB 4/24/2023 11:30:59'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'JB 4/24/2023 11:31:00'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #XXX stamp: 'JB 4/24/2023 11:31:04'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CollectionExercise'!

!classRemoval: #CustomerBook stamp: 'JB 4/24/2023 11:31:10'!
Object subclass: #CustomerBook
	instanceVariableNames: 'suspended active'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CustomerBookTest stamp: 'JB 4/24/2023 11:31:10'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #NotFound stamp: 'JB 4/24/2023 11:31:11'!
Error subclass: #NotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classRemoval: #CantSuspend stamp: 'JB 4/24/2023 11:31:11'!
Error subclass: #CantSuspend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack finder stackEmpty stackError stackErrorCopy stackWithOneElement stackWithManyElement stackWithOneElementCopy stackWithManyElementCopy emptyColection stringsWithabcdef multiElementCollection
	pairCollection
	'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'JB 4/24/2023 11:31:25'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack finder stackEmpty stackError stackErrorCopy stackWithOneElement stackWithManyElement stackWithOneElementCopy stackWithManyElementCopy emptyColection stringsWithabcdef multiElementCollection pairCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefixTest methodsFor: 'setUp' stamp: 'JB 4/24/2023 11:31:35' prior: 50628438!
setUpColections
	
	emptyColection := OrderedCollection new.

	stringsWithabcdef := (OrderedCollection new) add:'abcdef'.
		
	multiElementCollection := OrderedCollection new.
	multiElementCollection add:'abcdef'.
	multiElementCollection add:'abcdd'.
	multiElementCollection add:'abcde'.
	multiElementCollection add:'abcd'.
	multiElementCollection add:'abc'.
	
	
	
	
	pairCollection := OrderedCollection new.
	pairCollection add:'abcdef'.
	pairCollection add:'abcde'.
! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 11:31:56' prior: 50623663!
test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact

	self assertIfFilteringWith:'abcde'  to:stackWithManyElement returns: pairCollection andCheckIfTheStackIsTheSameWIth:stackWithManyElementCopy .! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:31:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:31:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:31:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:31:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:31:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:31:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:31:59'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:31:59'!
PASSED!

TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack finder stackEmpty stackError stackErrorCopy stackWithOneElement stackWithManyElement stackWithOneElementCopy stackWithManyElementCopy emptyColection stringsWithabcdef multiElementCollection pairCollection singleCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefixTest category: 'Stack-Exercise' stamp: 'JB 4/24/2023 11:36:03'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack finder stackEmpty stackError stackErrorCopy stackWithOneElement stackWithManyElement stackWithOneElementCopy stackWithManyElementCopy emptyColection stringsWithabcdef multiElementCollection pairCollection singleCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefixTest methodsFor: 'setUp' stamp: 'JB 4/24/2023 11:36:27' prior: 50628565!
setUpColections
	
	emptyColection := OrderedCollection new.

	stringsWithabcdef := (OrderedCollection new) add:'abcdef'.
		
	multiElementCollection := OrderedCollection new.
	multiElementCollection add:'abcdef'.
	multiElementCollection add:'abcdd'.
	multiElementCollection add:'abcde'.
	multiElementCollection add:'abcd'.
	multiElementCollection add:'abc'.
	
	
	
	
	pairCollection := OrderedCollection new.
	pairCollection add:'abcdef'.
	pairCollection add:'abcde'.
	
	
	
	
	singleCollection := OrderedCollection new.
	singleCollection add:'Jorge'.
! !
!SentenceFinderByPrefixTest methodsFor: 'tests' stamp: 'JB 4/24/2023 11:36:47' prior: 50623564!
test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact


	self assertIfFilteringWith:'Jor' to:stackWithOneElement returns: singleCollection andCheckIfTheStackIsTheSameWIth:stackWithOneElementCopy .! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:36:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:36:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:36:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:36:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:36:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:36:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:36:49'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:36:49'!
PASSED!

OONode subclass: #OOLinkNode
	instanceVariableNames: 'value next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Object subclass: #OONode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OONode category: 'Stack-Exercise' stamp: 'JB 4/24/2023 11:40:24'!
Object subclass: #OONode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OONode subclass: #OOLinkNode
	instanceVariableNames: 'value next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOLinkNode category: 'Stack-Exercise' stamp: 'JB 4/24/2023 11:40:29'!
OONode subclass: #OOLinkNode
	instanceVariableNames: 'value next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOLinkNode methodsFor: 'accesing' stamp: 'JB 4/24/2023 11:40:38' overrides: 16902254!
value 
	^value ! !
!OOLinkNode methodsFor: 'accesing' stamp: 'JB 4/24/2023 11:40:44'!
next
	^next ! !
!OOStack methodsFor: 'initialization' stamp: 'JB 4/24/2023 11:42:57'!
canGetValueLinkNode: aLinkNode
	^aLinkNode  value! !
!OOStack methodsFor: 'initialization' stamp: 'JB 4/24/2023 11:43:08'!
canGetNextLinkNode: aLinkNode
	^aLinkNode  next! !
!OOStack methodsFor: 'initialization' stamp: 'JB 4/24/2023 11:44:04'!
canNotGetNextEmptyNode 
	^self error: self class  stackEmptyErrorDescription ! !

!methodRemoval: OOStack #canNotGetNextEmptyNode stamp: 'JB 4/24/2023 11:44:19'!
canNotGetNextEmptyNode 
	^self error: self class  stackEmptyErrorDescription !
!OOStack methodsFor: 'initialization' stamp: 'JB 4/24/2023 11:44:32'!
cannotAccesEmptyElement
	^self error: self class stackEmptyErrorDescription ! !
!OOStack methodsFor: 'accesing' stamp: 'JB 4/24/2023 11:45:55' prior: 50623166!
top
	
	"^top getValueFailIfAbsent: self"
	^top canGetValue: self! !
!OOAbsentNode methodsFor: 'accesing' stamp: 'JB 4/24/2023 11:46:46'!
canGetValue: aStack
	^ aStack cannotAccesEmptyElement ! !
!OOAbsentNode methodsFor: 'accesing' stamp: 'JB 4/24/2023 11:46:56'!
canGetNext: aStack
	^ aStack cannotAccesEmptyElement ! !
!OOLinkNode methodsFor: 'accesing' stamp: 'JB 4/24/2023 11:47:59'!
canGetValue:aStack
	^aStack  canGetValueLinkNode: self ! !
!OOLinkNode methodsFor: 'accesing' stamp: 'JB 4/24/2023 11:48:12'!
canGetNext:aStack
	^aStack  canGetNextLinkNode: self ! !
!OOStack methodsFor: 'private' stamp: 'JB 4/24/2023 11:48:56' prior: 50623170!
changeTop
	|nextTop|
	
	nextTop := top canGetNext: self.
	top := nextTop.
	lenght := lenght-1.
! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/24/2023 11:51:03'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/24/2023 11:51:03'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/24/2023 11:51:03'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/24/2023 11:51:03'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/24/2023 11:51:03'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/24/2023 11:51:03'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/24/2023 11:51:03'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 11:51:03'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/24/2023 11:51:03'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 11:51:03'!
PASSED!

!methodRemoval: OOStack #accesingEmptyElement stamp: 'JB 4/24/2023 11:51:11'!
accesingEmptyElement
	^self error: self class stackEmptyErrorDescription !
!OOStack methodsFor: 'initialization' stamp: 'JB 4/24/2023 11:51:29'!
getValueLinkNode: aLinkNode
	^aLinkNode  value! !
!OOStack methodsFor: 'initialization' stamp: 'JB 4/24/2023 11:51:41'!
getNextLinkNode: aLinkNode
	^aLinkNode  next! !
!OOLinkNode methodsFor: 'accesing' stamp: 'JB 4/24/2023 11:51:58' prior: 50628811!
canGetNext:aStack
	^aStack  getNextLinkNode: self ! !
!OOLinkNode methodsFor: 'accesing' stamp: 'JB 4/24/2023 11:52:08' prior: 50628807!
canGetValue:aStack
	^aStack getValueLinkNode: self ! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/24/2023 11:52:13'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/24/2023 11:52:13'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/24/2023 11:52:13'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/24/2023 11:52:13'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/24/2023 11:52:13'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/24/2023 11:52:13'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/24/2023 11:52:13'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 11:52:13'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/24/2023 11:52:13'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 11:52:13'!
PASSED!

!methodRemoval: OOStack #canGetNextLinkNode: stamp: 'JB 4/24/2023 11:52:22'!
canGetNextLinkNode: aLinkNode
	^aLinkNode  next!

!methodRemoval: OOStack #canGetValueLinkNode: stamp: 'JB 4/24/2023 11:52:24'!
canGetValueLinkNode: aLinkNode
	^aLinkNode  value!
!OOStack methodsFor: 'accesing' stamp: 'JB 4/24/2023 11:52:54' prior: 50628794!
top
	
	^top canGetValue: self! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/24/2023 11:53:03'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/24/2023 11:53:03'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/24/2023 11:53:03'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/24/2023 11:53:03'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/24/2023 11:53:03'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/24/2023 11:53:03'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/24/2023 11:53:03'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 11:53:03'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/24/2023 11:53:03'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 11:53:03'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 11:53:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:53:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:53:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:53:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:53:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:53:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 11:53:07'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 11:53:07'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 12:13:49'!
doesThisPrefixHaveWhiteSpace: aPrefixToCheck

	^ (aPrefixToCheck  findString: ' ' startingAt: 1)  = 0! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 12:13:49' prior: 50628289!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^PrefixEmpty  signal ].
	((self doesThisPrefixHaveWhiteSpace: aPrefixToCheck) )ifFalse:  [ ^PrefixWithWhiteSpaces  signal].
	! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 12:14:40' prior: 50628997!
doesThisPrefixHaveWhiteSpace: aPrefixToCheck

	^ ((aPrefixToCheck  findString: ' ' startingAt: 1)  =  0) not! !
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 12:15:08' prior: 50629004!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^PrefixEmpty  signal ].
	((self doesThisPrefixHaveWhiteSpace: aPrefixToCheck) )ifTrue:  [ ^PrefixWithWhiteSpaces  signal].
	! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 12:15:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:15:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:15:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:15:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 12:15:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:15:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:15:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 12:15:12'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 12:15:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:15:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:15:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:15:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 12:15:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:15:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:15:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 12:15:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 12:27:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:27:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:27:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:27:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 12:27:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:27:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 12:27:48'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 12:27:48'!
PASSED!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/24/2023 12:27:57'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/24/2023 12:27:57'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/24/2023 12:27:57'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/24/2023 12:27:57'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/24/2023 12:27:57'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/24/2023 12:27:57'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/24/2023 12:27:57'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 12:27:57'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/24/2023 12:27:57'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 12:27:57'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 13:50:13' prior: 50629021!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^"PrefixEmpty  signal" self error: self class prefixIsEmptyErrorDescription ].
	((self doesThisPrefixHaveWhiteSpace: aPrefixToCheck) )ifTrue:  [ ^self error: self class prefixHasWhiteSpaceErrorDescription "PrefixWithWhiteSpaces  signal"].
	! !
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 13:50:40' prior: 50628364!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self  class  elementIsNotString ].
		"
	[self  checkIfValidPrefix: aPrefix]
		on: PrefixEmpty 
		do: [^self error: self class  prefixIsEmptyErrorDescription .
		] 
		on: PrefixWithWhiteSpaces 
		 do:[^self  error: self  class  prefixHasWhiteSpaceErrorDescription ].	
"
	self  checkIfValidPrefix: aPrefix.		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 13:50:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:50:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:50:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:50:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 13:50:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:50:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:50:46'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 13:50:46'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'filtering' stamp: 'JB 4/24/2023 13:53:13' prior: 50629203!
filter:aStack byPrefix:aPrefix

	|stringsWithSamePrefix|
	stringsWithSamePrefix := OrderedCollection new.
	
	[self checkIfAStackOfStrings: aStack]
		on: Error
		do:[^self error: self  class  elementIsNotString ].

	self  checkIfValidPrefix: aPrefix.		
	self collectAllStringsIn: aStack withPrefix:aPrefix into: stringsWithSamePrefix.
	^stringsWithSamePrefix
! !

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 13:53:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:53:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:53:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:53:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 13:53:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:53:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:53:16'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 13:53:16'!
PASSED!

!classRemoval: #PrefixEmpty stamp: 'JB 4/24/2023 13:53:30'!
Error subclass: #PrefixEmpty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #PrefixWithWhiteSpaces stamp: 'JB 4/24/2023 13:53:34'!
Error subclass: #PrefixWithWhiteSpaces
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 13:53:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:53:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:53:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:53:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 13:53:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:53:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:53:36'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 13:53:36'!
PASSED!
!SentenceFinderByPrefix methodsFor: 'private' stamp: 'JB 4/24/2023 13:54:31' prior: 50629190!
checkIfValidPrefix: aPrefixToCheck
	(aPrefixToCheck  isEmpty ) ifTrue:  [^ self error: self class prefixIsEmptyErrorDescription ].
	((self doesThisPrefixHaveWhiteSpace: aPrefixToCheck) )ifTrue:  [ ^self error: self class prefixHasWhiteSpaceErrorDescription ].
	! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/24/2023 13:54:39'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/24/2023 13:54:39'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/24/2023 13:54:39'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/24/2023 13:54:39'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/24/2023 13:54:39'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/24/2023 13:54:39'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/24/2023 13:54:39'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 13:54:39'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/24/2023 13:54:39'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 13:54:39'!
PASSED!

!methodRemoval: OOAbsentNode #getNextNodeFailIfAbsent: stamp: 'JB 4/24/2023 13:55:33'!
getNextNodeFailIfAbsent: stack
	^ stack accesingEmptyElement!

!methodRemoval: OOAbsentNode #getValueFailIfAbsent: stamp: 'JB 4/24/2023 13:55:36'!
getValueFailIfAbsent: stack
	^ stack accesingEmptyElement !

!methodRemoval: OOLinkNode #getNextNodeFailIfAbsent: stamp: 'JB 4/24/2023 13:55:39'!
getNextNodeFailIfAbsent: stack
	^next!

!methodRemoval: OOLinkNode #getValueFailIfAbsent: stamp: 'JB 4/24/2023 13:55:44'!
getValueFailIfAbsent: stack
 	^value!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'JB 4/24/2023 13:55:57'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'JB 4/24/2023 13:55:57'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'JB 4/24/2023 13:55:57'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'JB 4/24/2023 13:55:57'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'JB 4/24/2023 13:55:57'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'JB 4/24/2023 13:55:57'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'JB 4/24/2023 13:55:57'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 13:55:57'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'JB 4/24/2023 13:55:57'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'JB 4/24/2023 13:55:57'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test01filteringAnEmptyStackReturnsAnEmptyCollectionAndKeepsTheEmptyStack stamp: 'JB 4/24/2023 13:56:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test02filteringAStackWithANonStringElementRaisesAnErrorAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:56:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test03filteringAOneElementStackWithAValidPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:56:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test04filteringAMultiElementStackWithACommonPrefixReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:56:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test05filteringAStackWithAWhiteSpacedStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 13:56:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test06filteringAMultiElementStackWithANonExistingPrefixReturnsAnEmptyCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:56:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test07filteringAMultiElementStackWithACommonPrefixOfAPairOfElementsReturnsAValidCollectionAndKeepsTheStackIntact stamp: 'JB 4/24/2023 13:56:21'!
PASSED!

!testRun: #SentenceFinderByPrefixTest #test08filteringWithAEmptyStringShouldRaiseAnErrorAndKeepTheStackIntact stamp: 'JB 4/24/2023 13:56:21'!
PASSED!

----QUIT----(24 April 2023 13:56:37) CuisUniversity-5706.image priorSource: 9361840!

----STARTUP---- (4 May 2023 09:10:20) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'JB 5/4/2023 09:10:34'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'JB 5/4/2023 09:10:34'!
Object subclass: #OOStack
	instanceVariableNames: 'lenght top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOLinkNode stamp: 'JB 5/4/2023 09:10:35'!
OONode subclass: #OOLinkNode
	instanceVariableNames: 'value next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOAbsentNode stamp: 'JB 5/4/2023 09:10:35'!
OONode subclass: #OOAbsentNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OONode stamp: 'JB 5/4/2023 09:10:36'!
Object subclass: #OONode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'JB 5/4/2023 09:10:36'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack finder stackEmpty stackError stackErrorCopy stackWithOneElement stackWithManyElement stackWithOneElementCopy stackWithManyElementCopy emptyColection stringsWithabcdef multiElementCollection pairCollection singleCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'JB 5/4/2023 09:10:37'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/parciales/Parciales/2022-2c/1erParcial/ISW1-2022-2C-1erParcial.st----!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'JB 5/4/2023 09:12:43'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'JB 5/4/2023 09:12:43'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'JB 5/4/2023 09:12:43'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'JB 5/4/2023 09:12:43'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'JB 5/4/2023 09:12:43'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'JB 5/4/2023 09:12:43'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'JB 5/4/2023 09:12:43'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'JB 5/4/2023 09:12:43'!
PASSED!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/parciales/Parciales/2022-1c/1erParcial/ISW1-2022-1C-Parcial-1.st----!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/parciales/Parciales/2021-1c/1erParcial/ISW1-2021-1C-1erParcial-11Parcial.st----!
!Robot methodsFor: 'initialization' stamp: 'JB 5/4/2023 09:31:36' prior: 50631528!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type := aRobotType.
	life := lifePoints.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.

	weapons := OrderedCollection new.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 09:31:36'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 09:31:36'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:31:46' prior: 50631547!
addWeapon: aWeapon

	
	
	(self totalWeaponWeight + aWeapon weight) > maxWeaponWeight ifTrue: [ self signalMaxWeaponWeightExceeded ].
	
	(self totalSpeedImpact + aWeapon speedImpact) > speed ifTrue: [ self signalSpeedBelowZero ].
	
	weapons add: aWeapon.
	! !
!Robot methodsFor: 'attacking' stamp: 'JB 5/4/2023 09:31:51' prior: 50631537!
attack: aVictim with: aWeapon

	

	(weapons includes: aWeapon) 
		ifTrue: [ aWeapon attack: aVictim by: self ]
		ifFalse: [ self signalCanNotAttackWithWeaponNotBelongingToRobot ]! !
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:31:56' prior: 50631559!
includesWeapon: aWeapon 
	
	
	^weapons includes: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:32:01' prior: 50631565!
includesWeaponOfType: aWeaponType


	^weapons anySatisfy: [ :weapon | weapon type = aWeaponType ]! !
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:32:05' prior: 50631572!
removeWeapon: aWeapon 
	

	weapons remove: aWeapon ! !
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:32:09' prior: 50631578!
totalSpeedImpact

	| total index |

	total := 0 * kilometer / hour.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		index := index + 1.	
	].

	^ total.! !
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:32:13' prior: 50631591!
totalWeaponWeight

	| total index |


	total := 0 * kilogram.
	index := 1.
	
	[index <= weapons size] whileTrue: [ | weapon |
		weapon := (weapons at: index).
		total := total + weapon weight.
		index := index + 1.	
	].

	^ total.	! !
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:32:17' prior: 50631603!
weaponsCount

	
	^ weapons size 	! !
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:38:14' prior: 50631888!
totalSpeedImpact

	| total  |
	total := 0 * kilometer / hour.
	weapons do:[:weapon|
			(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		].


	^ total.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 09:38:16'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 09:38:16'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:39:20' prior: 50631900!
totalWeaponWeight

	| total  |


	total := 0 * kilogram.
	weapons do:[:weapon|
		total:= total + weapon weight.	
		].
	
	

	^ total.	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 09:39:22'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 09:39:22'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:41:30' prior: 50631989!
totalWeaponWeight

	
	^weapons sum: [:weapon| weapon weight] ifEmpty: [0]. 

"	total := 0 * kilogram.
	weapons do:[:weapon|
		total:= total + weapon weight.	
		].
	
	

	^ total.	"! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 09:41:35'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 09:41:38'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 09:41:38'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:41:43' prior: 50632062!
totalWeaponWeight

	
	^weapons sum: [:weapon| weapon weight] ifEmpty: [0]. 
! !
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:46:34' prior: 50631914!
totalSpeedImpact
"
	| total  |
	total := 0 * kilometer / hour.
	weapons do:[:weapon|
			(weapon weight > (10 * kilogram)) ifTrue: [ total := total +  weapon speedImpact ].
		].
"
	^(weapons select:[:weapon| weapon weight > (10 * kilogram)] )sum: [:weapon| 
		weapon speedImpact .
		] ifEmpty: [0].


! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 09:46:36'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 09:46:36'!
PASSED!
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 09:47:29' prior: 50632207!
totalSpeedImpact

	^(weapons select:[:weapon| weapon weight > (10 * kilogram)] )sum: [:weapon| 
		weapon speedImpact .
		] ifEmpty: [0].


! !

Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Claw category: 'ISW1-2021-1C-1erParcial' stamp: 'JB 5/4/2023 11:00:21'!
Weapon subclass: #Claw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Object subclass: #HSBlaster
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'JB 5/4/2023 11:00:52'!
Object subclass: #HSBlaster
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Object subclass: #TankRover
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TankRover category: 'ISW1-2021-1C-1erParcial' stamp: 'JB 5/4/2023 11:00:54'!
Object subclass: #TankRover
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #TankRover stamp: 'JB 5/4/2023 11:01:13'!
Object subclass: #TankRover
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #HSBlaster stamp: 'JB 5/4/2023 11:01:18'!
Object subclass: #HSBlaster
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:01:20'!
PASSED!

Weapon subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TankRover category: 'ISW1-2021-1C-1erParcial' stamp: 'JB 5/4/2023 11:01:27'!
Weapon subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #HSBlaster category: 'ISW1-2021-1C-1erParcial' stamp: 'JB 5/4/2023 11:01:38'!
Weapon subclass: #HSBlaster
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #TankRover stamp: 'JB 5/4/2023 11:01:43'!
Weapon subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:01:46'!
PASSED!

Object subclass: #TurboLaserCannon
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TurboLaserCannon category: 'ISW1-2021-1C-1erParcial' stamp: 'JB 5/4/2023 11:01:58'!
Object subclass: #TurboLaserCannon
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classRemoval: #TurboLaserCannon stamp: 'JB 5/4/2023 11:02:04'!
Object subclass: #TurboLaserCannon
	instanceVariableNames: 'type weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TurboLaserCannon category: 'ISW1-2021-1C-1erParcial' stamp: 'JB 5/4/2023 11:02:11'!
Weapon subclass: #TurboLaserCannon
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Claw methodsFor: 'no messages' stamp: 'JB 5/4/2023 11:03:20' overrides: 50631702!
attack: aVictim by: anAttacker 	
	aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	! !
!Claw methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 11:03:35' prior: 50632541 overrides: 50631702!
attack: aVictim by: anAttacker 	
	usedTimes := usedTimes + 1.
	aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	! !
!HSBlaster methodsFor: 'nil' stamp: 'JB 5/4/2023 11:05:07' overrides: 50631702!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].! !
!TurboLaserCannon methodsFor: 'nil' stamp: 'JB 5/4/2023 11:06:07' overrides: 50631702!
attack: aVictim by: anAttacker 	
	usedTimes := usedTimes + 1.
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:06:55'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:06:55'!
PASSED!
!Weapon class methodsFor: 'instance creation' stamp: 'JB 5/4/2023 11:07:58' prior: 50631753!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ HSBlaster new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'! !
!Weapon methodsFor: 'attacking' stamp: 'JB 5/4/2023 11:09:03' prior: 50631702!
attack: aVictim by: anAttacker 	

	self subclassResponsibility 
	"usedTimes := usedTimes + 1.
	type = #Claw ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	
	].

	type = #HSBlaster ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #TurboLaserCannon) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].
	].

	type = #TurboLaserCannon ifTrue: [
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (Weapon ofType: #HSBlaster) ]
		].
	]."! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:09:06'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:09:06'!
PASSED!
!Weapon methodsFor: 'attacking' stamp: 'JB 5/4/2023 11:09:17' prior: 50632687!
attack: aVictim by: anAttacker 	

	self subclassResponsibility 
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:09:20'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:09:21'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:09:21'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:09:21'!
PASSED!
!Claw methodsFor: 'attacking' stamp: 'JB 5/4/2023 11:14:13' overrides: 16920235!
initialize 
	type := #Claw.
	 weight:= 10 * kilogram.
	 speedImpact:= 5 * kilometer / hour.! !
!HSBlaster methodsFor: 'attacking' stamp: 'JB 5/4/2023 11:15:35' overrides: 16920235!
initialize 
	type:= #HSBlaster.
	weight:= 20 * kilogram.
	 speedImpact:= 10 * kilometer! !
!TurboLaserCannon methodsFor: 'nil' stamp: 'JB 5/4/2023 11:16:37' overrides: 16920235!
initialize
	type:= #TurboLaserCannon.
	weight := 40*kilogram .
	speedImpact := 15*kilometer /hour .! !
!Weapon class methodsFor: 'instance creation' stamp: 'JB 5/4/2023 11:17:09' prior: 50632669!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new 
		].
	aWeaponType = #HSBlaster ifTrue: [ ^ HSBlaster new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:17:21'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:17:21'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:17:21'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:17:21'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:17:21'!
PASSED!

a:= Weapon  ofType:  #Claw!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:19:48'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:19:48'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:19:48'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:19:48'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:19:48'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:19:54'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:20:09'!
ERROR!

a:= Weapon  ofType:  #Claw!
!Weapon class methodsFor: 'instance creation' stamp: 'JB 5/4/2023 11:07:58' prior: 50632884!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new 
		initializeType: aWeaponType weight: 10 * kilogram speedImpact: 5 * kilometer / hour ].
	aWeaponType = #HSBlaster ifTrue: [ ^ HSBlaster new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:31:16'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:31:16'!
PASSED!
!Weapon class methodsFor: 'instance creation' stamp: 'JB 5/4/2023 11:32:35' prior: 50633040!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new initialize
].
	aWeaponType = #HSBlaster ifTrue: [ ^ HSBlaster new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:32:38'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:32:38'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:32:38'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:32:38'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:32:38'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:32:57'!
ERROR!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:34:05'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:34:05'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:34:05'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:34:05'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:34:05'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:34:13'!
ERROR!
!HSBlaster methodsFor: 'initialization' stamp: 'JB 5/4/2023 11:35:33' prior: 50632871 overrides: 16920235!
initialize 
	type:= #HSBlaster.
	weight:= 20 * kilogram.
	 speedImpact:= 10 * kilometer.
	usedTimes := 0.! !
!Claw methodsFor: 'initialization' stamp: 'JB 5/4/2023 11:35:40' prior: 50632865 overrides: 16920235!
initialize 
	type := #Claw.
	 weight:= 10 * kilogram.
	 speedImpact:= 5 * kilometer / hour.
	usedTimes := 0.! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 11:35:46' prior: 50632877 overrides: 16920235!
initialize
	type:= #TurboLaserCannon.
	weight := 40*kilogram .
	speedImpact := 15*kilometer /hour .
	usedTimes := 0.! !
!Weapon class methodsFor: 'instance creation' stamp: 'JB 5/4/2023 11:35:55' prior: 50633124!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new
].
	aWeaponType = #HSBlaster ifTrue: [ ^ HSBlaster new 
		initializeType: aWeaponType weight: 20 * kilogram speedImpact: 10 * kilometer / hour ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:35:57'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:35:57'!
PASSED!
!Weapon class methodsFor: 'instance creation' stamp: 'JB 5/4/2023 11:36:10' prior: 50633300!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new
].
	aWeaponType = #HSBlaster ifTrue: [ ^ HSBlaster new ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new 
		initializeType: aWeaponType weight: 40 * kilogram speedImpact: 15 * kilometer / hour ].

	self error: 'Invalid Weapon Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:36:12'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:36:12'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:36:12'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:36:12'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:36:12'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:36:12'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:36:18'!
ERROR!
!HSBlaster methodsFor: 'initialization' stamp: 'JB 5/4/2023 11:36:51' prior: 50633278 overrides: 16920235!
initialize 
	type:= #HSBlaster.
	weight:= 20 * kilogram.
	 speedImpact:= 10 * kilometer/hour .
	usedTimes := 0.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:36:54'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:36:54'!
PASSED!
!Weapon class methodsFor: 'instance creation' stamp: 'JB 5/4/2023 11:37:06' prior: 50633382!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new
].
	aWeaponType = #HSBlaster ifTrue: [ ^ HSBlaster new ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new ].

	self error: 'Invalid Weapon Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:37:10'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:37:10'!
PASSED!
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'JB 5/4/2023 11:37:46' prior: 50631476!
createClaw

	^ Claw new ! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'JB 5/4/2023 11:37:58' prior: 50631480!
createHSBlaster

	^  HSBlaster  new.! !
!RobotWarsTest methodsFor: 'weapon creation' stamp: 'JB 5/4/2023 11:38:07' prior: 50631484!
createTurboLaserCannon

	^ TurboLaserCannon new ! !
!HSBlaster methodsFor: 'attacking' stamp: 'JB 5/4/2023 11:38:33' prior: 50632569 overrides: 50632794!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (TurboLaserCannon new ) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Weapon ofType: #Claw) ].
		].! !
!HSBlaster methodsFor: 'attacking' stamp: 'JB 5/4/2023 11:38:42' prior: 50633628 overrides: 50632794!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (TurboLaserCannon new ) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
		].! !
!TurboLaserCannon methodsFor: 'attacking' stamp: 'JB 5/4/2023 11:38:52' prior: 50632587 overrides: 50632794!
attack: aVictim by: anAttacker 	
	usedTimes := usedTimes + 1.
	
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (HSBlaster new) ]
		].! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:38:57'!
PASSED!

!methodRemoval: Weapon class #ofType: stamp: 'JB 5/4/2023 11:39:33'!
ofType: aWeaponType

	aWeaponType = #Claw ifTrue: [ ^Claw new
].
	aWeaponType = #HSBlaster ifTrue: [ ^ HSBlaster new ].
	aWeaponType = #TurboLaserCannon ifTrue: [^ TurboLaserCannon new ].

	self error: 'Invalid Weapon Type'!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:39:35'!
PASSED!

!methodRemoval: Weapon #initializeType:weight:speedImpact: stamp: 'JB 5/4/2023 11:40:03'!
initializeType: aWeaponType weight: aWeight speedImpact: aSpeedImpact 
	
	type := aWeaponType.
	weight := aWeight.
	speedImpact := aSpeedImpact.
	usedTimes := 0.!
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 11:41:31' prior: 50631877!
includesWeaponOfType: aWeaponType


	^weapons anySatisfy: [ :weapon | weapon class = aWeaponType ]! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:41:38'!
FAILURE!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:41:38'!
FAILURE!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:41:38'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:41:38'!
FAILURE!
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'JB 5/4/2023 11:41:46' prior: 50631397!
test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: TurboLaserCannon).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'JB 5/4/2023 11:41:51' prior: 50631415!
test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster .
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: 2 equals: attacker weaponsCount.
	self assert: (attacker includesWeapon: attackerWeapon).
	self assert: (attacker includesWeaponOfType: Claw).
	! !
!RobotWarsTest methodsFor: 'weapon use after attacking tests' stamp: 'JB 5/4/2023 11:41:55' prior: 50631450!
test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createTurboLaserCannon .
	attacker addWeapon: attackerWeapon.
	
	5 timesRepeat: [ attacker attack: attacked with: attackerWeapon ].
	
	self assert: 1 equals: attacker weaponsCount.
	self assert: (attacker includesWeaponOfType: HSBlaster)
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:41:56'!
PASSED!

!methodRemoval: Weapon #type stamp: 'JB 5/4/2023 11:42:25'!
type
	
	^type!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:42:27'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:42:27'!
PASSED!
!Claw methodsFor: 'initialization' stamp: 'JB 5/4/2023 11:42:35' prior: 50633285 overrides: 16920235!
initialize 
	 weight:= 10 * kilogram.
	 speedImpact:= 5 * kilometer / hour.
	usedTimes := 0.! !
!HSBlaster methodsFor: 'initialization' stamp: 'JB 5/4/2023 11:42:41' prior: 50633465 overrides: 16920235!
initialize 
	weight:= 20 * kilogram.
	 speedImpact:= 10 * kilometer/hour .
	usedTimes := 0.! !
!TurboLaserCannon methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 11:42:47' prior: 50633293 overrides: 16920235!
initialize
	
	weight := 40*kilogram .
	speedImpact := 15*kilometer /hour .
	usedTimes := 0.! !

Object subclass: #Weapon
	instanceVariableNames: 'weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Weapon category: 'ISW1-2021-1C-1erParcial' stamp: 'JB 5/4/2023 11:42:53'!
Object subclass: #Weapon
	instanceVariableNames: 'weight speedImpact usedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:42:56'!
PASSED!

Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Aluminum3000 category: 'ISW1-2021-1C-1erParcial' stamp: 'JB 5/4/2023 11:43:48'!
Robot subclass: #Aluminum3000
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #TankRover category: 'ISW1-2021-1C-1erParcial' stamp: 'JB 5/4/2023 11:43:56'!
Robot subclass: #TankRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!
!Claw methodsFor: 'attacking' stamp: 'JB 5/4/2023 11:48:06' prior: 50632555 overrides: 50632794!
attack: aVictim by: anAttacker 	
	usedTimes := usedTimes + 1.
	
	aVictim getsAttackedByClaw: self by: anAttacker. 
	" 
	aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (25 * year).
			usedTimes = 2 ifTrue: [ anAttacker removeWeapon: self ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (5 * year).
			anAttacker removeWeapon: self.
		].
	"! !
!TankRover methodsFor: 'nil' stamp: 'JB 5/4/2023 11:52:08'!
 getsAttackedByClaw: aClaw by: anAttacker
 	self  life: self  life - (5 * year).
	anAttacker atackedATankRobberWithClaw: aClaw. 
	
		! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 11:52:58' prior: 50634228!
getsAttackedByClaw: aClaw by: anAttacker
 	self  life: self  life - (5 * year).
	anAttacker removeWeapon: aClaw .
		! !
!Aluminum3000 methodsFor: 'nil' stamp: 'JB 5/4/2023 11:53:57'!
getsAttackedByClaw: aClaw by: anAttacker. 
	

			self life: self  life - (25 * year).
			aClaw usedTimes = 2 ifTrue: [ anAttacker removeWeapon: aClaw ].
! !
!Weapon methodsFor: 'accesing' stamp: 'JB 5/4/2023 11:54:18'!
usedTimes
	^usedTimes ! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:54:25'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:54:25'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:54:25'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:54:25'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:54:25'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:54:34'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:54:34'!
ERROR!
!Robot class methodsFor: 'instance creation' stamp: 'JB 5/4/2023 11:55:31' prior: 50631660!
ofType: aRobotType

	aRobotType = #Aluminum3000 ifTrue: [ ^ Aluminum3000 new 
		initializeType: aRobotType 
		life: 100 * year
		speed: 90 * kilometer / hour
		maxWeaponWeight: 50 * kilogram ].
	aRobotType = #TankRover ifTrue: [ ^ TankRover  new
		initializeType: aRobotType 
		life: 100 * year
		speed: 40 * kilometer / hour
		maxWeaponWeight: 200 * kilogram ].

	self error: 'Invalid Robot Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:55:34'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:55:34'!
PASSED!
!Claw methodsFor: 'attacking' stamp: 'JB 5/4/2023 11:56:03' prior: 50634213 overrides: 50632794!
attack: aVictim by: anAttacker 	
	usedTimes := usedTimes + 1.
	
	aVictim getsAttackedByClaw: self by: anAttacker. 
	! !
!HSBlaster methodsFor: 'attacking' stamp: 'JB 5/4/2023 11:57:06' prior: 50633646 overrides: 50632794!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim getsAttackedWithHSBlaster: self by: anAttacker . 
	"
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (5 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (TurboLaserCannon new ) ].
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (50 * year).
			aVictim life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
		]."! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 11:58:32'!
getsAttackedWithHSBlaster: anHSBlaster by: anAttacker  
	
		
			self life: self  life - (5 * year).
			anHSBlaster 	usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (TurboLaserCannon new ) ].
! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 11:59:39'!
getsAttackedWithHSBlaster: anHSBlaster by: anAttacker

			self life: self life - (50 * year).
			self life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:59:49'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 11:59:49'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 11:59:49'!
ERROR!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 12:00:13' prior: 50634433!
getsAttackedWithHSBlaster: anHSBlaster by: anAttacker  
	
		
			self life: self  life - (5 * year).
			anHSBlaster 	usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: anHSBlaster .
				anAttacker addWeapon: (TurboLaserCannon new ) ].
! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:00:17'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:00:17'!
PASSED!
!TurboLaserCannon methodsFor: 'attacking' stamp: 'JB 5/4/2023 12:01:06' prior: 50633664 overrides: 50632794!
attack: aVictim by: anAttacker 	
	usedTimes := usedTimes + 1.
	aVictim getsAttackedWithATurboLaserCannon:self by: anAttacker. 
	
	"
		aVictim type = #Aluminum3000 ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 10 ifTrue: [ anAttacker removeWeapon: self ]
		].
	
		aVictim type = #TankRover ifTrue: [
			aVictim life: aVictim life - (100 * year).
			usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: self.
				anAttacker addWeapon: (HSBlaster new) ]
		]."! !
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 12:02:07'!
getsAttackedWithATurboLaserCannon:aTurboLaserCannon  by: anAttacker
	self life: self life - (100 * year).
			aTurboLaserCannon  usedTimes  = 10 ifTrue: [ anAttacker removeWeapon: self ]
	! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 12:03:15'!
getsAttackedWithTurboLaserCannon: aTurboLaserCannon by: anAttacker
	self life: self life - (100 * year).
			aTurboLaserCannon  usedTimes  = 5 ifTrue: [ 
				anAttacker removeWeapon: aTurboLaserCannon .
				anAttacker addWeapon: (HSBlaster new) ]
		

			! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:03:19'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:03:19'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:03:19'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:03:19'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:03:26'!
ERROR!
!TankRover methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 12:05:35'!
getsAttackedWithATurboLaserCannon: aTurboLaserCannon by: anAttacker
	self life: self life - (100 * year).
			aTurboLaserCannon  usedTimes  = 5 ifTrue: [ 
				anAttacker removeWeapon: aTurboLaserCannon .
				anAttacker addWeapon: (HSBlaster new) ]
		

			! !

!methodRemoval: TankRover #getsAttackedWithTurboLaserCannon:by: stamp: 'JB 5/4/2023 12:05:40'!
getsAttackedWithTurboLaserCannon: aTurboLaserCannon by: anAttacker
	self life: self life - (100 * year).
			aTurboLaserCannon  usedTimes  = 5 ifTrue: [ 
				anAttacker removeWeapon: aTurboLaserCannon .
				anAttacker addWeapon: (HSBlaster new) ]
		

			!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:05:43'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:05:43'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:05:43'!
ERROR!
!Aluminum3000 methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 12:05:58' prior: 50634617!
getsAttackedWithATurboLaserCannon:aTurboLaserCannon  by: anAttacker
	self life: self life - (100 * year).
			aTurboLaserCannon  usedTimes  = 10 ifTrue: [ anAttacker removeWeapon: aTurboLaserCannon ]
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:06:01'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:06:01'!
PASSED!
!HSBlaster methodsFor: 'attacking' stamp: 'JB 5/4/2023 12:15:46' prior: 50634414 overrides: 50632794!
attack: aVictim by: anAttacker 	

	usedTimes := usedTimes + 1.
	aVictim getsAttackedWithHSBlaster: self by: anAttacker . 
	! !
!TurboLaserCannon methodsFor: 'attacking' stamp: 'JB 5/4/2023 12:15:56' prior: 50634599 overrides: 50632794!
attack: aVictim by: anAttacker 	
	usedTimes := usedTimes + 1.
	aVictim getsAttackedWithATurboLaserCannon:self by: anAttacker. 
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:15:59'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:15:59'!
PASSED!
!Aluminum3000 methodsFor: 'attacking-private' stamp: 'JB 5/4/2023 12:18:48' prior: 50634242!
getsAttackedByClaw: aClaw by: anAttacker. 
		self life: self  life - (25 * year).
		aClaw usedTimes = 2 ifTrue: [ anAttacker removeWeapon: aClaw ].
! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:18:52'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:18:52'!
PASSED!
!Aluminum3000 methodsFor: 'attacking-private' stamp: 'JB 5/4/2023 12:20:00' overrides: 16920235!
initialize
		type:= #Aluminum3000. 
		life:= 100 * year.
		speed:= 90 * kilometer / hour.
		maxWeaponWeight:= 50 * kilogram! !
!Robot class methodsFor: 'instance creation' stamp: 'JB 5/4/2023 12:20:05' prior: 50634325!
ofType: aRobotType

	aRobotType = #Aluminum3000 ifTrue: [ ^ Aluminum3000 new 
		 ].
	aRobotType = #TankRover ifTrue: [ ^ TankRover  new
		initializeType: aRobotType 
		life: 100 * year
		speed: 40 * kilometer / hour
		maxWeaponWeight: 200 * kilogram ].

	self error: 'Invalid Robot Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:20:08'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:20:08'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:20:08'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:20:08'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:20:08'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:20:08'!
ERROR!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:20:21'!
ERROR!
!Aluminum3000 methodsFor: 'attacking-private' stamp: 'JB 5/4/2023 12:21:50' prior: 50635029 overrides: 16920235!
initialize
		type:= #Aluminum3000. 
		life:= 100 * year.
		speed:= 90 * kilometer / hour.
		maxWeaponWeight:= 50 * kilogram.
		weapons := OrderedCollection new.! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:22:00'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:22:00'!
PASSED!
!TankRover methodsFor: 'nil' stamp: 'JB 5/4/2023 12:23:30' overrides: 16920235!
initialize
		type:= #TankRober. 
		life:= 100 * year.
		speed:= 40 * kilometer / hour.
		maxWeaponWeight:= 200 * kilogram.
		! !
!TankRover methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 12:23:43' prior: 50635192 overrides: 16920235!
initialize
		type:= #TankRober. 
		life:= 100 * year.
		speed:= 40 * kilometer / hour.
		maxWeaponWeight:= 200 * kilogram.
		weapons := OrderedCollection new.! !
!Robot class methodsFor: 'instance creation' stamp: 'JB 5/4/2023 12:23:53' prior: 50635036!
ofType: aRobotType

	aRobotType = #Aluminum3000 ifTrue: [ ^ Aluminum3000 new 
		 ].
	aRobotType = #TankRover ifTrue: [ ^ TankRover  new ].

	self error: 'Invalid Robot Type'! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:23:57'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:23:57'!
PASSED!
!RobotWarsTest methodsFor: 'robot creation' stamp: 'JB 5/4/2023 12:24:19' prior: 50631467!
createAluminum3000

	^ Aluminum3000  new.! !
!RobotWarsTest methodsFor: 'robot creation' stamp: 'JB 5/4/2023 12:24:27' prior: 50631472!
createTankRover

	^ TankRover  new! !

!methodRemoval: Robot class #ofType: stamp: 'JB 5/4/2023 12:24:39'!
ofType: aRobotType

	aRobotType = #Aluminum3000 ifTrue: [ ^ Aluminum3000 new 
		 ].
	aRobotType = #TankRover ifTrue: [ ^ TankRover  new ].

	self error: 'Invalid Robot Type'!

!methodRemoval: Robot #initializeType:life:speed:maxWeaponWeight: stamp: 'JB 5/4/2023 12:24:54'!
initializeType: aRobotType life: lifePoints speed: aSpeed maxWeaponWeight: aMaxWeaponWeight

	type := aRobotType.
	life := lifePoints.
	speed := aSpeed.
	maxWeaponWeight := aMaxWeaponWeight.

	weapons := OrderedCollection new.!
!Robot methodsFor: 'weapons' stamp: 'JB 5/4/2023 12:27:01' overrides: 16920235!
initialize
	weapons  := OrderedCollection  new.! !
!Aluminum3000 methodsFor: 'initialization' stamp: 'JB 5/4/2023 12:27:48' prior: 50635118 overrides: 50635310!
initialize
		super initialize.
		type:= #Aluminum3000. 
		life:= 100 * year.
		speed:= 90 * kilometer / hour.
		maxWeaponWeight:= 50 * kilogram.
		! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:27:52'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:27:52'!
PASSED!
!TankRover methodsFor: 'initialization' stamp: 'JB 5/4/2023 12:28:07' prior: 50635200 overrides: 50635310!
initialize
		super initialize.
		type:= #TankRober. 
		life:= 100 * year.
		speed:= 40 * kilometer / hour.
		maxWeaponWeight:= 200 * kilogram.
	! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:28:10'!
PASSED!

!methodRemoval: Robot #type stamp: 'JB 5/4/2023 12:28:33'!
type

	^ type	!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:28:35'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:28:36'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:28:36'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:28:36'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:28:36'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:28:36'!
PASSED!
!Aluminum3000 methodsFor: 'initialization' stamp: 'JB 5/4/2023 12:28:50' prior: 50635316 overrides: 50635310!
initialize
		super initialize.
		life:= 100 * year.
		speed:= 90 * kilometer / hour.
		maxWeaponWeight:= 50 * kilogram.
		! !
!TankRover methodsFor: 'initialization' stamp: 'JB 5/4/2023 12:28:56' prior: 50635390 overrides: 50635310!
initialize
		super initialize.
		life:= 100 * year.
		speed:= 40 * kilometer / hour.
		maxWeaponWeight:= 200 * kilogram.
	! !

Object subclass: #Robot
	instanceVariableNames: 'life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!classDefinition: #Robot category: 'ISW1-2021-1C-1erParcial' stamp: 'JB 5/4/2023 12:29:02'!
Object subclass: #Robot
	instanceVariableNames: 'life speed maxWeaponWeight weapons'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-1C-1erParcial'!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:29:05'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:29:05'!
PASSED!
!Robot methodsFor: 'life' stamp: 'JB 5/4/2023 12:31:01'!
decreaselifeBy: aValue

	^ life! !
!Robot methodsFor: 'life' stamp: 'JB 5/4/2023 12:31:11' prior: 50635625!
decreaselifeBy: aValue

	^ life:= life - aValue! !
!Aluminum3000 methodsFor: 'attacking-private' stamp: 'JB 5/4/2023 12:31:25' prior: 50634522!
getsAttackedWithHSBlaster: anHSBlaster by: anAttacker  
	
		
			self decreaselifeBy: (5 * year).
			anHSBlaster 	usedTimes = 5 ifTrue: [ 
				anAttacker removeWeapon: anHSBlaster .
				anAttacker addWeapon: (TurboLaserCannon new ) ].
! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:31:26'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:31:26'!
PASSED!
!Aluminum3000 methodsFor: 'attacking-private' stamp: 'JB 5/4/2023 12:31:47' prior: 50634955!
getsAttackedByClaw: aClaw by: anAttacker. 
		self decreaselifeBy: (25 * year).
		aClaw usedTimes = 2 ifTrue: [ anAttacker removeWeapon: aClaw ].
! !
!Aluminum3000 methodsFor: 'attacking-private' stamp: 'JB 5/4/2023 12:31:54' prior: 50634798!
getsAttackedWithATurboLaserCannon:aTurboLaserCannon  by: anAttacker
	self decreaselifeBy: (100 * year).
			aTurboLaserCannon  usedTimes  = 10 ifTrue: [ anAttacker removeWeapon: aTurboLaserCannon ]
	! !
!TankRover methodsFor: 'attacking-private' stamp: 'JB 5/4/2023 12:32:02' prior: 50634236!
getsAttackedByClaw: aClaw by: anAttacker
 	self  decreaselifeBy: (5 * year).
	anAttacker removeWeapon: aClaw .
		! !
!TankRover methodsFor: 'attacking-private' stamp: 'JB 5/4/2023 12:32:10' prior: 50634706!
getsAttackedWithATurboLaserCannon: aTurboLaserCannon by: anAttacker
	self decreaselifeBy: (100 * year).
			aTurboLaserCannon  usedTimes  = 5 ifTrue: [ 
				anAttacker removeWeapon: aTurboLaserCannon .
				anAttacker addWeapon: (HSBlaster new) ]
		

			! !
!TankRover methodsFor: 'attacking-private' stamp: 'JB 5/4/2023 12:32:18' prior: 50634443!
getsAttackedWithHSBlaster: anHSBlaster by: anAttacker

			self decreaselifeBy: (50 * year).
			self life <= (50 * year) ifTrue: [ anAttacker addWeapon: (Claw new) ].
! !

!methodRemoval: Robot #life: stamp: 'JB 5/4/2023 12:32:31'!
life: newLife

	life := newLife!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:32:35'!
PASSED!

!methodRemoval: RobotWarsTest #createAluminum3000 stamp: 'JB 5/4/2023 12:42:56'!
createAluminum3000

	^ Aluminum3000  new.!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:43:26'!
ERROR!
!RobotWarsTest methodsFor: 'robot creation' stamp: 'JB 5/4/2023 12:44:01'!
createAluminum3000

	^ Aluminum3000  new! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 12:44:05'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 12:44:06'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 12:44:06'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 13:08:54'!
m1

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (50 * year) equals: attacked life! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 13:08:54' prior: 50631315!
test10HSBlasterReducesLifeOfTankRoverBy50

	self m1
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 13:12:42'!
m1: aRobot attackedBy: anotherRobot with: aWeapon returns: aTime


	anotherRobot addWeapon:aWeapon.
	
	anotherRobot attack: aRobot with: aWeapon.
	
	self assert:  aTime equals: aRobot life! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 15:47:17' prior: 50635915!
test10HSBlasterReducesLifeOfTankRoverBy50

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (50 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 13:14:57' prior: 50635930!
test10HSBlasterReducesLifeOfTankRoverBy50

"	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	"
	self m1:  self createAluminum3000   
	
	attackedBy:  
		self createTankRover 
	with:  
		self createHSBlaster 
	returns: (100 * year) - (50 * year)
	
	"self assert: (100 * year) - (50 * year) equals: attacked life
	"
	! !

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 13:15:00'!
FAILURE!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 13:15:00'!
FAILURE!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 13:15:16' prior: 50635945!
test10HSBlasterReducesLifeOfTankRoverBy50

"	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	"
	self m1:  self createAluminum3000   
	
	attackedBy:  
		self createTankRover 
	with:  
		self createHSBlaster 
	returns: ((100 * year) - (50 * year))
	
	"self assert: (100 * year) - (50 * year) equals: attacked life
	"
	! !

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 13:15:17'!
FAILURE!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'HAW 5/2/2021 15:47:17' prior: 50635970!
test10HSBlasterReducesLifeOfTankRoverBy50

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (50 * year) equals: attacked life
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 13:18:58' prior: 50631272!
test07ClawReducesLifeOfAluminum3000By25

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self  m1: attacker  attackedBy:attacked  with: attackerWeapon  returns:(100 * year) - (25 * year) 
	"self assert: (100 * year) - (25 * year) equals: attacked life
	"
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 13:19:07' prior: 50635920!
m1: aRobot attackedBy: anotherRobot with: aWeapon returns: aTime



	
	anotherRobot attack: aRobot with: aWeapon.
	
	self assert:  aTime equals: aRobot life! !

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 13:19:13'!
ERROR!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 13:19:48' prior: 50636007!
test07ClawReducesLifeOfAluminum3000By25

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self  m1: attacked  attackedBy:attacker  with: attackerWeapon  returns:(100 * year) - (25 * year) 
	"self assert: (100 * year) - (25 * year) equals: attacked life
	"
	! !

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 13:19:54'!
FAILURE!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 13:20:16' prior: 50636037!
test07ClawReducesLifeOfAluminum3000By25

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self  m1: attacked  attackedBy:attacker  with: attackerWeapon  returns:((100 * year) - (25 * year) )
	"self assert: (100 * year) - (25 * year) equals: attacked life
	"
	! !

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 13:20:21'!
FAILURE!

an Aluminum3000!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:04:19' prior: 50636025!
m1: aRobot attackedBy: anotherRobot with: aWeapon returns: aTime



	
	anotherRobot attack: aRobot with: aWeapon.
	
	self assert:  (100*year) - aTime equals: aRobot life! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:04:36' prior: 50636058!
test07ClawReducesLifeOfAluminum3000By25

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self  m1: attacked  attackedBy:attacker  with: attackerWeapon  returns: (25 * year) 
	"self assert: (100 * year) - (25 * year) equals: attacked life
	"
	! !

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 16:04:37'!
FAILURE!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:04:48' prior: 50636089!
test07ClawReducesLifeOfAluminum3000By25

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self  m1: attacked  attackedBy:attacker  with: attackerWeapon  returns: (25 * year) 
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:06:30' prior: 50636110!
test07ClawReducesLifeOfAluminum3000By25

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createAluminum3000.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	
	
	self  m1: attacked  attackedBy:attacker  with: attackerWeapon  returns: (25 * year) 
	
	! !

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 16:06:31'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 16:06:31'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:08:39' prior: 50636126!
test07ClawReducesLifeOfAluminum3000By25
	
	self  m1: self createAluminum3000  attackedBy: self createAluminum3000  with: self createClaw  returns: (25 * year) 
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:08:57' prior: 50636080!
m1: aRobot attackedBy: anotherRobot with: aWeapon returns: aTime


	anotherRobot addWeapon:  aWeapon .
	
	anotherRobot attack: aRobot with: aWeapon.
	
	self assert:  (100*year) - aTime equals: aRobot life! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 16:08:58'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 16:08:58'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:10:56'!
assertAttack: aRobot by: anotherRobot with: aWeapon decreasesLifeBy: aTime


	anotherRobot addWeapon:  aWeapon .
	
	anotherRobot attack: aRobot with: aWeapon.
	
	self assert:  (100*year) - aTime equals: aRobot life! !
!RobotWarsTest methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 16:10:56' prior: 50636209!
test07ClawReducesLifeOfAluminum3000By25
	
	self  assertAttack: self createAluminum3000  by: self createAluminum3000  with: self createClaw  decreasesLifeBy: (25 * year) 
	
	! !

!methodRemoval: RobotWarsTest #m1:attackedBy:with:returns: stamp: 'JB 5/4/2023 16:10:56'!
m1: aRobot attackedBy: anotherRobot with: aWeapon returns: aTime


	anotherRobot addWeapon:  aWeapon .
	
	anotherRobot attack: aRobot with: aWeapon.
	
	self assert:  (100*year) - aTime equals: aRobot life!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:12:09' prior: 50636294!
assertAttack: aRobotBeingAttacked by: anAttackerRobot with: aWeapon decreasesLifeBy: aTime


	anAttackerRobot  addWeapon:  aWeapon .
	
	aRobotBeingAttacked attack: aRobotBeingAttacked with: aWeapon.
	
	self assert:  (100*year) - aTime equals: aRobotBeingAttacked life! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 16:12:12'!
ERROR!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 16:12:12'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 16:12:12'!
ERROR!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:12:24' prior: 50636323!
assertAttack: aRobotBeingAttacked by: anAttackerRobot with: aWeapon decreasesLifeBy: aTime


	anAttackerRobot  addWeapon:  aWeapon .
	
	anAttackerRobot attack: aRobotBeingAttacked with: aWeapon.
	
	self assert:  (100*year) - aTime equals: aRobotBeingAttacked life! !

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 16:12:26'!
PASSED!

!methodRemoval: RobotWarsTest #m1 stamp: 'JB 5/4/2023 16:12:31'!
m1

	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createHSBlaster.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (50 * year) equals: attacked life!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 16:12:36'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 16:12:36'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:13:23' prior: 50631286!
test08ClawReducesLifeOfTankRoverBy5
"
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (5 * year) equals: attacked life
	"
	self assertAttack:  self createAluminum3000  by: self createTankRover   with: self createClaw  decreasesLifeBy: (5 *year) ! !

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 16:13:24'!
FAILURE!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:13:40' prior: 50636559!
test08ClawReducesLifeOfTankRoverBy5
"
	| attacker attacked attackerWeapon |
	
	attacker := self createAluminum3000.
	attacked := self createTankRover.
	attackerWeapon := self createClaw.
	attacker addWeapon: attackerWeapon.
	
	attacker attack: attacked with: attackerWeapon.
	
	self assert: (100 * year) - (5 * year) equals: attacked life
	"
	self assertAttack:  self createTankRover  by: self createAluminum3000   with: self createClaw  decreasesLifeBy: (5 *year) ! !

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 16:13:42'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 16:13:42'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:13:48' prior: 50636581!
test08ClawReducesLifeOfTankRoverBy5
	self assertAttack:  self createTankRover  by: self createAluminum3000   with: self createClaw  decreasesLifeBy: (5 *year) ! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:14:36' prior: 50631300!
test09HSBlasterReducesLifeOfAluminum3000By5

	self assertAttack: self createAluminum3000   by: self createAluminum3000  with: self createHSBlaster  decreasesLifeBy: (5*year ) 
	
	! !

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 16:14:37'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 16:14:37'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:15:32' prior: 50635992!
test10HSBlasterReducesLifeOfTankRoverBy50

	self assertAttack: self createTankRover  by: self createAluminum3000   with: self  createHSBlaster  decreasesLifeBy: (50*year) ! !

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 16:15:33'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 16:15:33'!
PASSED!
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:16:23' prior: 50631330!
test11TurboLaserCannonReducesLifeOfAluminum3000By100

	self assertAttack: self createAluminum3000  by: self createAluminum3000   with: self createTurboLaserCannon  decreasesLifeBy: (100*year)
	
	! !
!RobotWarsTest methodsFor: 'victim life after attacking tests' stamp: 'JB 5/4/2023 16:17:08' prior: 50631345!
test12TurboLaserCannonReducesLifeOfTankRoverBy100
	self assertAttack: self createTankRover by: self createAluminum3000 with: self createTurboLaserCannon  decreasesLifeBy:  (100*year)

	
	! !

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test01ShouldNotAddWeaponIfMaxWeaponWeightExceeded stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test02ShouldNotAddWeaponIfSpeedBelowZero stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test03ShouldHaveZeroWeightWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test04ShouldAddWeightWhenAddingWeapon stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test05ShouldHaveZeroSpeedWhenNoWeaponsAdded stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test06ShouldAddSpeedImpactWhenAddingWeapons stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test07ClawReducesLifeOfAluminum3000By25 stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test08ClawReducesLifeOfTankRoverBy5 stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test09HSBlasterReducesLifeOfAluminum3000By5 stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test10HSBlasterReducesLifeOfTankRoverBy50 stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test11TurboLaserCannonReducesLifeOfAluminum3000By100 stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test12TurboLaserCannonReducesLifeOfTankRoverBy100 stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test13CanUseClawOnlyTwiceWhenAttackingAluminum3000 stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test14CanUseClawOnlyOnceWhenAttackingTankRover stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test15AfterUsing5TimesHSBlasterAgainstAluminum3000RemovesItselfAndAddTurboLaserCannon stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test16AddsClawWhenAttakingTankRoverWithHSBlasterAndVictingLiveLessOrEqualTo50 stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test17CanUseOnlyTurboLaserCannon10TimesWhenAttakingAluminum3000 stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #RobotWarsTest #test18CanUseOnlyTurboLaserCannon10TimesWhenAttakingTankRover stamp: 'JB 5/4/2023 16:17:09'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 16:19:30'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 16:19:30'!
PASSED!
!GrandPrix methodsFor: 'simulation' stamp: 'JB 5/4/2023 16:24:06' prior: 50630835!
advance: aTimeLapse
	
	| cars |
	
	cars := track cars asOrderedCollection.
	cars do: [:car|self relocate: car after: aTimeLapse.]. 
	
	"
	ix := 1.
	[ix <= cars size] whileTrue: [ | car |
		car := cars at: ix.
		self relocate: car after: aTimeLapse.
		ix := ix + 1.
	]
"! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 16:24:08'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 16:24:08'!
PASSED!
!GrandPrix methodsFor: 'simulation' stamp: 'JB 5/4/2023 16:24:24' prior: 50637010!
advance: aTimeLapse
	
		
	( track cars asOrderedCollection) do: [:car|self relocate: car after: aTimeLapse.]. 
	
	"
	ix := 1.
	[ix <= cars size] whileTrue: [ | car |
		car := cars at: ix.
		self relocate: car after: aTimeLapse.
		ix := ix + 1.
	]
"! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 16:24:24'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 16:24:24'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 16:24:24'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 16:24:24'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:24:24'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:24:24'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 16:24:24'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 16:24:24'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 16:24:25'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 16:24:25'!
PASSED!
!GrandPrix methodsFor: 'simulation' stamp: 'JB 5/4/2023 16:24:30' prior: 50637109!
advance: aTimeLapse
	
		
	( track cars asOrderedCollection) do: [:car|self relocate: car after: aTimeLapse.]. 
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 16:24:31'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 16:24:31'!
PASSED!
!GrandPrix methodsFor: 'simulation' stamp: 'JB 5/4/2023 16:24:42' prior: 50637207!
advance: aTimeLapse
	
		
	( track cars asOrderedCollection) do: [:car| self relocate: car after: aTimeLapse.]. 
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 16:24:44'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 16:24:44'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 16:24:44'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 16:24:45'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 16:24:45'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:30:06'!
xxx

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:46:03'!
createTurboSectorOf0Kilometers

	^ Sector withTurboOf: 0 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:46:03' prior: 50630209!
test01SectorLengthMustBePositive

	self 
		should: [ self createTurboSectorOf0Kilometers.]
		raise: Error
		withMessageText: Sector lengthMustBePositiveErrorDescription! !

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 16:46:41'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 16:46:41'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:48:25' prior: 50630217!
test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength

	| sector  outside car |
	
	sector :=  Sector withTurboOf: 10 * kilometer.
	
	outside := sector length + (1 * millimeter).
	car := FormulaOneCar drivenBy: #Schumacher.
	
	self 
		should: [ sector put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (sector includes: car) ]	
! !

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 16:48:26'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 16:48:26'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:49:32'!
createTurboSectorOf10Kilometers
	 ^Sector withTurboOf: 10 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:49:48' prior: 50637515!
test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength

	| sector  outside car |
	
	sector :=  self createTurboSectorOf10Kilometers .
	
	outside := sector length + (1 * millimeter).
	car := FormulaOneCar drivenBy: #Schumacher.
	
	self 
		should: [ sector put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (sector includes: car) ]	
! !

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 16:49:49'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 16:49:49'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:50:17' prior: 50637628!
test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength

	| sector  outside car|
	
	sector :=  self createTurboSectorOf10Kilometers .
	
	outside := sector length + (1 * millimeter).
	car := FormulaOneCar drivenBy: #Schumacher.
	
	self 
		should: [ sector put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (sector includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04'!
createSchumacherCar

	^ FormulaOneCar drivenBy: #Schumacher! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630664!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630332!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	track _ Track withSectors: sectors.
	outside _ track length + (1 * millimeter).
	car _ self createSchumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630270!
test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.95 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630397!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	track _ Track withSectors: sectors.
	car _ self createSchumacherCar.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630580!
test21SecondTurboSpeedsByTenPercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630600!
test22ThirdTurboSpeedsByFivePercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630560!
test20FirstTurboIncrementsSpeedByTwentyPercent

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630249!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 20 * kilometer.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630352!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	positionInSector2 _ 5 * kilometer.
	positionInTrack _ sectors first length + positionInSector2.
	
	track _ Track withSectors: sectors.
	car _ self createSchumacherCar.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630234!
test03CarCannotActivateTurboInNonTurboSector

	| car sector |

	sector _ Sector withoutTurboOf: 10*kilometer.
	car _ self createSchumacherCar.
	
	sector atStartPut: car.
	
	self should: [ car activateTurbo ]
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector turboNotAllowedErrorDescription equals: error messageText.
			self deny: car isTurboActivated]
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50637737!
test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength

	| sector  outside car|
	
	sector :=  self createTurboSectorOf10Kilometers .
	
	outside := sector length + (1 * millimeter).
	car := self createSchumacherCar.
	
	self 
		should: [ sector put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (sector includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630643!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630288!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630376!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	track _ Track withSectors: sectors.
	car1 _ self createSchumacherCar.
	car2 _ FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50630621!
test23AfterThridTurbo_TurboIsExhausted

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 24 * kilometer.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:51:04' prior: 50637395!
xxx

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := self createSchumacherCar.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:52:21'!
createNonTurboSectorOf10Kilometers

	^ Sector withoutTurboOf: 10*kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:52:21' prior: 50637942!
test03CarCannotActivateTurboInNonTurboSector

	| car sector |

	sector _ self createNonTurboSectorOf10Kilometers.
	car _ self createSchumacherCar.
	
	sector atStartPut: car.
	
	self should: [ car activateTurbo ]
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector turboNotAllowedErrorDescription equals: error messageText.
			self deny: car isTurboActivated]
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:53:00'!
createTurboSectorOf20Kilometers

	^ Sector withTurboOf: 20 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:53:00' prior: 50637897!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf20Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:55:46'!
createHamiltonCar

	^ FormulaOneCar drivenBy: #Hamilton! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:56:19' prior: 50638104!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector := self createTurboSectorOf20Kilometers.
	
	schumacher := self createSchumacherCar.
	hamilton := self createHamiltonCar .
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:57:20'!
createTurboSectorOf24Kilometers

	^ Sector withTurboOf: 24 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:57:20' prior: 50637877!
test20FirstTurboIncrementsSpeedByTwentyPercent

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:57:20' prior: 50637856!
test22ThirdTurboSpeedsByFivePercent

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:57:20' prior: 50637800!
test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.95 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:57:20' prior: 50637995!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:57:20' prior: 50638041!
test23AfterThridTurbo_TurboIsExhausted

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:57:20' prior: 50637974!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:57:20' prior: 50637836!
test21SecondTurboSpeedsByTenPercent

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:57:21' prior: 50638064!
xxx

	| schumacher hamilton sector |
	
	sector := self createTurboSectorOf24Kilometers.
	
	schumacher := self createSchumacherCar.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:57:21' prior: 50637759!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:21'!
createHamiltonsCar

	^ FormulaOneCar drivenBy: #Hamilton! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:21' prior: 50638195!
test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ self createHamiltonsCar.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.95 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:21' prior: 50638282!
test21SecondTurboSpeedsByTenPercent

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:21' prior: 50638174!
test22ThirdTurboSpeedsByFivePercent

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:21' prior: 50638124!
createHamiltonCar

	^ self createHamiltonsCar! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:21' prior: 50638154!
test20FirstTurboIncrementsSpeedByTwentyPercent

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:21' prior: 50630430!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (Sector withTurboOf: 10 * kilometer)))
		running: 100.
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	hamilton _ self createHamiltonsCar.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:21' prior: 50638213!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ self createHamiltonsCar.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:21' prior: 50638238!
test23AfterThridTurbo_TurboIsExhausted

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:21' prior: 50638261!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:21' prior: 50638302!
xxx

	| schumacher hamilton sector |
	
	sector := self createTurboSectorOf24Kilometers.
	
	schumacher := self createSchumacherCar.
	hamilton := self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:21' prior: 50638317!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector _ self createTurboSectorOf24Kilometers.
	
	schumacher _ self createSchumacherCar.
	hamilton _ self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !

!methodRemoval: FormulaOneTest #createHamiltonCar stamp: 'JB 5/4/2023 16:58:33'!
createHamiltonCar

	^ self createHamiltonsCar!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:58:44' prior: 50638129!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector := self createTurboSectorOf20Kilometers.
	
	schumacher := self createSchumacherCar.
	hamilton := self createHamiltonsCar .
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 16:58:46'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 16:58:46'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:02:57' prior: 50637780!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors := OrderedCollection 
		with: (self createTurboSectorOf10Kilometers )
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	track := Track withSectors: sectors.
	outside := track length + (1 * millimeter).
	car := self createSchumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 17:02:58'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 17:02:59'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 17:02:59'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:03:24'!
createNonTurboSectorOf20Kilometers

	^ Sector withoutTurboOf: 20 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:03:24' prior: 50630415!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps

	| track grandPrix numberOfLaps |
	
	track _ Track withSectors: (OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (self createNonTurboSectorOf20Kilometers)).
	numberOfLaps _ 100.
	
	grandPrix _ GrandPrix on: track running: numberOfLaps.
	
	self assert: track length * numberOfLaps	 equals: grandPrix length
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:03:24' prior: 50630320!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| sectors track |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (self createNonTurboSectorOf20Kilometers).
	track _ Track withSectors: sectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:03:24' prior: 50638665!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors := OrderedCollection 
		with: (self createTurboSectorOf10Kilometers )
		with: (self createNonTurboSectorOf20Kilometers).
	
	track := Track withSectors: sectors.
	outside := track length + (1 * millimeter).
	car := self createSchumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:03:24' prior: 50637918!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (self createNonTurboSectorOf20Kilometers).
		
	positionInSector2 _ 5 * kilometer.
	positionInTrack _ sectors first length + positionInSector2.
	
	track _ Track withSectors: sectors.
	car _ self createSchumacherCar.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:03:24' prior: 50630510!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (self createNonTurboSectorOf20Kilometers).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:03:24' prior: 50630490!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (self createNonTurboSectorOf20Kilometers).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:03:24' prior: 50637818!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (self createNonTurboSectorOf20Kilometers).
	
	track _ Track withSectors: sectors.
	car _ self createSchumacherCar.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:03:24' prior: 50638020!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (self createNonTurboSectorOf20Kilometers).
		
	track _ Track withSectors: sectors.
	car1 _ self createSchumacherCar.
	car2 _ FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:03:24' prior: 50630468!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	verstappen speed: 0* kilometer / hour.
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (self createNonTurboSectorOf20Kilometers).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:04:32'!
twoSectors

	^ OrderedCollection 
		with: (self createTurboSectorOf10Kilometers )
		with: (self createNonTurboSectorOf20Kilometers)! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:04:32' prior: 50638809!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors := self twoSectors.
	
	track := Track withSectors: sectors.
	outside := track length + (1 * millimeter).
	car := self createSchumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:04:57' prior: 50638966!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| track car outside |
	
	
	
	track := Track withSectors: self twoSectors .
	outside := track length + (1 * millimeter).
	car := self createSchumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 17:04:58'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 17:04:58'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:05:27' prior: 50638830!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors :=self twoSectors .
		
	positionInSector2 := 5 * kilometer.
	positionInTrack := sectors first length + positionInSector2.
	
	track := Track withSectors: sectors.
	car := self createSchumacherCar.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 17:05:29'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 17:05:37'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 17:05:37'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:05:57' prior: 50638916!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors := self twoSectors .
		
	track := Track withSectors: sectors.
	car1 := self createSchumacherCar.
	car2 := FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 17:05:58'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 17:05:59'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 17:05:59'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 17:05:59'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 17:05:59'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 17:05:59'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 17:05:59'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 17:05:59'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 17:05:59'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 17:05:59'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:06:17' prior: 50638897!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors := self twoSectors .
	track := Track withSectors: sectors.
	car := self createSchumacherCar.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 17:06:18'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 17:06:19'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 17:06:19'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 17:06:19'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 17:06:19'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 17:06:19'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 17:06:19'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 17:06:19'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 17:06:19'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 17:06:52' prior: 50638782!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps

	| track grandPrix numberOfLaps |
	
	track := Track withSectors: self twoSectors .
	numberOfLaps := 100.
	
	grandPrix := GrandPrix on: track running: numberOfLaps.
	
	self assert: track length * numberOfLaps	 equals: grandPrix length
	! !

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 17:06:53'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 18:53:03'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 18:53:03'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:53:43' prior: 50638426!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self createTurboSectorOf10Kilometers )))
		running: 100.
	
	verstappen := FormulaOneCar drivenBy: #Verstappen.
	hamilton := self createHamiltonsCar.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 18:53:44'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 18:53:45'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 18:53:45'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:54:32'!
verstappenCar

	^ FormulaOneCar drivenBy: #Verstappen! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:54:32' prior: 50638854!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (self createNonTurboSectorOf20Kilometers).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:54:32' prior: 50639704!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self createTurboSectorOf10Kilometers )))
		running: 100.
	
	verstappen := self verstappenCar.
	hamilton := self createHamiltonsCar.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:54:32' prior: 50638877!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (self createNonTurboSectorOf20Kilometers).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:54:32' prior: 50630533!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen _ self verstappenCar.
	sectorA _ Sector withTurboOf: 10 * kilometer.
	sectorB _ Sector withTurboOf: 30 * kilometer.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:54:32' prior: 50639294!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors := self twoSectors .
		
	track := Track withSectors: sectors.
	car1 := self createSchumacherCar.
	car2 := self verstappenCar.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:54:32' prior: 50630450!
test15ACarStoppedShouldNotMoveAfterSomeTime

	| grandPrix verstappen |
	
	verstappen _ self verstappenCar.
	verstappen speed: 0 * kilometer / hour.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (Sector withTurboOf: 10 * kilometer)))
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix advance: 10 * minute.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen) 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:54:32' prior: 50638937!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	verstappen speed: 0* kilometer / hour.
	
	sectors _ OrderedCollection 
		with: (Sector withTurboOf: 10 * kilometer)
		with: (self createNonTurboSectorOf20Kilometers).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:54:54' prior: 50639927!
test15ACarStoppedShouldNotMoveAfterSomeTime

	| grandPrix verstappen |
	
	verstappen := self verstappenCar.
	verstappen speed: 0 * kilometer / hour.
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self createTurboSectorOf10Kilometers )))
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix advance: 10 * minute.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen) 
	
	! !

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 18:54:55'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 18:54:55'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:55:34'!
createTrackWithOneSector

	^ Track withSectors: (OrderedCollection with: (self createTurboSectorOf10Kilometers ))! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:55:34' prior: 50639843!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix := GrandPrix 
		on: (self createTrackWithOneSector)
		running: 100.
	
	verstappen := self verstappenCar.
	hamilton := self createHamiltonsCar.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:55:34' prior: 50639967!
test15ACarStoppedShouldNotMoveAfterSomeTime

	| grandPrix verstappen |
	
	verstappen := self verstappenCar.
	verstappen speed: 0 * kilometer / hour.
	
	grandPrix := GrandPrix 
		on: (self createTrackWithOneSector)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix advance: 10 * minute.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen) 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:55:41' prior: 50640100!
test15ACarStoppedShouldNotMoveAfterSomeTime

	| grandPrix verstappen |
	
	verstappen := self verstappenCar.
	verstappen speed: 0 * kilometer / hour.
	
	grandPrix := GrandPrix 
		on: self createTrackWithOneSector
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix advance: 10 * minute.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen) 
	
	! !

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 18:55:42'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 18:55:42'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:55:49' prior: 50640082!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix := GrandPrix 
		on: self createTrackWithOneSector
		running: 100.
	
	verstappen := self verstappenCar.
	hamilton := self createHamiltonsCar.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 18:55:50'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 18:55:50'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:56:26' prior: 50639945!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen := self verstappenCar.
	verstappen speed: 0* kilometer / hour.
	
	sectors := self twoSectors .
	
	grandPrix := GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 18:56:27'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 18:56:27'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:57:47' prior: 50639863!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen := self verstappenCar.
	
	sectors := self twoSectors .
	
	grandPrix := GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 18:57:48'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 18:57:48'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:58:11' prior: 50640332!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen := self verstappenCar.
	verstappen speed: 0* kilometer / hour.
	
	sectors := self twoSectors .
	
	grandPrix := GrandPrix 
		on: (Track withSectors: self twoSectors )
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:58:19' prior: 50640550!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen  |
	
	verstappen := self verstappenCar.
	verstappen speed: 0* kilometer / hour.
	
	
	
	grandPrix := GrandPrix 
		on: (Track withSectors: self twoSectors )
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 18:58:21'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 18:58:21'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:58:41' prior: 50640442!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen := self verstappenCar.
	
	sectors := self twoSectors .
	
	grandPrix := GrandPrix 
		on: (Track withSectors: self twoSectors )
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:58:43'!
FAILURE!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:58:52'!
FAILURE!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:57:47' prior: 50640678!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen := self verstappenCar.
	
	sectors := self twoSectors .
	
	grandPrix := GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 18:59:29'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 18:59:29'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 18:59:44' prior: 50640701!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen := self verstappenCar.
	
	sectors := self twoSectors .
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (self twoSectors ))
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 18:59:45'!
FAILURE!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 19:00:02' prior: 50640809!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen := self verstappenCar.
	
	sectors := self twoSectors .
	
	grandPrix := GrandPrix 
		on: (Track withSectors: sectors )
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 19:00:03'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 19:00:55'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 19:00:55'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 19:02:02'!
createTrackWithTwoSectorsAndTheCar: verstappen

	^ GrandPrix 
		on: (Track withSectors: self twoSectors )
		running: 100
		with: (Set with: verstappen)! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 19:02:02' prior: 50640569!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen  |
	
	verstappen := self verstappenCar.
	verstappen speed: 0* kilometer / hour.
	
	
	
	grandPrix := self createTrackWithTwoSectorsAndTheCar: verstappen.
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 19:02:25' prior: 50640829!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen := self verstappenCar.
	
	sectors := self twoSectors .
	
	grandPrix := self createTrackWithTwoSectorsAndTheCar: verstappen .
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 19:02:27'!
FAILURE!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 19:03:10' prior: 50641051!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen := self verstappenCar.
	
	sectors := self twoSectors .
	
	grandPrix := GrandPrix 
		on: (Track withSectors: sectors )
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 19:03:11'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 19:03:11'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 19:04:45' prior: 50639820!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen := self verstappenCar.
	
	sectors := self twoSectors .
	
	grandPrix := GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 19:04:47'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 19:04:47'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 19:05:09' prior: 50641178!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen := self verstappenCar.
	
	sectors := self twoSectors .
	
	grandPrix := self createTrackWithTwoSectorsAndTheCar: verstappen .
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 19:05:10'!
FAILURE!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 19:05:20' prior: 50641289!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen := self verstappenCar.
	
	sectors := self twoSectors .
	
	grandPrix := GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 19:05:22'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 19:05:22'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 19:21:57' prior: 50639883!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen := self verstappenCar.
	sectorA := self createTurboSectorOf10Kilometers .
	sectorB := Sector withTurboOf: 30 * kilometer.
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 19:21:57'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 19:21:57'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 19:21:58'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 19:21:58'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 19:22:20'!
createTurboSectorOf30Kilometers

	^ Sector withTurboOf: 30 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 19:22:20' prior: 50641422!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen := self verstappenCar.
	sectorA := self createTurboSectorOf10Kilometers .
	sectorB := self createTurboSectorOf30Kilometers.
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 21:49:39'!
xxx: aBlock yyy: aNumber

	| schumacher hamilton sector |
	
	sector := self createTurboSectorOf24Kilometers.
	
	schumacher := self createSchumacherCar.
	hamilton := self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	aBlock value: schumacher.
	
	self assert: schumacher isTurboActivated.
	self assert: aNumber * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 21:51:19' prior: 50638406!
test20FirstTurboIncrementsSpeedByTwentyPercent

	self xxx: [:aCar| aCar activateTurbo ] yyy: 120 ! !

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 21:51:26'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 21:51:31'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 21:51:31'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 22:04:34'!
assertWhenDoing: aBlock theSpeedIs: aNumber

	| schumacher hamilton sector |
	
	sector := self createTurboSectorOf24Kilometers.
	
	schumacher := self createSchumacherCar.
	hamilton := self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	aBlock value: schumacher.
	
	self assert: schumacher isTurboActivated.
	self assert: aNumber * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 22:04:34' prior: 50641591!
test20FirstTurboIncrementsSpeedByTwentyPercent

	self assertWhenDoing: [:aCar| aCar activateTurbo ] theSpeedIs: 120 ! !

!methodRemoval: FormulaOneTest #xxx:yyy: stamp: 'JB 5/4/2023 22:04:34'!
xxx: aBlock yyy: aNumber

	| schumacher hamilton sector |
	
	sector := self createTurboSectorOf24Kilometers.
	
	schumacher := self createSchumacherCar.
	hamilton := self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	aBlock value: schumacher.
	
	self assert: schumacher isTurboActivated.
	self assert: aNumber * kilometer / hour equals: schumacher speed.!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 22:05:31' prior: 50638360!
test21SecondTurboSpeedsByTenPercent

	self assertWhenDoing: [:aCar| aCar activateTurbo;deactivateTurbo ;activateTurbo ] theSpeedIs: 110 ! !

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 22:05:32'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 22:05:32'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 22:06:36' prior: 50638380!
test22ThirdTurboSpeedsByFivePercent
		self assertWhenDoing: [:aCar| aCar activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.] theSpeedIs:105.  
! !

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 22:06:37'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 22:06:37'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 22:07:38' prior: 50638471!
test23AfterThridTurbo_TurboIsExhausted
	
	self assertWhenDoing: [:aCar| aCar  activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	] theSpeedIs:  100. 

! !

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 22:07:39'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 22:07:39'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 22:34:29'!
xxx: aBLock

	| schumacher hamilton sector |
	
	sector := self createTurboSectorOf24Kilometers.
	
	schumacher := self createSchumacherCar.
	hamilton := self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	aBLock value: schumacher . 	
! !

!methodRemoval: FormulaOneTest #xxx stamp: 'JB 5/4/2023 22:34:36'!
xxx

	| schumacher hamilton sector |
	
	sector := self createTurboSectorOf24Kilometers.
	
	schumacher := self createSchumacherCar.
	hamilton := self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 22:35:13' prior: 50638493!
test24CanNotActivateTurboWhenTurboIsActivated

	self xxx: [:schumacher|
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	]! !

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 22:35:14'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 22:35:14'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 22:35:33' prior: 50642150!
test24CanNotActivateTurboWhenTurboIsActivated

	self xxx: [:aTurboAvailableCar|
	aTurboAvailableCar activateTurbo.
	
	self 
		should: [ aTurboAvailableCar activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: aTurboAvailableCar turboAlreadyActivatedErrorDescription
	
	]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 22:36:05' prior: 50638529!
test25CanNotDeactivateTurboWhenIsDeactivated
	self xxx:[:schumacher|
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	]! !

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 22:36:06'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 22:36:06'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 22:36:15' prior: 50642264!
test25CanNotDeactivateTurboWhenIsDeactivated
	self xxx:[:aTurboAvailableCar|
	
	self 
		should: [ aTurboAvailableCar deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: aTurboAvailableCar turboAlreadydeActivatedErrorDescription
	
	]! !

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 22:36:18'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 22:36:18'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 22:37:07' prior: 50641779!
assertWhenDoing: aBlock theSpeedIs: aNumber

	self xxx: [:schumacher|
	
	aBlock value: schumacher.
	
	self assert: schumacher isTurboActivated.
	self assert: aNumber * kilometer / hour equals: schumacher speed.]! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 22:37:08'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 22:37:08'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 22:37:24' prior: 50642467!
assertWhenDoing: aBlock theSpeedIs: aNumber

	self xxx: [:aTurboAvailableCar|
	
	aBlock value: aTurboAvailableCar.
	
	self assert: aTurboAvailableCar isTurboActivated.
	self assert: aNumber * kilometer / hour equals: aTurboAvailableCar speed.]! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 22:37:27'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/4/2023 22:37:33'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/4/2023 22:37:33'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 22:39:29'!
createSetupForATurboAvailableCarToDo: aBLock

	| schumacher hamilton sector |
	
	sector := self createTurboSectorOf24Kilometers.
	
	schumacher := self createSchumacherCar.
	hamilton := self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	aBLock value: schumacher . 	
! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 22:39:29' prior: 50642564!
assertWhenDoing: aBlock theSpeedIs: aNumber

	self createSetupForATurboAvailableCarToDo: [:aTurboAvailableCar|
	
	aBlock value: aTurboAvailableCar.
	
	self assert: aTurboAvailableCar isTurboActivated.
	self assert: aNumber * kilometer / hour equals: aTurboAvailableCar speed.]! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 22:39:29' prior: 50642365!
test25CanNotDeactivateTurboWhenIsDeactivated
	self createSetupForATurboAvailableCarToDo:[:aTurboAvailableCar|
	
	self 
		should: [ aTurboAvailableCar deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: aTurboAvailableCar turboAlreadydeActivatedErrorDescription
	
	]! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'JB 5/4/2023 22:39:29' prior: 50642252!
test24CanNotActivateTurboWhenTurboIsActivated

	self createSetupForATurboAvailableCarToDo: [:aTurboAvailableCar|
	aTurboAvailableCar activateTurbo.
	
	self 
		should: [ aTurboAvailableCar activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: aTurboAvailableCar turboAlreadyActivatedErrorDescription
	
	]! !

!methodRemoval: FormulaOneTest #xxx: stamp: 'JB 5/4/2023 22:39:29'!
xxx: aBLock

	| schumacher hamilton sector |
	
	sector := self createTurboSectorOf24Kilometers.
	
	schumacher := self createSchumacherCar.
	hamilton := self createHamiltonsCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	aBLock value: schumacher . 	
!

Object subclass: #Turbo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #Turbo category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/4/2023 22:49:23'!
Object subclass: #Turbo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Turbo subclass: #TurboActivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboActivated category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/4/2023 22:49:41'!
Turbo subclass: #TurboActivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Turbo subclass: #TurboDeactivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboDeactivated category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/4/2023 22:49:46'!
Turbo subclass: #TurboDeactivated
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

TurboActivated subclass: #TurboLevelOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboLevelOne category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 10:12:38'!
TurboActivated subclass: #TurboLevelOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

TurboActivated subclass: #TurboLevelTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboLevelTwo category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 10:12:47'!
TurboActivated subclass: #TurboLevelTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

TurboActivated subclass: #TurboLevelThree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboLevelThree category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 10:12:53'!
TurboActivated subclass: #TurboLevelThree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!TurboActivated methodsFor: 'nil' stamp: 'JB 5/5/2023 10:15:06'!
activateTurbo
	^self error: FormulaOneCar class turboAlreadyActivatedErrorDescription! !
!TurboDeactivated methodsFor: 'nil' stamp: 'JB 5/5/2023 10:16:00'!
turboDeactivated
	^self error: FormulaOneCar class turboAlreadydeActivatedErrorDescription 
	! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 10:16:09' prior: 50642984!
turboDeactivated
	^self error: FormulaOneCar class turboAlreadydeActivatedErrorDescription 
	
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 10:16:11'!
PASSED!

FormulaOneCar subclass: #TurboCar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboCar category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 10:17:44'!
FormulaOneCar subclass: #TurboCar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

FormulaOneCar subclass: #NonTurboCar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #NonTurboCar category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 10:17:47'!
FormulaOneCar subclass: #NonTurboCar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #NonTurboCar stamp: 'JB 5/5/2023 10:19:00'!
FormulaOneCar subclass: #NonTurboCar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboCar stamp: 'JB 5/5/2023 10:19:03'!
FormulaOneCar subclass: #TurboCar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Sector subclass: #TurboSector
	instanceVariableNames: 'cars length withTurbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Sector subclass: #TurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboSector category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 10:19:23'!
Sector subclass: #TurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Sector subclass: #NonTurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #NonTurboSector category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 10:19:28'!
Sector subclass: #NonTurboSector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!NonTurboSector methodsFor: 'nil' stamp: 'JB 5/5/2023 10:20:08' overrides: 50630944!
activateTurboTo: aCarToActivateTurboTo

	

	^self error: Sector turboNotAllowedErrorDescription
	! !
!Sector methodsFor: 'turbo' stamp: 'JB 5/5/2023 10:20:51' prior: 50630944!
activateTurboTo: aCarToActivateTurboTo

	| positionOfCarAhead |

	withTurbo ifFalse: [	self error: Sector turboNotAllowedErrorDescription].
	
	positionOfCarAhead := self 
		positionOfCarAheadOf: aCarToActivateTurboTo 
		ifNone: [self error: Sector cannotActivateTurboWhenNoCarAheadErrorDescription ].
		
	self 
		assertDriverIsOneSecondOrLess: aCarToActivateTurboTo
		ofDriverAt: positionOfCarAhead.

	aCarToActivateTurboTo activateTurboInSectorWithTurbo
! !
!TurboSector methodsFor: 'nil' stamp: 'JB 5/5/2023 10:21:04' overrides: 50643157!
activateTurboTo: aCarToActivateTurboTo
	| positionOfCarAhead |

	
	positionOfCarAhead := self 
		positionOfCarAheadOf: aCarToActivateTurboTo 
		ifNone: [self error: Sector cannotActivateTurboWhenNoCarAheadErrorDescription ].
		
	self 
		assertDriverIsOneSecondOrLess: aCarToActivateTurboTo
		ofDriverAt: positionOfCarAhead.

	aCarToActivateTurboTo activateTurboInSectorWithTurbo! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 10:21:07'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 10:21:07'!
PASSED!
!NonTurboSector methodsFor: 'nil' stamp: 'JB 5/5/2023 10:24:12' overrides: 16920235!
initialize
	super initialize. 
	withTurbo  := false.! !
!TurboSector methodsFor: 'nil' stamp: 'JB 5/5/2023 10:24:24' overrides: 16920235!
initialize
	super initialize. 
	withTurbo  := true.! !
!Sector class methodsFor: 'instance creation' stamp: 'JB 5/5/2023 10:26:20' prior: 50631003!
withTurboOf: aLength 

	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.

	^ TurboSector new initializeOf: aLength; "withTurbo: true;" yourself ! !
!Sector class methodsFor: 'instance creation' stamp: 'JB 5/5/2023 10:26:39' prior: 50631012!
withoutTurboOf: aLength 
	
	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.
		
	^ NonTurboSector new initializeOf: aLength; "withTurbo: false;" yourself ! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 10:26:47'!
PASSED!

!methodRemoval: Sector #withTurbo: stamp: 'JB 5/5/2023 10:27:01'!
withTurbo: aBoolean
 
	withTurbo _ aBoolean.
!
!Sector methodsFor: 'turbo' stamp: 'JB 5/5/2023 10:27:18' prior: 50643157!
activateTurboTo: aCarToActivateTurboTo
"
	| positionOfCarAhead |

	withTurbo ifFalse: [	self error: Sector turboNotAllowedErrorDescription].
	
	positionOfCarAhead := self 
		positionOfCarAheadOf: aCarToActivateTurboTo 
		ifNone: [self error: Sector cannotActivateTurboWhenNoCarAheadErrorDescription ].
		
	self 
		assertDriverIsOneSecondOrLess: aCarToActivateTurboTo
		ofDriverAt: positionOfCarAhead.

	aCarToActivateTurboTo activateTurboInSectorWithTurbo
"
self subclassResponsibility ! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 10:27:21'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 10:27:21'!
PASSED!
!Sector methodsFor: 'turbo' stamp: 'JB 5/5/2023 10:27:37' prior: 50643396!
activateTurboTo: aCarToActivateTurboTo
	
		self subclassResponsibility ! !

!methodRemoval: TurboSector #initialize stamp: 'JB 5/5/2023 10:52:45'!
initialize
	super initialize. 
	withTurbo  := true.!

!methodRemoval: NonTurboSector #initialize stamp: 'JB 5/5/2023 10:52:49'!
initialize
	super initialize. 
	withTurbo  := false.!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 10:52:51'!
PASSED!

!classDefinition: #Sector category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 10:53:55'!
Object subclass: #Sector
	instanceVariableNames: 'cars length'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!TurboSector methodsFor: 'turbo' stamp: 'JB 5/5/2023 10:54:43' overrides: 50630980!
positionOfCarAheadOf: aCarToActiveTurboTo ifNone: alternativeClosure

	| sortedPositions carToActivateTurboToPosition |
	
	carToActivateTurboToPosition _ cars at: aCarToActiveTurboTo.
	sortedPositions _ cars asSortedCollection remove: carToActivateTurboToPosition; yourself.
	 
	^ sortedPositions 
		detect: [:aPosition | aPosition > carToActivateTurboToPosition ]
		ifNone: alternativeClosure ! !
!NonTurboSector methodsFor: 'turbo' stamp: 'JB 5/5/2023 10:54:43' overrides: 50630980!
positionOfCarAheadOf: aCarToActiveTurboTo ifNone: alternativeClosure

	| sortedPositions carToActivateTurboToPosition |
	
	carToActivateTurboToPosition _ cars at: aCarToActiveTurboTo.
	sortedPositions _ cars asSortedCollection remove: carToActivateTurboToPosition; yourself.
	 
	^ sortedPositions 
		detect: [:aPosition | aPosition > carToActivateTurboToPosition ]
		ifNone: alternativeClosure ! !

!methodRemoval: Sector #positionOfCarAheadOf:ifNone: stamp: 'JB 5/5/2023 10:54:43'!
positionOfCarAheadOf: aCarToActiveTurboTo ifNone: alternativeClosure

	| sortedPositions carToActivateTurboToPosition |
	
	carToActivateTurboToPosition _ cars at: aCarToActiveTurboTo.
	sortedPositions _ cars asSortedCollection remove: carToActivateTurboToPosition; yourself.
	 
	^ sortedPositions 
		detect: [:aPosition | aPosition > carToActivateTurboToPosition ]
		ifNone: alternativeClosure !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 10:54:48'!
PASSED!

!methodRemoval: TurboSector #positionOfCarAheadOf:ifNone: stamp: 'JB 5/5/2023 10:54:58'!
positionOfCarAheadOf: aCarToActiveTurboTo ifNone: alternativeClosure

	| sortedPositions carToActivateTurboToPosition |
	
	carToActivateTurboToPosition _ cars at: aCarToActiveTurboTo.
	sortedPositions _ cars asSortedCollection remove: carToActivateTurboToPosition; yourself.
	 
	^ sortedPositions 
		detect: [:aPosition | aPosition > carToActivateTurboToPosition ]
		ifNone: alternativeClosure !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 10:55:01'!
ERROR!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:55:01'!
ERROR!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:55:01'!
ERROR!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 10:55:01'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 10:55:01'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 10:55:01'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 10:55:01'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 10:55:01'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 10:55:01'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 10:55:01'!
PASSED!
!TurboSector methodsFor: 'turbo' stamp: 'JB 5/5/2023 10:55:22'!
positionOfCarAheadOf: aCarToActiveTurboTo ifNone: alternativeClosure

	| sortedPositions carToActivateTurboToPosition |
	
	carToActivateTurboToPosition := cars at: aCarToActiveTurboTo.
	sortedPositions := cars asSortedCollection remove: carToActivateTurboToPosition; yourself.
	 
	^ sortedPositions 
		detect: [:aPosition | aPosition > carToActivateTurboToPosition ]
		ifNone: alternativeClosure ! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 10:55:24'!
PASSED!

!methodRemoval: NonTurboSector #positionOfCarAheadOf:ifNone: stamp: 'JB 5/5/2023 10:55:29'!
positionOfCarAheadOf: aCarToActiveTurboTo ifNone: alternativeClosure

	| sortedPositions carToActivateTurboToPosition |
	
	carToActivateTurboToPosition _ cars at: aCarToActiveTurboTo.
	sortedPositions _ cars asSortedCollection remove: carToActivateTurboToPosition; yourself.
	 
	^ sortedPositions 
		detect: [:aPosition | aPosition > carToActivateTurboToPosition ]
		ifNone: alternativeClosure !
!TurboSector methodsFor: 'turbo' stamp: 'JB 5/5/2023 10:56:02' overrides: 50630961!
assertDriverIsOneSecondOrLess: aCarToActivateTurboTo ofDriverAt: positionOfCarAhead

	| carAhead |
	
	carAhead _ self carAtPosition: positionOfCarAhead.
	
	((positionOfCarAhead / carAhead speed) -
	((cars at: aCarToActivateTurboTo) / aCarToActivateTurboTo speed)) < (1 * second)
		ifFalse: [self error: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription ].! !
!NonTurboSector methodsFor: 'turbo' stamp: 'JB 5/5/2023 10:56:02' overrides: 50630961!
assertDriverIsOneSecondOrLess: aCarToActivateTurboTo ofDriverAt: positionOfCarAhead

	| carAhead |
	
	carAhead _ self carAtPosition: positionOfCarAhead.
	
	((positionOfCarAhead / carAhead speed) -
	((cars at: aCarToActivateTurboTo) / aCarToActivateTurboTo speed)) < (1 * second)
		ifFalse: [self error: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription ].! !

!methodRemoval: Sector #assertDriverIsOneSecondOrLess:ofDriverAt: stamp: 'JB 5/5/2023 10:56:02'!
assertDriverIsOneSecondOrLess: aCarToActivateTurboTo ofDriverAt: positionOfCarAhead

	| carAhead |
	
	carAhead _ self carAtPosition: positionOfCarAhead.
	
	((positionOfCarAhead / carAhead speed) -
	((cars at: aCarToActivateTurboTo) / aCarToActivateTurboTo speed)) < (1 * second)
		ifFalse: [self error: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription ].!

!methodRemoval: NonTurboSector #assertDriverIsOneSecondOrLess:ofDriverAt: stamp: 'JB 5/5/2023 10:56:10'!
assertDriverIsOneSecondOrLess: aCarToActivateTurboTo ofDriverAt: positionOfCarAhead

	| carAhead |
	
	carAhead _ self carAtPosition: positionOfCarAhead.
	
	((positionOfCarAhead / carAhead speed) -
	((cars at: aCarToActivateTurboTo) / aCarToActivateTurboTo speed)) < (1 * second)
		ifFalse: [self error: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription ].!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 10:56:12'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 10:56:12'!
PASSED!
!Sector class methodsFor: 'instance creation' stamp: 'JB 5/5/2023 10:58:08'!
Of: aLength 
	
	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.
		
	^ self new initializeOf: aLength.! !
!Sector class methodsFor: 'instance creation' stamp: 'JB 5/5/2023 10:58:28' prior: 50643287!
withTurboOf: aLength 


	^ TurboSector of: aLength ! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 10:58:33'!
FAILURE!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 10:58:33'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 10:58:33'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 10:58:33'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 10:58:33'!
ERROR!
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/5/2023 11:01:20' prior: 50637410!
createTurboSectorOf0Kilometers

	^ TurboSector of: 0 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'JB 5/4/2023 16:46:03' prior: 50644212!
createTurboSectorOf0Kilometers

	^ Sector withTurboOf: 0 * kilometer! !
!Sector class methodsFor: 'instance creation' stamp: 'JB 5/5/2023 11:02:15'!
of: aLength 
	
	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.
		
	^ self new initializeOf: aLength.! !

!methodRemoval: Sector class #Of: stamp: 'JB 5/5/2023 11:02:18'!
Of: aLength 
	
	aLength strictlyPositive ifFalse: [ self error: self lengthMustBePositiveErrorDescription ]	.
		
	^ self new initializeOf: aLength.!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:02:21'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:02:21'!
PASSED!
!Sector class methodsFor: 'instance creation' stamp: 'JB 5/5/2023 11:02:48' prior: 50643296!
withoutTurboOf: aLength 
	
	^NonTurboSector  of: aLength ! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:02:50'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:02:50'!
PASSED!
!TurboSector methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:04:15' overrides: 50630975!
carAtPosition: positionOfDriver

	^cars keyAtValue: positionOfDriver! !
!NonTurboSector methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:04:15' overrides: 50630975!
carAtPosition: positionOfDriver

	^cars keyAtValue: positionOfDriver! !

!methodRemoval: Sector #carAtPosition: stamp: 'JB 5/5/2023 11:04:15'!
carAtPosition: positionOfDriver

	^cars keyAtValue: positionOfDriver!

!methodRemoval: NonTurboSector #carAtPosition: stamp: 'JB 5/5/2023 11:04:22'!
carAtPosition: positionOfDriver

	^cars keyAtValue: positionOfDriver!

Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turboActivated traveledDistance currentSector turboActivations turbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #FormulaOneCar category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 11:13:56'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turboActivated traveledDistance currentSector turboActivations turbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!FormulaOneCar methodsFor: 'initialization' stamp: 'JB 5/5/2023 11:14:13' prior: 50630702!
initializeDrivenBy: aDriver 

	driver := aDriver.
	turboActivated := false.
	turboActivations := 0.
	speed := 0*kilometer/hour.
	traveledDistance := 0.
	turbo := TurboDeactivated  new. ! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:14:48' prior: 50630746!
activateTurbo

	"turboActivated ifTrue: [ self error: self turboAlreadyActivatedErrorDescription ].
	
	currentSector activateTurboTo: self."
	turbo activateTurbo: self! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:17:53'!
FAILURE!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:17:53'!
ERROR!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:17:53'!
ERROR!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:17:53'!
ERROR!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:17:53'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:17:53'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:17:53'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:17:53'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:17:53'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:17:53'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:17:58'!
FAILURE!
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:18:38' prior: 50644462!
activateTurbo

	"turboActivated ifTrue: [ self error: self turboAlreadyActivatedErrorDescription ].
	
	currentSector activateTurboTo: self."
	turbo activateTurboTo: self in: currentSector! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:18:50'!
FAILURE!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:18:50'!
ERROR!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:18:50'!
ERROR!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:18:50'!
ERROR!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:18:50'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:18:50'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:18:50'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:18:50'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:18:50'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:18:50'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:18:59'!
FAILURE!
!FormulaOneTest methodsFor: 'assertions' stamp: 'JB 5/5/2023 11:19:10' overrides: 16961444!
assert: aRenameMe1 description: aRenameMe2 
	self shouldBeImplemented.! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 11:21:34'!
activateTurboTo: aFormulaOneCar in: aSector
		 
	
	aSector  activateTurboTo: aFormulaOneCar 
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:21:52'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:21:52'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:21:52'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:21:52'!
ERROR!
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 11:23:01'!
activateTurboTo: aFormulaOneCar in: aSector
	^self error: FormulaOneCar class turboAlreadyActivatedErrorDescription! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:23:07'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:23:07'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:23:07'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:23:07'!
ERROR!
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'JB 5/5/2023 11:24:51' prior: 50630774!
activateTurboInSectorWithTurbo
	
	turboActivated := true.
	turboActivations := turboActivations + 1. 
	turbo := TurboActivated new.! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:25:17'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:25:17'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:25:17'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:25:17'!
ERROR!
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:25:52' prior: 50630753!
deactivateTurbo
	
	turboActivated ifFalse: [ self error: self turboAlreadydeActivatedErrorDescription ].
	
	turboActivated := false
	
	turbo deactivateTurbo! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:26:01' prior: 50644947!
deactivateTurbo
	"
	turboActivated ifFalse: [ self error: self turboAlreadydeActivatedErrorDescription ].
	
	turboActivated := false
	"
	turbo deactivateTurbo! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 11:26:52'!
deactivateTurboTo: aFormulaOneCar
	aFormulaOneCar cannotDeactivateANonActivatedTurbo
		! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 11:27:21' prior: 50644963!
deactivateTurboTo: aFormulaOneCar
	aFormulaOneCar  deactiveteTurboWhenActivated! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 11:27:27' prior: 50644969!
deactivateTurboTo: aFormulaOneCar
	aFormulaOneCar  deactivateTurboWhenActivated! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 11:28:25'!
deactivateTurboTo: aFormulaOneCar
	aFormulaOneCar  signalCannotDeactivateTruboWhenDeactivated! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:28:41' prior: 50644955!
deactivateTurbo
	"
	turboActivated ifFalse: [ self error: self turboAlreadydeActivatedErrorDescription ].
	
	turboActivated := false
	"
	turbo deactivateTurboTo: self! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:29:12'!
signalCannotDeactivateTruboWhenDeactivated
	 self error: self turboAlreadydeActivatedErrorDescription
! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:29:52'!
deactivateTurboWhenActivated
	turbo := TurboDeactivated  new.! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 11:31:35' prior: 50644759!
activateTurboTo: aFormulaOneCar in: aSector
	aFormulaOneCar signalCannotActivateTurboWhenActivated
! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:31:45'!
signalCannotActivateTurboWhenActivated
	self error: FormulaOneCar class turboAlreadyActivatedErrorDescription! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:33:19'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:33:19'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:33:19'!
ERROR!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:33:23'!
ERROR!

!methodRemoval: FormulaOneTest #assert:description: stamp: 'JB 5/5/2023 11:33:46'!
assert: aRenameMe1 description: aRenameMe2 
	self shouldBeImplemented.!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:33:48'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:33:48'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:33:48'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:33:48'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:33:48'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:33:53'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:35:27'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:35:50'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:36:06'!
ERROR!

((positionOfCarAhead / carAhead speed) -
	((cars at: aCarToActivateTurboTo) / aCarToActivateTurboTo speed)) !

aCarToActivateTurboTo speed!

(cars at: aCarToActivateTurboTo)!

((cars at: aCarToActivateTurboTo) / aCarToActivateTurboTo speed)!

(positionOfCarAhead / carAhead speed)!

((positionOfCarAhead / carAhead speed) -
	((cars at: aCarToActivateTurboTo) / aCarToActivateTurboTo speed)) < (1 * second)!

aCarToActivateTurboTo!
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:43:28' prior: 50645001!
deactivateTurboWhenActivated
	turbo := TurboDeactivated  new.
	turboActivated  := false. 
	turboActivations  := 0 .! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:43:34'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:43:34'!
FAILURE!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:43:34'!
FAILURE!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:43:34'!
FAILURE!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:43:34'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:43:34'!
PASSED!
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:45:03' prior: 50645228!
deactivateTurboWhenActivated
	turbo := TurboDeactivated  new.
	turboActivated  := false. 
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:45:09'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:45:09'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:45:09'!
ERROR!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:45:22'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:45:22'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:45:22'!
ERROR!

self class!
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:46:37' prior: 50645013!
signalCannotActivateTurboWhenActivated
	self error: self class  turboAlreadyActivatedErrorDescription! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:46:51'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:46:51'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:46:51'!
ERROR!
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:47:11' prior: 50645510!
signalCannotActivateTurboWhenActivated
	self error: self   turboAlreadyActivatedErrorDescription! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:47:16'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:47:16'!
PASSED!
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:47:28' prior: 50644561!
activateTurbo


	turbo activateTurboTo: self in: currentSector! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 11:47:33' prior: 50644987!
deactivateTurbo

	turbo deactivateTurboTo: self! !
!FormulaOneCar methodsFor: 'moving' stamp: 'JB 5/5/2023 11:55:57' prior: 50630724!
speed

	^turbo speedOf: self. 
"
	turboActivated ifTrue: [
		turboActivations = 1 ifTrue: [ ^ speed * 12 / 10 ].
		turboActivations = 2 ifTrue: [ ^ speed * 11 / 10 ].
		turboActivations = 3 ifTrue: [ ^ speed * 105 / 100 ].
	].

	^speed"! !

!classRemoval: #TurboLevelOne stamp: 'JB 5/5/2023 11:56:04'!
TurboActivated subclass: #TurboLevelOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboLevelThree stamp: 'JB 5/5/2023 11:56:07'!
TurboActivated subclass: #TurboLevelThree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #TurboLevelTwo stamp: 'JB 5/5/2023 11:56:10'!
TurboActivated subclass: #TurboLevelTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRenamed: #Turbo as: #TurboStatus stamp: 'JB 5/5/2023 11:56:24'!
Smalltalk renameClassNamed: #Turbo as: #TurboStatus!
!FormulaOneCar methodsFor: 'moving' stamp: 'HAW 5/2/2022 14:11:23' prior: 50645711!
speed

	turboActivated ifTrue: [
		turboActivations = 1 ifTrue: [ ^ speed * 12 / 10 ].
		turboActivations = 2 ifTrue: [ ^ speed * 11 / 10 ].
		turboActivations = 3 ifTrue: [ ^ speed * 105 / 100 ].
	].

	^speed! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:56:47'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:56:47'!
PASSED!
!FormulaOneCar methodsFor: 'moving' stamp: 'JB 5/5/2023 11:55:57' prior: 50645745!
speed

	^turbo speedOf: self. 
"
	turboActivated ifTrue: [
		turboActivations = 1 ifTrue: [ ^ speed * 12 / 10 ].
		turboActivations = 2 ifTrue: [ ^ speed * 11 / 10 ].
		turboActivations = 3 ifTrue: [ ^ speed * 105 / 100 ].
	].

	^speed"! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 11:58:58'!
 speedOf: aFormulaOneCar 


		aFormulaOneCar turboActivations = 1 ifTrue: [ ^ aFormulaOneCar getSpeed * 12 / 10 ].
		aFormulaOneCar turboActivations = 2 ifTrue: [ ^ aFormulaOneCar getSpeed * 11 / 10 ].
		aFormulaOneCar turboActivations = 3 ifTrue: [ ^ aFormulaOneCar getSpeed * 105 / 100 ].


! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 11:59:26'!
speedOf: aFormulaOneCar 

^aFormulaOneCar  getSpeed


! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:59:34'!
ERROR!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:59:34'!
ERROR!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 11:59:34'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 11:59:34'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 11:59:34'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 11:59:34'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 11:59:34'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 11:59:34'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 11:59:34'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 11:59:34'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 11:59:34'!
ERROR!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 11:59:34'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 11:59:39'!
ERROR!
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'JB 5/5/2023 11:59:57'!
getSpeed
	self shouldBeImplemented.! !
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'JB 5/5/2023 12:00:02' prior: 50645961!
getSpeed
	^speed! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 12:00:08'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 12:00:08'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 12:00:08'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:00:08'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 12:00:08'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 12:00:11'!
ERROR!
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'JB 5/5/2023 12:00:22'!
turboActivations
	self shouldBeImplemented.
	^turboActivations! !
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'JB 5/5/2023 12:00:27' prior: 50646060!
turboActivations
	
	^turboActivations! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 12:00:31'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:00:31'!
FAILURE!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:00:31'!
FAILURE!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:00:35'!
FAILURE!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 12:00:35'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:00:35'!
FAILURE!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:01:47'!
FAILURE!
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:02:38' prior: 50645853!
speedOf: aFormulaOneCar 


		aFormulaOneCar turboActivations = 1 ifTrue: [ ^ aFormulaOneCar getSpeed * 12 / 10 ].
		aFormulaOneCar turboActivations = 2 ifTrue: [ ^ aFormulaOneCar getSpeed * 11 / 10 ].
		aFormulaOneCar turboActivations = 3 ifTrue: [ ^ aFormulaOneCar getSpeed * 105 / 100 ].


^0! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:02:47'!
FAILURE!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 12:02:47'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:02:47'!
FAILURE!
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:03:26' prior: 50646255!
speedOf: aFormulaOneCar 


		(aFormulaOneCar turboActivations = 1)  ifTrue: [ ^ aFormulaOneCar getSpeed * 12 / 10 ].
		(aFormulaOneCar turboActivations = 2 ) ifTrue: [ ^ aFormulaOneCar getSpeed * 11 / 10 ].
		(aFormulaOneCar turboActivations = 3 ) ifTrue: [ ^ aFormulaOneCar getSpeed * 105 / 100 ].

! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:03:41'!
FAILURE!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 12:03:41'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:03:41'!
FAILURE!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:03:56'!
ERROR!
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:05:26' prior: 50646359!
speedOf: aFormulaOneCar 


		(aFormulaOneCar turboActivations = 1)  ifTrue: [ ^ aFormulaOneCar getSpeed * 12 / 10 ].
		(aFormulaOneCar turboActivations = 2 ) ifTrue: [ ^ aFormulaOneCar getSpeed * 11 / 10 ].
 ^ aFormulaOneCar getSpeed * 105 / 100.

! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:05:29'!
FAILURE!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 12:05:29'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:05:29'!
FAILURE!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:05:50'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:05:55'!
ERROR!
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:03:26' prior: 50646466!
speedOf: aFormulaOneCar 


		(aFormulaOneCar turboActivations = 1)  ifTrue: [ ^ aFormulaOneCar getSpeed * 12 / 10 ].
		(aFormulaOneCar turboActivations = 2 ) ifTrue: [ ^ aFormulaOneCar getSpeed * 11 / 10 ].
		(aFormulaOneCar turboActivations = 3 ) ifTrue: [ ^ aFormulaOneCar getSpeed * 105 / 100 ].

! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:06:41' prior: 50646575!
speedOf: aFormulaOneCar 


		(aFormulaOneCar turboActivations = 1)  ifTrue: [ ^ aFormulaOneCar getSpeed * 12 / 10 ].
		(aFormulaOneCar turboActivations = 2 ) ifTrue: [ ^ aFormulaOneCar getSpeed * 11 / 10 ].
		(aFormulaOneCar turboActivations = 3 ) ifTrue: [ ^ aFormulaOneCar getSpeed * 105 / 100 ].

^ aFormulaOneCar getSpeed ! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 12:06:45'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 12:06:45'!
PASSED!
!FormulaOneCar methodsFor: 'initialization' stamp: 'JB 5/5/2023 12:07:33' prior: 50644453!
initializeDrivenBy: aDriver 

	driver := aDriver.
	turboActivations := 0.
	speed := 0*kilometer/hour.
	traveledDistance := 0.
	turbo := TurboDeactivated  new. ! !
!FormulaOneCar methodsFor: 'turbo' stamp: 'JB 5/5/2023 12:07:38' prior: 50645322!
deactivateTurboWhenActivated
	turbo := TurboDeactivated  new.
	! !
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'JB 5/5/2023 12:07:42' prior: 50644853!
activateTurboInSectorWithTurbo
	

	turboActivations := turboActivations + 1. 
	turbo := TurboActivated new.! !

!methodRemoval: FormulaOneCar #isTurboActivated stamp: 'JB 5/5/2023 12:07:59'!
isTurboActivated
	
	^turboActivated!

!classDefinition: #FormulaOneCar category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 12:08:07'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed traveledDistance currentSector turboActivations turbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 12:08:11'!
ERROR!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 12:08:11'!
ERROR!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:08:11'!
ERROR!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:08:11'!
ERROR!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 12:08:11'!
ERROR!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 12:08:11'!
ERROR!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 12:08:11'!
ERROR!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:08:11'!
ERROR!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 12:08:11'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 12:08:11'!
PASSED!
!FormulaOneCar methodsFor: 'testing' stamp: 'JB 5/5/2023 12:08:53'!
isTurboActivated
	^turbo isTurboActivated! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:09:16'!
isTurboActivated
	^true ! !
!TurboDeactivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:09:31'!
isTurboActivated
	^false! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 12:09:35'!
PASSED!

Object subclass: #Turbo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #Turbo category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 12:13:50'!
Object subclass: #Turbo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Turbo subclass: #TurboLevelOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboLevelOne category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 12:14:06'!
Turbo subclass: #TurboLevelOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Turbo subclass: #TurboLevelTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboLevelTwo category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 12:14:10'!
Turbo subclass: #TurboLevelTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Turbo subclass: #TurboLevelThree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboLevelThree category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 12:14:14'!
Turbo subclass: #TurboLevelThree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

Turbo subclass: #TurboLevelCero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #TurboLevelCero category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 12:14:42'!
Turbo subclass: #TurboLevelCero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #FormulaOneCar category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 12:15:14'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed traveledDistance currentSector turboActivations turboStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:15:14' prior: 50645842!
speed

	^turboStatus speedOf: self. 
"
	turboActivated ifTrue: [
		turboActivations = 1 ifTrue: [ ^ speed * 12 / 10 ].
		turboActivations = 2 ifTrue: [ ^ speed * 11 / 10 ].
		turboActivations = 3 ifTrue: [ ^ speed * 105 / 100 ].
	].

	^speed"! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:15:14' prior: 50645706!
deactivateTurbo

	turboStatus deactivateTurboTo: self! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:15:14' prior: 50645701!
activateTurbo


	turboStatus activateTurboTo: self in: currentSector! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:15:14' prior: 50646702!
activateTurboInSectorWithTurbo
	

	turboActivations := turboActivations + 1. 
	turboStatus := TurboActivated new.! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:15:14' prior: 50646697!
deactivateTurboWhenActivated
	turboStatus := TurboDeactivated  new.
	! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:15:14' prior: 50646689!
initializeDrivenBy: aDriver 

	driver := aDriver.
	turboActivations := 0.
	speed := 0*kilometer/hour.
	traveledDistance := 0.
	turboStatus := TurboDeactivated  new. ! !
!FormulaOneCar methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:15:14' prior: 50646809!
isTurboActivated
	^turboStatus isTurboActivated! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 12:15:19'!
PASSED!

Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed traveledDistance currentSector turboActivations turboStatus turboLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #FormulaOneCar category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 12:15:30'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed traveledDistance currentSector turboActivations turboStatus turboLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!FormulaOneCar methodsFor: 'initialization' stamp: 'JB 5/5/2023 12:16:19' prior: 50647013!
initializeDrivenBy: aDriver 

	driver := aDriver.
	turboActivations := 0.
	speed := 0*kilometer/hour.
	traveledDistance := 0.
	turboStatus := TurboDeactivated  new. 
	turboLevel:= TurboLevelCero new . ! !
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'JB 5/5/2023 12:17:11' prior: 50647000!
activateTurboInSectorWithTurbo
	

	turboActivations := turboActivations + 1. 
	turboLevel  := turboLevel next. 
	turboStatus := TurboActivated new.! !
!Turbo methodsFor: 'nil' stamp: 'JB 5/5/2023 12:17:48'!
next
	self subclassResponsibility ! !
!TurboLevelCero methodsFor: 'nil' stamp: 'JB 5/5/2023 12:18:08' overrides: 50647149!
next 
	^TurboLevelOne  new. ! !
!TurboLevelOne methodsFor: 'nil' stamp: 'JB 5/5/2023 12:18:19' overrides: 50647149!
next 
	^TurboLevelTwo new. ! !

!classDefinition: #TurboExhausted category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 12:19:34'!
Turbo subclass: #TurboExhausted
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!TurboLevelThree methodsFor: 'nil' stamp: 'JB 5/5/2023 12:19:07' overrides: 50647149!
next 
	^TurboExhausted  new. 
	! !
!TurboExhausted methodsFor: 'nil' stamp: 'JB 5/5/2023 12:19:47' overrides: 50647149!
next 
	^self! !
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:21:03' prior: 50646588!
speedOf: aFormulaOneCar 

"
		(aFormulaOneCar turboActivations = 1)  ifTrue: [ ^ aFormulaOneCar getSpeed * 12 / 10 ].
		(aFormulaOneCar turboActivations = 2 ) ifTrue: [ ^ aFormulaOneCar getSpeed * 11 / 10 ].
		(aFormulaOneCar turboActivations = 3 ) ifTrue: [ ^ aFormulaOneCar getSpeed * 105 / 100 ].

^ aFormulaOneCar getSpeed "
	^aFormulaOneCar getSpeedWhenTurboActivated! !
!FormulaOneCar methodsFor: 'moving' stamp: 'JB 5/5/2023 12:22:02'!
getSpeedWhenTurboActivated
	^turboLevel  speedOf: speed. ! !
!Turbo methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:22:30'!
speedOf: aSpeed
	self subclassResponsibility ! !
!TurboExhausted methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:22:45' overrides: 50647196!
speedOf: aSpeed
	^aSpeed! !
!TurboLevelCero methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:22:53' overrides: 50647196!
speedOf: aSpeed
	^aSpeed! !
!TurboLevelCero methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:23:29' prior: 50647206 overrides: 50647196!
speedOf: aSpeed
	^aSpeed * 12 / 10
	
! !
!TurboLevelCero methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:23:39' prior: 50647211 overrides: 50647196!
speedOf: aSpeed
	^aSpeed 
	
! !
!TurboLevelOne methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:24:17' overrides: 50647196!
speedOf: aSpeed
	^aSpeed * 12 / 10
		! !
!TurboLevelTwo methodsFor: 'nil' stamp: 'JB 5/5/2023 12:24:54' overrides: 50647149!
next 
	^TurboLevelThree new ! !
!TurboLevelTwo methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:25:18' overrides: 50647196!
speedOf: aSpeed
	^aSpeed * 11 / 10  ! !
!TurboLevelThree methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:25:47' overrides: 50647196!
speedOf:aSpeed
	^aSpeed * 105/100! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 12:25:57'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 12:25:57'!
PASSED!
!FormulaOneCar methodsFor: 'turbo-private' stamp: 'JB 5/5/2023 12:26:25' prior: 50647142!
activateTurboInSectorWithTurbo
	


	turboLevel  := turboLevel next. 
	turboStatus := TurboActivated new.! !
!FormulaOneCar methodsFor: 'initialization' stamp: 'JB 5/5/2023 12:26:30' prior: 50647132!
initializeDrivenBy: aDriver 

	driver := aDriver.

	speed := 0*kilometer/hour.
	traveledDistance := 0.
	turboStatus := TurboDeactivated  new. 
	turboLevel:= TurboLevelCero new . ! !

!methodRemoval: FormulaOneCar #turboActivations stamp: 'JB 5/5/2023 12:26:36'!
turboActivations
	
	^turboActivations!

!classDefinition: #FormulaOneCar category: 'ISW1-2022-1C-Parcial-1' stamp: 'JB 5/5/2023 12:26:47'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed traveledDistance currentSector turboStatus turboLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!TurboActivated methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 12:27:29' prior: 50647177!
speedOf: aFormulaOneCar 

	^aFormulaOneCar getSpeedWhenTurboActivated! !
!Track methodsFor: 'car position' stamp: 'JB 5/5/2023 19:32:08' prior: 50631112!
sectorOf: aCar ifNone: aBlock

	 | ix |
	
	ix := 1.
	[ix <= sectors size] whileTrue: [ | sector |
		sector :=	sectors at: ix.
		(sector includes: aCar) ifTrue: [ ^ sector ].
		ix := ix + 1.
	].

	ix:= sectors findFirst: [:sector| sector includes: aCar  ]. 
	ix =0 ifFalse:  	[^sectors at: ix]. 

	^ aBlock value.! !
!Track methodsFor: 'car position' stamp: 'JB 5/5/2023 19:32:14' prior: 50647362!
sectorOf: aCar ifNone: aBlock

	 | ix |
	"
	ix := 1.
	[ix <= sectors size] whileTrue: [ | sector |
		sector :=	sectors at: ix.
		(sector includes: aCar) ifTrue: [ ^ sector ].
		ix := ix + 1.
	].
"
	ix:= sectors findFirst: [:sector| sector includes: aCar  ]. 
	ix =0 ifFalse:  	[^sectors at: ix]. 

	^ aBlock value.! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 19:32:22'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 19:32:22'!
PASSED!
!Track methodsFor: 'car position' stamp: 'JB 5/5/2023 19:33:05' prior: 50647375!
sectorOf: aCar ifNone: aBlock
	|ix|
	ix:= sectors findFirst: [:sector| sector includes: aCar  ]. 
	ix =0 ifFalse:  	[^sectors at: ix]. 

	^ aBlock value.! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 19:33:06'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 19:33:06'!
PASSED!
!Track methodsFor: 'car position' stamp: 'JB 5/5/2023 19:40:10' prior: 50647475!
sectorOf: aCar ifNone: aBlock
	|ix|
	ix:= sectors detect: [:sector| sector includes: aCar  ]. 
	ix =0 ifFalse:  	[^sectors at: ix]. 

	^ aBlock value.! !
!Track methodsFor: 'car position' stamp: 'JB 5/5/2023 19:41:28' prior: 50647570!
sectorOf: aCar ifNone: aBlock
	sectors detect: [:sector| sector includes: aCar  ] ifNone:[^ aBlock value].  
	

	.! !
!Track methodsFor: 'car position' stamp: 'JB 5/5/2023 19:41:51' prior: 50647578!
sectorOf: aCar ifNone: aBlock
	^sectors detect: [:sector| sector includes: aCar  ] ifNone:[^ aBlock value].  
	
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 19:41:52'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 19:41:52'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 19:41:52'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 19:41:52'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 19:41:52'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 19:41:52'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 19:41:52'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 19:41:52'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 19:41:52'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 19:41:53'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 19:41:53'!
PASSED!
!Track methodsFor: 'car position' stamp: 'JB 5/5/2023 20:09:11' prior: 50631071!
positionOf: aCar
"
	| accumulatedLength ix sector |
	
	ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].
"
	|accumulatedLength|

		accumulatedLength := (sectors collect: [:sector|sector]  from:   1 to: ( sectors findFirst: [:sector| sector includes:  aCar] )) inject:  0 * kilometer  into: [:acc :sector |
				 acc + sector length. 	
			] . 

	^ accumulatedLength + ((sectors detect:[:sector| sector includes: aCar ]) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 20:09:15'!
FAILURE!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 20:09:15'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 20:09:15'!
FAILURE!

sectors!

sectors findFirst: [:sector| sector includes:  aCar]!

sectors collect: [:sector|sector]  from:   1 to: ( sectors findFirst: [:sector| sector includes:  aCar] )!
!Track methodsFor: 'car position' stamp: 'JB 5/5/2023 20:13:56' prior: 50647679!
positionOf: aCar
"
	| accumulatedLength ix sector |
	
	ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].
"
	|accumulatedLength|

		accumulatedLength := (sectors collect: [:sector|sector]  from:   1 to: ( (sectors findFirst: [:sector| sector includes:  aCar] )+1)) inject:  0 * kilometer  into: [:acc :sector |
				 acc + sector length. 	
			] . 

	^ accumulatedLength + ((sectors detect:[:sector| sector includes: aCar ]) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 20:14:01'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 20:14:01'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 20:14:01'!
ERROR!
!Track methodsFor: 'car position' stamp: 'JB 5/5/2023 20:19:42' prior: 50647798!
positionOf: aCar

	| accumulatedLength ix sector |
	
	ix := 1.
	sector := (sectors at: ix).
	accumulatedLength := 0 * kilometer.

	[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	].
"
	|accumulatedLength|

		accumulatedLength := (sectors collect: [:sector|sector]  from:   1 to: ( (sectors findFirst: [:sector| sector includes:  aCar] )+1)) inject:  0 * kilometer  into: [:acc :sector |
				 acc + sector length. 	
			] . 
"
	^ accumulatedLength + (sector positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'JB 5/5/2023 20:19:43'!
PASSED!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/git/2023-1c/01-CodigoRepetido/CodigoRepetido-Ejercicio.st----!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 20:21:45'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 20:21:45'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 20:21:45'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 20:21:45'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:21:45'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:21:45'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 20:21:45'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 20:21:45'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:25:16'!
doingThis: aBlock with: aCustomerBook shouldNotTakeMoreThan: aTime

	| millisecondsBeforeRunning millisecondsAfterRunning |
	

	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) <  aTime
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:25:25' prior: 50648330!
doingThis: aBlock with: aCustomerBook shouldNotTakeMoreThan: aTime

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) <  aTime
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:26:04' prior: 50648345!
doingThis: aBlock with: aCustomerBook shouldNotTakeMoreThan: aTime

	| millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	aBlock value:aCustomerBook. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) <  aTime
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:27:07' prior: 50648055!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds
	self doingThis:  [:customerBook|customerBook addCustomerNamed: 'John Lennon'  ] with: CustomerBook new  shouldNotTakeMoreThan: 50 *second 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:27:26' prior: 50648375!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds
	self doingThis:  [:customerBook|customerBook addCustomerNamed: 'John Lennon'  ] with: CustomerBook new  shouldNotTakeMoreThan: 50 *millisecond 
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 20:27:27'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 20:27:27'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 20:27:27'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 20:27:27'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 20:27:27'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:27:27'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:27:27'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 20:27:27'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 20:27:27'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:27:47' prior: 50648384!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds
	self doingThis:  [:customerBook|customerBook addCustomerNamed: 'John Lennon'  ] 
		with: CustomerBook new  
		shouldNotTakeMoreThan: 50 *millisecond 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:28:19'!
createEmptyCustomerBook

	^ CustomerBook new! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:28:19' prior: 50648092!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := self createEmptyCustomerBook.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:28:19' prior: 50648138!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := self createEmptyCustomerBook.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:28:19' prior: 50648072!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning paulMcCartney |
	
	customerBook := self createEmptyCustomerBook.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	  
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:28:19' prior: 50648175!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := self createEmptyCustomerBook.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:28:19' prior: 50648159!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := self createEmptyCustomerBook.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:28:20' prior: 50648427!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds
	self doingThis:  [:customerBook|customerBook addCustomerNamed: 'John Lennon'  ] 
		with: self createEmptyCustomerBook  
		shouldNotTakeMoreThan: 50 *millisecond 
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:28:20' prior: 50648104!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := self createEmptyCustomerBook.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:28:20' prior: 50648119!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := self createEmptyCustomerBook.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:29:58'!
createCustomerBookWithPaulMcCartney
	| customerBook  |
	
	customerBook := self createEmptyCustomerBook.
	customerBook addCustomerNamed: 'Paul McCartney'.
	^customerBook .
	! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:31:31' prior: 50648476!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds
	self doingThis: [:customerBook | customerBook  remove:  'Paul McCartney'] with:   self createCustomerBookWithPaulMcCartney    shouldNotTakeMoreThan: 100*millisecond! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 20:31:33'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:32:01' prior: 50648586!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds
	self doingThis: [:customerBook | customerBook  removeCustomerNamed:  'Paul McCartney'] with:   self createCustomerBookWithPaulMcCartney    shouldNotTakeMoreThan: 100*millisecond! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 20:32:02'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 20:32:02'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 20:32:02'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 20:32:02'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 20:32:02'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:32:02'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:32:02'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 20:32:02'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 20:32:02'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:32:18' prior: 50648600!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds
	self doingThis: [:customerBook | customerBook  removeCustomerNamed:  'Paul McCartney'] 
		with:   self createCustomerBookWithPaulMcCartney   
			 shouldNotTakeMoreThan: 100*millisecond! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 20:32:19'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 20:32:19'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 20:32:19'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 20:32:19'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 20:32:19'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:32:19'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:32:19'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 20:32:19'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 20:32:19'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:39:33' prior: 50648454!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook |
	
	customerBook := self createCustomerBookWithPaulMcCartney .  
	customerBook suspendCustomerNamed: 'Paul McCartney'.
	^customerBook ." 
	sEnd of block expected ->customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
"! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:39:59' prior: 50648689!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook |
	
	customerBook := self createCustomerBookWithPaulMcCartney .  
	customerBook suspendCustomerNamed: 'Paul McCartney'.
" 
	sEnd of block expected ->customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
"! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:40:31'!
createAndSuspendACustomerBookWithPaulMcCartney

	| customerBook |
	
	customerBook := self createCustomerBookWithPaulMcCartney .  
	customerBook suspendCustomerNamed: 'Paul McCartney'! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:40:31' prior: 50648709!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	self createAndSuspendACustomerBookWithPaulMcCartney.
" 
	sEnd of block expected ->customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
"! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:42:12' prior: 50648737!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	|customerBook|
	
	customerBook:= self createAndSuspendACustomerBookWithPaulMcCartney.
 
	customerBook  removeCustomerNamed: 'PaulMcCartney'.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: 'Paul McCartney').

! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:42:28' prior: 50648754!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	|customerBook|
	
	customerBook:= self createAndSuspendACustomerBookWithPaulMcCartney.
 
	customerBook  removeCustomerNamed: 'PaulMcCartney'.
	"
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: 'Paul McCartney').
"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:43:06'!
createSuspendAndRemoveACustomerBookWithPaulMcCartney

	|customerBook|
	
	customerBook:= self createAndSuspendACustomerBookWithPaulMcCartney.
 
	customerBook  removeCustomerNamed: 'PaulMcCartney'! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:43:06' prior: 50648772!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	self createSuspendAndRemoveACustomerBookWithPaulMcCartney.
	"
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: 'Paul McCartney').
"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:43:50' prior: 50648798!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook
	|customerBook|

	customerBook := self createSuspendAndRemoveACustomerBookWithPaulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: 'Paul McCartney').

! !

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:43:51'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:44:07' prior: 50648789!
createSuspendAndRemoveACustomerBookWithPaulMcCartney

	|customerBook|
	
	customerBook:= self createAndSuspendACustomerBookWithPaulMcCartney.
 
	customerBook  removeCustomerNamed: 'PaulMcCartney'
	^customerBook! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:44:21' prior: 50648728!
createAndSuspendACustomerBookWithPaulMcCartney

	| customerBook |
	
	customerBook := self createCustomerBookWithPaulMcCartney .  
	customerBook suspendCustomerNamed: 'Paul McCartney'
	^customerBook! !

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:44:26'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:44:45' prior: 50648833!
createSuspendAndRemoveACustomerBookWithPaulMcCartney

	|customerBook|
	
	customerBook:= self createAndSuspendACustomerBookWithPaulMcCartney.
 
	customerBook  removeCustomerNamed: 'Paul McCartney'
	^customerBook! !

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:44:53'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:45:02' prior: 50648843!
createAndSuspendACustomerBookWithPaulMcCartney

	| customerBook |
	
	customerBook := self createCustomerBookWithPaulMcCartney .  
	customerBook suspendCustomerNamed: 'Paul McCartney'.
	^customerBook! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 20:45:03'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 20:45:03'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 20:45:03'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 20:45:03'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:45:03'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:45:03'!
ERROR!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 20:45:04'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 20:45:04'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:45:04'!
ERROR!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:45:13'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:45:20' prior: 50648857!
createSuspendAndRemoveACustomerBookWithPaulMcCartney

	|customerBook|
	
	customerBook:= self createAndSuspendACustomerBookWithPaulMcCartney.
 
	customerBook  removeCustomerNamed: 'Paul McCartney'.
	^customerBook! !

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:45:23'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 20:45:23'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 20:45:23'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 20:45:23'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 20:45:23'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:45:23'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:45:23'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 20:45:23'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 20:45:23'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:46:15' prior: 50648558!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	customerBook := self createAndSuspendACustomerBookWithPaulMcCartney . 
	paulMcCartney := 'Paul McCartney'
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:46:17' prior: 50648962!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	customerBook := self createAndSuspendACustomerBookWithPaulMcCartney . 
	paulMcCartney := 'Paul McCartney'.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:46:18'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 20:46:18'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 20:46:18'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 20:46:18'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 20:46:18'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:46:18'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:46:18'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 20:46:18'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 20:46:18'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:47:07'!
m1: paulMcCartney m2: customerBook

	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney)! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:47:07' prior: 50648980!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	customerBook := self createAndSuspendACustomerBookWithPaulMcCartney . 
	paulMcCartney := 'Paul McCartney'.
	
	self m1: paulMcCartney m2: customerBook.
	

	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:47:12'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 20:47:12'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 20:47:12'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 20:47:12'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 20:47:12'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:47:12'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 20:47:12'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 20:47:12'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 20:47:12'!
PASSED!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'paulMcCartney'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'paulMcCartney'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'JB 5/5/2023 20:59:04'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'paulmcCartney'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:59:01'!
assertThatThis:  customerBook shouldHaveNumberOfActiveCustomers: expectedNumberOfActiveCustomers numberOfSuspendedCustomers: expectedNumberOfSuspendedCustomers totalNumberOfCustomers: expectedNumberOfCustomers andShouldHavePaulMcCartney: shouldHavePaul 

	self assert: expectedNumberOfActiveCustomers equals: customerBook numberOfActiveCustomers.
	self assert: expectedNumberOfSuspendedCustomers equals: customerBook numberOfSuspendedCustomers.
	self assert: expectedNumberOfCustomers equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed:  paulmcCartney)! !

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'JB 5/5/2023 20:59:51'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'paulmcCartney johnlennon'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 20:59:50'!
setup 
	paulmcCartney  := 'Paul McCartney'.
	johnlennon := 'John Lennon'! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:00:49' prior: 50648497!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.

	customerBook addCustomerNamed: johnlennon.
	customerBook suspendCustomerNamed: johnlennon.
	
	[ customerBook suspendCustomerNamed: johnlennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnlennon) ]
! !

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:00:52'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:02:18' overrides: 16961394!
setUp 
	paulmcCartney  := 'Paul McCartney'.
	johnlennon := 'John Lennon'! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:02:20'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:02:20'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:02:20'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:02:20'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:02:20'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:02:20'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:02:20'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:02:20'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:02:43' prior: 50648515!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.
	
	customerBook addCustomerNamed: johnlennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnlennon) ]
! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:02:46'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:02:46'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:02:46'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:02:46'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:02:46'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:02:46'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:02:46'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:02:46'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:02:46'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:02:58' prior: 50648813!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook
	|customerBook|

	customerBook := self createSuspendAndRemoveACustomerBookWithPaulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulmcCartney ).

! !

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:02:59'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:02:59'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:02:59'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:02:59'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:02:59'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:02:59'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:02:59'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:02:59'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:02:59'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:03:15' prior: 50649043!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook |
	customerBook := self createAndSuspendACustomerBookWithPaulMcCartney . 
	
	self m1: paulmcCartney m2: customerBook.
	

	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:03:17'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:03:17'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:03:17'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:03:17'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:03:17'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:03:17'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:03:17'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:03:17'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:03:17'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:03:26' prior: 50648542!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := self createEmptyCustomerBook.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: paulmcCartney .
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:03:39' prior: 50649339!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.

	customerBook addCustomerNamed: johnlennon.
	
	[ customerBook removeCustomerNamed: paulmcCartney .
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnlennon) ]
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:03:48'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:03:48'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:03:48'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:03:48'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:03:48'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:03:48'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:03:48'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:03:48'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:03:48'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:04:03' prior: 50648644!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds
	self doingThis: [:customerBook | customerBook  removeCustomerNamed:  paulmcCartney ] 
		with:   self createCustomerBookWithPaulMcCartney   
			 shouldNotTakeMoreThan: 100*millisecond! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:04:04'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:04:04'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:04:04'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:04:04'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:04:04'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:04:04'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:04:04'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:04:04'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:04:04'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:04:15' prior: 50648532!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds
	self doingThis:  [:customerBook|customerBook addCustomerNamed:johnlennon  ] 
		with: self createEmptyCustomerBook  
		shouldNotTakeMoreThan: 50 *millisecond 
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:04:18'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:04:18'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:04:18'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:04:18'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:04:18'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:04:18'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:04:18'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:04:18'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:04:18'!
PASSED!

!methodRemoval: CustomerBookTest #setup stamp: 'JB 5/5/2023 21:04:21'!
setup 
	paulmcCartney  := 'Paul McCartney'.
	johnlennon := 'John Lennon'!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:04:44' prior: 50649031!
m1: paulMcCartneey m2: customerBook

	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartneey)! !

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'JB 5/5/2023 21:04:58'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'paulMcCartney johnlennon'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 21:04:58' prior: 50649106!
assertThatThis:  customerBook shouldHaveNumberOfActiveCustomers: expectedNumberOfActiveCustomers numberOfSuspendedCustomers: expectedNumberOfSuspendedCustomers totalNumberOfCustomers: expectedNumberOfCustomers andShouldHavePaulMcCartney: shouldHavePaul 

	self assert: expectedNumberOfActiveCustomers equals: customerBook numberOfActiveCustomers.
	self assert: expectedNumberOfSuspendedCustomers equals: customerBook numberOfSuspendedCustomers.
	self assert: expectedNumberOfCustomers equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed:  paulMcCartney)! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 21:04:58' prior: 50649296!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook |
	customerBook := self createAndSuspendACustomerBookWithPaulMcCartney . 
	
	self m1: paulMcCartney m2: customerBook.
	

	
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 21:04:58' prior: 50649163 overrides: 16961394!
setUp 
	paulMcCartney  := 'Paul McCartney'.
	johnlennon := 'John Lennon'! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 21:04:58' prior: 50649355!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.

	customerBook addCustomerNamed: johnlennon.
	
	[ customerBook removeCustomerNamed: paulMcCartney .
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnlennon) ]
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 21:04:58' prior: 50649403!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds
	self doingThis: [:customerBook | customerBook  removeCustomerNamed:  paulMcCartney ] 
		with:   self createCustomerBookWithPaulMcCartney   
			 shouldNotTakeMoreThan: 100*millisecond! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 21:04:58' prior: 50649246!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook
	|customerBook|

	customerBook := self createSuspendAndRemoveACustomerBookWithPaulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney ).

! !

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'JB 5/5/2023 21:05:09'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'paulMcCartney johnLennon'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 21:05:09' prior: 50649198!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.
	
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 21:05:09' prior: 50649549 overrides: 16961394!
setUp 
	paulMcCartney  := 'Paul McCartney'.
	johnLennon := 'John Lennon'! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 21:05:09' prior: 50649555!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.

	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: paulMcCartney .
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 21:05:09' prior: 50649447!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds
	self doingThis:  [:customerBook|customerBook addCustomerNamed:johnLennon  ] 
		with: self createEmptyCustomerBook  
		shouldNotTakeMoreThan: 50 *millisecond 
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'JB 5/5/2023 21:05:09' prior: 50649142!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.

	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:05:41' prior: 50649628!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.

	customerBook addCustomerNamed: johnLennon.
	"
	[ customerBook removeCustomerNamed: paulMcCartney .
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
"! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:05:54'!
createCustomerBookWithJohnLennon

	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.

	customerBook addCustomerNamed: johnLennon! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:05:54' prior: 50649670!
test04CanNotRemoveAnInvalidCustomer
	
	self createCustomerBookWithJohnLennon.
	"
	[ customerBook removeCustomerNamed: paulMcCartney .
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
"! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:06:10' prior: 50649685!
createCustomerBookWithJohnLennon

	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.

	customerBook addCustomerNamed: johnLennon. 
	^customerBook ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:06:39' prior: 50649693!
test04CanNotRemoveAnInvalidCustomer
	|customerBook|	
	customerBook := self createCustomerBookWithJohnLennon.
	
	[ customerBook removeCustomerNamed: paulMcCartney .
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:06:40'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:06:40'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:06:40'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:06:40'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:06:40'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:06:40'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:06:40'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:06:40'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:06:40'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:07:52' prior: 50649538!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook |
	customerBook := self createAndSuspendACustomerBookWithPaulMcCartney . 
	
	self assertThatThis: customerBook  shouldHaveNumberOfActiveCustomers:0   numberOfSuspendedCustomers:  1 totalNumberOfCustomers: 1   andShouldHavePaulMcCartney: true 

	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:07:53'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:07:53'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:07:53'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:07:53'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:07:53'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:07:53'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:07:53'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:07:53'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:07:53'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:08:22' prior: 50649761!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	self assertThatThis:self createAndSuspendACustomerBookWithPaulMcCartney  
		shouldHaveNumberOfActiveCustomers:0  
			 numberOfSuspendedCustomers:  1
				 totalNumberOfCustomers: 1   
					andShouldHavePaulMcCartney: true 

	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:08:23'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:08:23'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:08:23'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:08:23'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:08:23'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:08:23'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:08:23'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:08:23'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:08:23'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:10:13' prior: 50649516!
assertThatThis:  customerBook shouldHaveNumberOfActiveCustomers: expectedNumberOfActiveCustomers numberOfSuspendedCustomers: expectedNumberOfSuspendedCustomers totalNumberOfCustomers: expectedNumberOfCustomers andShouldHavePaulMcCartney: shouldHavePaul 

	self assert: expectedNumberOfActiveCustomers equals: customerBook numberOfActiveCustomers.
	self assert: expectedNumberOfSuspendedCustomers equals: customerBook numberOfSuspendedCustomers.
	self assert: expectedNumberOfCustomers equals: customerBook numberOfCustomers.
	self assert: ((customerBook includesCustomerNamed:  paulMcCartney) xor: shouldHavePaul)  ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:11:01' prior: 50649581!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	self  assertThatThis:self createSuspendAndRemoveACustomerBookWithPaulMcCartney   
		shouldHaveNumberOfActiveCustomers:   0
			numberOfSuspendedCustomers: 0
 			  totalNumberOfCustomers:   0
				andShouldHavePaulMcCartney:  false! !

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:11:02'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:14:46' prior: 50649854!
assertThatThis:  customerBook shouldHaveNumberOfActiveCustomers: expectedNumberOfActiveCustomers numberOfSuspendedCustomers: expectedNumberOfSuspendedCustomers totalNumberOfCustomers: expectedNumberOfCustomers andShouldHavePaulMcCartney: shouldHavePaul 

	self assert: expectedNumberOfActiveCustomers equals: customerBook numberOfActiveCustomers.
	self assert: expectedNumberOfSuspendedCustomers equals: customerBook numberOfSuspendedCustomers.
	self assert: expectedNumberOfCustomers equals: customerBook numberOfCustomers.
	self assert: ((shouldHavePaul not   or: (customerBook includesCustomerNamed:  paulMcCartney) not ) not)  ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:14:48'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:14:48'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:14:48'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:14:48'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:14:48'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:14:48'!
FAILURE!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:14:48'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:14:48'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:14:48'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:18:25' prior: 50649894!
assertThatThis:  customerBook shouldHaveNumberOfActiveCustomers: expectedNumberOfActiveCustomers numberOfSuspendedCustomers: expectedNumberOfSuspendedCustomers totalNumberOfCustomers: expectedNumberOfCustomers andShouldHavePaulMcCartney: shouldHavePaul 

	self assert: expectedNumberOfActiveCustomers equals: customerBook numberOfActiveCustomers.
	self assert: expectedNumberOfSuspendedCustomers equals: customerBook numberOfSuspendedCustomers.
	self assert: expectedNumberOfCustomers equals: customerBook numberOfCustomers.
	(shouldHavePaul ) ifTrue: [ self assert:  (customerBook  includesCustomerNamed:  paulMcCartney )] ifFalse: [self deny:  (customerBook  includesCustomerNamed:  paulMcCartney )  ]  
	
	! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:18:26'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:18:26'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:18:26'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:18:26'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:18:26'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:18:26'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:18:26'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:18:26'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:18:34' prior: 50649951!
assertThatThis:  customerBook shouldHaveNumberOfActiveCustomers: expectedNumberOfActiveCustomers numberOfSuspendedCustomers: expectedNumberOfSuspendedCustomers totalNumberOfCustomers: expectedNumberOfCustomers andShouldHavePaulMcCartney: shouldHavePaul 

	self assert: expectedNumberOfActiveCustomers equals: customerBook numberOfActiveCustomers.
	self assert: expectedNumberOfSuspendedCustomers equals: customerBook numberOfSuspendedCustomers.
	self assert: expectedNumberOfCustomers equals: customerBook numberOfCustomers.
	(shouldHavePaul ) ifTrue: [ self assert:  (customerBook  includesCustomerNamed:  paulMcCartney )] 
		ifFalse: [self deny:  (customerBook  includesCustomerNamed:  paulMcCartney )  ]  
	
	! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:19:07' prior: 50649606!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook  |
			
	customerBook := self createCustomerBookWithJohnLennon .
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:19:09'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:19:09'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:19:09'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:19:09'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:19:09'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:19:09'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:19:09'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:19:09'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:19:09'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:19:33' prior: 50649653!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.

	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	"
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
"! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:19:57'!
createAndSuspendCustomerBookWithJohnLennon

	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.

	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:19:57' prior: 50650079!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	self createAndSuspendCustomerBookWithJohnLennon.
	"
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
"! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:20:08' prior: 50650095!
createAndSuspendCustomerBookWithJohnLennon

	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.

	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon
	^customerBook ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:20:26' prior: 50650105!
test08CanNotSuspendAnAlreadySuspendedCustomer
	|customerBook |
	customerBook  := self createAndSuspendCustomerBookWithJohnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:20:27'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:20:33' prior: 50650118!
createAndSuspendCustomerBookWithJohnLennon

	| customerBook  |
			
	customerBook := self createEmptyCustomerBook.

	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	^customerBook ! !

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:20:37'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:20:37'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:20:54' prior: 50650032!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook  |
			
	customerBook := self createCustomerBookWithJohnLennon .
	
	[ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:22:58'!
atemptingToSupendAnIncorrectCustomerShouldNotModifyTheCustomerBook: customerBook

	^ [ customerBook suspendCustomerNamed: 'George Harrison'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:22:58' prior: 50650189!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook  |
			
	customerBook := self createCustomerBookWithJohnLennon .
	
	self atemptingToSupendAnIncorrectCustomerShouldNotModifyTheCustomerBook: customerBook
! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:23:01'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:23:01'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:23:01'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:23:01'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:23:01'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:23:01'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:23:01'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:23:01'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:23:01'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:25:26'!
atemptingToEecuteABlockAndFailing: aBlock shouldNotModifyTheCustomerBook: customerBook

	^ [aBlock value: customerBook 
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:25:54' prior: 50650258!
atemptingToEecuteABlockAndFailing: aBlockRegardingACustomerBook shouldNotModifyTheCustomerBook: customerBook

	^ [aBlockRegardingACustomerBook value: customerBook 
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:27:25' prior: 50650216!
test07CanNotSuspendAnInvalidCustomer
	
	self atemptingToEecuteABlockAndFailing: [:customerBook| customerBook suspendCustomerNamed: 'George Harrison'. ]		 
		shouldNotModifyTheCustomerBook: self createCustomerBookWithJohnLennon 
! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:27:27'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:27:45' prior: 50650284!
test07CanNotSuspendAnInvalidCustomer
	
	self atemptingToEecuteABlockAndFailing: [:customerBook| customerBook suspendCustomerNamed: 'George Harrison'. ]		 
		shouldNotModifyTheCustomerBook: (self createCustomerBookWithJohnLennon) 
! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:27:46'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:28:04' prior: 50650270!
atemptingToEecuteABlockAndFailing: aBlockRegardingACustomerBook shouldNotModifyTheCustomerBook: customerBook

	^ [aBlockRegardingACustomerBook value: customerBook .
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:28:08'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:28:08'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:28:08'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:28:08'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:28:08'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:28:08'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:28:08'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:28:08'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:28:08'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:28:16' prior: 50650298!
test07CanNotSuspendAnInvalidCustomer
	
	self atemptingToEecuteABlockAndFailing: [:customerBook| customerBook suspendCustomerNamed: 'George Harrison'. ]		 
		shouldNotModifyTheCustomerBook: self createCustomerBookWithJohnLennon
! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:28:17'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:28:17'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:28:17'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:28:17'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:28:17'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:28:17'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:28:17'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:28:17'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:28:17'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:29:22' prior: 50650128!
test08CanNotSuspendAnAlreadySuspendedCustomer
		self atemptingToEecuteABlockAndFailing:  	[ :customerBook | customerBook suspendCustomerNamed: johnLennon.]
			 shouldNotModifyTheCustomerBook: self createAndSuspendCustomerBookWithJohnLennon! !

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:29:23'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:29:23'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:29:23'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:29:23'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:29:23'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:29:23'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:29:23'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:29:23'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:29:23'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:33:30'!
atemptingToEecuteABlockAndFailing: aBlockRegardingACustomerBook andCatchingTheError: anErrorLabel  shouldNotModifyTheCustomerBook: customerBook

	^ [aBlockRegardingACustomerBook value: customerBook .
	self fail ]
		on:anErrorLabel  
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:34:13' prior: 50650312!
atemptingToEecuteABlockAndFailing: aBlockRegardingACustomerBook shouldNotModifyTheCustomerBook: customerBook

	^ self atemptingToEecuteABlockAndFailing: aBlockRegardingACustomerBook  andCatchingTheError: CantSuspend  shouldNotModifyTheCustomerBook: customerBook ! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:34:16'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:34:16'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:34:16'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:34:16'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:34:16'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:34:16'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:34:16'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:34:16'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:34:26' prior: 50650460!
atemptingToEecuteABlockAndFailing: aBlockRegardingACustomerBook shouldNotModifyTheCustomerBook: customerBook

	^ self atemptingToEecuteABlockAndFailing: aBlockRegardingACustomerBook  
		andCatchingTheError: CantSuspend  
			shouldNotModifyTheCustomerBook: customerBook ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/5/2023 21:35:41' prior: 50649714!
test04CanNotRemoveAnInvalidCustomer

	self atemptingToEecuteABlockAndFailing: [:customerBook| customerBook removeCustomerNamed: paulMcCartney ] 
		 andCatchingTheError: NotFound
			 shouldNotModifyTheCustomerBook:  self createCustomerBookWithJohnLennon.! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:35:43'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/5/2023 21:35:43'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/5/2023 21:35:43'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/5/2023 21:35:43'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/5/2023 21:35:43'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:35:43'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/5/2023 21:35:43'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/5/2023 21:35:43'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/5/2023 21:35:43'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'JB 5/6/2023 09:40:19' prior: 50648245!
removeCustomerNamed: aName 

	^active remove: aName  ifAbsent: [
			^suspended remove: aName  ifAbsent: [
					^NotFound signal
				]
		]
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/6/2023 09:40:21'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/6/2023 09:40:21'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/6/2023 09:40:21'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/6/2023 09:40:21'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/6/2023 09:40:21'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/6/2023 09:40:21'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/6/2023 09:40:21'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/6/2023 09:40:21'!
PASSED!

!methodRemoval: CustomerBookTest #m1:m2: stamp: 'JB 5/6/2023 09:42:07'!
m1: paulMcCartneey m2: customerBook

	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartneey)!
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:43:54'!
tryToAddACustomerAndFailThenCheckIfIsEmptyTheCustomerBook: customerBook

	^ [ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:43:54' prior: 50648441!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := self createEmptyCustomerBook.

	self tryToAddACustomerAndFailThenCheckIfIsEmptyTheCustomerBook: customerBook! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/6/2023 09:43:57'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'JB 5/6/2023 09:43:57'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'JB 5/6/2023 09:43:57'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'JB 5/6/2023 09:43:57'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'JB 5/6/2023 09:43:57'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'JB 5/6/2023 09:43:57'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'JB 5/6/2023 09:43:57'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'JB 5/6/2023 09:43:57'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'JB 5/6/2023 09:43:57'!
PASSED!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/parciales/Parciales/2021-2c/1erParcial/ISW1-2021-2C-1erParcial.st----!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:47:02' prior: 50650687!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

	| city |

	city := City new.
	
	"self assert: 0 * ep equals: city energyProduced."! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:47:18'!
emptyCity

	| city |

	city := City new! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:47:18' prior: 50651239!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

	self emptyCity.
	
	"self assert: 0 * ep equals: city energyProduced."! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:47:33' prior: 50651246!
emptyCity
	^City new! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:47:52' prior: 50651250!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

		
	self assert: 0 * ep equals: self emptyCity  energyProduced ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:47:54'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:48:19' prior: 50650694!
test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable

	| city |

	city := City new.
	city addService: self solarPlant.
	
	self assert: 500 * ep equals: city energyAvailable.! !

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:48:20'!
PASSED!

!methodRemoval: CityTest #emptyCity stamp: 'JB 5/6/2023 09:49:00'!
emptyCity
	^City new!
!CityTest methodsFor: 'testing' stamp: 'FRT 9/22/2021 19:15:27' prior: 50651261!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

	| city |

	city _ City new.
	self assert: 0 * ep equals: city energyProduced.! !
!CityTest methodsFor: 'testing' stamp: 'FRT 9/22/2021 19:15:27' prior: 50651484!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

	| city |

	city _ City new.
	self assert: 0 * ep equals: city energyProduced.! !
!CityTest methodsFor: 'testing' stamp: 'FRT 9/22/2021 19:15:27' prior: 50651491!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

	| city |

	city _ City new.
	self assert: 0 * ep equals: city energyProduced.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:03' prior: 50651498!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

	| city |

	city := City new.
	self assert: 0 * ep equals: city energyProduced.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:50:04'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:50:05'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:50:05'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:50:05'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:50:05'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:50:05'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:50:05'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:50:05'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:50:05'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:50:05'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:50:05'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16'!
emptyCity

	^ City new! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650759!
test08CityWithWaterTowerWithoutZonesHave200WaterAvailable

	| city |

	city _ self emptyCity.
	city addService: self waterTower.
	
	self assert: 200 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50651505!
test01CityWithoutPowerServicesHaveZeroEnergyProduced

	| city |

	city := self emptyCity.
	self assert: 0 * ep equals: city energyProduced.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650726!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	| city |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self industrialZone.
	
	self assert: 500 - 10 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650816!
test13CityWith2SolarPlantsHaveTwiceEnergyAvailable

	| city |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self solarPlant.
	
	self assert: (500 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650703!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	| city |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	self assert: 500 - 5 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650897!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city zone |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	zone _ self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650925!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	| city zone |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	zone _ self industrialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650938!
test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable

	| city zone |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	zone _ self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - (9 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650836!
test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	| city |

	city _ self emptyCity.
	
	self 
		should: [ city addZone: self residentialZone. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size]
		! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650826!
test14CityWith2WaterTowerHaveTwiceWaterAvailable

	| city |

	city _ self emptyCity.
	city addService: self waterTower.
	city addService: self waterTower.
	
	self assert: (200 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650752!
test07CityWithoutWaterServicesHaveZeroWaterProduced

	| city |

	city _ self emptyCity.
	self assert: 0 * wp equals: city waterProduced.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650779!
test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable

	| city |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 200 - 9 - 2 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650768!
test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable

	| city |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	self assert: 200 - 9 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:16' prior: 50650951!
test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable

	| city zone |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	zone _ self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - 9 - (2 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:17' prior: 50650882!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |

	city _ self emptyCity.
	
	city addService: self solarPlant.
	city addService: self waterTower.
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddCommertialZoneErrorDescription.
			self assert: 0 equals: city zones size ]! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:17' prior: 50651370!
test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable

	| city |

	city := self emptyCity.
	city addService: self solarPlant.
	
	self assert: 500 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:17' prior: 50650875!
test18CityWithoutZonesHaveZeroEnergyConsumption

	| city |

	city _ self emptyCity.
	self assert: 0 * ep equals: city energyConsumption.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:17' prior: 50650910!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	| city zone |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.
	
	city addZone: self residentialZone.
	
	zone _ self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - 5 - (8 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:17' prior: 50650802!
test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable

	| city |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.
	city addZone: self industrialZone.
	
	self assert: 200 - 31 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:17' prior: 50650737!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	city addZone: self commertialZone.
	city addZone: self industrialZone.	
	city addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:17' prior: 50650849!
test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	| city |

	city _ self emptyCity.
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size ]
		! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:17' prior: 50650714!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	| city |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.
	
	city addZone: self residentialZone.
	city addZone: self commertialZone.
	
	self assert: 500 - 5 - 8 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:17' prior: 50650791!
test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable

	| city |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.
	
	city addZone: self industrialZone.
	
	self assert: 200 - 10 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:17' prior: 50650862!
test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	| city |

	city _ self emptyCity.
	
	self 
		should: [ city addZone: self industrialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size ]
		! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:17' prior: 50650966!
test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable

	| city zone |

	city _ self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.
	
	zone _ self industrialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - (10 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:50:28' prior: 50651627!
test01CityWithoutPowerServicesHaveZeroEnergyProduced
	self assert: 0 * ep equals: self emptyCity energyProduced.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:50:29'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:51:04' prior: 50651793!
test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable

	| city |

	city := self emptyCity.
	self emptyCity  addService: self solarPlant.
	
	self assert: 500 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:51:16'!
cityWithSolarPlant

	^ self emptyCity  addService: self solarPlant! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:51:16' prior: 50652027!
test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable

	| city |

	city := self emptyCity.
	self cityWithSolarPlant.
	
	self assert: 500 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:51:28' prior: 50652041!
test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable

	self assert: 500 * ep equals: self cityWithSolarPlant energyAvailable.! !

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:51:28'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:51:29'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:51:29'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:51:29'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:51:29'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:51:29'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:51:29'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:51:29'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:51:29'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:51:29'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:51:29'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:51:29'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:52:50' prior: 50651655!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	| city |


	city := self cityWithSolarPlant  addService: self waterTower.

	city addZone: self residentialZone.
	
	self assert: 500 - 5 * ep equals: city energyAvailable.! !

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:52:52'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:53:11'!
cityWithSolarPlantAndWaterTower

	^ self cityWithSolarPlant  addService: self waterTower! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:53:11' prior: 50652159!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	| city |


	city := self cityWithSolarPlantAndWaterTower.

	city addZone: self residentialZone.
	
	self assert: 500 - 5 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:53:43' prior: 50652278!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	| city |


	city := self cityWithSolarPlantAndWaterTower addZone: self residentialZone .


	
	self assert: 500 - 5 * ep equals: city energyAvailable.! !

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:53:44'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:54:23'!
cityWithSolarPlantWaterTowerAndResidentialZone

	^ self cityWithSolarPlantAndWaterTower addZone: self residentialZone! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:54:23' prior: 50652288!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

	| city |


	city := self cityWithSolarPlantWaterTowerAndResidentialZone .


	
	self assert: 500 - 5 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:54:42' prior: 50652407!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

		self assert: 500 - 5 * ep equals: self cityWithSolarPlantWaterTowerAndResidentialZone  energyAvailable.! !

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:54:43'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:55:07' prior: 50651867!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	| city |

	city:= self cityWithSolarPlantWaterTowerAndResidentialZone  addZone: self commertialZone.
	
	self assert: 500 - 5 - 8 * ep equals: city energyAvailable.! !

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:55:08'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:55:47'!
cityWithSolarPlantWaterTowerResidentialAndXommertialZone

	^ self cityWithSolarPlantWaterTowerAndResidentialZone  addZone: self commertialZone! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:55:47' prior: 50652527!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	| city |

	city:= self cityWithSolarPlantWaterTowerResidentialAndXommertialZone.
	
	self assert: 500 - 5 - 8 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:56:06'!
cityWithSolarPlantWaterTowerResidentialAndCommertialZone

	^ self cityWithSolarPlantWaterTowerAndResidentialZone  addZone: self commertialZone! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 09:56:06' prior: 50652647!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	| city |

	city:= self cityWithSolarPlantWaterTowerResidentialAndCommertialZone.
	
	self assert: 500 - 5 - 8 * ep equals: city energyAvailable.! !

!methodRemoval: CityTest #cityWithSolarPlantWaterTowerResidentialAndXommertialZone stamp: 'JB 5/6/2023 09:56:06'!
cityWithSolarPlantWaterTowerResidentialAndXommertialZone

	^ self cityWithSolarPlantWaterTowerAndResidentialZone  addZone: self commertialZone!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:56:10'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:57:21' prior: 50651634!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	| city |

	city:= self cityWithSolarPlantAndWaterTower   addService: self industrialZone.
	
	self assert: 500 - 10 * ep equals: city energyAvailable.! !

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:57:22'!
FAILURE!
!CityTest methodsFor: 'testing' stamp: 'HAW 9/23/2021 10:09:58' prior: 50652784!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable

	| city |

	city _ City new.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self industrialZone.
	
	self assert: 500 - 10 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:57:57' prior: 50652798!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable


	| city |
	city:= self cityWithSolarPlantAndWaterTower addZone: self industrialZone.
	
	self assert: 500 - 10 * ep equals: city energyAvailable.! !

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:58:05'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:58:29'!
cityWithSolarPlantWaterTowerAndIndustrialZone

	^ self cityWithSolarPlantAndWaterTower addZone: self industrialZone! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:58:29' prior: 50652809!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable


	| city |
	city:= self cityWithSolarPlantWaterTowerAndIndustrialZone.
	
	self assert: 500 - 10 * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:58:41' prior: 50652928!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable


	self assert: 500 - 10 * ep equals: self cityWithSolarPlantWaterTowerAndIndustrialZone energyAvailable.! !

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:58:42'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 09:59:19' prior: 50652664!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	
	self assert: 500 - 5 - 8 * ep equals: self cityWithSolarPlantWaterTowerResidentialAndCommertialZone  energyAvailable.! !

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 09:59:20'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:01:05' prior: 50651839!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city := self cityWithSolarPlantWaterTowerResidentialAndCommertialZone .
	city addZone: self industrialZone.	
	city addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:01:06'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:01:20' prior: 50653159!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city := self cityWithSolarPlantWaterTowerResidentialAndCommertialZone addZone: self industrialZone.	
	city addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:01:21'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:01:40'!
m1

	^ self cityWithSolarPlantWaterTowerResidentialAndCommertialZone addZone: self industrialZone! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:01:40' prior: 50653274!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city := self m1.	
	city addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:02:51'!
cityWithSolarPlantWaterTowerResidentialCommertialAndIndustrialZone

	^ self cityWithSolarPlantWaterTowerResidentialAndCommertialZone addZone: self industrialZone! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:02:51' prior: 50653394!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city := self cityWithSolarPlantWaterTowerResidentialCommertialAndIndustrialZone.	
	city addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !

!methodRemoval: CityTest #m1 stamp: 'JB 5/6/2023 10:02:51'!
m1

	^ self cityWithSolarPlantWaterTowerResidentialAndCommertialZone addZone: self industrialZone!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:03:07' prior: 50653411!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city := self cityWithSolarPlantWaterTowerResidentialCommertialAndIndustrialZone addZone: self industrialZone.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:03:09'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:03:18'!
m1

	^ self cityWithSolarPlantWaterTowerResidentialCommertialAndIndustrialZone addZone: self industrialZone! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:03:18' prior: 50653427!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city := self m1.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:03:57'!
cityWithSolarPlantWaterTowerReisdentialCommertialAndTwoIndustrialZones

	^ self cityWithSolarPlantWaterTowerResidentialCommertialAndIndustrialZone addZone: self industrialZone! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:03:57' prior: 50653546!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable

	| city |

	city := self cityWithSolarPlantWaterTowerReisdentialCommertialAndTwoIndustrialZones.
	
	self assert: 500 - 5 - 8 - (10 * 2) * ep equals: city energyAvailable.! !

!methodRemoval: CityTest #m1 stamp: 'JB 5/6/2023 10:03:57'!
m1

	^ self cityWithSolarPlantWaterTowerResidentialCommertialAndIndustrialZone addZone: self industrialZone!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:04:13' prior: 50653563!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable


	self assert: 500 - 5 - 8 - (10 * 2) * ep equals:self cityWithSolarPlantWaterTowerReisdentialCommertialAndTwoIndustrialZones  energyAvailable.! !

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:04:15'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:04:28' prior: 50651731!
test07CityWithoutWaterServicesHaveZeroWaterProduced

	self assert: 0 * wp equals: self emptyCity waterProduced.! !

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:04:29'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:04:53' prior: 50651618!
test08CityWithWaterTowerWithoutZonesHave200WaterAvailable

	| city |

	city := self emptyCity addService: self waterTower.
	
	self assert: 200 * wp equals: city waterAvailable.! !

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:04:54'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:05:08'!
cityWithWaterTower

	^ self emptyCity addService: self waterTower! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:05:08' prior: 50653800!
test08CityWithWaterTowerWithoutZonesHave200WaterAvailable

	| city |

	city := self cityWithWaterTower.
	
	self assert: 200 * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:05:18' prior: 50653915!
test08CityWithWaterTowerWithoutZonesHave200WaterAvailable


	self assert: 200 * wp equals: self cityWithWaterTower waterAvailable.! !

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:05:19'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:05:20'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:05:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:05:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:05:20'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:05:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:05:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:05:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:05:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:05:20'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:05:20'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:05:41' prior: 50651751!
test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable


	self assert: 200 - 9 * wp equals: self cityWithSolarPlantWaterTowerAndResidentialZone waterAvailable.! !

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:05:42'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:05:43'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:05:43'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:05:43'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:07:23' prior: 50651738!
test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable

	self assert: 200 - 9 - 2 * wp equals: self cityWithSolarPlantWaterTowerResidentialAndCommertialZone waterAvailable.! !

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:07:24'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:07:52' prior: 50651880!
test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable


	self assert: 200 - 10 * wp equals: self cityWithSolarPlantWaterTowerAndIndustrialZone  waterAvailable.! !

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:07:53'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:08:10' prior: 50651824!
test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable

	self assert: 200 - 31 * wp equals: self cityWithSolarPlantWaterTowerReisdentialCommertialAndTwoIndustrialZones waterAvailable.! !

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:08:11'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:08:12'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:08:12'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:08:12'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:08:12'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:08:12'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:08:12'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:08:12'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:08:12'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:08:12'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:08:12'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:08:12'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:08:41' prior: 50651645!
test13CityWith2SolarPlantsHaveTwiceEnergyAvailable

	| city |

	city := self cityWithSolarPlant  addService: self solarPlant.
	
	
	self assert: (500 * 2) * ep equals: city energyAvailable.! !

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:08:42'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:08:43'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:08:55'!
cityWithTwoSolarPlants

	^ self cityWithSolarPlant  addService: self solarPlant! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:08:55' prior: 50654476!
test13CityWith2SolarPlantsHaveTwiceEnergyAvailable

	| city |

	city := self cityWithTwoSolarPlants.
	
	
	self assert: (500 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:09:05' prior: 50654592!
test13CityWith2SolarPlantsHaveTwiceEnergyAvailable

	self assert: (500 * 2) * ep equals: self cityWithTwoSolarPlants energyAvailable.! !

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:09:05'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:09:05'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:09:05'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:09:05'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:09:05'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:09:05'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:09:05'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:09:05'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:09:05'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:09:05'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:09:06'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:09:57' prior: 50651721!
test14CityWith2WaterTowerHaveTwiceWaterAvailable

	| city |

	city := self cityWithWaterTower  addService: self waterTower.
	
	
	self assert: (200 * 2) * wp equals: city waterAvailable.! !

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:09:58'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:10:17'!
cityWithTwoWaterTowers

	^ self cityWithWaterTower  addService: self waterTower! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:10:17' prior: 50654709!
test14CityWith2WaterTowerHaveTwiceWaterAvailable

	| city |

	city := self cityWithTwoWaterTowers.
	
	
	self assert: (200 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:10:28' prior: 50654825!
test14CityWith2WaterTowerHaveTwiceWaterAvailable


	
	self assert: (200 * 2) * wp equals: self cityWithTwoWaterTowers waterAvailable.! !

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:10:29'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:16:57'!
m1: city

	^ self 
		should: [ city addZone: self residentialZone. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size]! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:16:57' prior: 50651708!
test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	| city |

	city _ self emptyCity.
	
	self m1: city
		! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:17:30'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:20:03'!
tryngToAddAZoneToAnEmptyCityShouldRaiseAnErrorAndNotChangeTheCity: aZone
	|city|
	city := self emptyCity . 
	^ self 
		should: [ city addZone: aZone. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size]! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:20:49' prior: 50654952!
test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable
	self tryngToAddAZoneToAnEmptyCityShouldRaiseAnErrorAndNotChangeTheCity: self residentialZone 
		! !

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:20:50'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:23:44'!
tryngToAddAZoneToAnEmptyCityShouldRaiseAnErrorAndNotChangeTheCityWithTheZone: aZone
	|city|
	city := self emptyCity . 
	^ self 
		should: [ city addZone: aZone. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size]! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:23:44' prior: 50655070!
test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable
	self tryngToAddAZoneToAnEmptyCityShouldRaiseAnErrorAndNotChangeTheCityWithTheZone: self residentialZone 
		! !

!methodRemoval: CityTest #tryngToAddAZoneToAnEmptyCityShouldRaiseAnErrorAndNotChangeTheCity: stamp: 'JB 5/6/2023 10:23:44'!
tryngToAddAZoneToAnEmptyCityShouldRaiseAnErrorAndNotChangeTheCity: aZone
	|city|
	city := self emptyCity . 
	^ self 
		should: [ city addZone: aZone. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size]!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:24:17' prior: 50651854!
test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable

	self tryngToAddAZoneToAnEmptyCityShouldRaiseAnErrorAndNotChangeTheCityWithTheZone: self commertialZone ! !

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:24:18'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:24:33' prior: 50651891!
test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable
	self tryngToAddAZoneToAnEmptyCityShouldRaiseAnErrorAndNotChangeTheCityWithTheZone: self industrialZone ! !

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:24:34'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:25:14' prior: 50651802!
test18CityWithoutZonesHaveZeroEnergyConsumption

	self assert: 0 * ep equals: self emptyCity energyConsumption.! !

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:25:15'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:25:18'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:25:58' prior: 50651777!
test19CityWithoutResidentialZonesCannotAddCommertialZone

	| city |

	city := self cityWithSolarPlantAndWaterTower .
	
	self 
		should: [ city addZone: self commertialZone ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddCommertialZoneErrorDescription.
			self assert: 0 equals: city zones size ]! !

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:26:00'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:26:32' prior: 50651666!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city zone |

	city := self cityWithSolarPlantAndWaterTower .
	zone := self residentialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:26:34'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:27:47' prior: 50655764!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city zone |

	city := self cityWithSolarPlantAndWaterTower .
	zone := self residentialZone  setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:27:49'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:28:11'!
residentialZoneWithTwoCeils

	^ self residentialZone  setNumberOfCells: 2! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:28:11' prior: 50655879!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city zone |

	city := self cityWithSolarPlantAndWaterTower .
	zone := self residentialZoneWithTwoCeils.
	city addZone: zone.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:28:42' prior: 50655998!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city |

	city := self cityWithSolarPlantAndWaterTower addZone: self residentialZoneWithTwoCeils.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:28:45'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:29:23'!
cityWithSolarPlantWaterTowerAndResidentialZoneWithTwoCeils

	^ self cityWithSolarPlantAndWaterTower addZone: self residentialZoneWithTwoCeils! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:29:23' prior: 50656010!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable

	| city |

	city := self cityWithSolarPlantWaterTowerAndResidentialZoneWithTwoCeils.
	
	self assert: 500 - (5 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:29:35' prior: 50656130!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable


	self assert: 500 - (5 * 2) * ep equals: self cityWithSolarPlantWaterTowerAndResidentialZoneWithTwoCeils energyAvailable.! !

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:29:36'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:30:32' prior: 50651809!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	| city zone |

	city := self cityWithSolarPlantWaterTowerAndResidentialZone .
	
	zone := self commertialZone.
	zone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - 5 - (8 * 2) * ep equals: city energyAvailable.! !

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:30:33'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:30:48' prior: 50656252!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	| city zone |

	city := self cityWithSolarPlantWaterTowerAndResidentialZone .
	
	zone := self commertialZone  setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - 5 - (8 * 2) * ep equals: city energyAvailable.! !

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:30:49'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:31:06'!
commertialZoneWithTwoCeils

	^ self commertialZone  setNumberOfCells: 2! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:31:06' prior: 50656368!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	| city zone |

	city := self cityWithSolarPlantWaterTowerAndResidentialZone .
	
	zone := self commertialZoneWithTwoCeils.
	city addZone: zone.
	
	self assert: 500 - 5 - (8 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:31:31' prior: 50656488!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	| city  |

	city := self cityWithSolarPlantWaterTowerAndResidentialZone addZone: self commertialZoneWithTwoCeils .

	self assert: 500 - 5 - (8 * 2) * ep equals: city energyAvailable.! !

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:31:32'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:32:17'!
cityWithSolarPlantWaterTowerResidentialZoneAndCommertialTowerWithTwoCeils

	^ self cityWithSolarPlantWaterTowerAndResidentialZone addZone: self commertialZoneWithTwoCeils! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:32:17' prior: 50656500!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	| city  |

	city := self cityWithSolarPlantWaterTowerResidentialZoneAndCommertialTowerWithTwoCeils .

	self assert: 500 - 5 - (8 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:32:32' prior: 50656622!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	self assert: 500 - 5 - (8 * 2) * ep equals: self cityWithSolarPlantWaterTowerResidentialZoneAndCommertialTowerWithTwoCeils energyAvailable.! !

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:32:34'!
PASSED!

!methodRemoval: CityTest #m1: stamp: 'JB 5/6/2023 10:38:23'!
m1: city

	^ self 
		should: [ city addZone: self residentialZone. ] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: City cannotAddZoneErrorDescription.
			self assert: 0 equals: city zones size]!
!CityTest methodsFor: 'city' stamp: 'JB 5/6/2023 10:40:28'!
cityWithIndustrialZone

	^ self cityWithSolarPlantAndWaterTower addZone: self industrialZone! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:40:28' prior: 50654254!
test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable


	self assert: 200 - 10 * wp equals: self cityWithIndustrialZone  waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:40:28' prior: 50652937!
test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable


	self assert: 500 - 10 * ep equals: self cityWithIndustrialZone energyAvailable.! !

!methodRemoval: CityTest #cityWithSolarPlantWaterTowerAndIndustrialZone stamp: 'JB 5/6/2023 10:40:28'!
cityWithSolarPlantWaterTowerAndIndustrialZone

	^ self cityWithSolarPlantAndWaterTower addZone: self industrialZone!
!CityTest methodsFor: 'city' stamp: 'JB 5/6/2023 10:40:50'!
cityWithResidentialZone

	^ self cityWithSolarPlantAndWaterTower addZone: self residentialZone! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:40:50' prior: 50656614!
cityWithSolarPlantWaterTowerResidentialZoneAndCommertialTowerWithTwoCeils

	^ self cityWithResidentialZone addZone: self commertialZoneWithTwoCeils! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:40:50' prior: 50652656!
cityWithSolarPlantWaterTowerResidentialAndCommertialZone

	^ self cityWithResidentialZone  addZone: self commertialZone! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:40:50' prior: 50652416!
test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable

		self assert: 500 - 5 * ep equals: self cityWithResidentialZone  energyAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:40:50' prior: 50654032!
test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable


	self assert: 200 - 9 * wp equals: self cityWithResidentialZone waterAvailable.! !

!methodRemoval: CityTest #cityWithSolarPlantWaterTowerAndResidentialZone stamp: 'JB 5/6/2023 10:40:50'!
cityWithSolarPlantWaterTowerAndResidentialZone

	^ self cityWithSolarPlantAndWaterTower addZone: self residentialZone!
!CityTest methodsFor: 'city' stamp: 'JB 5/6/2023 10:41:11'!
cityWithResidentialZoneWithTwoCeils

	^ self cityWithSolarPlantAndWaterTower addZone: self residentialZoneWithTwoCeils! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:41:11' prior: 50656140!
test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable


	self assert: 500 - (5 * 2) * ep equals: self cityWithResidentialZoneWithTwoCeils energyAvailable.! !

!methodRemoval: CityTest #cityWithSolarPlantWaterTowerAndResidentialZoneWithTwoCeils stamp: 'JB 5/6/2023 10:41:11'!
cityWithSolarPlantWaterTowerAndResidentialZoneWithTwoCeils

	^ self cityWithSolarPlantAndWaterTower addZone: self residentialZoneWithTwoCeils!
!CityTest methodsFor: 'city' stamp: 'JB 5/6/2023 10:41:32'!
cityWithCommertialZone

	^ self cityWithResidentialZone  addZone: self commertialZone! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:41:32' prior: 50653403!
cityWithSolarPlantWaterTowerResidentialCommertialAndIndustrialZone

	^ self cityWithCommertialZone addZone: self industrialZone! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:41:32' prior: 50654143!
test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable

	self assert: 200 - 9 - 2 * wp equals: self cityWithCommertialZone waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:41:32' prior: 50653048!
test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable

	
	self assert: 500 - 5 - 8 * ep equals: self cityWithCommertialZone  energyAvailable.! !

!methodRemoval: CityTest #cityWithSolarPlantWaterTowerResidentialAndCommertialZone stamp: 'JB 5/6/2023 10:41:32'!
cityWithSolarPlantWaterTowerResidentialAndCommertialZone

	^ self cityWithResidentialZone  addZone: self commertialZone!
!CityTest methodsFor: 'city' stamp: 'JB 5/6/2023 10:42:04'!
cityWithCommertialZoneAndTwoIndustrialZones

	^ self cityWithSolarPlantWaterTowerResidentialCommertialAndIndustrialZone addZone: self industrialZone! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:42:04' prior: 50654365!
test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable

	self assert: 200 - 31 * wp equals: self cityWithCommertialZoneAndTwoIndustrialZones waterAvailable.! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:42:04' prior: 50653579!
test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable


	self assert: 500 - 5 - 8 - (10 * 2) * ep equals:self cityWithCommertialZoneAndTwoIndustrialZones  energyAvailable.! !

!methodRemoval: CityTest #cityWithSolarPlantWaterTowerReisdentialCommertialAndTwoIndustrialZones stamp: 'JB 5/6/2023 10:42:04'!
cityWithSolarPlantWaterTowerReisdentialCommertialAndTwoIndustrialZones

	^ self cityWithSolarPlantWaterTowerResidentialCommertialAndIndustrialZone addZone: self industrialZone!
!CityTest methodsFor: 'city' stamp: 'JB 5/6/2023 10:42:27'!
cityWithCommertialZoneAndIndustrialZone

	^ self cityWithCommertialZone addZone: self industrialZone! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:42:27' prior: 50656885!
cityWithCommertialZoneAndTwoIndustrialZones

	^ self cityWithCommertialZoneAndIndustrialZone addZone: self industrialZone! !

!methodRemoval: CityTest #cityWithSolarPlantWaterTowerResidentialCommertialAndIndustrialZone stamp: 'JB 5/6/2023 10:42:27'!
cityWithSolarPlantWaterTowerResidentialCommertialAndIndustrialZone

	^ self cityWithCommertialZone addZone: self industrialZone!
!CityTest methodsFor: 'city' stamp: 'JB 5/6/2023 10:43:04'!
cityWithCommertialZoneWithTwoCeils

	^ self cityWithResidentialZone addZone: self commertialZoneWithTwoCeils! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 10:43:04' prior: 50656633!
test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable

	self assert: 500 - 5 - (8 * 2) * ep equals: self cityWithCommertialZoneWithTwoCeils energyAvailable.! !

!methodRemoval: CityTest #cityWithSolarPlantWaterTowerResidentialZoneAndCommertialTowerWithTwoCeils stamp: 'JB 5/6/2023 10:43:04'!
cityWithSolarPlantWaterTowerResidentialZoneAndCommertialTowerWithTwoCeils

	^ self cityWithResidentialZone addZone: self commertialZoneWithTwoCeils!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:44:49' prior: 50651680!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	| city zone |

	city := self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	zone := self industrialZone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 500 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:45:03'!
industrialZoneWithTwoCeils

	^ self industrialZone setNumberOfCells: 2! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:45:03' prior: 50656966!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	| city zone |

	city := self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	zone := self industrialZoneWithTwoCeils.
	city addZone: zone.
	
	self assert: 500 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:45:38' prior: 50656984!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	| city |

	city := self cityWithSolarPlantAndWaterTower  addZone: self industrialZoneWithTwoCeils.
	
	
	self assert: 500 - (10 * 2) * ep equals: city energyAvailable.! !

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:45:40'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:46:33'!
cityWithIndustrialZoneWithTwoCeils

	^ self cityWithSolarPlantAndWaterTower  addZone: self industrialZoneWithTwoCeils! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:46:33' prior: 50656997!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	| city |

	city := self cityWithIndustrialZoneWithTwoCeils.
	
	
	self assert: 500 - (10 * 2) * ep equals: city energyAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:46:49' prior: 50657117!
test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable

	self assert: 500 - (10 * 2) * ep equals:  self cityWithIndustrialZoneWithTwoCeils energyAvailable.! !

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:46:50'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:46:51'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:46:51'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:46:51'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:46:51'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:46:51'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:46:51'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:46:51'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:46:51'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:46:51'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:46:51'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:47:16' prior: 50651694!
test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable

	| city |

	city := self cityWithResidentialZoneWithTwoCeils .
	self assert: 200 - (9 * 2) * wp equals: city waterAvailable.! !

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:47:19'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:47:28' prior: 50657239!
test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable

	self assert: 200 - (9 * 2) * wp equals: self cityWithResidentialZoneWithTwoCeils waterAvailable.! !

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:47:29'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:49:52' prior: 50651762!
test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable

	| city zone |

	city := self emptyCity.
	city addService: self solarPlant.
	city addService: self waterTower.

	city addZone: self residentialZone.
	
	zone := self commertialZone setNumberOfCells: 2.
	city addZone: zone.
	
	self assert: 200 - 9 - (2 * 2) * wp equals: city waterAvailable.! !
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:50:25' prior: 50657463!
test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable

	| city |

	city := self cityWithCommertialZoneWithTwoCeils .
	
	self assert: 200 - 9 - (2 * 2) * wp equals: city waterAvailable.! !

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:50:33'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:50:46' prior: 50657478!
test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable

	self assert: 200 - 9 - (2 * 2) * wp equals: self cityWithIndustrialZoneWithTwoCeils  waterAvailable.! !

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:50:47'!
FAILURE!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:51:01' prior: 50657591!
test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable

	self assert: 200 - 9 - (2 * 2) * wp equals: self cityWithCommertialZoneWithTwoCeils  waterAvailable.! !

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:51:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:51:03'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:51:03'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:51:03'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:51:03'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:51:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:51:03'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:51:03'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:51:03'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:51:03'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:51:03'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:51:03'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:51:03'!
PASSED!
!CityTest methodsFor: 'testing' stamp: 'JB 5/6/2023 10:51:23' prior: 50651904!
test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable


	self assert: 200 - (10 * 2) * wp equals: self cityWithIndustrialZoneWithTwoCeils waterAvailable.! !

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 10:51:24'!
PASSED!

Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Residential category: 'ISW1-2021-2C-1erParcial' stamp: 'JB 5/6/2023 11:08:56'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Commertial category: 'ISW1-2021-2C-1erParcial' stamp: 'JB 5/6/2023 11:09:01'!
Zone subclass: #Commertial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #Industrial category: 'ISW1-2021-2C-1erParcial' stamp: 'JB 5/6/2023 11:09:07'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!CityTest methodsFor: 'zone' stamp: 'JB 5/6/2023 11:12:46' prior: 50650671!
commertialZone

	^ Commertial new! !

!classRenamed: #Commertial as: #CommertialZone stamp: 'JB 5/6/2023 11:13:08'!
Smalltalk renameClassNamed: #Commertial as: #CommertialZone!
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:08' prior: 50657863!
commertialZone

	^ CommertialZone new! !
!City methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:08' prior: 50651057!
energyConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:08' prior: 50651022!
addZone: aZone

	zones ifNil: [ zones _ OrderedCollection new].

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #CommertialZone ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #Industrial ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:08' prior: 50651107!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !

!classRenamed: #Industrial as: #IndustrialZone stamp: 'JB 5/6/2023 11:13:26'!
Smalltalk renameClassNamed: #Industrial as: #IndustrialZone!
!City methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:26' prior: 50657876!
energyConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:26' prior: 50657926!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:26' prior: 50657895!
addZone: aZone

	zones ifNil: [ zones _ OrderedCollection new].

	aZone type = #Residential ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #CommertialZone ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #IndustrialZone ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:26' prior: 50650675!
industrialZone

	^ Zone withType: #IndustrialZone! !

!classRenamed: #Residential as: #ResidentialZone stamp: 'JB 5/6/2023 11:13:34'!
Smalltalk renameClassNamed: #Residential as: #ResidentialZone!
!City methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:34' prior: 50657949!
energyConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #ResidentialZone ifTrue: [ total _ total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ total _ total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total _ total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:34' prior: 50657987!
addZone: aZone

	zones ifNil: [ zones _ OrderedCollection new].

	aZone type = #ResidentialZone ifTrue: [
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	aZone type = #CommertialZone ifTrue: [
		self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].
	].

	aZone type = #IndustrialZone ifTrue: [
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
	].

	zones add: aZone.
! !
!City methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:34' prior: 50657968!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #ResidentialZone ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:34' prior: 50651088!
hasResidentialZones

	| index |
	zones ifNil: [ ^ false ].

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #ResidentialZone ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!CityTest methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 11:13:34' prior: 50650679!
residentialZone

	^ Zone withType: #ResidentialZone! !
!CommertialZone methodsFor: 'nil' stamp: 'JB 5/6/2023 11:14:46' overrides: 16920235!
initialize
	type  := #CommertialZone! !
!IndustrialZone methodsFor: 'no messages' stamp: 'JB 5/6/2023 11:15:04' overrides: 16920235!
initialize
	type  := #IndustrialZone! !
!ResidentialZone methodsFor: 'no messages' stamp: 'JB 5/6/2023 11:15:22' overrides: 16920235!
initialize
	type  := #ResidentialZone! !
!CityTest methodsFor: 'zone' stamp: 'JB 5/6/2023 11:15:43' prior: 50658018!
industrialZone

	^ IndustrialZone  new.! !
!CityTest methodsFor: 'zone' stamp: 'JB 5/6/2023 11:17:03' prior: 50658107!
residentialZone

	^ ResidentialZone new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 11:17:17'!
PASSED!
!ResidentialZone methodsFor: 'initialization' stamp: 'JB 5/6/2023 11:21:01'!
checkRegulationsFor: aCity
	^aCity checkRegulationsForAResidentialZone! !
!IndustrialZone methodsFor: 'nil' stamp: 'JB 5/6/2023 11:21:28'!
checkRegulationsFor: aCity
	^aCity checkRegulationsForAIndustrialZone! !
!CommertialZone methodsFor: 'nil' stamp: 'JB 5/6/2023 11:22:29'!
checkRegulationsFor: aCity
	^aCity checkRegulationsForACommertialZone! !
!City methodsFor: 'nil' stamp: 'JB 5/6/2023 11:23:07'!
checkRegulationsForACommertialZone
	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription]! !
!City methodsFor: 'regulations' stamp: 'JB 5/6/2023 11:23:55'!
checkRegulationsForAResidentialZone
		self energyAvailable < (5 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (9 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 11:23:56'!
PASSED!
!City methodsFor: 'regulations' stamp: 'JB 5/6/2023 11:24:19'!
checkRegulationsForAIndustrialZone
		self energyAvailable < (10 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (10 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription ].! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 11:24:20'!
PASSED!
!City methodsFor: 'adding' stamp: 'JB 5/6/2023 11:24:38' prior: 50658046!
addZone: aZone

	zones ifNil: [ zones := OrderedCollection new].
	aZone checkRegulationsFor:  self.
	zones add: aZone.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:24:39'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 11:24:39'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:24:39'!
FAILURE!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:25:58'!
FAILURE!
!Zone methodsFor: 'accessing' stamp: 'JB 5/6/2023 11:27:58'!
checkRegulationsFor: aCity
	self subclassResponsibility ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:28:20'!
FAILURE!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 11:28:20'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:28:20'!
FAILURE!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:28:45'!
FAILURE!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:31:34'!
FAILURE!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:31:34'!
FAILURE!
!City methodsFor: 'regulations' stamp: 'JB 5/6/2023 11:32:24' prior: 50658247!
checkRegulationsForACommertialZone
	self energyAvailable < (2 * ep) ifTrue: [ self error: City cannotAddZoneErrorDescription ].
		self waterAvailable < (8 * wp) ifTrue: [ self error: City cannotAddZoneErrorDescription].
		
		self hasResidentialZones ifFalse: [ self error: City cannotAddCommertialZoneErrorDescription ].! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 11:32:25'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 11:49:14'!
PASSED!
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 11:58:54' prior: 50658096!
hasResidentialZones


	zones ifNil: [ ^ false ].
	zones detect:  [:zone| (zone class = ResidentialZone ) ] ifFound: [^true] ifNone: [^false] 
	
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 11:59:06'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 11:59:06'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 11:59:06'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 11:59:06'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 11:59:06'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 11:59:06'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 11:59:06'!
PASSED!
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:00:00' prior: 50658912!
hasResidentialZones


	zones ifNil: [ ^ false ].
	zones detect:  [:zone| (zone isKindOf: ResidentialZone ) ] ifFound: [^true] ifNone: [^false] 
	
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:00:02'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:00:02'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:00:02'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:00:02'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:00:02'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:00:02'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:00:02'!
PASSED!
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:02:37' prior: 50659018!
hasResidentialZones


	zones ifNil: [ ^ false ].
	zones detect:  [:zone| (zone isKindOf: ResidentialZone ) ] 
		ifFound: [^true] 
			ifNone: [^false] 
	
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:02:38'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:02:38'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:02:38'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:02:38'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:02:38'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:02:38'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:02:38'!
PASSED!
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:03:11' prior: 50659124!
hasResidentialZones


	zones ifNil: [ ^ false ].
	zones detect:  [:zone| zone type: #ResidentialZone ] 
		ifFound: [^true] 
			ifNone: [^false] 
	
! !
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:03:19' prior: 50659230!
hasResidentialZones


	zones ifNil: [ ^ false ].
	zones detect:  [:zone| zone type =  #ResidentialZone ] 
		ifFound: [^true] 
			ifNone: [^false] 
	
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:03:21'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:03:21'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:03:21'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:03:21'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:03:21'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:03:21'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:03:21'!
PASSED!
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:03:44' prior: 50659238!
hasResidentialZones


	zones ifNil: [ ^ false ].
	zones detect:  [:zone| zone type =  #Residential] 
		ifFound: [^true] 
			ifNone: [^false] 
	
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:03:45'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:03:45'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:03:45'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:03:45'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:03:45'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:03:45'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:03:45'!
PASSED!
!City methodsFor: 'testing' stamp: 'FRT 9/16/2021 22:14:26' prior: 50659344!
hasResidentialZones

	| index |
	zones ifNil: [ ^ false ].

	index _ 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:04:08'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:04:08'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:04:08'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:04:08'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:04:08'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:04:08'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:04:08'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:04:18'!
ERROR!
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:05:05' prior: 50659450!
hasResidentialZones

	| index |
	zones ifNil: [ ^ false ].

	index := 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #ResidentialZone ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:05:06'!
PASSED!
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:05:30' prior: 50659562!
hasResidentialZones

	| index |
	zones ifNil: [ ^ false ].

	index := 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone isKindOf:   ResidentialZone ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:06:00' prior: 50659671!
hasResidentialZones

	| index |
	zones ifNil: [ ^ false ].

	index := 1.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		(zone isKindOf:  ResidentialZone) ifTrue: [ ^ true].	
		index := index + 1.
	].

	^ false.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:06:01'!
PASSED!
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:06:51' prior: 50659681!
hasResidentialZones

	
	zones ifNil: [ ^ false ].
zones detect:[:zone | zone isKindOf: ResidentialZone ] ifNone: [^false]. 
	^ true.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:06:55'!
PASSED!
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:07:04' prior: 50659790!
hasResidentialZones

	
	
	zones detect:[:zone | zone isKindOf: ResidentialZone ] ifNone: [^false]. 
	^ true.
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:07:05'!
PASSED!
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:08:00' prior: 50659896!
hasResidentialZones

	
	
	zones detect:[:zone | zone isKindOf: ResidentialZone ] ifFound: [^true] ifNone: [^false]. 

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:08:02'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:08:02'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:08:02'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:08:02'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:08:02'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:08:02'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:08:02'!
PASSED!
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:08:26' prior: 50660001!
hasResidentialZones

	
	
	zones detect:[:zone | zone isKindOf: ResidentialZone ] ifNone: [^false]. 
	^true
	

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:08:27'!
PASSED!
!City methodsFor: 'testing' stamp: 'JB 5/6/2023 12:08:39' prior: 50660106!
hasResidentialZones
	zones detect:[:zone | zone isKindOf: ResidentialZone ] ifNone: [^false]. 
	^true
	

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:08:40'!
PASSED!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 12:17:08' prior: 50658077!
waterConsumption
	
	|  total |
	
	zones ifNil: [zones := OrderedCollection new].
	

	total := 0.

	zones inject:  total  into: [:count :zone |
		
		zone type = #ResidentialZone ifTrue: [ count + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ count + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ count + ((10 * wp) * zone getNumberOfCells) ].	
	].
		
		

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:17:10'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:17:10'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:17:10'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:17:10'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:17:10'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:17:10'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:17:10'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:17:10'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:17:10'!
FAILURE!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 12:17:40' prior: 50660316!
waterConsumption
	
	|  total |
	
	zones ifNil: [zones := OrderedCollection new].
	

	total := 0.

	^zones inject:  total  into: [:count :zone |
		
		zone type = #ResidentialZone ifTrue: [ count + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ count + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ count + ((10 * wp) * zone getNumberOfCells) ].	
	].
		
		

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:17:41'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:17:41'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:17:41'!
ERROR!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:17:41'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:17:41'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:17:41'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:17:41'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:17:41'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:17:41'!
PASSED!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 12:19:38' prior: 50660431!
waterConsumption
	
	|  total |
	
	zones ifNil: [zones := OrderedCollection new].
	

	total := 0.

	^zones inject:  total  into: [:count :zone |
		
		zone type = #ResidentialZone ifTrue: [ ^count + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ ^count + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ ^count + ((10 * wp) * zone getNumberOfCells) ].	
	].
		
		

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:19:40'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:19:40'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:19:40'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:19:40'!
PASSED!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 12:20:00' prior: 50660546!
waterConsumption
	
	|  total |
	
	zones ifNil: [zones := OrderedCollection new].
	

	total := 0.

	^zones inject:  0  into: [:count :zone |
		
		zone type = #ResidentialZone ifTrue: [ ^count + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ ^count + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ ^count + ((10 * wp) * zone getNumberOfCells) ].	
	].
		
		

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:20:19'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 12:20:19'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 12:20:19'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 12:20:19'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 12:20:22'!
FAILURE!

self waterProduced!

self waterConsumption!
!City methodsFor: 'consumption' stamp: 'FRT 9/22/2021 19:15:10' prior: 50660661!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones _ OrderedCollection new].
	
	index _ 1.
	total _ 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone _ zones at: index.
		zone type = #Residential ifTrue: [ total _ total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #Commertial ifTrue: [ total _ total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #Industrial ifTrue: [ total _ total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:18:36'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:18:36'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:18:36'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:18:36'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:18:36'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:18:36'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:18:36'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:18:36'!
FAILURE!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:19:30'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:19:30'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:19:30'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:19:30'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:19:30'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:19:30'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:19:30'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:19:30'!
FAILURE!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:19:33'!
FAILURE!

self waterProduced - self waterConsumption!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:20:42' prior: 50660781!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones := OrderedCollection new].
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #ResidentialZone ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:20:50'!
PASSED!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 12:20:00' prior: 50661002!
waterConsumption
	
	|  total |
	
	zones ifNil: [zones := OrderedCollection new].
	

	total := 0.

	^zones inject:  0  into: [:count :zone |
		
		zone type = #ResidentialZone ifTrue: [ ^count + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ ^count + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ ^count + ((10 * wp) * zone getNumberOfCells) ].	
	].
		
		

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:22:22'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:22:22'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:22:22'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:22:22'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:22:27'!
FAILURE!

self waterProduced !

self waterConsumption.!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:23:33' prior: 50661120!
waterConsumption
	
	|  total |
	
	zones ifNil: [zones := OrderedCollection new].
	

	total := 0.

	^zones inject:  0  into: [:count :zone |
		
		zone type = #ResidentialZone ifTrue: [ count + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ count + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ count + ((10 * wp) * zone getNumberOfCells) ].	
	].
		
		

! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:23:44'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:23:44'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:23:44'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:23:44'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:23:44'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:23:44'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:23:44'!
ERROR!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:23:44'!
ERROR!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:23:44'!
ERROR!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:20:42' prior: 50661240!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones := OrderedCollection new].
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #ResidentialZone ifTrue: [ total := total + ((9 * wp) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ total := total + ((2 * wp) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total := total + ((10 * wp) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:24:35'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:26:58'!
PASSED!
!CommertialZone methodsFor: 'regulaltions' stamp: 'JB 5/6/2023 18:28:01'!
waterConsumption
	^(9 * wp) * self getNumberOfCells! !
!IndustrialZone methodsFor: 'initialization' stamp: 'JB 5/6/2023 18:28:28'!
waterConsumption
	^(2 * wp) * self getNumberOfCells! !
!ResidentialZone methodsFor: 'initialization' stamp: 'JB 5/6/2023 18:28:51'!
waterConsumption
	^(10 * wp) * self getNumberOfCells! !
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:29:22' prior: 50661354!
waterConsumption
	
	| index total |
	
	zones ifNil: [zones := OrderedCollection new].
	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		total := total  + zone waterConsumption .
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:29:23'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:29:23'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:29:23'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:29:23'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:29:23'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:29:23'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:29:23'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:29:23'!
FAILURE!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:29:40'!
FAILURE!

 self waterConsumption.!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:30:24'!
FAILURE!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:30:24'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:30:24'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:30:24'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:30:24'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:30:24'!
FAILURE!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:30:24'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:30:24'!
FAILURE!

self waterProduced!

self cityWithResidentialZone!

 self cityWithResidentialZone waterAvailable.!

self waterConsumption.!

zone waterConsumption!
!ResidentialZone methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:34:06' prior: 50661580!
waterConsumption
	^(9 * wp) * self getNumberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:34:11'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:34:11'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:34:11'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:34:11'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:34:11'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:34:11'!
FAILURE!
!CommertialZone methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:34:35' prior: 50661570!
waterConsumption
	^(10 * wp) * self getNumberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:34:37'!
FAILURE!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:34:37'!
FAILURE!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:34:37'!
FAILURE!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:34:37'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:34:37'!
FAILURE!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:34:37'!
FAILURE!
!IndustrialZone methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:35:05' prior: 50661575!
waterConsumption
	^(10 * wp) * self getNumberOfCells! !
!CommertialZone methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:35:11' prior: 50661908!
waterConsumption
	^(2 * wp) * self getNumberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:35:17'!
PASSED!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:36:02' prior: 50661585!
waterConsumption
	
	zones ifNil: [zones := OrderedCollection new].
	^zones inject: 0  into: [:total :zone | total + zone waterConsumption  ].  
! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:36:03'!
PASSED!
!City methodsFor: 'nil' stamp: 'JB 5/6/2023 18:37:07' overrides: 16920235!
initialize 
	zones:= OrderedCollection  new.! !
!City methodsFor: 'adding' stamp: 'JB 5/6/2023 18:37:57' prior: 50658472!
addZone: aZone


	aZone checkRegulationsFor:  self.
	zones add: aZone.
! !

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:38:00'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:38:05'!
PASSED!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:38:11' prior: 50658027!
energyConsumption
	
	| index total |
	

	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		zone type = #ResidentialZone ifTrue: [ total := total + ((5 * ep) * zone getNumberOfCells) ].	
		zone type = #CommertialZone ifTrue: [ total := total +((8 * ep) * zone getNumberOfCells) ].	
		zone type = #IndustrialZone ifTrue: [ total := total + ((10 * ep) * zone getNumberOfCells) ].	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:38:13'!
PASSED!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:38:20' prior: 50662120!
waterConsumption
	

	^zones inject: 0  into: [:total :zone | total + zone waterConsumption  ].  
! !
!City methodsFor: 'zones' stamp: 'JB 5/6/2023 18:38:27' prior: 50651137!
zones



	^ zones.
! !

Object subclass: #City
	instanceVariableNames: 'zons name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #City category: 'ISW1-2021-2C-1erParcial' stamp: 'JB 5/6/2023 18:38:32'!
Object subclass: #City
	instanceVariableNames: 'zons name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:38:38'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:38:49'!
PASSED!

Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #City category: 'ISW1-2021-2C-1erParcial' stamp: 'JB 5/6/2023 18:39:03'!
Object subclass: #City
	instanceVariableNames: 'zones name services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:39:08'!
PASSED!
!ResidentialZone methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:39:46'!
energyConsumption
	^(5 * wp) * self getNumberOfCells! !
!IndustrialZone methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:40:10'!
energyConsumption
	^(10 * wp) * self getNumberOfCells! !
!CommertialZone methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:40:26'!
energyConsumption
	^(8 * wp) * self getNumberOfCells! !
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:40:44' prior: 50662338!
energyConsumption
	
	| index total |
	

	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		total := total + zones energyConsumption .
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:40:51' prior: 50662799!
energyConsumption
	
	| index total |
	

	
	index := 1.
	total := 0.
	
	[index <= zones size] whileTrue: [ | zone |
		zone := zones at: index.
		total := total + zone energyConsumption .
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:40:52'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:40:52'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:40:52'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:40:52'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:40:52'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:40:52'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:40:52'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:40:52'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:40:52'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:40:52'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:40:52'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:42:26'!
FAILURE!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:42:26'!
ERROR!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:42:26'!
FAILURE!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:42:26'!
ERROR!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:42:26'!
ERROR!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:42:26'!
ERROR!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:42:26'!
FAILURE!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:42:26'!
ERROR!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:42:26'!
FAILURE!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:42:26'!
ERROR!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:42:26'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:42:29'!
FAILURE!

self energyProduced!

self energyConsumption!

self energyProduced - self energyConsumption!
!CommertialZone methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:43:26' prior: 50662794!
energyConsumption
	^(8 * ep) * self getNumberOfCells! !
!IndustrialZone methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:43:32' prior: 50662789!
energyConsumption
	^(10 * ep) * self getNumberOfCells! !
!ResidentialZone methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:43:39' prior: 50662784!
energyConsumption
	^(5 * ep) * self getNumberOfCells! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:43:42'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:43:42'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:43:42'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:43:43'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:43:47'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:43:48'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:43:48'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:43:48'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:43:48'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:43:48'!
PASSED!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:44:35' prior: 50662809!
energyConsumption
	
	^zones inject:  0  into: [:total :zone| total + zone energyConsumption ] ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:44:36'!
PASSED!
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:45:57'!
m1

	^ zones inject:  0  into: [:total :zone| total + zone energyConsumption ]! !
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:45:57' prior: 50663235!
energyConsumption
	
	^self m1 ! !
!City methodsFor: 'consumption' stamp: 'JB 5/6/2023 18:44:35' prior: 50663345!
energyConsumption
	
	^zones inject:  0  into: [:total :zone| total + zone energyConsumption ] ! !

!methodRemoval: City #m1 stamp: 'JB 5/6/2023 18:46:42'!
m1

	^ zones inject:  0  into: [:total :zone| total + zone energyConsumption ]!
!City methodsFor: 'adding' stamp: 'JB 5/6/2023 18:47:50' prior: 50651016!
addService: aService 


	services add: aService.! !
!City methodsFor: 'production' stamp: 'JB 5/6/2023 18:47:55' prior: 50651075!
energyProduced
	
	| index total |
	
	
	
	index := 1.
	total := 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		service type = #SolarPlant ifTrue: [ total := total + (500 * ep)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'production' stamp: 'JB 5/6/2023 18:47:59' prior: 50651125!
waterProduced
	| index total |
	
	
	
	index := 1.
	total := 0.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		service type = #WaterTower ifTrue: [ total := total + (200 * wp)].	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'initializing' stamp: 'JB 5/6/2023 18:48:23' prior: 50662226 overrides: 16920235!
initialize 
	zones:= OrderedCollection  new.
	services:=OrderedCollection  new.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:48:24'!
PASSED!
!CommertialZone methodsFor: 'initialization' stamp: 'JB 5/6/2023 18:49:32' prior: 50658112 overrides: 16920235!
initialize
	! !
!IndustrialZone methodsFor: 'initialization' stamp: 'JB 5/6/2023 18:49:38' prior: 50658117 overrides: 16920235!
initialize
	! !
!ResidentialZone methodsFor: 'initialization' stamp: 'JB 5/6/2023 18:49:42' prior: 50658122 overrides: 16920235!
initialize
	! !

!methodRemoval: Zone #type stamp: 'JB 5/6/2023 18:50:27'!
type
	
	^ type!

!methodRemoval: Zone #initializeWithType: stamp: 'JB 5/6/2023 18:50:30'!
initializeWithType: aZoneType 

	type := aZoneType.!

!methodRemoval: Zone class #withType: stamp: 'JB 5/6/2023 18:50:34'!
withType: aZoneType 

	^ self new initializeWithType: aZoneType. !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:51:03'!
PASSED!

!classDefinition: #Zone category: 'ISW1-2021-2C-1erParcial' stamp: 'JB 5/6/2023 18:51:18'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:51:21'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:51:21'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:51:22'!
PASSED!

Service subclass: #SolarP̈lant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #'SolarP̈lant' category: 'ISW1-2021-2C-1erParcial' stamp: 'JB 5/6/2023 18:51:53'!
Service subclass: #'SolarP̈lant'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #WaterTower category: 'ISW1-2021-2C-1erParcial' stamp: 'JB 5/6/2023 18:52:04'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #SolarP̈lant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #'SolarP̈lant' category: 'ISW1-2021-2C-1erParcial' stamp: 'JB 5/6/2023 18:52:15'!
Service subclass: #'SolarP̈lant'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classDefinition: #SolarPlant category: 'ISW1-2021-2C-1erParcial' stamp: 'JB 5/6/2023 18:53:26'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #'SolarP̈lant' stamp: 'JB 5/6/2023 18:53:32'!
Service subclass: #'SolarP̈lant'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!SolarPlant methodsFor: 'nil' stamp: 'JB 5/6/2023 18:53:57' overrides: 16920235!
initialize
	type:=#SolarPlant! !
!WaterTower methodsFor: 'nil' stamp: 'JB 5/6/2023 18:54:25' overrides: 16920235!
initialize
	type:=#WaterTower! !
!CityTest methodsFor: 'zone' stamp: 'JB 5/6/2023 18:54:45' prior: 50650683!
solarPlant

	^ SolarPlant new ! !
!CityTest methodsFor: 'zone' stamp: 'JB 5/6/2023 18:54:53' prior: 50650979!
waterTower

	^ WaterTower new! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:54:57'!
PASSED!

!methodRemoval: CommertialZone #initialize stamp: 'JB 5/6/2023 18:55:29'!
initialize
	!

!methodRemoval: IndustrialZone #initialize stamp: 'JB 5/6/2023 18:55:34'!
initialize
	!

!methodRemoval: ResidentialZone #initialize stamp: 'JB 5/6/2023 18:55:40'!
initialize
	!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:55:45'!
PASSED!
!SolarPlant methodsFor: 'initialization' stamp: 'JB 5/6/2023 18:56:15'!
energyProduced
	^500*ep! !
!WaterTower methodsFor: 'nil' stamp: 'JB 5/6/2023 18:56:30'!
energyProduced
	^0*ep! !
!WaterTower methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 18:56:58'!
waterProduced
	^200*wp! !
!SolarPlant methodsFor: 'nil' stamp: 'JB 5/6/2023 18:57:08'!
waterProduced
	^0*wp! !
!City methodsFor: 'production' stamp: 'JB 5/6/2023 18:58:02' prior: 50663375!
waterProduced
	| index total |
	
	
	
	index := 1.
	total := 0.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		total := total +  service  waterProduced .	
		index := index + 1.
	].

	^ total.! !
!City methodsFor: 'production' stamp: 'JB 5/6/2023 18:58:04' prior: 50664009!
waterProduced
	| index total |
	
	
	
	index := 1.
	total := 0.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		total := total +  service  waterProduced.	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:58:08'!
PASSED!
!City methodsFor: 'production' stamp: 'JB 5/6/2023 18:58:31' prior: 50663364!
energyProduced
	
	| index total |
	
	
	
	index := 1.
	total := 0 * ep.
	
	[index <= services size] whileTrue: [ | service |
		service := services at: index.
		 total := total + service  energyProduced .	
		index := index + 1.
	].

	^ total.! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:58:32'!
PASSED!
!City methodsFor: 'production' stamp: 'JB 5/6/2023 18:59:07' prior: 50664128!
energyProduced
	^services  inject:  0  into:  [:total :service| total + service  energyProduced ]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:59:09'!
PASSED!
!City methodsFor: 'production' stamp: 'JB 5/6/2023 18:59:24' prior: 50664019!
waterProduced
	^services  inject:  0  into:  [:total :service| total + service  waterProduced ]! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 18:59:25'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 18:59:26'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 18:59:26'!
PASSED!

!methodRemoval: Service #type stamp: 'JB 5/6/2023 18:59:43'!
type
	
	^type!

!methodRemoval: Service #initializeWithType: stamp: 'JB 5/6/2023 18:59:46'!
initializeWithType: aServiceType 

	type _ aServiceType.!

!methodRemoval: Service class #withType: stamp: 'JB 5/6/2023 18:59:49'!
withType: aServiceType

	^self new initializeWithType: aServiceType !

!methodRemoval: SolarPlant #initialize stamp: 'JB 5/6/2023 18:59:56'!
initialize
	type:=#SolarPlant!

!methodRemoval: WaterTower #initialize stamp: 'JB 5/6/2023 19:00:02'!
initialize
	type:=#WaterTower!

!classDefinition: #Service category: 'ISW1-2021-2C-1erParcial' stamp: 'JB 5/6/2023 19:00:09'!
Object subclass: #Service
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!
!Service methodsFor: 'nil' stamp: 'JB 5/6/2023 19:00:45'!
energyProduced
	self  subclassResponsibility ! !
!Service methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 19:00:52'!
waterProduced
	self  subclassResponsibility ! !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 19:00:56'!
PASSED!
!Zone methodsFor: 'nil' stamp: 'JB 5/6/2023 19:01:57'!
energyConsumption
	self subclassResponsibility ! !
!Zone methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 19:02:07'!
waterConsmption
	self subclassResponsibility ! !
!Zone methodsFor: 'as yet unclassified' stamp: 'JB 5/6/2023 19:02:18'!
waterConsumption
	self subclassResponsibility ! !

!methodRemoval: Zone #waterConsmption stamp: 'JB 5/6/2023 19:02:18'!
waterConsmption
	self subclassResponsibility !

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 19:02:31'!
PASSED!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'JB 5/6/2023 19:03:30'!
PASSED!

----STARTUP---- (6 May 2023 19:07:29) as /home/juan/Escritorio/facultad/1C23/IS1/linux64 (copia)/CuisUniversity-5706.image!


!classRemoval: #SentenceFinderByPrefix stamp: 'jb 5/6/2023 19:07:47'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'jb 5/6/2023 19:07:47'!
Object subclass: #OOStack
	instanceVariableNames: 'lenght top'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOLinkNode stamp: 'jb 5/6/2023 19:07:48'!
OONode subclass: #OOLinkNode
	instanceVariableNames: 'value next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOAbsentNode stamp: 'jb 5/6/2023 19:07:48'!
OONode subclass: #OOAbsentNode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OONode stamp: 'jb 5/6/2023 19:07:49'!
Object subclass: #OONode
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'jb 5/6/2023 19:07:49'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: 'stack finder stackEmpty stackError stackErrorCopy stackWithOneElement stackWithManyElement stackWithOneElementCopy stackWithManyElementCopy emptyColection stringsWithabcdef multiElementCollection pairCollection singleCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'jb 5/6/2023 19:07:50'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/parciales/Parciales/2021-2c/1erParcial/ISW1-2021-2C-1erParcial-Solution.st----!

----QUIT----(7 May 2023 00:51:26) CuisUniversity-5706.image priorSource: 9531634!

----STARTUP---- (8 May 2023 09:18:29) as /home/juan/Escritorio/facultad/1C23/IS1/linux64 (copia)/CuisUniversity-5706.image!


----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/parciales/Parciales/2022-2c/1erParcial/ISW1-2022-2C-1erParcial-Solucion.st----!

----STARTUP---- (8 May 2023 09:43:40) as /home/juan/Escritorio/facultad/1C23/IS1/linux64 (otra copia)/CuisUniversity-5706.image!


!classRemoval: #ResidentialZone stamp: 'jb 5/8/2023 09:43:53'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #IndustrialZone stamp: 'jb 5/8/2023 09:43:54'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CommertialZone stamp: 'jb 5/8/2023 09:43:54'!
Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'jb 5/8/2023 09:43:55'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'jb 5/8/2023 09:43:55'!
Object subclass: #Service
	instanceVariableNames: 'waterProduced energyProduced'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'jb 5/8/2023 09:43:55'!
Object subclass: #City
	instanceVariableNames: 'zones services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'jb 5/8/2023 09:43:56'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/parciales/Parciales/2022-2c/Recuperatorio/ISW1-2022-2C-Recuperatorio.st----!

!classRemoval: #QatarOnline stamp: 'jb 5/8/2023 09:46:20'!
Object subclass: #QatarOnline
	instanceVariableNames: 'dado posicionDePelota poseedorDePelota equipo1 equipo2 equipoActual arbitros'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-Recuperatorio'!

!classRemoval: #Mediocampista stamp: 'jb 5/8/2023 09:46:21'!
Jugador subclass: #Mediocampista
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-Recuperatorio'!

!classRemoval: #Delantero stamp: 'jb 5/8/2023 09:46:21'!
Jugador subclass: #Delantero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-Recuperatorio'!

!classRemoval: #Defensor stamp: 'jb 5/8/2023 09:46:22'!
Jugador subclass: #Defensor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-Recuperatorio'!

!classRemoval: #Jugador stamp: 'jb 5/8/2023 09:46:22'!
Object subclass: #Jugador
	instanceVariableNames: 'equipo posicion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-Recuperatorio'!

!classRemoval: #Equipo stamp: 'jb 5/8/2023 09:46:23'!
Object subclass: #Equipo
	instanceVariableNames: 'nombre defensor mediocampista delantero goles contrario posicionDeArco'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-Recuperatorio'!

!classRemoval: #Arbitro stamp: 'jb 5/8/2023 09:46:23'!
Object subclass: #Arbitro
	instanceVariableNames: 'favoritismoEquipo1 favoritismoEquipo2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-Recuperatorio'!

!classRemoval: #QatarOnlineTest stamp: 'jb 5/8/2023 09:46:24'!
TestCase subclass: #QatarOnlineTest
	instanceVariableNames: 'dado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-Recuperatorio'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/parciales/Parciales/2022-1c/Recu1erParcial/CustomerImporter-Recu-1er-Parcial.st----!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'jb 5/8/2023 09:47:10'!
PASSED!

!classRemoval: #IntegrationEnvironment stamp: 'jb 5/8/2023 09:49:09'!
Environment subclass: #IntegrationEnvironment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #DevelopmentEnvironment stamp: 'jb 5/8/2023 09:49:10'!
Environment subclass: #DevelopmentEnvironment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #Environment stamp: 'jb 5/8/2023 09:49:10'!
Object subclass: #Environment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #DataBaseSession stamp: 'jb 5/8/2023 09:49:10'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #TransientCustomerSystem stamp: 'jb 5/8/2023 09:49:11'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #PersistentCustomerSystem stamp: 'jb 5/8/2023 09:49:11'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #CustomerSystem stamp: 'jb 5/8/2023 09:49:12'!
Object subclass: #CustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #CustomerImporter stamp: 'jb 5/8/2023 09:49:12'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'readStream newCustomer line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #Customer stamp: 'jb 5/8/2023 09:49:13'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #Address stamp: 'jb 5/8/2023 09:49:13'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classRemoval: #ImportTest stamp: 'jb 5/8/2023 09:49:14'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

----End fileIn of /home/juan/Escritorio/facultad/1C23/IS1/parciales/Parciales/2020-2c/1erParcial/ISW1-2020-2C-Parcial-Enunciado.st----!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 09:49:59'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 09:49:59'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 09:49:59'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 09:49:59'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 09:49:59'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 09:49:59'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 09:49:59'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 09:49:59'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 09:49:59'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 09:49:59'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 09:49:59'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 09:49:59'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 09:49:59'!
PASSED!
!DoorTest methodsFor: 'nil' stamp: 'jb 5/8/2023 09:52:18'!
vfvf! !

!methodRemoval: DoorTest #vfvf stamp: 'jb 5/8/2023 09:52:20'!
vfvf!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 09:55:57'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 09:56:01'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 09:56:01'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'jb 5/8/2023 10:17:42'!
xxx:aValue 

	self
		should: [ Backpack containingUpTo: aValue limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack invalidWeightCapacityErrorDescription.
! !
!BackpackTest methodsFor: 'creating' stamp: 'jb 5/8/2023 10:18:12' prior: 50669674!
test01CanNotCreateBackpackWithZeroMaxWeight

	self xxx: 0! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:18:13'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:18:13'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'jb 5/8/2023 10:18:22' prior: 50669683!
test02CanNotCreateBackpackWithNegativeMaxWeight
	self xxx:  -1! !

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:18:24'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'jb 5/8/2023 10:18:49' prior: 50670727!
test01CanNotCreateBackpackWithZeroMaxWeight
	self xxx: 0! !
!BackpackTest methodsFor: 'creating-private' stamp: 'jb 5/8/2023 10:19:53' prior: 50670718!
xxx:anIncorrectWeight 

	self
		should: [ Backpack containingUpTo: anIncorrectWeight limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack invalidWeightCapacityErrorDescription.
! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:19:55'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:19:55'!
PASSED!
!BackpackTest methodsFor: 'creating-private' stamp: 'jb 5/8/2023 10:19:59' prior: 50670803!
xxx: anIncorrectWeight 

	self
		should: [ Backpack containingUpTo: anIncorrectWeight limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack invalidWeightCapacityErrorDescription.
! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:20:00'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:20:00'!
PASSED!
!BackpackTest methodsFor: 'creating-private' stamp: 'jb 5/8/2023 10:21:10'!
raiseAnErrorWhenCreatingBackpackOfWeight: anIncorrectWeight 

	self
		should: [ Backpack containingUpTo: anIncorrectWeight limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack invalidWeightCapacityErrorDescription.
! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 10:21:11' prior: 50670798!
test01CanNotCreateBackpackWithZeroMaxWeight
	self raiseAnErrorWhenCreatingBackpackOfWeight: 0! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 10:21:11' prior: 50670789!
test02CanNotCreateBackpackWithNegativeMaxWeight
	self raiseAnErrorWhenCreatingBackpackOfWeight:  -1! !

!methodRemoval: BackpackTest #xxx: stamp: 'jb 5/8/2023 10:21:11'!
xxx: anIncorrectWeight 

	self
		should: [ Backpack containingUpTo: anIncorrectWeight limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack invalidWeightCapacityErrorDescription.
!
!BackpackTest methodsFor: 'creating' stamp: 'jb 5/8/2023 10:22:36'!
raisesAnErrorWhenCreatingABackPackWithlimitingPoints: anIncorrectAmountOflimitingPoints

	self
		should: [ Backpack containingUpTo: 10 limitingPointsTo: anIncorrectAmountOflimitingPoints ]
		raise: Error
		withMessageText: Backpack invalidPointsCapacityErrorDescription.
! !
!BackpackTest methodsFor: 'creating' stamp: 'jb 5/8/2023 10:22:54' prior: 50669692!
test03CanNotCreateBackpackWithZeroMaxPoints

	self raisesAnErrorWhenCreatingABackPackWithlimitingPoints: 0! !

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:22:55'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:22:55'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'jb 5/8/2023 10:23:07' prior: 50669701!
test04CanNotCreateBackpackWithNegativeMaxPoints

	self raisesAnErrorWhenCreatingABackPackWithlimitingPoints: -1! !

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:23:08'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:23:08'!
PASSED!
!BackpackTest methodsFor: 'creating' stamp: 'jb 5/8/2023 10:25:17'!
raisesAnErrorWhenCreatingBackPackCointeningANonIntegerAmountOfWeight

	^ self
		should: [ Backpack containingUpTo: 1.0 limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack weightCapacityMustBeIntegerErrorDescription! !
!BackpackTest methodsFor: 'creating' stamp: 'jb 5/8/2023 10:25:17' prior: 50669710!
test05CanNotCreateBackpackWithNoIntegerMaxWeight

	self raisesAnErrorWhenCreatingBackPackCointeningANonIntegerAmountOfWeight.
! !
!BackpackTest methodsFor: 'creating' stamp: 'jb 5/8/2023 10:26:05'!
raisesAnErrorWhenCreatingABackPackWithANonIntegerAmountOfLimitingPoints

	^ self
		should: [ Backpack containingUpTo: 100 limitingPointsTo: 1.0 ]
		raise: Error
		withMessageText: Backpack pointsCapacityMustBeIntegerErrorDescription! !
!BackpackTest methodsFor: 'creating' stamp: 'jb 5/8/2023 10:26:05' prior: 50669719!
test06CanNotCreateBackpackWithNoIntegerMaxPoints

	self raisesAnErrorWhenCreatingABackPackWithANonIntegerAmountOfLimitingPoints.
! !

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:26:08'!
PASSED!

Object subclass: #NameOfSubclass
	instanceVariableNames: 'bag'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #NameOfSubclass category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 10:26:56'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'bag'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRemoval: #NameOfSubclass stamp: 'jb 5/8/2023 10:27:06'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'bag'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

TestCase subclass: #BackpackTest
	instanceVariableNames: 'bag'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 10:27:14'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'bag'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!BackpackTest methodsFor: 'nil' stamp: 'jb 5/8/2023 10:27:21' overrides: 16961394!
setUp! !
!BackpackTest methodsFor: 'setUp' stamp: 'jb 5/8/2023 10:27:49' prior: 50671223 overrides: 16961394!
setUp
		bag := Backpack containingUpTo: 42 limitingPointsTo: 100.! !
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:28:07' prior: 50669728!
test11ShouldAddZeroWeightWhenEmpty


	self assert: bag totalWeight equals: 0.
	self assert: bag isEmpty
! !

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:28:08'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:28:08'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:28:40' prior: 50669752!
test13ShouldAddZeroPointsWhenEmpty

	self assert: bag totalPoints equals: 0.
	self assert: bag isEmpty.
! !

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:28:42'!
PASSED!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 10:32:48'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'bag leftHandedHammer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 10:32:51'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'bag leftHandedHammer helpWantedSign'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 10:32:52'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'bag leftHandedHammer helpWantedSign carKeys'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!BackpackTest methodsFor: 'setUp' stamp: 'jb 5/8/2023 10:32:45' prior: 50671227 overrides: 16961394!
setUp
		bag := Backpack containingUpTo: 42 limitingPointsTo: 100.
		leftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5. 
		helpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 10.
		carKeys := PointsPortableObject named: 'car key' weighing: 10 worth: 2.! !
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:33:09' prior: 50669761!
test14ShouldAddPointsWhenAddingPointsPortableObjects

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: (leftHandedHammer ).
	aBackpack add: (PointsPortableObject named: 'car key' weighing: 10 worth: 20).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalPoints equals: 25.

! !

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:33:10'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:33:10'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:33:10'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:33:11'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:33:11'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:33:11'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:33:11'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:33:11'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:33:11'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:33:11'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:33:11'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:33:11'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:33:11'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:33:11'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:33:11'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:33:11'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:33:21' prior: 50671399!
test14ShouldAddPointsWhenAddingPointsPortableObjects

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: (leftHandedHammer ).
	aBackpack add: (carKeys ).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalPoints equals: 25.

! !

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:33:22'!
FAILURE!
!BackpackTest methodsFor: 'setUp' stamp: 'jb 5/8/2023 10:33:57' prior: 50671386 overrides: 16961394!
setUp
		bag := Backpack containingUpTo: 42 limitingPointsTo: 100.
		leftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5. 
		helpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 10.
		carKeys := PointsPortableObject named: 'car key' weighing: 10 worth: 20.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:34:00'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:34:00'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:34:31' prior: 50669776!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: leftHandedHammer .
	aBackpack add: helpWantedSign .
	aBackpack add: helpWantedSign .	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalPoints equals: 5.

! !

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:34:32'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:34:32'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:34:43' prior: 50669737!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: leftHandedHammer .
	aBackpack add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 10).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:34:58' prior: 50671625!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.

	aBackpack add: leftHandedHammer .
	aBackpack add: helpWantedSign .
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:34:59'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:34:59'!
PASSED!
!BackpackTest methodsFor: 'setUp' stamp: 'jb 5/8/2023 10:37:21'!
fill: aBackPack with: anOrderdCollectionOfObjects
	anOrderdCollectionOfObjects  do:[:anObject| aBackPack  add: anObject].! !
!BackpackTest methodsFor: 'creating-private' stamp: 'jb 5/8/2023 10:38:04' prior: 50671708!
fill: aBackPack with: anOrderdCollectionOfObjects
	anOrderdCollectionOfObjects  do:[:anObject| aBackPack  add: anObject].
	^aBackPack ! !

#(1 2 3 )!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:40:06' prior: 50671639!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := self fill:  bag  with: #(leftHandedHamer carKeys).
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:40:08'!
FAILURE!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:44:36' prior: 50671723!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := self fill:  bag  with: (OrderedCollection with:  leftHandedHammer with:  carKeys) .
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:44:37'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:44:37'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:45:12' prior: 50671737!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := self fill:  bag  with: (OrderedCollection with:  leftHandedHammer with:  helpWantedSign ) .
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalWeight equals: 20.

! !

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:45:13'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:45:13'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:45:53' prior: 50671470!
test14ShouldAddPointsWhenAddingPointsPortableObjects

	| aBackpack |
	aBackpack :=self fill: bag  with:(OrderedCollection  with:  leftHandedHammer  with: carKeys ) . 
	
	self assert: aBackpack size equals: 2.
	self assert: aBackpack totalPoints equals: 25.

! !

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:45:54'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:45:54'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:46:44' prior: 50671554!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self fill: bag  with: 	(OrderedCollection with: leftHandedHammer with: helpWantedSign with:helpWantedSign ).
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalPoints equals: 5.

! !

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:46:45'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:46:45'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:46:56' prior: 50671943!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self fill: bag  with: 	(OrderedCollection with: leftHandedHammer with: helpWantedSign with:helpWantedSign ).
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalPoints equals: 5.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:49:08'!
assertABackPack: aBackpack hasSize: aSize andPoints: pointsAmount 
	self assert: aBackpack size equals: aSize .
	self assert: aBackpack totalPoints equals: pointsAmount.

! !
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:49:37' prior: 50672013!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self fill: bag  with: 	(OrderedCollection with: leftHandedHammer with: helpWantedSign with:helpWantedSign ).
	self assertABackPack: aBackpack hasSize:  2 andPoints: 25 
! !

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:49:39'!
FAILURE!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:49:53' prior: 50672034!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self fill: bag  with: 	(OrderedCollection with: leftHandedHammer with: helpWantedSign with:helpWantedSign ).
	self assertABackPack: aBackpack hasSize:   5 andPoints: 5 
! !

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:49:54'!
FAILURE!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:51:26' prior: 50672049!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self fill: bag  with: 	(OrderedCollection with: leftHandedHammer with: helpWantedSign with:helpWantedSign ).
	self assertABackPack: aBackpack hasSize:   3 andPoints: 5 
! !

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:51:28'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:51:28'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:51:31' prior: 50672064!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self fill: bag  with: 	(OrderedCollection with: leftHandedHammer with: helpWantedSign with:helpWantedSign ).
	
	self assertABackPack: aBackpack hasSize:   3 andPoints: 5 
! !
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:51:53' prior: 50671874!
test14ShouldAddPointsWhenAddingPointsPortableObjects

	| aBackpack |
	aBackpack :=self fill: bag  with:(OrderedCollection  with:  leftHandedHammer  with: carKeys ) . 
	
	self assertABackPack: aBackpack hasSize:2  andPoints: 25! !

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:51:54'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:51:54'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:53:51'!
assertABackPack:aBackpack hasSize: aSize andWeight: aWeight	
	self assert: aBackpack size equals: aSize.
	self assert: aBackpack totalWeight equals: aWeight .

! !
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 10:54:20' prior: 50671805!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := self fill:  bag  with: (OrderedCollection with:  leftHandedHammer with:  helpWantedSign ) .
	
	self assertABackPack:  aBackpack hasSize:  2 andWeight: 20 
! !

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:54:22'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:54:27'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:54:29'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 10:54:29'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 10:54:29'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 10:54:29'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 10:54:29'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 10:54:29'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 10:54:29'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:54:29'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 10:54:30'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 10:54:30'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 10:54:30'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 10:54:30'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 10:54:30'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 10:54:30'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 10:54:30'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 10:54:30'!
PASSED!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 10:54:50'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'emptyBackpack leftHandedHammer helpWantedSign carKeys'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 10:54:50' prior: 50672133!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self fill: emptyBackpack  with: 	(OrderedCollection with: leftHandedHammer with: helpWantedSign with:helpWantedSign ).
	
	self assertABackPack: aBackpack hasSize:   3 andPoints: 5 
! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 10:54:50' prior: 50672144!
test14ShouldAddPointsWhenAddingPointsPortableObjects

	| aBackpack |
	aBackpack :=self fill: emptyBackpack  with:(OrderedCollection  with:  leftHandedHammer  with: carKeys ) . 
	
	self assertABackPack: aBackpack hasSize:2  andPoints: 25! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 10:54:50' prior: 50672219!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := self fill:  emptyBackpack  with: (OrderedCollection with:  leftHandedHammer with:  helpWantedSign ) .
	
	self assertABackPack:  aBackpack hasSize:  2 andWeight: 20 
! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 10:54:50' prior: 50671487 overrides: 16961394!
setUp
		emptyBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
		leftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5. 
		helpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 10.
		carKeys := PointsPortableObject named: 'car key' weighing: 10 worth: 20.! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 10:54:50' prior: 50671295!
test13ShouldAddZeroPointsWhenEmpty

	self assert: emptyBackpack totalPoints equals: 0.
	self assert: emptyBackpack isEmpty.
! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 10:54:50' prior: 50671232!
test11ShouldAddZeroWeightWhenEmpty


	self assert: emptyBackpack totalWeight equals: 0.
	self assert: emptyBackpack isEmpty
! !
!BackpackTest methodsFor: 'creating-private' stamp: 'jb 5/8/2023 10:57:08'!
raisesAnErrorWhenCreatingBackPackWithANonIntegerAmountOfWeight

	^ self
		should: [ Backpack containingUpTo: 1.0 limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack weightCapacityMustBeIntegerErrorDescription! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 10:57:08' prior: 50671109!
test05CanNotCreateBackpackWithNoIntegerMaxWeight

	self raisesAnErrorWhenCreatingBackPackWithANonIntegerAmountOfWeight.
! !

!methodRemoval: BackpackTest #raisesAnErrorWhenCreatingBackPackCointeningANonIntegerAmountOfWeight stamp: 'jb 5/8/2023 10:57:08'!
raisesAnErrorWhenCreatingBackPackCointeningANonIntegerAmountOfWeight

	^ self
		should: [ Backpack containingUpTo: 1.0 limitingPointsTo: 100 ]
		raise: Error
		withMessageText: Backpack weightCapacityMustBeIntegerErrorDescription!
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:04:31' prior: 50669610!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded


	self
		should: [ emptyBackpack  add: (NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1) ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: emptyBackpack  isEmpty. 
! !

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:04:32'!
PASSED!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 11:05:12'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'emptyBackpack leftHandedHammer helpWantedSign carKeys maxWeightLeftHandedHammer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:05:10' prior: 50672503!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded


	self
		should: [ emptyBackpack  add: maxWeightLeftHandedHammer ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: emptyBackpack  isEmpty. 
! !
!BackpackTest methodsFor: 'setUp' stamp: 'jb 5/8/2023 11:05:25' prior: 50672446 overrides: 16961394!
setUp
		emptyBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
		leftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5. 
		helpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 10.
		carKeys := PointsPortableObject named: 'car key' weighing: 10 worth: 20.
		maxWeightLeftHandedHammer  := NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.! !

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:05:28'!
PASSED!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 11:06:04'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'emptyBackpack leftHandedHammer helpWantedSign carKeys maxWeightHelpWantedSign'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 11:06:04' prior: 50672583!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded


	self
		should: [ emptyBackpack  add: maxWeightHelpWantedSign ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert: emptyBackpack  isEmpty. 
! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 11:06:04' prior: 50672594 overrides: 16961394!
setUp
		emptyBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
		leftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5. 
		helpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 10.
		carKeys := PointsPortableObject named: 'car key' weighing: 10 worth: 20.
		maxWeightHelpWantedSign  := NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.! !
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:06:41' prior: 50669624!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded


	self
		should: [ emptyBackpack add: (PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5) ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert:emptyBackpack isEmpty. 
! !

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:06:42'!
PASSED!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 11:07:29'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'emptyBackpack leftHandedHammer helpWantedSign carKeys maxWeightHelpWantedSign maxWeightLeftHandedHammer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:07:26' prior: 50672707!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded


	self
		should: [ emptyBackpack add: maxWeightLeftHandedHammer ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert:emptyBackpack isEmpty. 
! !
!BackpackTest methodsFor: 'setUp' stamp: 'jb 5/8/2023 11:07:40' prior: 50672691 overrides: 16961394!
setUp
		emptyBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
		leftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5. 
		helpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 10.
		carKeys := PointsPortableObject named: 'car key' weighing: 10 worth: 20.
		maxWeightHelpWantedSign  := NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.
		maxWeightLeftHandedHammer := (PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5).! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:07:42'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:07:42'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:09:35'!
raisesAnErrorWhenAddingAOverWeightObjectIntoAnEmptyBackpack: aMaxWeightObject 


	self
		should: [ emptyBackpack add: aMaxWeightObject ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert:emptyBackpack isEmpty. 
! !
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:09:48'!
raisesAnErrorWhenAddingAnOverWeightObjectIntoAnEmptyBackpack: aMaxWeightObject 


	self
		should: [ emptyBackpack add: aMaxWeightObject ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert:emptyBackpack isEmpty. 
! !

!methodRemoval: BackpackTest #raisesAnErrorWhenAddingAOverWeightObjectIntoAnEmptyBackpack: stamp: 'jb 5/8/2023 11:09:48'!
raisesAnErrorWhenAddingAOverWeightObjectIntoAnEmptyBackpack: aMaxWeightObject 


	self
		should: [ emptyBackpack add: aMaxWeightObject ]
		raise: Error
		withMessageText: Backpack maxWeightExceededErrorDescription.
		
	self assert:emptyBackpack isEmpty. 
!
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:10:16' prior: 50672679!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded


	self raisesAnErrorWhenAddingAnOverWeightObjectIntoAnEmptyBackpack: maxWeightHelpWantedSign .! !

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:10:17'!
PASSED!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 11:10:27'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'emptyBackpack leftHandedHammer helpWantedSign carKeys overWeightHelpWantedSign maxWeightLeftHandedHammer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 11:10:27' prior: 50672906!
test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded


	self raisesAnErrorWhenAddingAnOverWeightObjectIntoAnEmptyBackpack: overWeightHelpWantedSign .! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 11:10:27' prior: 50672799 overrides: 16961394!
setUp
		emptyBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
		leftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5. 
		helpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 10.
		carKeys := PointsPortableObject named: 'car key' weighing: 10 worth: 20.
		overWeightHelpWantedSign  := NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.
		maxWeightLeftHandedHammer := (PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5).! !

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:10:29'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:10:29'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:10:48' prior: 50672788!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded


	self raisesAnErrorWhenAddingAnOverWeightObjectIntoAnEmptyBackpack: maxWeightLeftHandedHammer 
! !

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:10:49'!
PASSED!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 11:10:58'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'emptyBackpack leftHandedHammer helpWantedSign carKeys overWeightHelpWantedSign overWeightLeftHandedHammer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 11:10:58' prior: 50673069!
test08ShouldNotAddPointsPortableObjectIfWeightExceeded


	self raisesAnErrorWhenAddingAnOverWeightObjectIntoAnEmptyBackpack: overWeightLeftHandedHammer 
! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 11:10:58' prior: 50672992 overrides: 16961394!
setUp
		emptyBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
		leftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5. 
		helpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 10.
		carKeys := PointsPortableObject named: 'car key' weighing: 10 worth: 20.
		overWeightHelpWantedSign  := NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.
		overWeightLeftHandedHammer := (PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5).! !

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:11:00'!
PASSED!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 11:13:11'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'emptyBackpack leftHandedHammer helpWantedSign carKeys overWeightHelpWantedSign overWeightLeftHandedHammer heavyLeftHandedHammer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 11:13:13'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'emptyBackpack leftHandedHammer helpWantedSign carKeys overWeightHelpWantedSign overWeightLeftHandedHammer heavyLeftHandedHammer heavyHelpWantedSign'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!BackpackTest methodsFor: 'setUp' stamp: 'jb 5/8/2023 11:13:09' prior: 50673155 overrides: 16961394!
setUp
		emptyBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
		leftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5. 
		helpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 10.
		carKeys := PointsPortableObject named: 'car key' weighing: 10 worth: 20.
		overWeightHelpWantedSign  := NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.
		overWeightLeftHandedHammer := (PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5).
		heavyLeftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5.
	heavyHelpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 1
		! !
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:13:52' prior: 50669638!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	| aBackpack |
	aBackpack := self fill: emptyBackpack  with: (OrderedCollection  with: heavyLeftHandedHammer  with: heavyHelpWantedSign ). 
	self assert: aBackpack totalWeight equals: 41.
	self assert: aBackpack totalPoints equals: 5.
! !

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:13:53'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:13:53'!
PASSED!
!BackpackTest methodsFor: 'setUp' stamp: 'jb 5/8/2023 11:14:31' prior: 50673258 overrides: 16961394!
setUp
		emptyBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
		leftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5. 
		helpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 10.
		carKeys := PointsPortableObject named: 'car key' weighing: 10 worth: 20.
		overWeightHelpWantedSign  := NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.
		overWeightLeftHandedHammer := (PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5).
		heavyLeftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5.
	heavyHelpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 1.
	
		! !

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 11:14:41'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'emptyBackpack leftHandedHammer helpWantedSign carKeys overWeightHelpWantedSign overWeightLeftHandedHammer heavyLeftHandedHammer lightHelpWantedSign'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 11:14:41' prior: 50673355 overrides: 16961394!
setUp
		emptyBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
		leftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5. 
		helpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 10.
		carKeys := PointsPortableObject named: 'car key' weighing: 10 worth: 20.
		overWeightHelpWantedSign  := NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.
		overWeightLeftHandedHammer := (PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5).
		heavyLeftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5.
	lightHelpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 1.
	
		! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 11:14:41' prior: 50673284!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	| aBackpack |
	aBackpack := self fill: emptyBackpack  with: (OrderedCollection  with: heavyLeftHandedHammer  with: lightHelpWantedSign ). 
	self assert: aBackpack totalWeight equals: 41.
	self assert: aBackpack totalPoints equals: 5.
! !

!classDefinition: #BackpackTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 11:29:50'!
TestCase subclass: #BackpackTest
	instanceVariableNames: 'emptyBackpack leftHandedHammer helpWantedSign carKeys overWeightHelpWantedSign overWeightLeftHandedHammer heavyLeftHandedHammer lightHelpWantedSign letter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!BackpackTest methodsFor: 'setUp' stamp: 'jb 5/8/2023 11:29:48' prior: 50673394 overrides: 16961394!
setUp
		emptyBackpack := Backpack containingUpTo: 42 limitingPointsTo: 100.
		leftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 10 worth: 5. 
		helpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 10.
		carKeys := PointsPortableObject named: 'car key' weighing: 10 worth: 20.
		overWeightHelpWantedSign  := NoPointsPortableObject named: 'help-wanted sign' weighing: 42 + 1.
		overWeightLeftHandedHammer := (PointsPortableObject named: 'left-handed hammer' weighing: 42 + 6 worth: 5).
		heavyLeftHandedHammer:= PointsPortableObject named: 'left-handed hammer' weighing: 40 worth: 5.
	lightHelpWantedSign:= NoPointsPortableObject named: 'help-wanted sign' weighing: 1.
	letter:= PointsPortableObject named: 'letter' weighing: 1 worth: 5
	
		! !
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:30:01' prior: 50669655!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := self fill:  emptyBackpack  
					with: (OrderedCollection  
							with: heavyLeftHandedHammer   
							 with:  lightHelpWantedSign  
							   with: letter ). 
	
	self assert: aBackpack size equals: 3.
	self assert: aBackpack totalWeight equals: 42.
	self assert: aBackpack totalPoints equals: 10.
! !

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:30:02'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:30:02'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:30:54' prior: 50673420!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	| aBackpack |
	aBackpack := self fill: emptyBackpack  
				with: (OrderedCollection  
						with: heavyLeftHandedHammer  
							with: lightHelpWantedSign ).
							 
	self assert: aBackpack totalWeight equals: 41.
	self assert: aBackpack totalPoints equals: 5.
! !
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:32:31'!
assertThatABackpack: aBackpack hasTotalWeight: aWeightAmount andTotalPoints: pointsAmount
	self assert: aBackpack totalWeight equals: aWeightAmount .
	self assert: aBackpack totalPoints equals: pointsAmount .
! !
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:33:02' prior: 50673474!
test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity

	| aBackpack |
	aBackpack := self fill:  emptyBackpack  
					with: (OrderedCollection  
							with: heavyLeftHandedHammer   
							 with:  lightHelpWantedSign  
							   with: letter ). 
	
	self assert: aBackpack size equals: 3.
	self  assertThatABackpack:  aBackpack  hasTotalWeight:  42  andTotalPoints:  10! !

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:33:03'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:33:03'!
PASSED!
!BackpackTest methodsFor: 'adding' stamp: 'jb 5/8/2023 11:33:37' prior: 50673547!
test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity

	| aBackpack |
	aBackpack := self fill: emptyBackpack  
				with: (OrderedCollection  
						with: heavyLeftHandedHammer  
							with: lightHelpWantedSign ).
							 
	self assertThatABackpack:  aBackpack hasTotalWeight: 41   andTotalPoints: 5! !

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:33:38'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:33:38'!
PASSED!
!BackpackTest methodsFor: 'creating-private' stamp: 'jb 5/8/2023 11:37:04'!
raisesAnErrorWhenCreatingABackPackWithLimitingPoints: anIncorrectAmountOflimitingPoints

	self
		should: [ Backpack containingUpTo: 10 limitingPointsTo: anIncorrectAmountOflimitingPoints ]
		raise: Error
		withMessageText: Backpack invalidPointsCapacityErrorDescription.
! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 11:37:05' prior: 50670972!
test03CanNotCreateBackpackWithZeroMaxPoints

	self raisesAnErrorWhenCreatingABackPackWithLimitingPoints: 0! !
!BackpackTest methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 11:37:05' prior: 50671036!
test04CanNotCreateBackpackWithNegativeMaxPoints

	self raisesAnErrorWhenCreatingABackPackWithLimitingPoints: -1! !

!methodRemoval: BackpackTest #raisesAnErrorWhenCreatingABackPackWithlimitingPoints: stamp: 'jb 5/8/2023 11:37:05'!
raisesAnErrorWhenCreatingABackPackWithlimitingPoints: anIncorrectAmountOflimitingPoints

	self
		should: [ Backpack containingUpTo: 10 limitingPointsTo: anIncorrectAmountOflimitingPoints ]
		raise: Error
		withMessageText: Backpack invalidPointsCapacityErrorDescription.
!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 11:37:46' prior: 50672434!
test12ShouldAddWeightWhenAddingPortableObjects

	| aBackpack |
	aBackpack := self fill:  emptyBackpack  
		with: (OrderedCollection 
			with:  leftHandedHammer 
				with:  helpWantedSign ) .
	
	self assertABackPack:  aBackpack hasSize:  2 andWeight: 20 
! !

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 11:37:47'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 11:37:48'!
PASSED!
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 11:38:12' prior: 50672423!
test14ShouldAddPointsWhenAddingPointsPortableObjects

	| aBackpack |
	aBackpack :=self fill: emptyBackpack  
		with:(OrderedCollection 
			 with:  leftHandedHammer  
				with: carKeys ) . 
	
	self assertABackPack: aBackpack hasSize:2  andPoints: 25! !
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 11:38:27' prior: 50672411!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self fill: emptyBackpack 
		 with: 	(OrderedCollection 
			with: leftHandedHammer 
				with: helpWantedSign with:helpWantedSign ).
	
	self assertABackPack: aBackpack hasSize:   3 andPoints: 5 
! !
!BackpackTest methodsFor: 'accessing' stamp: 'jb 5/8/2023 11:38:36' prior: 50673830!
test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects

	| aBackpack |
	aBackpack := self fill: emptyBackpack 
		 with: 	(OrderedCollection 
			with: leftHandedHammer 
				with: helpWantedSign 
					with:helpWantedSign ).
	
	self assertABackPack: aBackpack hasSize:   3 andPoints: 5 
! !
!Backpack methodsFor: 'adding' stamp: 'jb 5/8/2023 12:12:54' prior: 50670060!
add: aPortableObject
	
	aPortableObject  addTo: self! !
!Backpack methodsFor: 'adding' stamp: 'jb 5/8/2023 12:13:00' prior: 50673854!
add: aPortableObject
	
	aPortableObject  addToBackpack: self! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:13:08'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:13:08'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:13:08'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:13:08'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:13:08'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:13:08'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:13:08'!
FAILURE!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:13:08'!
FAILURE!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:13:08'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:13:08'!
ERROR!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:13:08'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:13:08'!
ERROR!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:13:08'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:13:08'!
ERROR!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:13:08'!
ERROR!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:13:17'!
ERROR!
!PointsPortableObject methodsFor: 'adding' stamp: 'jb 5/8/2023 12:13:31'!
addToBackpack: aBackpack 
	self shouldBeImplemented.! !
!PointsPortableObject methodsFor: 'adding' stamp: 'jb 5/8/2023 12:15:00' prior: 50673921!
addToBackpack: aBackpack 
	aBackpack addAnPointsPortableObject: self..! !
!PointsPortableObject methodsFor: 'adding' stamp: 'jb 5/8/2023 12:15:06' prior: 50673926!
addToBackpack: aBackpack 
	aBackpack addAnPointsPortableObject: self.! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:15:12'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:15:12'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:15:12'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:15:12'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:15:12'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:15:12'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:15:12'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:15:12'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:15:12'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:15:12'!
ERROR!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:15:12'!
ERROR!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:15:12'!
ERROR!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:15:12'!
ERROR!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:15:12'!
FAILURE!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:15:12'!
FAILURE!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:15:16'!
ERROR!
!Backpack methodsFor: 'adding' stamp: 'jb 5/8/2023 12:15:24'!
addAnPointsPortableObject: aPointsPortableObject 
	self shouldBeImplemented.! !
!Backpack methodsFor: 'adding' stamp: 'jb 5/8/2023 12:15:40' prior: 50673994!
addAnPointsPortableObject: aPointsPortableObject 
	self assertWeightAdding: aPointsPortableObject tolerating: 0.
		container add: aPointsPortableObject .! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:15:44'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:15:44'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:15:44'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:15:44'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:15:44'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:15:44'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:15:44'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:15:44'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:15:44'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:15:44'!
ERROR!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:15:44'!
ERROR!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:15:44'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:15:44'!
ERROR!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:15:44'!
FAILURE!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:15:44'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:15:50'!
ERROR!
!NoPointsPortableObject methodsFor: 'adding' stamp: 'jb 5/8/2023 12:15:57'!
addToBackpack: aBackpack 
	self shouldBeImplemented.! !
!NoPointsPortableObject methodsFor: 'adding' stamp: 'jb 5/8/2023 12:16:20' prior: 50674064!
addToBackpack: aBackpack 
	aBackpack  addaNonPointsPortableObjecto: self ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:16:25'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:16:25'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:16:25'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:16:25'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:16:25'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:16:25'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:16:25'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:16:25'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:16:25'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:16:25'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:16:25'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:16:25'!
ERROR!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:16:25'!
ERROR!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:16:25'!
ERROR!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:16:25'!
FAILURE!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:16:30'!
ERROR!
!Backpack methodsFor: 'adding' stamp: 'jb 5/8/2023 12:16:38'!
addaNonPointsPortableObjecto: aNoPointsPortableObject 
	self shouldBeImplemented.! !
!Backpack methodsFor: 'adding' stamp: 'jb 5/8/2023 12:17:19' prior: 50674131!
addaNonPointsPortableObjecto: aNoPointsPortableObject 
	self assertWeightAdding: aNoPointsPortableObject tolerating: 0.
		container add: aNoPointsPortableObject .! !
!Backpack methodsFor: 'adding' stamp: 'jb 5/8/2023 12:17:36'!
addNonPointsPortableObjecto: aNoPointsPortableObject 
	self assertWeightAdding: aNoPointsPortableObject tolerating: 0.
		container add: aNoPointsPortableObject .! !

!methodRemoval: Backpack #addaNonPointsPortableObjecto: stamp: 'jb 5/8/2023 12:17:36'!
addaNonPointsPortableObjecto: aNoPointsPortableObject 
	self assertWeightAdding: aNoPointsPortableObject tolerating: 0.
		container add: aNoPointsPortableObject .!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:17:50'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:17:50'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:17:50'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:17:50'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:17:50'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:17:50'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:17:50'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:17:50'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:17:50'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:17:50'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:17:50'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:17:50'!
ERROR!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:17:50'!
ERROR!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:17:50'!
ERROR!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:17:50'!
FAILURE!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:17:55'!
ERROR!
!NoPointsPortableObject methodsFor: 'adding' stamp: 'jb 5/8/2023 12:18:36' prior: 50674069!
addToBackpack: aBackpack 
	aBackpack  addNonPointsPortableObjecto: self ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:18:39'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:18:39'!
PASSED!
!Backpack methodsFor: 'adding' stamp: 'jb 5/8/2023 12:18:56'!
addNoPointsPortableObject: aNoPointsPortableObject 
	self assertWeightAdding: aNoPointsPortableObject tolerating: 0.
		container add: aNoPointsPortableObject .! !

!methodRemoval: Backpack #addNonPointsPortableObjecto: stamp: 'jb 5/8/2023 12:18:56'!
addNonPointsPortableObjecto: aNoPointsPortableObject 
	self assertWeightAdding: aNoPointsPortableObject tolerating: 0.
		container add: aNoPointsPortableObject .!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:18:59'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:18:59'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:18:59'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:18:59'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:18:59'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:18:59'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:18:59'!
FAILURE!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:18:59'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:18:59'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:18:59'!
ERROR!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:18:59'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:18:59'!
ERROR!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:18:59'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:18:59'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:18:59'!
ERROR!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:19:11'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:19:11'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:19:11'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:19:11'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:19:11'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:19:11'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:19:11'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:19:11'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:19:11'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:19:11'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:19:11'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:19:11'!
ERROR!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:19:11'!
ERROR!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:19:11'!
ERROR!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:19:11'!
FAILURE!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:19:13'!
FAILURE!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:19:25'!
ERROR!
!NoPointsPortableObject methodsFor: 'adding' stamp: 'jb 5/8/2023 12:19:35' prior: 50674219!
addToBackpack: aBackpack 
	aBackpack  addNoPointsPortableObject: self ! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:19:38'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:19:39'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:19:39'!
PASSED!
!Backpack methodsFor: 'adding' stamp: 'jb 5/8/2023 12:20:20' prior: 50673999!
addAnPointsPortableObject: aPointsPortableObject 
		self assertWeightAdding: aPointsPortableObject tolerating: 5.
		self assertPointsAdding: aPointsPortableObject .
		container add: aPointsPortableObject .! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:20:22'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:20:22'!
PASSED!
!Backpack methodsFor: 'adding-private' stamp: 'jb 5/8/2023 12:21:18'!
addAPointsPortableObject: aPointsPortableObject 
		self assertWeightAdding: aPointsPortableObject tolerating: 5.
		self assertPointsAdding: aPointsPortableObject .
		container add: aPointsPortableObject .! !
!PointsPortableObject methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 12:21:19' prior: 50673932!
addToBackpack: aBackpack 
	aBackpack addAPointsPortableObject: self.! !

!methodRemoval: Backpack #addAnPointsPortableObject: stamp: 'jb 5/8/2023 12:21:19'!
addAnPointsPortableObject: aPointsPortableObject 
		self assertWeightAdding: aPointsPortableObject tolerating: 5.
		self assertPointsAdding: aPointsPortableObject .
		container add: aPointsPortableObject .!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:21:20'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:21:21'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:21:21'!
PASSED!

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:21:22'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:21:22'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:21:23'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:21:23'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:21:23'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:21:23'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:21:23'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:21:23'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:21:23'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:21:23'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:21:23'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:21:23'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:21:23'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:21:23'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:21:23'!
PASSED!
!Backpack methodsFor: 'accessing' stamp: 'jb 5/8/2023 12:22:59' prior: 50670022!
totalPoints
		^ container  inject:  0  into:[:totalPoints :object | totalPoints  + object  points ] .! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:23:01'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:23:01'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:23:01'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:23:01'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:23:01'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:23:01'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:23:01'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:23:01'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:23:01'!
ERROR!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:23:01'!
ERROR!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:23:01'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:23:01'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:23:01'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:23:01'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:23:01'!
ERROR!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:23:05'!
ERROR!
!NoPointsPortableObject methodsFor: 'points' stamp: 'jb 5/8/2023 12:23:21'!
points
	self shouldBeImplemented.! !
!NoPointsPortableObject methodsFor: 'points' stamp: 'jb 5/8/2023 12:23:26' prior: 50674727!
points
	^0! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:23:29'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:23:29'!
PASSED!
!Backpack methodsFor: 'accessing' stamp: 'jb 5/8/2023 12:24:24' prior: 50670034!
totalWeight
	^container  inject:  0  into: [:totalWeight :object | totalWeight  + object  weight ]! !

!testRun: #BackpackTest #test01CanNotCreateBackpackWithZeroMaxWeight stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test02CanNotCreateBackpackWithNegativeMaxWeight stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test03CanNotCreateBackpackWithZeroMaxPoints stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test04CanNotCreateBackpackWithNegativeMaxPoints stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test05CanNotCreateBackpackWithNoIntegerMaxWeight stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test06CanNotCreateBackpackWithNoIntegerMaxPoints stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test07ShouldNotAddNoPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test08ShouldNotAddPointsPortableObjectIfWeightExceeded stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test09ShouldAddPortableObjectsIfWeightUnderMaxWeightCapacity stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test10ShouldAddPortableObjectsIfWeightEqualsMaxWeightCapacity stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test11ShouldAddZeroWeightWhenEmpty stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test12ShouldAddWeightWhenAddingPortableObjects stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test13ShouldAddZeroPointsWhenEmpty stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test14ShouldAddPointsWhenAddingPointsPortableObjects stamp: 'jb 5/8/2023 12:24:25'!
PASSED!

!testRun: #BackpackTest #test15ShouldNotAddPointsWhenAddingNoPointsPortableObjects stamp: 'jb 5/8/2023 12:24:25'!
PASSED!
!PortableObject methodsFor: 'accessing' stamp: 'jb 5/8/2023 12:25:17'!
points
	self subclassResponsibility ! !

!methodRemoval: PortableObject #doesItAddPoints stamp: 'jb 5/8/2023 12:25:32'!
doesItAddPoints

	self subclassResponsibility	!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 12:27:46'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'bernard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!DoorTest methodsFor: 'nil' stamp: 'jb 5/8/2023 12:27:45' overrides: 16961394!
setUp
	bernard :=  PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).! !
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:28:13' prior: 50669806!
test01ADoorOpenedCanNotBeOpenedAgain
	
	| mainCharacter aDoor |
	
	mainCharacter := PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	aDoor := Door opened.
	
	self 
		should: [ aDoor toBeOpenedBy: bernard ]
		raise: Error
		withMessageText: Door alreadyOpenedErrorDescription.
		
	self assert: aDoor isOpen.! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:28:16'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:28:16'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:28:16'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:28:16'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:28:16'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:28:16'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:28:16'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:28:16'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:28:16'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:28:16'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:28:16'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:28:16'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:28:16'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:28:24' prior: 50674872!
test01ADoorOpenedCanNotBeOpenedAgain
	
	| aDoor |
	

	aDoor := Door opened.
	
	self 
		should: [ aDoor toBeOpenedBy: bernard ]
		raise: Error
		withMessageText: Door alreadyOpenedErrorDescription.
		
	self assert: aDoor isOpen.! !
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 12:28:36' prior: 50669901!
test02ADoorOpenedCanBeClosed
	
	| aDoor |
	
	
	aDoor := Door opened.
	
	self assert: aDoor isOpen.
	aDoor toBeClosedBy: bernard.
	self deny: aDoor isOpen.
	! !
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 12:28:48' prior: 50669913!
test03ADoorClosedCanNotBeClosedAgain
	
	| aDoor |
	aDoor := Door closed.
	
	self 
		should: [ aDoor toBeClosedBy: bernard ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:28:49'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:28:50'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:28:50'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:28:50'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:28:50'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:28:50'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:28:50'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:28:50'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:28:50'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:28:50'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:28:50'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:28:50'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:28:50'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 12:29:02' prior: 50669927!
test06ADoorKeyClosedCanNotBeClosedAgain
	
	| aDoor oldKey |
	
	
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeClosedBy: bernard ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:29:04'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:29:04'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:29:04'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:29:04'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:29:04'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:29:04'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:29:04'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:29:04'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:29:04'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:29:04'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:29:04'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:29:04'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:29:04'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:29:16' prior: 50669820!
test04ADoorClosedCanBeOpened
	
	| aDoor |
	
	aDoor := Door closed.
	
	self deny: aDoor isOpen.
	aDoor toBeOpenedBy: bernard .
	self assert: aDoor isOpen.! !

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:29:18'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:29:18'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:29:18'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:29:18'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:29:18'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:29:18'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:29:18'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:29:18'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:29:18'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:29:18'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:29:18'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:29:18'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:29:18'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:29:28' prior: 50669832!
test05ADoorClosedCanNotBeOpenedWithAKey
	
	| aDoor oldKey |
	
	aDoor := Door closed.
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	
	self 
		should: [ aDoor toBeOpenedBy: bernard using: oldKey ]
		raise: Error
		withMessageText: Door noNeedForAKeyErrorDescription.
		
	self deny: aDoor isOpen.! !

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:29:30'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:29:30'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:29:30'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:29:30'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:29:30'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:29:30'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:29:30'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:29:30'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:29:30'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:29:30'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:29:30'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:29:30'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:29:30'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:29:40' prior: 50669849!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	
	| aDoor oldKey |
	
	
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeOpenedBy: bernard ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:29:42'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:29:42'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:29:42'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:29:42'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:29:42'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:29:42'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:29:42'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:29:42'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:29:42'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:29:42'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:29:42'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:29:42'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:29:42'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:29:57' prior: 50669866!
test08ADoorKeyClosedCanNotBeOpenWithAnyKey
	
	| aDoor oldKey |
	
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeOpenedBy: bernard using: (PointsPortableObject named: 'car key' weighing: 2 worth: 1000) ]
		raise: Error
		withMessageText: Door notCorrectKeyErrorDescription.
		
	self deny: aDoor isOpen ! !

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:29:59'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:29:59'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:29:59'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:29:59'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:29:59'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:29:59'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:29:59'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:29:59'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:29:59'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:29:59'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:29:59'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:29:59'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:29:59'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:30:15' prior: 50669885!
test09ADoorKeyClosedCanBeOpenWithTheCorrectKey
	
	| aDoor oldKey |
	

	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self deny: aDoor isOpen.
	aDoor toBeOpenedBy: bernard using: oldKey.
	self assert: aDoor isOpen! !

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:30:17'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:30:17'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:30:17'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:30:17'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:30:17'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:30:17'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:30:17'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:30:17'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:30:17'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:30:17'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:30:17'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:30:17'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:30:17'!
PASSED!
!DoorTest methodsFor: 'using' stamp: 'jb 5/8/2023 12:30:29' prior: 50669968!
test12WhenUsingADoorKeyClosedCanNotBeOpened
	
	| aDoor oldKey |
	
	
	oldKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	aDoor := Door closedWith: oldKey.
	
	self 
		should: [ aDoor toBeUsedBy: bernard ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: aDoor isOpen! !

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:30:31'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:30:31'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:30:31'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:30:31'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:30:31'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:30:31'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:30:31'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:30:31'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:30:31'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:30:31'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:30:31'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:30:31'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:30:31'!
PASSED!
!DoorTest methodsFor: 'using' stamp: 'jb 5/8/2023 12:30:42' prior: 50669956!
test11WhenUsingADoorOpenedGetsClosed
	
	| aDoor |
	
	
	aDoor := Door opened.
	
	self assert: aDoor isOpen.
	aDoor toBeUsedBy: bernard .	
	self deny: aDoor isOpen.! !

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:30:44'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:30:45'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:30:45'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:30:45'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:30:45'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:30:45'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:30:45'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:30:45'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:30:45'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:30:45'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:30:45'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:30:45'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:30:45'!
PASSED!
!DoorTest methodsFor: 'using' stamp: 'jb 5/8/2023 12:30:53' prior: 50669944!
test10WhenUsingADoorClosedGetsOpened
	
	| aDoor |

	aDoor := Door closed.
	
	self deny: aDoor isOpen.
	aDoor toBeUsedBy: bernard .	
	self assert: aDoor isOpen ! !

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:30:55'!
PASSED!

TestCase subclass: #DoorTest
	instanceVariableNames: 'bernard mainCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 12:31:22'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'bernard mainCharacter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 12:31:33'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'bernard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

TestCase subclass: #DoorTest
	instanceVariableNames: 'bernard closedDoor openedDoor closedDoorWithOldKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 12:33:07'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'bernard closedDoor openedDoor closedDoorWithOldKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!DoorTest methodsFor: 'setUp' stamp: 'jb 5/8/2023 12:33:36' prior: 50674865 overrides: 16961394!
setUp
	bernard :=  PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	openedDoor := Door opened.
	closedDoor := Door closed .
	! !

TestCase subclass: #DoorTest
	instanceVariableNames: 'bernard closedDoor openedDoor closedDoorWithOldKey oldKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

TestCase subclass: #DoorTest
	instanceVariableNames: 'bernard closedDoor openedDoor closedDoorWithOldKey oldRustyKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 12:33:55'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'bernard closedDoor openedDoor closedDoorWithOldKey oldRustyKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!DoorTest methodsFor: 'setUp' stamp: 'jb 5/8/2023 12:34:32' prior: 50675503 overrides: 16961394!
setUp
	bernard :=  PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	openedDoor := Door opened.
	closedDoor := Door closed .
	oldRustyKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	closedDoorWithOldKey := Door closedWith: oldRustyKey .
	! !
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:35:00' prior: 50674927!
test01ADoorOpenedCanNotBeOpenedAgain
	
	
	

	

	self 
		should: [ openedDoor toBeOpenedBy: bernard ]
		raise: Error
		withMessageText: Door alreadyOpenedErrorDescription.
		
	self assert: openedDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:35:07' prior: 50675548!
test01ADoorOpenedCanNotBeOpenedAgain

	self 
		should: [ openedDoor toBeOpenedBy: bernard ]
		raise: Error
		withMessageText: Door alreadyOpenedErrorDescription.
		
	self assert: openedDoor isOpen.! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:35:10'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:35:10'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:35:10'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:35:10'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:35:10'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:35:10'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:35:10'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:35:10'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:35:10'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:35:10'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:35:10'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:35:10'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:35:10'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:35:37' prior: 50675049!
test04ADoorClosedCanBeOpened

	self deny: closedDoor isOpen.
	closedDoor toBeOpenedBy: bernard .
	self assert: closedDoor isOpen.! !

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:35:38'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:35:38'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:35:38'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:35:38'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:35:38'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:35:38'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:35:38'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:35:38'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:35:38'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:35:38'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:35:38'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:35:38'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:35:38'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:36:04' prior: 50675097!
test05ADoorClosedCanNotBeOpenedWithAKey

	self 
		should: [ closedDoor toBeOpenedBy: bernard using: oldRustyKey ]
		raise: Error
		withMessageText: Door noNeedForAKeyErrorDescription.
		
	self deny: closedDoor isOpen.! !

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:36:06'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:36:06'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:36:06'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:36:06'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:36:06'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:36:06'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:36:06'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:36:06'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:36:06'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:36:06'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:36:06'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:36:06'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:36:06'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:36:38' prior: 50675151!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	

	
	self 
		should: [ closedDoorWithOldKey toBeOpenedBy: bernard ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: closedDoorWithOldKey isOpen! !

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:36:39'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:36:39'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:36:39'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:36:39'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:36:39'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:36:40'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:36:40'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:36:40'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:36:40'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:36:40'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:36:40'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:36:40'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:36:40'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:37:02' prior: 50675205!
test08ADoorKeyClosedCanNotBeOpenWithAnyKey
	

	
	self 
		should: [ closedDoorWithOldKey toBeOpenedBy: bernard using: (PointsPortableObject named: 'car key' weighing: 2 worth: 1000) ]
		raise: Error
		withMessageText: Door notCorrectKeyErrorDescription.
		
	self deny: closedDoorWithOldKey isOpen ! !

!classDefinition: #DoorTest category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 12:37:11'!
TestCase subclass: #DoorTest
	instanceVariableNames: 'bernard closedDoor openedDoor closedDoorWithOldKey oldRustyKey carKey'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:37:10' prior: 50675756!
test08ADoorKeyClosedCanNotBeOpenWithAnyKey
	

	
	self 
		should: [ closedDoorWithOldKey toBeOpenedBy: bernard using: carKey]
		raise: Error
		withMessageText: Door notCorrectKeyErrorDescription.
		
	self deny: closedDoorWithOldKey isOpen ! !
!DoorTest methodsFor: 'setUp' stamp: 'jb 5/8/2023 12:37:26' prior: 50675535 overrides: 16961394!
setUp
	bernard :=  PlayableCharacter named: 'Bernard' using: (Backpack containingUpTo: 100 limitingPointsTo: 100).
	openedDoor := Door opened.
	closedDoor := Door closed .
	oldRustyKey := (PointsPortableObject named: 'old-rusty key' weighing: 2 worth: 1000).
	closedDoorWithOldKey := Door closedWith: oldRustyKey .
	carKey := PointsPortableObject named: 'car key' weighing: 2 worth: 1000 
	! !

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:37:32'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:37:32'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:37:32'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:37:32'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:37:32'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:37:32'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:37:32'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:37:32'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:37:32'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:37:32'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:37:32'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:37:32'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:37:32'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:38:17' prior: 50675261!
test09ADoorKeyClosedCanBeOpenWithTheCorrectKey
	
	self deny: closedDoorWithOldKey isOpen.
	closedDoorWithOldKey toBeOpenedBy: bernard using: oldRustyKey .
	self assert: closedDoorWithOldKey isOpen! !

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:38:18'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:38:18'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:38:18'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:38:18'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:38:18'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:38:18'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:38:18'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:38:18'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:38:18'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:38:18'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:38:18'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:38:18'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:38:18'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 12:38:36' prior: 50674937!
test02ADoorOpenedCanBeClosed
	
	self assert: openedDoor isOpen.
	openedDoor toBeClosedBy: bernard.
	self deny: openedDoor isOpen.
	! !

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:38:37'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:38:37'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:38:37'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:38:37'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:38:37'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:38:37'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:38:37'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:38:37'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:38:37'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:38:37'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:38:37'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:38:37'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:38:37'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 12:38:52' prior: 50674945!
test03ADoorClosedCanNotBeClosedAgain
	
	
	
	self 
		should: [ closedDoor toBeClosedBy: bernard ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: closedDoor isOpen! !

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:38:53'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:38:53'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:38:53'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:38:53'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:38:53'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:38:53'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:38:53'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:38:53'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:38:53'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:38:53'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:38:53'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:38:53'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:38:53'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 12:39:08' prior: 50674995!
test06ADoorKeyClosedCanNotBeClosedAgain

	self 
		should: [ closedDoorWithOldKey toBeClosedBy: bernard ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self deny: closedDoorWithOldKey isOpen! !

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:39:09'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:39:09'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:39:09'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:39:09'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:39:09'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:39:09'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:39:09'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:39:09'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:39:09'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:39:09'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:39:09'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:39:09'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:39:09'!
PASSED!
!DoorTest methodsFor: 'using' stamp: 'jb 5/8/2023 12:39:33' prior: 50675417!
test10WhenUsingADoorClosedGetsOpened
	
	self deny: closedDoor isOpen.
	closedDoor  bernard .	
	self assert: closedDoor  isOpen ! !

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:39:34'!
ERROR!
!DoorTest methodsFor: 'using' stamp: 'jb 5/8/2023 12:39:48' prior: 50676042!
test10WhenUsingADoorClosedGetsOpened
	
	self deny: closedDoor isOpen.
	closedDoor toBeUsedBy: bernard .	
	self assert: closedDoor isOpen ! !

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:39:49'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:39:49'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:39:49'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:39:49'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:39:49'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:39:49'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:39:49'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:39:49'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:39:49'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:39:49'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:39:49'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:39:49'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:39:49'!
PASSED!
!DoorTest methodsFor: 'using' stamp: 'jb 5/8/2023 12:40:03' prior: 50675368!
test11WhenUsingADoorOpenedGetsClosed

	self assert: openedDoor isOpen.
	openedDoor toBeUsedBy: bernard .	
	self deny: openedDoor isOpen.! !

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:40:03'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:40:03'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:40:03'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:40:03'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:40:03'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:40:03'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:40:03'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:40:03'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:40:03'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:40:03'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:40:03'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:40:03'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:40:03'!
PASSED!
!DoorTest methodsFor: 'using' stamp: 'jb 5/8/2023 12:40:21' prior: 50675314!
test12WhenUsingADoorKeyClosedCanNotBeOpened
	
	self 
		should: [ closedDoorWithOldKey toBeUsedBy: bernard ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self deny: closedDoor isOpen! !

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:40:22'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:40:22'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:40:22'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:40:22'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:40:22'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:40:22'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:40:22'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:40:22'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:40:22'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:40:22'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:40:22'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:40:22'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:40:22'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:50:23'!
assertIsClosed: aDoor
	self deny: aDoor isOpen.
	! !
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:52:03'!
assertAblockThatOpensADoor: aBlockThatOpensADoor opens: aDoor 

	self assertIsClosed:  aDoor. 
	aBlockThatOpensADoor value: aDoor. 
	self assert: aDoor isOpen.! !
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:53:17' prior: 50675608!
test04ADoorClosedCanBeOpened

	
	self assertAblockThatOpensADoor:    [:aDoor|  aDoor toBeOpenedBy: bernard]  opens:   closedDoor 
	! !

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:53:18'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:53:18'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:53:18'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:53:18'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:53:18'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:53:18'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:53:18'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:53:18'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:53:18'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:53:18'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:53:18'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:53:18'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:53:18'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:54:35' prior: 50675845!
test09ADoorKeyClosedCanBeOpenWithTheCorrectKey
	
	
	self assertAblockThatOpensADoor: [:aDoor| aDoor toBeOpenedBy: bernard using: oldRustyKey ] 
		opens: closedDoorWithOldKey 
	! !
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:54:39' prior: 50676257!
test09ADoorKeyClosedCanBeOpenWithTheCorrectKey
	self assertAblockThatOpensADoor: [:aDoor| aDoor toBeOpenedBy: bernard using: oldRustyKey ] 
		opens: closedDoorWithOldKey 
	! !
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:55:53' prior: 50675778!
test08ADoorKeyClosedCanNotBeOpenWithAnyKey
	

	
	self 
		should: [ closedDoorWithOldKey toBeOpenedBy: bernard using: carKey]
		raise: Error
		withMessageText: Door notCorrectKeyErrorDescription.
		
	self assertIsClosed: closedDoorWithOldKey ! !
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:56:08' prior: 50675705!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	

	
	self 
		should: [ closedDoorWithOldKey toBeOpenedBy: bernard ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self assertIsClosed: closedDoorWithOldKey ! !

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:56:10'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:56:10'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:56:10'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:56:10'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:56:10'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:56:10'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:56:10'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:56:10'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:56:10'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:56:10'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:56:10'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:56:10'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:56:10'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 12:56:26' prior: 50675655!
test05ADoorClosedCanNotBeOpenedWithAKey

	self 
		should: [ closedDoor toBeOpenedBy: bernard using: oldRustyKey ]
		raise: Error
		withMessageText: Door noNeedForAKeyErrorDescription.
		
	self assertIsClosed:  closedDoor ! !

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:56:27'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:56:27'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:56:27'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:56:27'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:56:27'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:56:27'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:56:27'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:56:27'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:56:27'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:56:27'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:56:27'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:56:27'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:56:27'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 12:58:17'!
assertABlockThatClosesADoor: aBlockThatClosesADoor closes: aDoor	
	self assert: aDoor isOpen.
	aBlockThatClosesADoor value: aDoor.
	self assertIsClosed:  aDoor .
	! !
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 12:59:13' prior: 50675895!
test02ADoorOpenedCanBeClosed
	
	self  assertABlockThatClosesADoor: [:aDoor | aDoor toBeClosedBy: bernard] 	closes:  openedDoor 

	! !

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:59:15'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:59:15'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:59:15'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:59:15'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:59:15'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:59:15'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:59:15'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:59:15'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:59:15'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:59:15'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:59:15'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:59:15'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:59:15'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 12:59:29' prior: 50675942!
test03ADoorClosedCanNotBeClosedAgain
	
	
	
	self 
		should: [ closedDoor toBeClosedBy: bernard ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self assertIsClosed:  closedDoor ! !

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:59:30'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:59:30'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:59:30'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:59:30'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:59:30'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:59:30'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:59:30'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:59:30'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:59:30'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:59:30'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:59:30'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:59:30'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:59:30'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 12:59:43' prior: 50675992!
test06ADoorKeyClosedCanNotBeClosedAgain

	self 
		should: [ closedDoorWithOldKey toBeClosedBy: bernard ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self assertIsClosed:  closedDoorWithOldKey ! !

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:59:44'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 12:59:44'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 12:59:44'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:59:44'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 12:59:44'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 12:59:44'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 12:59:44'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 12:59:44'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 12:59:44'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 12:59:44'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 12:59:44'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 12:59:44'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 12:59:44'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 13:00:33'!
raisesAnErrorWhenTryingToCloseACLosedDoor: aClosedDoor
	self 
		should: [ aClosedDoor toBeClosedBy: bernard ]
		raise: Error
		withMessageText: Door alreadyClosedErrorDescription.
		
	self assertIsClosed:  aClosedDoor! !
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 13:00:49' prior: 50676441!
test03ADoorClosedCanNotBeClosedAgain
	
	
self  raisesAnErrorWhenTryingToCloseACLosedDoor: closedDoor ! !

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:00:50'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:00:50'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:00:50'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:00:50'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:00:50'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:00:50'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:00:50'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:00:50'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:00:50'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:00:50'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:00:50'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:00:50'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:00:50'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 13:01:00' prior: 50676491!
test06ADoorKeyClosedCanNotBeClosedAgain

	self raisesAnErrorWhenTryingToCloseACLosedDoor: closedDoorWithOldKey ! !

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:01:01'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:01:01'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:01:01'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:01:01'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:01:01'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:01:01'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:01:01'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:01:01'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:01:01'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:01:01'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:01:01'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:01:01'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:01:01'!
PASSED!
!DoorTest methodsFor: 'closing' stamp: 'jb 5/8/2023 13:01:21' prior: 50676551!
test03ADoorClosedCanNotBeClosedAgain
	self  raisesAnErrorWhenTryingToCloseACLosedDoor: closedDoor ! !
!DoorTest methodsFor: 'using' stamp: 'jb 5/8/2023 13:04:10' prior: 50676052!
test10WhenUsingADoorClosedGetsOpened
	
	self assertAblockThatOpensADoor:   	[:aDoor | aDoor toBeUsedBy: bernard ] opens:  closedDoor 

	! !

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:04:11'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:04:11'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:04:11'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:04:11'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:04:11'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:04:11'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:04:11'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:04:11'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:04:11'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:04:11'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:04:11'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:04:11'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:04:11'!
PASSED!
!DoorTest methodsFor: 'using' stamp: 'jb 5/8/2023 13:05:15' prior: 50676100!
test11WhenUsingADoorOpenedGetsClosed

	self assertABlockThatClosesADoor:   	[:aDoor | aDoor toBeUsedBy: bernard]   closes: openedDoor 

	! !

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:05:16'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:05:16'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:05:16'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:05:16'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:05:16'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:05:16'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:05:16'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:05:16'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:05:16'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:05:16'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:05:16'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:05:16'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:05:16'!
PASSED!
!DoorTest methodsFor: 'using' stamp: 'jb 5/8/2023 13:05:46' prior: 50676148!
test12WhenUsingADoorKeyClosedCanNotBeOpened
	
	self 
		should: [ closedDoorWithOldKey toBeUsedBy: bernard ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self assertIsClosed:  closedDoorWithOldKey ! !

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:05:47'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:05:47'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:05:47'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:05:47'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:05:47'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:05:47'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:05:47'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:05:47'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:05:47'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:05:47'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:05:47'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:05:47'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:05:47'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 13:10:13'!
raisesAnErrorWhenTryingToExecuteABlockThatsUsesAKeyLockedDoor:  aBlockThatUsesAkeyBlockedDoor 
	self 
		should: [ aBlockThatUsesAkeyBlockedDoor value ]
		raise: Error
		withMessageText: Door closedWithKeyErrorDescription.
		
	self assertIsClosed: closedDoorWithOldKey ! !
!DoorTest methodsFor: 'using' stamp: 'jb 5/8/2023 13:10:39' prior: 50676747!
test12WhenUsingADoorKeyClosedCanNotBeOpened
	
	self raisesAnErrorWhenTryingToExecuteABlockThatsUsesAKeyLockedDoor:  	 [ closedDoorWithOldKey toBeUsedBy: bernard ]
		! !

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:10:41'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:10:41'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:10:41'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:10:41'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:10:41'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:10:41'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:10:41'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:10:41'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:10:41'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:10:41'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:10:41'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:10:41'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:10:41'!
PASSED!
!DoorTest methodsFor: 'opening' stamp: 'jb 5/8/2023 13:11:01' prior: 50676285!
test07ADoorKeyClosedCanNotBeOpenedWithoutAKey
	
self raisesAnErrorWhenTryingToExecuteABlockThatsUsesAKeyLockedDoor:  [ closedDoorWithOldKey toBeOpenedBy: bernard ]
	! !

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:11:02'!
PASSED!

!classDefinition: #DoorClosed category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 13:21:40'!
DoorState subclass: #DoorClosed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!Door class methodsFor: 'instance creation' stamp: 'jb 5/8/2023 13:21:24' prior: 50670377!
closed

	| door |
	
	door := Door new.
	door initializeWith: DoorClosed new.
	
	^ door.! !

!classDefinition: #DoorOpened category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 13:22:10'!
ProtoObject subclass: #DoorOpened
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!Door class methodsFor: 'instance creation' stamp: 'jb 5/8/2023 13:21:58' prior: 50670389!
opened

	| door |
	
	door := Door new.
	door initializeWith: DoorOpened new.
	
	^ door.! !

!classDefinition: #KeyClosed category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 13:22:49'!
DoorState subclass: #KeyClosed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!Door class methodsFor: 'instance creation' stamp: 'jb 5/8/2023 13:22:35' prior: 50670383!
closedWith: aKey

	| door |
	
	door := Door new.
	door initializeWith: KeyClosed new using: aKey.
	
	^ door.! !

!classRenamed: #DoorOpened as: #Opened stamp: 'jb 5/8/2023 13:23:22'!
Smalltalk renameClassNamed: #DoorOpened as: #Opened!
!Door methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 13:23:22' prior: 50670344 overrides: 50670283!
toBeOpenedBy: aPlayableCharacter using: aKey

	(state == #Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state == #Closed) ifTrue: [ self error: Door noNeedForAKeyErrorDescription ].
	(state == #KeyClosed) ifTrue: [ 
		(key == aKey) ifTrue: [ ^ state := #Opened ].
		self error: Door notCorrectKeyErrorDescription. 
	]! !
!Door methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 13:23:22' prior: 50670332 overrides: 50670278!
toBeOpenedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state == #Closed) ifTrue: [ ^ state := #Opened ].
	(state == #KeyClosed) ifTrue: [ self error: Door closedWithKeyErrorDescription ].! !
!Door methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 13:23:22' prior: 50670358 overrides: 50670289!
toBeUsedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ ^ self toBeClosedBy: aPlayableCharacter ].
	(state == #Closed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].
	(state == #KeyClosed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].! !
!Door methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 13:23:22' prior: 50670320 overrides: 50670273!
toBeClosedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ ^ state := #Closed ].
	(state == #Closed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].
	(state == #KeyClosed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].! !
!Door class methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 13:23:22' prior: 50676928!
opened

	| door |
	
	door := Door new.
	door initializeWith: Opened new.
	
	^ door.! !
!Door methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 13:23:22' prior: 50670306!
isOpen

	^ state == #Opened
! !

DoorState subclass: #Opened
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #Opened category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 13:24:05'!
DoorState subclass: #Opened
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classRenamed: #DoorClosed as: #Closed stamp: 'jb 5/8/2023 13:24:14'!
Smalltalk renameClassNamed: #DoorClosed as: #Closed!
!Door methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 13:24:14' prior: 50676953 overrides: 50670283!
toBeOpenedBy: aPlayableCharacter using: aKey

	(state == #Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state == #Closed) ifTrue: [ self error: Door noNeedForAKeyErrorDescription ].
	(state == #KeyClosed) ifTrue: [ 
		(key == aKey) ifTrue: [ ^ state := #Opened ].
		self error: Door notCorrectKeyErrorDescription. 
	]! !
!Door methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 13:24:14' prior: 50676980 overrides: 50670289!
toBeUsedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ ^ self toBeClosedBy: aPlayableCharacter ].
	(state == #Closed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].
	(state == #KeyClosed) ifTrue: [ ^ self toBeOpenedBy: aPlayableCharacter ].! !
!Door methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 13:24:14' prior: 50676968 overrides: 50670278!
toBeOpenedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ self error: Door alreadyOpenedErrorDescription ].
	(state == #Closed) ifTrue: [ ^ state := #Opened ].
	(state == #KeyClosed) ifTrue: [ self error: Door closedWithKeyErrorDescription ].! !
!Door class methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 13:24:14' prior: 50676914!
closed

	| door |
	
	door := Door new.
	door initializeWith: Closed new.
	
	^ door.! !
!Door methodsFor: 'as yet unclassified' stamp: 'jb 5/8/2023 13:24:14' prior: 50676992 overrides: 50670273!
toBeClosedBy: aPlayableCharacter

	(state == #Opened) ifTrue: [ ^ state := #Closed ].
	(state == #Closed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].
	(state == #KeyClosed) ifTrue: [ self error: Door alreadyClosedErrorDescription ].! !
!Door methodsFor: 'playable character reactions' stamp: 'jb 5/8/2023 13:27:26' prior: 50677075 overrides: 50670273!
toBeClosedBy: aPlayableCharacter
	state closeDoor: self! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:27:32'!
FAILURE!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:27:32'!
FAILURE!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:27:32'!
FAILURE!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:27:32'!
FAILURE!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:27:32'!
FAILURE!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:27:32'!
FAILURE!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:27:32'!
FAILURE!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:27:32'!
FAILURE!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:27:32'!
FAILURE!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:27:32'!
FAILURE!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:27:32'!
FAILURE!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:27:32'!
FAILURE!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:27:36'!
FAILURE!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:27:43'!
FAILURE!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:27:51'!
FAILURE!
!Door methodsFor: 'playable character reactions' stamp: 'jb 5/8/2023 13:29:39' prior: 50677087 overrides: 50670273!
toBeClosedBy: aPlayableCharacter
	state close! !
!Door methodsFor: 'playable character reactions' stamp: 'jb 5/8/2023 13:29:49' prior: 50677057 overrides: 50670278!
toBeOpenedBy: aPlayableCharacter
state  open! !
!Door methodsFor: 'playable character reactions' stamp: 'jb 5/8/2023 13:30:01' prior: 50677030 overrides: 50670283!
toBeOpenedBy: aPlayableCharacter using: aKey

	state openUsing: aKey ! !
!Door methodsFor: 'playable character reactions' stamp: 'jb 5/8/2023 13:30:54' prior: 50677140 overrides: 50670273!
toBeClosedBy: aPlayableCharacter
	state:= state close! !
!Door methodsFor: 'playable character reactions' stamp: 'jb 5/8/2023 13:31:02' prior: 50677146 overrides: 50670278!
toBeOpenedBy: aPlayableCharacter
state:= state  open! !
!Door methodsFor: 'playable character reactions' stamp: 'jb 5/8/2023 13:31:09' prior: 50677152 overrides: 50670283!
toBeOpenedBy: aPlayableCharacter using: aKey

	state:= 	state openUsing: aKey ! !
!Door methodsFor: 'playable character reactions' stamp: 'jb 5/8/2023 13:32:27' prior: 50677045 overrides: 50670289!
toBeUsedBy: aPlayableCharacter

	(state isOpen) ifTrue: [ ^ self toBeClosedBy: aPlayableCharacter ].
		^ self toBeOpenedBy: aPlayableCharacter .! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:32:31'!
FAILURE!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:32:31'!
FAILURE!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:32:31'!
FAILURE!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:32:31'!
ERROR!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:32:31'!
FAILURE!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:32:31'!
FAILURE!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:32:31'!
FAILURE!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:32:31'!
FAILURE!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:32:31'!
ERROR!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:32:31'!
ERROR!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:32:31'!
FAILURE!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:32:31'!
FAILURE!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:32:34'!
FAILURE!
!Closed methodsFor: 'no messages' stamp: 'jb 5/8/2023 13:33:35' overrides: 50670177!
close 
	
	! !
!Closed methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:33:57' prior: 50677225 overrides: 50670177!
close 
	
	self error: Door alreadyClosedErrorDescription! !

Closed subclass: #KeyClosed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #KeyClosed category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 13:34:14'!
Closed subclass: #KeyClosed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!Opened methodsFor: 'no messages' stamp: 'jb 5/8/2023 13:34:50' overrides: 50670177!
close 
	^Closed new! !
!Opened methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:35:25' overrides: 50670181!
open
	self error: Door alreadyOpenedErrorDescription! !
!Closed methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:35:45' overrides: 50670181!
open 
 	^Opened  new! !
!KeyClosed methodsFor: 'no messages' stamp: 'jb 5/8/2023 13:35:59' overrides: 50677255!
open
	self error: Door closedWithKeyErrorDescription! !
!Closed methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:36:55' overrides: 50670185!
openUsing: aKey 
	self error: Door noNeedForAKeyErrorDescription! !
!KeyClosed methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:38:21' overrides: 50677264!
openUsing: aKey
	self error: Door notCorrectKeyErrorDescription. ! !

KeyClosed class
	instanceVariableNames: 'key'!

!classDefinition: 'KeyClosed class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 13:41:27'!
KeyClosed class
	instanceVariableNames: 'key'!

KeyClosed class
	instanceVariableNames: ''!

!classDefinition: 'KeyClosed class' category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 13:41:51'!
KeyClosed class
	instanceVariableNames: ''!

Closed subclass: #KeyClosed
	instanceVariableNames: 'key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!

!classDefinition: #KeyClosed category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 13:41:59'!
Closed subclass: #KeyClosed
	instanceVariableNames: 'key'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!KeyClosed methodsFor: 'nil' stamp: 'jb 5/8/2023 13:42:17'!
using: aKey
	key := aKey! !

!methodRemoval: Door #initializeWith:using: stamp: 'jb 5/8/2023 13:42:46'!
initializeWith: aDoorState using: aKey

	state := aDoorState.
	key := aKey.
!

!classDefinition: #Door category: 'ISW1-2020-2C-Parcial-Enunciado' stamp: 'jb 5/8/2023 13:42:57'!
StageObject subclass: #Door
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-2C-Parcial-Enunciado'!
!Door class methodsFor: 'instance creation' stamp: 'jb 5/8/2023 13:43:22' prior: 50676942!
closedWith: aKey

	| door |
	
	door := Door new.
	door initializeWith: (KeyClosed new using: aKey).
	
	^ door.! !
!KeyClosed methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:44:24' prior: 50677269 overrides: 50677264!
openUsing: aKey
	(key == aKey) ifTrue: [ ^ Opened new ].
		self error: Door notCorrectKeyErrorDescription. 

! !
!Opened methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:45:20' overrides: 50670185!
openUsing: aKey
	self error: Door alreadyOpenedErrorDescription! !
!Door methodsFor: 'playable character reactions' stamp: 'jb 5/8/2023 13:46:18' prior: 50677177 overrides: 50670289!
toBeUsedBy: aPlayableCharacter

	state usingBy: aPlayableCharacter ! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:46:22'!
FAILURE!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:46:22'!
FAILURE!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:46:22'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:46:22'!
FAILURE!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:46:22'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:46:22'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:46:22'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:46:22'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:46:22'!
FAILURE!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:46:22'!
ERROR!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:46:22'!
FAILURE!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:46:22'!
FAILURE!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:46:26'!
FAILURE!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:46:37'!
FAILURE!
!DoorState methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:47:07'!
usingBy: aPlayableCharacter

	self subclassResponsibility! !
!Door methodsFor: 'playable character reactions' stamp: 'jb 5/8/2023 13:47:59' prior: 50677336 overrides: 50670289!
toBeUsedBy: aPlayableCharacter

	state using: self by: aPlayableCharacter ! !

!methodRemoval: DoorState #usingBy: stamp: 'jb 5/8/2023 13:48:10'!
usingBy: aPlayableCharacter

	self subclassResponsibility!
!DoorState methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:48:29'!
using: aDoor by:aPlayableCharacter
	self subclassResponsibility ! !
!Closed methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:48:38' overrides: 50677400!
using: aDoor by:aPlayableCharacter
! !
!KeyClosed methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:48:48' overrides: 50677405!
using: aDoor by:aPlayableCharacter

! !
!Opened methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:48:52' overrides: 50677400!
using: aDoor by:aPlayableCharacter
! !
!Opened methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:49:13' prior: 50677413 overrides: 50677400!
using: aDoor by:aPlayableCharacter
	^aDoor  toBeClosedBy:  aPlayableCharacter ! !
!Closed methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:49:48' prior: 50677405 overrides: 50677400!
using: aDoor by:aPlayableCharacter
	^aDoor  toBeOpenedBy: aPlayableCharacter ! !

!methodRemoval: KeyClosed #using:by: stamp: 'jb 5/8/2023 13:49:53'!
using: aDoor by:aPlayableCharacter

!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:50:01'!
FAILURE!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:50:01'!
FAILURE!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:50:01'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:50:01'!
FAILURE!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:50:01'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:50:01'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:50:01'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:50:01'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:50:01'!
FAILURE!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:50:01'!
FAILURE!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:50:01'!
FAILURE!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:50:01'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:50:06'!
FAILURE!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:50:17'!
FAILURE!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:50:21'!
FAILURE!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:50:44'!
FAILURE!
!Closed methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:51:16' overrides: 50670189!
isOpen
	^false
	! !
!Opened methodsFor: 'door actions' stamp: 'jb 5/8/2023 13:51:39' overrides: 50670189!
isOpen
	^true! !

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:51:50'!
FAILURE!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:51:50'!
FAILURE!

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:51:50'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:51:50'!
FAILURE!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:51:50'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:51:50'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:51:50'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:51:50'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:51:50'!
FAILURE!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:51:50'!
FAILURE!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:51:50'!
FAILURE!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:51:50'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:51:57'!
FAILURE!

aDoor isOpen!
!Door methodsFor: 'testing' stamp: 'jb 5/8/2023 13:52:34' prior: 50677009!
isOpen

	^ state isOpen 
! !

!testRun: #DoorTest #test03ADoorClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:52:38'!
PASSED!

!testRun: #DoorTest #test05ADoorClosedCanNotBeOpenedWithAKey stamp: 'jb 5/8/2023 13:52:38'!
PASSED!

!testRun: #DoorTest #test06ADoorKeyClosedCanNotBeClosedAgain stamp: 'jb 5/8/2023 13:52:38'!
PASSED!

!testRun: #DoorTest #test07ADoorKeyClosedCanNotBeOpenedWithoutAKey stamp: 'jb 5/8/2023 13:52:38'!
PASSED!

!testRun: #DoorTest #test08ADoorKeyClosedCanNotBeOpenWithAnyKey stamp: 'jb 5/8/2023 13:52:38'!
PASSED!

!testRun: #DoorTest #test12WhenUsingADoorKeyClosedCanNotBeOpened stamp: 'jb 5/8/2023 13:52:38'!
PASSED!

!testRun: #DoorTest #test01ADoorOpenedCanNotBeOpenedAgain stamp: 'jb 5/8/2023 13:52:38'!
PASSED!

!testRun: #DoorTest #test02ADoorOpenedCanBeClosed stamp: 'jb 5/8/2023 13:52:38'!
PASSED!

!testRun: #DoorTest #test04ADoorClosedCanBeOpened stamp: 'jb 5/8/2023 13:52:38'!
PASSED!

!testRun: #DoorTest #test09ADoorKeyClosedCanBeOpenWithTheCorrectKey stamp: 'jb 5/8/2023 13:52:38'!
PASSED!

!testRun: #DoorTest #test10WhenUsingADoorClosedGetsOpened stamp: 'jb 5/8/2023 13:52:38'!
PASSED!

!testRun: #DoorTest #test11WhenUsingADoorOpenedGetsClosed stamp: 'jb 5/8/2023 13:52:38'!
PASSED!

----STARTUP---- (13 May 2023 22:32:24) as /home/juan/Escritorio/facultad/1C23/IS1/linux64 (otra copia)/CuisUniversity-5706.image!


!classRemoval: #ResidentialZone stamp: 'jb 5/13/2023 22:32:39'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #IndustrialZone stamp: 'jb 5/13/2023 22:32:40'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CommertialZone stamp: 'jb 5/13/2023 22:32:40'!
Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'jb 5/13/2023 22:32:41'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'jb 5/13/2023 22:32:41'!
Object subclass: #Service
	instanceVariableNames: 'waterProduced energyProduced'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'jb 5/13/2023 22:32:41'!
Object subclass: #City
	instanceVariableNames: 'zones services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'jb 5/13/2023 22:32:42'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: #MarsRoverTest category: 'TerseGuide' stamp: 'jb 5/13/2023 22:33:30'!
Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classRemoval: #MarsRoverTest stamp: 'jb 5/13/2023 22:33:38'!
Object subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

Object subclass: #MarsRoveTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcersise'!

!classDefinition: #MarsRoveTest category: 'MarsRoverExcersise' stamp: 'jb 5/13/2023 22:34:13'!
Object subclass: #MarsRoveTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcersise'!

!classDefinition: #MarsRover category: 'MarsRoverExcersise' stamp: 'jb 5/13/2023 22:36:04'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcersise'!
!MarsRoveTest methodsFor: 'nil' stamp: 'jb 5/13/2023 22:35:52'!
test00
	|robot|
	robot := MarsRover defineClassWithoutHandlingUndeclareVariableWaring: 0@0 notifying: #Norte.
	self assert: 0@0 equals: robot position. 
	self assert: #Norte equals: robot direction. ! !
!MarsRoveTest methodsFor: 'as yet unclassified' stamp: 'jb 5/13/2023 22:36:34' prior: 50666292!
test00
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #Norte.
	self assert: 0@0 equals: robot position. 
	self assert: #Norte equals: robot direction. ! !
!MarsRover class methodsFor: 'nil' stamp: 'jb 5/13/2023 22:37:44'!
deployIn: aPosition facing: aDirection 
	^self new  initializeWithPosition: aPosition direction: aDirection ! !
!MarsRover methodsFor: 'no messages' stamp: 'jb 5/13/2023 22:38:22'!
initializeWithPosition: aPosition direction: aDirection 
	! !
!MarsRover methodsFor: 'nil' stamp: 'jb 5/13/2023 22:38:50'!
position 
	^0@0 ! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'jb 5/13/2023 22:38:59'!
direction 
	^#Norte! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'jb 5/13/2023 22:39:04' prior: 50666324!
direction 
	^#North! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:39:46' prior: 50666302!
test00
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:39:53'!
test01
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

TestCase subclass: #MarsRoveTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcersise'!

!classDefinition: #MarsRoveTest category: 'MarsRoverExcersise' stamp: 'jb 5/13/2023 22:40:13'!
TestCase subclass: #MarsRoveTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcersise'!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:40:20'!
PASSED!

!methodRemoval: MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:40:26'!
test01
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 22:40:28'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:41:53'!
test01
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'f'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:42:00'!
test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'b'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:42:06' prior: 50666378!
test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:42:08'!
test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:42:16'!
test04
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'r'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:42:24'!
test05
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'ñ'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:42:43'!
_test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #test02 stamp: 'jb 5/13/2023 22:42:43'!
test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:42:51'!
_test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:42:51'!
test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:42:59'!
_test04
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'r'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #test04 stamp: 'jb 5/13/2023 22:42:59'!
test04
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'r'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:43:05'!
_test05
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'ñ'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #test05 stamp: 'jb 5/13/2023 22:43:05'!
test05
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'ñ'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:43:16' prior: 50666370!
test01
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstrction: 'f'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:43:18'!
ERROR!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 22:43:34'!
receiveInstrction: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRoverExcersise' stamp: 'jb 5/13/2023 22:44:35'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcersise'!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 22:44:33' prior: 50666499!
receiveInstrction: aStringOfInstructions 
	position := 1@0 ! !
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 22:44:57'!
receiveInstruction: aStringOfInstructions 
	position := 1@0 ! !
!MarsRoveTest methodsFor: 'as yet unclassified' stamp: 'jb 5/13/2023 22:44:57' prior: 50666471!
_test05
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ñ'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'as yet unclassified' stamp: 'jb 5/13/2023 22:44:57' prior: 50666420!
_test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'as yet unclassified' stamp: 'jb 5/13/2023 22:44:57' prior: 50666437!
_test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'as yet unclassified' stamp: 'jb 5/13/2023 22:44:58' prior: 50666454!
_test04
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'r'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'as yet unclassified' stamp: 'jb 5/13/2023 22:44:58' prior: 50666488!
test01
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'f'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRover #receiveInstrction: stamp: 'jb 5/13/2023 22:44:58'!
receiveInstrction: aStringOfInstructions 
	position := 1@0 !
!MarsRover methodsFor: 'initializating' stamp: 'jb 5/13/2023 22:45:22' prior: 50666316!
initializeWithPosition: aPosition direction: aDirection 
	position := aPosition ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 22:45:24'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:45:24'!
FAILURE!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:45:24'!
FAILURE!
!MarsRover methodsFor: 'accessing' stamp: 'jb 5/13/2023 22:45:47' prior: 50666320!
position 
	^position! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 22:45:48'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:45:49'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:45:58'!
test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #_test02 stamp: 'jb 5/13/2023 22:45:58'!
_test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:46:18' prior: 50666596!
test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #West equals: robot direction. ! !

!classDefinition: #MarsRover category: 'MarsRoverExcersise' stamp: 'jb 5/13/2023 22:46:42'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcersise'!
!MarsRover methodsFor: 'initializating' stamp: 'jb 5/13/2023 22:46:40' prior: 50666575!
initializeWithPosition: aPosition direction: aDirection 
	position := aPosition . 
	direction := aDirection ! !
!MarsRover methodsFor: 'accessing' stamp: 'jb 5/13/2023 22:46:55' prior: 50666328!
direction 
	^direction ! !
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 22:47:37' prior: 50666516!
receiveInstruction: aStringOfInstructions 
	aStringOfInstructions  = 'f' ifTrue:  [
				position := 1@0		
		] ifFalse: [
			direction  := #West
		
		]

 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 22:47:39'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:47:39'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 22:47:39'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:47:58' prior: 50666541!
_test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #East equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:48:04'!
test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #East equals: robot direction. ! !

!methodRemoval: MarsRoveTest #_test03 stamp: 'jb 5/13/2023 22:48:04'!
_test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'l'. 
	self assert: 0@0 equals: robot position. 
	self assert: #East equals: robot direction. !

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:48:09'!
FAILURE!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 22:49:31' prior: 50666641!
receiveInstruction: aStringOfInstructions 
	aStringOfInstructions  = 'f' ifTrue:  [
				position := 1@0		
		] ifFalse: [
			aStringOfInstructions  = 'l' ifTrue:  [
					direction  := #West
					] ifFalse:[
						direction := #East
					]  
		
		]

 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 22:49:32'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:49:32'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 22:49:32'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:49:32'!
FAILURE!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:49:32'!
FAILURE!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 22:49:52'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 22:49:56'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:49:56'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 22:49:56'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:49:56'!
FAILURE!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:49:56'!
FAILURE!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:50:01'!
FAILURE!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:50:01'!
FAILURE!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 22:50:27'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:50:27'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 22:50:27'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:50:27'!
FAILURE!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:50:27'!
FAILURE!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:51:03' prior: 50666665!
test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'r'. 
	self assert: 0@0 equals: robot position. 
	self assert: #East equals: robot direction. ! !

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:51:04'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 22:51:04'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:51:04'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 22:51:04'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:51:04'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:51:30' prior: 50666551!
_test04
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'b'. 
	self assert: -1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:51:39'!
test04
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'b'. 
	self assert: -1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #_test04 stamp: 'jb 5/13/2023 22:51:39'!
_test04
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'b'. 
	self assert: -1@0 equals: robot position. 
	self assert: #North equals: robot direction. !

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 22:51:45'!
FAILURE!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 22:52:37' prior: 50666685!
receiveInstruction: aStringOfInstructions 
	aStringOfInstructions  = 'f' ifTrue:  [
				position := 1@0		
		] ifFalse: [
			aStringOfInstructions  = 'l' ifTrue:  [
					direction  := #West
					] ifFalse:[
						aStringOfInstructions  = 'r' ifTrue:  [
							direction := #East] ifFalse: [
								position := -1@0
							
							]
					]  
		
		]

 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 22:52:39'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:52:39'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 22:52:39'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:52:39'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 22:52:39'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:55:21' prior: 50666521!
_test05
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	self 
	 should: [robot receiveInstruction: 'ñ'.		]
		 raise:  Error
			withExceptionDo:[  :anError|
				self assert: anError  messageText  equals: MarsRover wrongInstructionErrorMessage. 
		
	
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ]! !
!MarsRover class methodsFor: 'instance creation' stamp: 'jb 5/13/2023 22:56:12'!
wrongInstructionErrorMessage
	^'Instrución erronea :('! !
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 22:57:33' prior: 50666786!
receiveInstruction: aStringOfInstructions 
	aStringOfInstructions  = 'f' ifTrue:  [
				position := 1@0		
		] ifFalse: [
			aStringOfInstructions  = 'l' ifTrue:  [
					direction  := #West
					] ifFalse:[
						aStringOfInstructions  = 'r' ifTrue:  [
							direction := #East] ifFalse: [
								aStringOfInstructions  = 'b' ifTrue: [
									position := -1@0
									] ifFalse: [
										self error:  self class  wrongInstructionErrorMessage .
										
									]
							
							]
					]  
		
		]

 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 22:57:34'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:57:34'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 22:57:34'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:57:34'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 22:57:34'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:57:47'!
test05
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	self 
	 should: [robot receiveInstruction: 'ñ'.		]
		 raise:  Error
			withExceptionDo:[  :anError|
				self assert: anError  messageText  equals: MarsRover wrongInstructionErrorMessage. 
		
	
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ]! !

!methodRemoval: MarsRoveTest #_test05 stamp: 'jb 5/13/2023 22:57:47'!
_test05
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	self 
	 should: [robot receiveInstruction: 'ñ'.		]
		 raise:  Error
			withExceptionDo:[  :anError|
				self assert: anError  messageText  equals: MarsRover wrongInstructionErrorMessage. 
		
	
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ]!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 22:57:47'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 22:57:51'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:57:51'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 22:57:51'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:57:51'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 22:57:51'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 22:57:51'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:58:17' prior: 50666860!
test05
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	self 
	 should: [robot receiveInstruction: 'ñ'.		]
		 raise:  Error
			withExceptionDo:[  :anError|
				self assert: anError  messageText  equals: MarsRover wrongInstructionErrorMessage. 	
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ]! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:58:43'!
test06
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ff'. 
	self assert: 2@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 22:58:44'!
ERROR!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 22:58:54'!
_test06
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ff'. 
	self assert: 2@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #test06 stamp: 'jb 5/13/2023 22:58:54'!
test06
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ff'. 
	self assert: 2@0 equals: robot position. 
	self assert: #North equals: robot direction. !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 22:58:56'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 22:58:56'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 22:58:56'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 22:58:56'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 22:58:56'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 22:58:56'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:04:49'!
test06
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ff'. 
	self assert: 2@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #_test06 stamp: 'jb 5/13/2023 23:04:49'!
_test06
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ff'. 
	self assert: 2@0 equals: robot position. 
	self assert: #North equals: robot direction. !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:06:30'!
test07
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: ''. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:06:32'!
ERROR!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 23:07:42' prior: 50666830!
receiveInstruction: aStringOfInstructions
	aStringOfInstructions  size =  0  ifFalse:  [
	aStringOfInstructions  = 'f' ifTrue:  [
				position := 1@0		
		] ifFalse: [
			aStringOfInstructions  = 'l' ifTrue:  [
					direction  := #West
					] ifFalse:[
						aStringOfInstructions  = 'r' ifTrue:  [
							direction := #East] ifFalse: [
								aStringOfInstructions  = 'b' ifTrue: [
									position := -1@0
									] ifFalse: [
										self error:  self class  wrongInstructionErrorMessage .
										
									]
							
							]
					]  
		
		]

 ]! !

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:08:28'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:08:32'!
ERROR!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:08:32'!
ERROR!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:09:33'!
_test01
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'f'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:09:33'!
test01
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'f'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:09:38'!
test01
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: ''. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:09:38'!
test07
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: ''. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:09:45'!
test07
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ff'. 
	self assert: 2@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:09:45'!
test06
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ff'. 
	self assert: 2@0 equals: robot position. 
	self assert: #North equals: robot direction. !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:09:49'!
_test06
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'f'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #_test01 stamp: 'jb 5/13/2023 23:09:49'!
_test01
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'f'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:09:51'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:09:51'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:09:51'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:09:51'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:09:51'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:09:51'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:09:51'!
ERROR!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:09:51'!
ERROR!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:09:59'!
test06
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'f'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #_test06 stamp: 'jb 5/13/2023 23:09:59'!
_test06
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'f'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. !

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:10:01'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:10:03'!
ERROR!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:10:03'!
ERROR!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 23:12:55' prior: 50666985!
receiveInstruction: aStringOfInstructions
	aStringOfInstructions  size =  0  ifFalse:  [
		aStringOfInstructions  size = 1 ifTrue:[
			aStringOfInstructions  = 'f' ifTrue:  [
					position := 1@0		
				] ifFalse: [
						aStringOfInstructions  = 'l' ifTrue:  [
							direction  := #West
						] ifFalse:[
							aStringOfInstructions  = 'r' ifTrue:  [
								direction := #East] ifFalse: [
									aStringOfInstructions  = 'b' ifTrue: [
										position := -1@0
										] ifFalse: [
											self error:  self class  wrongInstructionErrorMessage .
										]
								]	
						]  
			]
		]ifFalse: [
			position := 2@0
		
		]
 ]! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:12:57'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:12:57'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:12:57'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:12:57'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:12:57'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:12:57'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:12:57'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:12:57'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:13:19'!
test08
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fb'. 
	self assert: 2@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:36:28' prior: 50667163!
test08
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fb'. 
	self assert: 0@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:36:30'!
FAILURE!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 23:37:40' prior: 50667122!
receiveInstruction: aStringOfInstructions
	aStringOfInstructions  size =  0  ifFalse:  [
		
			aStringOfInstructions  = 'f' ifTrue:  [
					position := 1@0		
				] ifFalse: [
						aStringOfInstructions  = 'l' ifTrue:  [
							direction  := #West
						] ifFalse:[
							aStringOfInstructions  = 'r' ifTrue:  [
								direction := #East] ifFalse: [
									aStringOfInstructions  = 'b' ifTrue: [
										position := -1@0
										] ifFalse: [
											self error:  self class  wrongInstructionErrorMessage .
										]
								]	
						]  
			]
		
		
		
		]
 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:37:42'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:37:42'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:37:42'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:37:42'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:37:42'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:37:42'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:37:42'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:37:42'!
ERROR!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:37:42'!
ERROR!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 23:39:40' prior: 50667183!
receiveInstruction: aStringOfInstructions
|firstLetter secondLetter|
	aStringOfInstructions  size =  0  ifFalse:  [
		firstLetter := aStringOfInstructions  at:1. 
			firstLetter  = 'f' ifTrue:  [
					position := 1@0		
				] ifFalse: [
						firstLetter  = 'l' ifTrue:  [
							direction  := #West
						] ifFalse:[
							firstLetter  = 'r' ifTrue:  [
								direction := #East] ifFalse: [
									firstLetter  = 'b' ifTrue: [
										position := -1@0
										] ifFalse: [
											self error:  self class  wrongInstructionErrorMessage .
										]
								]	
						]  
			]
		
		
]
 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:39:43'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:39:43'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:39:43'!
ERROR!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:39:43'!
ERROR!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:39:43'!
ERROR!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:39:43'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:39:43'!
ERROR!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:39:43'!
ERROR!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:39:43'!
ERROR!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:40:09'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:40:09'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:40:09'!
ERROR!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:40:09'!
ERROR!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:40:09'!
ERROR!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:40:09'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:40:09'!
ERROR!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:40:09'!
ERROR!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:40:09'!
ERROR!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:40:15'!
ERROR!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 23:41:11' prior: 50667224!
receiveInstruction: aStringOfInstructions
|firstLetter secondLetter|
	aStringOfInstructions  size =  0  ifFalse:  [
		firstLetter := aStringOfInstructions  at:1. 
			firstLetter  = $f ifTrue:  [
					position := 1@0		
				] ifFalse: [
						firstLetter  = $l ifTrue:  [
							direction  := #West
						] ifFalse:[
							firstLetter  = $r ifTrue:  [
								direction := #East] ifFalse: [
									firstLetter  = $b ifTrue: [
										position := -1@0
										] ifFalse: [
											self error:  self class  wrongInstructionErrorMessage .
										]
								]	
						]  
			]
		
		
]
 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:41:14'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:41:14'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:41:14'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:41:14'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:41:14'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:41:14'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:41:14'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:41:14'!
FAILURE!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:41:14'!
FAILURE!

1@0!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 23:45:45' prior: 50667289!
receiveInstruction: aStringOfInstructions
|firstLetter secondLetter|
	aStringOfInstructions  size =  0  ifFalse:  [
		firstLetter := aStringOfInstructions  at:1. 
			firstLetter  = $f ifTrue:  [
					position := 1@0		
				] ifFalse: [
						firstLetter  = $l ifTrue:  [
							direction  := #West
						] ifFalse:[
							firstLetter  = $r ifTrue:  [
								direction := #East] ifFalse: [
									firstLetter  = $b ifTrue: [
										position := -1@0
										] ifFalse: [
											self error:  self class  wrongInstructionErrorMessage .
										]
								]	
						]  
			]. 
		aStringOfInstructions  size > 1 ifTrue:  [
				secondLetter  := aStringOfInstructions  at: 2. 
				secondLetter  = $f ifTrue:  [
					position := (position x +1) @ position y  .		
				] ifFalse: [
					position := (position x -1) @ position y  .		
				
				]
				
			]
		
]
 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:45:47'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:45:47'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:45:47'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:45:47'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:45:47'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:45:47'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:45:47'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:45:47'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:45:47'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:46:24' prior: 50667172!
test08
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fl'. 
	self assert: 1@0 equals: robot position. 
	self assert: #West equals: robot direction. ! !

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:46:26'!
FAILURE!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 23:47:24' prior: 50667331!
receiveInstruction: aStringOfInstructions
|firstLetter secondLetter|
	aStringOfInstructions  size =  0  ifFalse:  [
		firstLetter := aStringOfInstructions  at:1. 
			firstLetter  = $f ifTrue:  [
					position := 1@0		
				] ifFalse: [
						firstLetter  = $l ifTrue:  [
							direction  := #West
						] ifFalse:[
							firstLetter  = $r ifTrue:  [
								direction := #East] ifFalse: [
									firstLetter  = $b ifTrue: [
										position := -1@0
										] ifFalse: [
											self error:  self class  wrongInstructionErrorMessage .
										]
								]	
						]  
			]. 
		aStringOfInstructions  size > 1 ifTrue:  [
				secondLetter  := aStringOfInstructions  at: 2. 
				secondLetter  = $f ifTrue:  [
					position := (position x +1) @ position y  .		
				] ifFalse: [
					secondLetter = $b ifTrue:[
						position := (position x -1) @ position y  .		
						] ifFalse: [
							direction := #West
						
						]
				
				]
				
			]
		
]
 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:47:26'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:47:26'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:47:26'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:47:26'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:47:26'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:47:26'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:47:26'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:47:26'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:47:26'!
PASSED!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 23:48:12' prior: 50667393!
receiveInstruction: aStringOfInstructions
|firstLetter secondLetter|
	aStringOfInstructions  size =  0  ifFalse:  [
		firstLetter := aStringOfInstructions  at:1. 
			firstLetter  = $f ifTrue:  [
					position := 1@0		
				] ifFalse: [
						firstLetter  = $l ifTrue:  [
							direction  := #West
						] ifFalse:[
							firstLetter  = $r ifTrue:  [
								direction := #East] ifFalse: [
									firstLetter  = $b ifTrue: [
										position := -1@0
										] ifFalse: [
											self error:  self class  wrongInstructionErrorMessage .
										]
								]	
						]  
			]. 
		aStringOfInstructions  size > 1 ifTrue:  [
				secondLetter  := aStringOfInstructions  at: 2. 
				secondLetter  = $f ifTrue:  [
					position := (position x +1) @ position y  .		
				] ifFalse: [
					secondLetter = $b ifTrue:[
						position := (position x -1) @ position y  .		
						] ifFalse: [
							secondLetter  = $l ifTrue:[
								direction := #West
								]ifFalse:[
									direction := #East
								]
						
						]
				
				]
				
			]
		
]
 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:48:15'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:48:15'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:48:15'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:48:15'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:48:15'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:48:15'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:48:15'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:48:15'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:48:15'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:48:32'!
test09
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fl'. 
	self assert: 1@0 equals: robot position. 
	self assert: #East equals: robot direction. ! !

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/13/2023 23:48:33'!
FAILURE!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:48:42' prior: 50667503!
test09
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fe'. 
	self assert: 1@0 equals: robot position. 
	self assert: #East equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:48:46' prior: 50667514!
test09
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fr'. 
	self assert: 1@0 equals: robot position. 
	self assert: #East equals: robot direction. ! !

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/13/2023 23:48:47'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:48:47'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:48:47'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:48:47'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:48:47'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:48:47'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:48:47'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:48:47'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:48:47'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:48:47'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/13/2023 23:48:47'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:48:58' prior: 50667523!
test09
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fñ'. 
	self assert: 1@0 equals: robot position. 
	self assert: #East equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:49:16' prior: 50667557!
test09
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fr'. 
	self assert: 1@0 equals: robot position. 
	self assert: #East equals: robot direction. ! !

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/13/2023 23:49:18'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:49:18'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:49:18'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:49:18'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:49:18'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:49:18'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:49:18'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:49:18'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:49:18'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:49:18'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/13/2023 23:49:18'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:49:37'!
test10
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	self 
	 should: [robot receiveInstruction: 'fr'.		]
		 raise:  Error
			withExceptionDo:[  :anError|
				self assert: anError  messageText  equals: MarsRover wrongInstructionErrorMessage. 	
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ]! !

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:49:38'!
FAILURE!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:49:47'!
FAILURE!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 23:50:53' prior: 50667447!
receiveInstruction: aStringOfInstructions
|firstLetter secondLetter|
	aStringOfInstructions  size =  0  ifFalse:  [
		firstLetter := aStringOfInstructions  at:1. 
			firstLetter  = $f ifTrue:  [
					position := 1@0		
				] ifFalse: [
						firstLetter  = $l ifTrue:  [
							direction  := #West
						] ifFalse:[
							firstLetter  = $r ifTrue:  [
								direction := #East] ifFalse: [
									firstLetter  = $b ifTrue: [
										position := -1@0
										] ifFalse: [
											self error:  self class  wrongInstructionErrorMessage .
										]
								]	
						]  
			]. 
		aStringOfInstructions  size > 1 ifTrue:  [
				secondLetter  := aStringOfInstructions  at: 2. 
				secondLetter  = $f ifTrue:  [
					position := (position x +1) @ position y  .		
				] ifFalse: [
					secondLetter = $b ifTrue:[
						position := (position x -1) @ position y  .		
						] ifFalse: [
							secondLetter  = $l ifTrue:[
								direction := #West
								]ifFalse:[
									secondLetter  = $r ifTrue:[
										direction := #East
										] ifFalse:  [
											self error: self class wrongInstructionErrorMessage 
										] 
								]
						
						]
				
				]
				
			]
		
]
 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:50:55'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:50:55'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:50:55'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:50:55'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:50:55'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:50:55'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:50:55'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:50:55'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:50:55'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/13/2023 23:50:55'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:50:55'!
FAILURE!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:50:55'!
FAILURE!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:51:13'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:51:13'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:51:13'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:51:13'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:51:13'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:51:13'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:51:13'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:51:13'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:51:13'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/13/2023 23:51:13'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:51:13'!
FAILURE!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:51:13'!
FAILURE!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/13/2023 23:51:32'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:51:34'!
FAILURE!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:51:34'!
FAILURE!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/13/2023 23:52:05' prior: 50667619!
receiveInstruction: aStringOfInstructions
|firstLetter secondLetter|
	aStringOfInstructions  size =  0  ifFalse:  [
		firstLetter := aStringOfInstructions  at:1. 
			firstLetter  = $f ifTrue:  [
					position := 1@0		
				] ifFalse: [
						firstLetter  = $l ifTrue:  [
							direction  := #West
						] ifFalse:[
							firstLetter  = $r ifTrue:  [
								direction := #East] ifFalse: [
									firstLetter  = $b ifTrue: [
										position := -1@0
										] ifFalse: [
											self error:  self class  wrongInstructionErrorMessage .
										]
								]	
						]  
			]. 
		aStringOfInstructions  size > 1 ifTrue:  [
				secondLetter  := aStringOfInstructions  at: 2. 
				secondLetter  = $f ifTrue:  [
					position := (position x +1) @ position y  .		
				] ifFalse: [
					secondLetter = $b ifTrue:[
						position := (position x -1) @ position y  .		
						] ifFalse: [
							secondLetter  = $l ifTrue:[
								direction := #West
								]ifFalse:[
									secondLetter  = $r ifTrue:[
										direction := #East
										] ifFalse:  [
											self error: self class wrongInstructionErrorMessage .
										] 
								]
						
						]
				
				]
				
			]
		
]
 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:52:30'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:52:30'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:52:30'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:52:30'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:52:30'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:52:30'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:52:30'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:52:30'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:52:30'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/13/2023 23:52:30'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:52:30'!
FAILURE!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:52:30'!
FAILURE!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:53:30'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:53:30'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:53:30'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:53:30'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:53:30'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:53:30'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:53:30'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:53:30'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:53:30'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/13/2023 23:53:30'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:53:30'!
FAILURE!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:53:30'!
FAILURE!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:53:57' prior: 50667600!
test10
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	self 
	 should: [robot receiveInstruction: 'fñ'.		]
		 raise:  Error
			withExceptionDo:[  :anError|
				self assert: anError  messageText  equals: MarsRover wrongInstructionErrorMessage. 	
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ]! !

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:53:59'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/13/2023 23:53:59'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/13/2023 23:53:59'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/13/2023 23:53:59'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/13/2023 23:53:59'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/13/2023 23:53:59'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/13/2023 23:53:59'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/13/2023 23:53:59'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/13/2023 23:53:59'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/13/2023 23:53:59'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/13/2023 23:53:59'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/13/2023 23:53:59'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/13/2023 23:54:34'!
test11
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fff'. 
	self assert: 3@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/13/2023 23:54:36'!
FAILURE!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/14/2023 00:02:07'!
executeTheInstruction: secondLetter

				secondLetter  = $f ifTrue:  [
					position := (position x +1) @ position y  .		
				] ifFalse: [
					secondLetter = $b ifTrue:[
						position := (position x -1) @ position y  .		
						] ifFalse: [
							secondLetter  = $l ifTrue:[
								direction := #West
								]ifFalse:[
									secondLetter  = $r ifTrue:[
										direction := #East
										] ifFalse:  [
											self error: self class wrongInstructionErrorMessage .
										] 
								]
						
						]
				
				]
				
! !
!MarsRover methodsFor: 'directions' stamp: 'jb 5/14/2023 00:02:24' prior: 50667868!
executeTheInstruction: anCharacterInstruction

				anCharacterInstruction  = $f ifTrue:  [
					position := (position x +1) @ position y  .		
				] ifFalse: [
					anCharacterInstruction = $b ifTrue:[
						position := (position x -1) @ position y  .		
						] ifFalse: [
							anCharacterInstruction  = $l ifTrue:[
								direction := #West
								]ifFalse:[
									anCharacterInstruction  = $r ifTrue:[
										direction := #East
										] ifFalse:  [
											self error: self class wrongInstructionErrorMessage .
										] 
								]
						
						]
				
				]
				
! !
!MarsRover methodsFor: 'directions' stamp: 'jb 5/14/2023 00:04:05' prior: 50667721!
receiveInstruction: aStringOfInstructions

	aStringOfInstructions  size =  0  ifFalse:  [
		self executeTheInstruction:  (	aStringOfInstructions  at:1). 
		aStringOfInstructions  size > 1 ifTrue:  [
				self executeTheInstruction: (aStringOfInstructions  at: 2). 
				
	]	 
]
 ! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:04:09'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:04:09'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:04:09'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:04:09'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:04:09'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:04:09'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:04:09'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:04:09'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:04:09'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:04:09'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:04:09'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:04:09'!
FAILURE!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:04:09'!
FAILURE!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:04:28'!
_test11
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fff'. 
	self assert: 3@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:04:28'!
test11
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fff'. 
	self assert: 3@0 equals: robot position. 
	self assert: #North equals: robot direction. !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:04:29'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:04:29'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:04:29'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:04:29'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:04:29'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:04:29'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:04:29'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:04:29'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:04:29'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:04:29'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:04:29'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:04:34'!
test11
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fff'. 
	self assert: 3@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #_test11 stamp: 'jb 5/14/2023 00:04:34'!
_test11
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fff'. 
	self assert: 3@0 equals: robot position. 
	self assert: #North equals: robot direction. !
!MarsRover methodsFor: 'directions' stamp: 'jb 5/14/2023 00:06:45' prior: 50667909!
receiveInstruction: aStringOfInstructions
|ix|
	aStringOfInstructions  size =  0  ifFalse:  [
		ix:= 1 . 
		ix < aStringOfInstructions  size ifTrue:  [				
		
			self executeTheInstruction:  (	aStringOfInstructions  at:ix).
			ix := ix +1. 
		]		
]	 
! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:06:46'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:06:46'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:06:46'!
FAILURE!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:06:46'!
FAILURE!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:06:46'!
FAILURE!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:06:46'!
FAILURE!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:06:46'!
FAILURE!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:06:46'!
FAILURE!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:06:46'!
FAILURE!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:06:46'!
FAILURE!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:06:46'!
FAILURE!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:06:46'!
FAILURE!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/14/2023 00:07:07' prior: 50668009!
receiveInstruction: aStringOfInstructions
|ix|
	aStringOfInstructions  size =  0  ifFalse:  [
		ix:= 1 . 
		(ix < aStringOfInstructions  size )ifTrue:  [				
		
			self executeTheInstruction:  (	aStringOfInstructions  at:ix).
			ix := ix +1. 
		]		
]	 
! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:07:08'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:07:08'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:07:08'!
FAILURE!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:07:08'!
FAILURE!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:07:08'!
FAILURE!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:07:08'!
FAILURE!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:07:08'!
FAILURE!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:07:08'!
FAILURE!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:07:08'!
FAILURE!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:07:08'!
FAILURE!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:07:08'!
FAILURE!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:07:08'!
FAILURE!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/14/2023 00:07:18' prior: 50668048!
receiveInstruction: aStringOfInstructions
|ix|
	aStringOfInstructions  size =  0  ifFalse:  [
		ix:= 1 . 
		(ix <=  aStringOfInstructions  size )ifTrue:  [				
		
			self executeTheInstruction:  (	aStringOfInstructions  at:ix).
			ix := ix +1. 
		]		
]	 
! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:07:20'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:07:20'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:07:20'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:07:20'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:07:20'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:07:20'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:07:20'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:07:20'!
FAILURE!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:07:20'!
FAILURE!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:07:20'!
FAILURE!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:07:20'!
FAILURE!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:07:20'!
FAILURE!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/14/2023 00:07:59' prior: 50668087!
receiveInstruction: aStringOfInstructions
|ix|
	aStringOfInstructions  size =  0  ifFalse:  [
		ix:= 1 . 
		[(ix <=  aStringOfInstructions  size) ] whileTrue:  [				
		
			self executeTheInstruction:  (	aStringOfInstructions  at:ix).
			ix := ix +1. 
		]		
]	 
! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:08:00'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:08:00'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:08:00'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:08:00'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:08:00'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:08:00'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:08:00'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:08:00'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:08:00'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:08:00'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:08:00'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:08:00'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:08:25' prior: 50667992!
test11
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ffb'. 
	self assert: 3@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:08:32'!
test12
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ffb'. 
	self assert: 2@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:08:41' prior: 50668165!
test11
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fff'. 
	self assert: 3@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:08:42'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:08:42'!
FAILURE!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:08:42'!
FAILURE!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:08:56' prior: 50668174!
test12
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ffb'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:08:57'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:09:27' prior: 50668226!
test12
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ffl'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:09:32'!
FAILURE!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:10:08' prior: 50668267!
test12
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ffl'. 
	self assert: 2@0 equals: robot position. 
	self assert: #East equals: robot direction. ! !

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:10:09'!
FAILURE!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:10:18' prior: 50668278!
test12
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ffl'. 
	self assert: 2@0 equals: robot position. 
	self assert: #West equals: robot direction. ! !

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:10:19'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:10:31'!
test13
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ffl'. 
	self assert: 2@0 equals: robot position. 
	self assert: #West equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:10:42' prior: 50668329!
test13
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ffb'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:10:43'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:10:50' prior: 50668289!
test12
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ffb'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:11:06' prior: 50668338!
test13
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ffl'. 
	self assert: 2@0 equals: robot position. 
	self assert: #West equals: robot direction. ! !

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:11:07'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:11:17' prior: 50668390!
test13
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ffr'. 
	self assert: 2@0 equals: robot position. 
	self assert: #East equals: robot direction. ! !

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:11:18'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:11:52'!
test14
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'ffl'. 
	self assert: 2@0 equals: robot position. 
	self assert: #West equals: robot direction. ! !

!testRun: #MarsRoveTest #test14 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!

!testRun: #MarsRoveTest #test14 stamp: 'jb 5/14/2023 00:11:53'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:12:35'!
test15
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	
	self 
	 should: [robot receiveInstruction: 'ffñ'. .		]
		 raise:  Error
			withExceptionDo:[  :anError|
				self assert: anError  messageText  equals: MarsRover wrongInstructionErrorMessage. 	
	self assert: 2@0 equals: robot position. 
	self assert: #North equals: robot direction. ]
	
	! !

!testRun: #MarsRoveTest #test15 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test14 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!

!testRun: #MarsRoveTest #test15 stamp: 'jb 5/14/2023 00:12:36'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:13:48'!
test16
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'flf'. 
	self assert: 2@0 equals: robot position. 
	self assert: #West equals: robot direction. ! !

!testRun: #MarsRoveTest #test16 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test14 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test15 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!

!testRun: #MarsRoveTest #test16 stamp: 'jb 5/14/2023 00:13:52'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:13:59' prior: 50668574!
test16
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'flb'. 
	self assert: 2@0 equals: robot position. 
	self assert: #West equals: robot direction. ! !
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:14:05' prior: 50668624!
test16
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'flf'. 
	self assert: 2@0 equals: robot position. 
	self assert: #West equals: robot direction. ! !

!testRun: #MarsRoveTest #test16 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test14 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test15 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!

!testRun: #MarsRoveTest #test16 stamp: 'jb 5/14/2023 00:14:06'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:14:21'!
test17
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'flb'. 
	self assert: 1@0 equals: robot position. 
	self assert: #West equals: robot direction. ! !

!testRun: #MarsRoveTest #test17 stamp: 'jb 5/14/2023 00:14:22'!
FAILURE!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:14:30' prior: 50668683!
test17
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'flb'. 
	self assert: 0@0 equals: robot position. 
	self assert: #West equals: robot direction. ! !

!testRun: #MarsRoveTest #test17 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test14 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test15 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test16 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!

!testRun: #MarsRoveTest #test17 stamp: 'jb 5/14/2023 00:14:31'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:14:45'!
test18
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fll'. 
	self assert: 0@0 equals: robot position. 
	self assert: #South equals: robot direction. ! !

!testRun: #MarsRoveTest #test18 stamp: 'jb 5/14/2023 00:14:46'!
FAILURE!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:14:58' prior: 50668746!
test18
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'fll'. 
	self assert: 1@0 equals: robot position. 
	self assert: #South equals: robot direction. ! !

!testRun: #MarsRoveTest #test18 stamp: 'jb 5/14/2023 00:14:59'!
FAILURE!
!MarsRover methodsFor: 'directions' stamp: 'jb 5/14/2023 00:16:21' prior: 50667888!
executeTheInstruction: anCharacterInstruction

				anCharacterInstruction  = $f ifTrue:  [
					position := (position x +1) @ position y  .		
				] ifFalse: [
					anCharacterInstruction = $b ifTrue:[
						position := (position x -1) @ position y  .		
						] ifFalse: [
							anCharacterInstruction  = $l ifTrue:[
								direction = #West ifTrue:  [
										direction  := #South
									] ifFalse:[
								direction := #West
								]
								]ifFalse:[
									anCharacterInstruction  = $r ifTrue:[
										direction := #East
										] ifFalse:  [
											self error: self class wrongInstructionErrorMessage .
										] 
								]
						
						]
				
				]
				
! !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test14 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test15 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test16 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test17 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!

!testRun: #MarsRoveTest #test18 stamp: 'jb 5/14/2023 00:16:22'!
PASSED!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:16:51'!
test19
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'flr'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!testRun: #MarsRoveTest #test19 stamp: 'jb 5/14/2023 00:16:53'!
FAILURE!
!MarsRoveTest methodsFor: 'test' stamp: 'jb 5/14/2023 00:18:56'!
_test19
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'flr'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. ! !

!methodRemoval: MarsRoveTest #test19 stamp: 'jb 5/14/2023 00:18:56'!
test19
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North.
	robot receiveInstruction: 'flr'. 
	self assert: 1@0 equals: robot position. 
	self assert: #North equals: robot direction. !

!testRun: #MarsRoveTest #test00 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test01 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test02 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test03 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test04 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test05 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test06 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test07 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test08 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test09 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test10 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test11 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test12 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test13 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test14 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test15 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test16 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test17 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

!testRun: #MarsRoveTest #test18 stamp: 'jb 5/14/2023 00:18:57'!
PASSED!

----SNAPSHOT----(14 May 2023 00:19:35) CuisUniversity-5706.image priorSource: 10682975!

----QUIT----(14 May 2023 00:19:50) CuisUniversity-5706.image priorSource: 10792179!

----STARTUP---- (14 May 2023 15:06:23) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64 - Copy\CuisUniversity-5706.image!


----QUIT----(14 May 2023 15:40:57) CuisUniversity-5706.image priorSource: 10792268!

----STARTUP---- (14 May 2023 15:44:45) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64 - Copy\CuisUniversity-5706.image!


!classRemoval: #MarsRover stamp: 'jb 5/14/2023 15:44:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcersise'!

!classRemoval: #MarsRoveTest stamp: 'jb 5/14/2023 15:44:59'!
TestCase subclass: #MarsRoveTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcersise'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classDefinition: #MarsRoverTest category: 'MarsRoverExcercise' stamp: 'jb 5/14/2023 15:45:27'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classDefinition: #MarsRover category: 'MarsRoverExcercise' stamp: 'jb 5/14/2023 15:47:27'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'jb 5/14/2023 15:47:15'!
test00 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	self assert: 0@0 equals: robot position.
	self assert: #North equals: robot direction
	
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 15:47:30'!
ERROR!
!MarsRover class methodsFor: 'object serialization' stamp: 'jb 5/14/2023 15:47:36'!
deployIn: aRenameMe1 facing: aRenameMe2 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'object serialization' stamp: 'jb 5/14/2023 15:48:48' prior: 50668966!
deployIn: aPosition facing: aDirection
	^self new initializeInPosition: aPosition  inDirection: aDirection
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 15:48:54'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRoverExcercise' stamp: 'jb 5/14/2023 15:49:10'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classDefinition: #MarsRover category: 'MarsRoverExcercise' stamp: 'jb 5/14/2023 15:49:10'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!
!MarsRover methodsFor: 'initializing' stamp: 'jb 5/14/2023 15:49:10'!
initializeInPosition: aPosition inDirection: aDirection 
	self shouldBeImplemented.
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'initializing' stamp: 'jb 5/14/2023 15:49:17' prior: 50668995!
initializeInPosition: aPosition inDirection: aDirection 
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 15:49:23'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'jb 5/14/2023 15:49:35'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'accessing' stamp: 'jb 5/14/2023 15:49:47' prior: 50669009!
position
	^0@0! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 15:49:53'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'jb 5/14/2023 15:50:00'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'accessing' stamp: 'jb 5/14/2023 15:50:11' prior: 50669019!
direction
	^#North! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 15:50:16'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 15:50:16'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 15:51:52' prior: 50668955!
test00 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 15:51:54'!
ERROR!
!MarsRover methodsFor: 'testing' stamp: 'jb 5/14/2023 15:52:12'!
isInPosition: aRenameMe1 facingTo: aRenameMe2 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'testing' stamp: 'jb 5/14/2023 15:53:00' prior: 50669042!
isInPosition: aPosition facingTo: aDirection 
	^aPosition = self position and:  aDirection = self direction ! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 15:53:01'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 15:53:12'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 15:53:12'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 15:56:01'!
test00InitializingMarsRoverInAPositionAndDirectionShouldStartInThatPoitionAndDirection 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	! !

!methodRemoval: MarsRoverTest #test00 stamp: 'jb 5/14/2023 15:56:01'!
test00 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 15:56:47'!
test01 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:''. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 15:56:49'!
ERROR!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 15:57:06'!
receiveIntruction: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 15:57:18' prior: 50669086!
receiveIntruction: aStringInstruction 
	
	! !

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 15:57:23'!
PASSED!

!testRun: #MarsRoverTest #test00InitializingMarsRoverInAPositionAndDirectionShouldStartInThatPoitionAndDirection stamp: 'jb 5/14/2023 15:57:23'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 15:57:23'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 15:57:47'!
test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:''. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 15:58:06'!
test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'f'. 
	self assert:( robot isInPosition: 1@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 15:58:07'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 15:58:42' prior: 50669091!
receiveIntruction: aStringInstruction 
	position := 1@0! !

!testRun: #MarsRoverTest #test00InitializingMarsRoverInAPositionAndDirectionShouldStartInThatPoitionAndDirection stamp: 'jb 5/14/2023 15:58:43'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 15:58:43'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 15:58:43'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 15:58:43'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 15:58:43'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 15:58:51'!
FAILURE!
!MarsRover methodsFor: 'initializing' stamp: 'jb 5/14/2023 15:59:39' prior: 50669002!
initializeInPosition: aPosition inDirection: aDirection 
	position := 0@0! !
!MarsRover methodsFor: 'accessing' stamp: 'jb 5/14/2023 15:59:51' prior: 50669014!
position
	^position! !

!testRun: #MarsRoverTest #test00InitializingMarsRoverInAPositionAndDirectionShouldStartInThatPoitionAndDirection stamp: 'jb 5/14/2023 15:59:56'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 15:59:56'!
FAILURE!

!testRun: #MarsRoverTest #test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 15:59:56'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 15:59:56'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:01:10' prior: 50669126!
receiveIntruction: aStringInstruction 
	aStringInstruction  size = 0 ifFalse:[  
		position := 1@0
	]! !

!testRun: #MarsRoverTest #test00InitializingMarsRoverInAPositionAndDirectionShouldStartInThatPoitionAndDirection stamp: 'jb 5/14/2023 16:01:12'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:01:12'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:01:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:01:12'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 16:01:45'!
test02MarsRoverShouldBeForwardWhenGivenForwardInstruction
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'f'. 
	self assert:( robot isInPosition: 1@0 facingTo: #North).
	
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 16:04:47' prior: 50669115!
test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'ff'. 
	self assert:( robot isInPosition: 2@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:04:50'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:06:02' prior: 50669171!
receiveIntruction: aStringInstruction 
	aStringInstruction  size = 0 ifFalse:[  
		aStringInstruction  size  = 2 ifTrue: [
			position := 1@0	
			] ifFalse: [
				position := 1@0
				]
	]! !

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:06:07'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 16:06:28'!
test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'ff'. 
	self assert:( robot isInPosition: 2@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:06:42'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:06:43'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:07:16' prior: 50669212!
receiveIntruction: aStringInstruction 
	aStringInstruction  size = 0 ifFalse:[  
		aStringInstruction  size  = 2 ifTrue: [
			position := 1@0	
			] ifFalse: [
				position := 2@0
				]
	]! !

!testRun: #MarsRoverTest #test00InitializingMarsRoverInAPositionAndDirectionShouldStartInThatPoitionAndDirection stamp: 'jb 5/14/2023 16:07:18'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:07:18'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:07:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:07:18'!
FAILURE!

!testRun: #MarsRoverTest #test02MarsRoverShouldBeForwardWhenGivenForwardInstruction stamp: 'jb 5/14/2023 16:07:18'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:07:18'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:07:27' prior: 50669236!
receiveIntruction: aStringInstruction 
	aStringInstruction  size = 0 ifFalse:[  
		aStringInstruction  size  = 2 ifTrue: [
			position := 2@0	
			] ifFalse: [
				position := 1@0
				]
	]! !

!testRun: #MarsRoverTest #test00InitializingMarsRoverInAPositionAndDirectionShouldStartInThatPoitionAndDirection stamp: 'jb 5/14/2023 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldBeForwardWhenGivenForwardInstruction stamp: 'jb 5/14/2023 16:07:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:07:28'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 16:07:48'!
test04
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'fff'. 
	self assert:( robot isInPosition: 3@0 facingTo: #North).
	
	! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:08:56' prior: 50669265!
receiveIntruction: aStringInstruction 
	aStringInstruction  size = 0 ifFalse:[  
		aStringInstruction  size  = 3 ifTrue: [
				position := 3@0
			]ifFalse:[
				aStringInstruction  size  = 2 ifTrue: [
				position := 2@0	
					] ifFalse: [
						position := 1@0
				]
			]
		]! !

!testRun: #MarsRoverTest #test00InitializingMarsRoverInAPositionAndDirectionShouldStartInThatPoitionAndDirection stamp: 'jb 5/14/2023 16:08:57'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:08:57'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:08:57'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:08:58'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldBeForwardWhenGivenForwardInstruction stamp: 'jb 5/14/2023 16:08:58'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:08:58'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:08:58'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:10:56' prior: 50669302!
receiveIntruction: aStringInstruction 
	aStringInstruction  do: [:aCharInstruction |
			position := position x +1 @ position y
		]! !

!testRun: #MarsRoverTest #test00InitializingMarsRoverInAPositionAndDirectionShouldStartInThatPoitionAndDirection stamp: 'jb 5/14/2023 16:11:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:11:00'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:11:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:11:00'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldBeForwardWhenGivenForwardInstruction stamp: 'jb 5/14/2023 16:11:00'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:11:00'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:11:00'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:11:28'!
nextPosition

	^ position x +1 @ position y! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:11:29' prior: 50669336!
receiveIntruction: aStringInstruction 
	aStringInstruction  do: [:aCharInstruction |
			position := self nextPosition
		]! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:12:07'!
forwardPosition

	^ position x +1 @ position y! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 16:12:07' prior: 50669370!
receiveIntruction: aStringInstruction 
	aStringInstruction  do: [:aCharInstruction |
			position := self forwardPosition
		]! !

!methodRemoval: MarsRover #nextPosition stamp: 'jb 5/14/2023 16:12:07'!
nextPosition

	^ position x +1 @ position y!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 16:21:55'!
_test01 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	! !

!methodRemoval: MarsRoverTest #test00InitializingMarsRoverInAPositionAndDirectionShouldStartInThatPoitionAndDirection stamp: 'jb 5/14/2023 16:21:55'!
test00InitializingMarsRoverInAPositionAndDirectionShouldStartInThatPoitionAndDirection 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 16:22:04' prior: 50669393!
_test01 
	|robot|
	robot := MarsRover deployIn: 1@0 facing: #North. 
	self assert:( robot isInPosition: 	1@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:22:05'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:22:05'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:22:05'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldBeForwardWhenGivenForwardInstruction stamp: 'jb 5/14/2023 16:22:05'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:22:05'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:22:05'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 16:22:37'!
test00
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	self assert:( robot isInPosition:  0@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:22:38'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:22:38'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:22:38'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:22:38'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:22:38'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverShouldBeForwardWhenGivenForwardInstruction stamp: 'jb 5/14/2023 16:22:38'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:22:38'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:22:38'!
PASSED!

!methodRemoval: MarsRoverTest #_test01 stamp: 'jb 5/14/2023 16:22:57'!
_test01 
	|robot|
	robot := MarsRover deployIn: 1@0 facing: #North. 
	self assert:( robot isInPosition: 	1@0 facingTo: #North).
	
	!

!methodRemoval: MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:22:59'!
test04
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'fff'. 
	self assert:( robot isInPosition: 3@0 facingTo: #North).
	
	!

!methodRemoval: MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:23:03'!
test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'ff'. 
	self assert:( robot isInPosition: 2@0 facingTo: #North).
	
	!

!methodRemoval: MarsRoverTest #test02MarsRoverShouldBeForwardWhenGivenForwardInstruction stamp: 'jb 5/14/2023 16:23:05'!
test02MarsRoverShouldBeForwardWhenGivenForwardInstruction
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'f'. 
	self assert:( robot isInPosition: 1@0 facingTo: #North).
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 16:23:12'!
_test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'ff'. 
	self assert:( robot isInPosition: 2@0 facingTo: #North).
	
	! !

!methodRemoval: MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:23:12'!
test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'ff'. 
	self assert:( robot isInPosition: 2@0 facingTo: #North).
	
	!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'jb 5/14/2023 16:23:21'!
_test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:''. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	! !

!methodRemoval: MarsRoverTest #test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:23:21'!
test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:''. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	!

!methodRemoval: MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:23:25'!
test01 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:''. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	!
!MarsRoverTest methodsFor: 'test' stamp: 'jb 5/14/2023 16:23:46'!
test01
	|robot|
	robot := MarsRover deployIn: 1@0 facing: #North. 
	self assert:( robot isInPosition:  1@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:23:47'!
FAILURE!
!MarsRover methodsFor: 'initializing' stamp: 'jb 5/14/2023 16:24:10' prior: 50669149!
initializeInPosition: aPosition inDirection: aDirection 
	position := aPosition! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:24:13'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:24:13'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'jb 5/14/2023 16:24:33'!
test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #South. 
	self assert:( robot isInPosition:  0@0 facingTo: #South).
	
	! !

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:24:34'!
FAILURE!
!MarsRover methodsFor: 'initializing' stamp: 'jb 5/14/2023 16:25:47' prior: 50669548!
initializeInPosition: aPosition inDirection: aDirection 
	position := aPosition.
	aDirection = #North ifTrue:  [
			direction  := #North
		]ifFalse: [
			direction  := #South
		]! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:25:48'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:25:48'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:25:48'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:25:48'!
FAILURE!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:26:11'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:26:11'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:26:11'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:26:12'!
FAILURE!
!MarsRover methodsFor: 'accessing' stamp: 'jb 5/14/2023 16:26:37' prior: 50669024!
direction
	^direction ! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:26:38'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:26:38'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:26:38'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'jb 5/14/2023 16:26:54'!
test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #West. 
	self assert:( robot isInPosition:  0@0 facingTo: #west).
	
	! !
!MarsRover methodsFor: 'initializing' stamp: 'jb 5/14/2023 16:27:22' prior: 50669568!
initializeInPosition: aPosition inDirection: aDirection 
	position := aPosition.
	aDirection = #North ifTrue:  [
			direction  := #North
		]ifFalse: [
			aDirection = #South ifTrue:  [
				direction  := #South
		]ifFalse: [
			direction  := #West
		]
		]! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:27:23'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:27:23'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:27:23'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:27:23'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:27:23'!
FAILURE!
!MarsRover methodsFor: 'initializing' stamp: 'jb 5/14/2023 16:27:43' prior: 50669612!
initializeInPosition: aPosition inDirection: aDirection 
	position := aPosition.
	aDirection = #North ifTrue:  [
			direction  := #North
		]ifFalse: [
			aDirection = #South ifTrue:  [
				direction  := #South
			]ifFalse: [
				direction  := #West
			]	
		]! !
!MarsRoverTest methodsFor: 'test' stamp: 'jb 5/14/2023 16:27:50' prior: 50669605!
test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #West. 
	self assert:( robot isInPosition:  0@0 facingTo: #West).
	
	! !

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:27:51'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:27:51'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:27:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:27:51'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:27:51'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'jb 5/14/2023 16:28:02'!
test04
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #East. 
	self assert:( robot isInPosition:  0@0 facingTo: #East).
	
	! !
!MarsRover methodsFor: 'initializing' stamp: 'jb 5/14/2023 16:28:26' prior: 50669635!
initializeInPosition: aPosition inDirection: aDirection 
	position := aPosition.
	direction := aDirection ! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:28:27'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:28:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:28:27'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:28:27'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:28:27'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'jb 5/14/2023 16:28:51'!
test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:''. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	! !

!methodRemoval: MarsRoverTest #_test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:28:52'!
_test01MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction 
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:''. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:28:54'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:28:54'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:28:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:28:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:28:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:28:54'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:28:54'!
PASSED!
!MarsRoverTest methodsFor: 'test' stamp: 'jb 5/14/2023 16:29:28'!
test06
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'ff'. 
	self assert:( robot isInPosition: 2@0 facingTo: #North).
	
	! !

!methodRemoval: MarsRoverTest #_test02 stamp: 'jb 5/14/2023 16:29:28'!
_test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'ff'. 
	self assert:( robot isInPosition: 2@0 facingTo: #North).
	
	!
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 16:30:40' prior: 50669728!
test06
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'f'. 
	self assert:( robot isInPosition: 1@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:30:41'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 16:30:44'!
test07
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'f'. 
	self assert:( robot isInPosition: 1@0 facingTo: #North).
	
	! !
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 16:30:50' prior: 50669772!
test07
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'ff'. 
	self assert:( robot isInPosition: 2@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:30:56'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:30:56'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:30:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:30:56'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:30:56'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:30:56'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:30:56'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:30:56'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:30:56'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 16:31:05' prior: 50669781!
test07
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'fff'. 
	self assert:( robot isInPosition: 3@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:31:06'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:31:06'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:31:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:31:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:31:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:31:06'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:31:06'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:31:06'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:31:06'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 16:31:35' prior: 50669812!
test07
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'ff'. 
	self assert:( robot isInPosition: 2@0 facingTo: #North).
	
	! !
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 16:31:50'!
test08
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'fff'. 
	self assert:( robot isInPosition: 3@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:31:51'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:31:51'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:31:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:31:51'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:31:51'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:31:51'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:31:51'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:31:51'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:31:51'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:31:51'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 16:32:11'!
test09
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'b'. 
	self assert:( robot isInPosition: -1@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:32:28'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:33:37' prior: 50669382!
receiveIntruction: aStringInstruction 
	aStringInstruction  = 'b' ifTrue:  [
			position := -1 @0 
		]ifFalse: [
			aStringInstruction  do: [:aCharInstruction |
				position := self forwardPosition
			]
	]! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:33:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:33:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:33:39'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:33:39'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:33:39'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:33:39'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:33:39'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:33:39'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:33:39'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:33:39'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 16:33:54'!
test10
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'bb'. 
	self assert:( robot isInPosition: -2@0 facingTo: #North).
	
	! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:36:14' prior: 50669895!
receiveIntruction: aStringInstruction
	aStringInstruction  = 'bb' ifTrue: [
		position := -2@0 
	]ifFalse:[
		aStringInstruction  = 'b' ifTrue:  [
				position := -1 @0 
			]ifFalse: [
				aStringInstruction  do: [:aCharInstruction |
					position := self forwardPosition
				]
		]
	]! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:36:15'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:36:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:36:15'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:36:15'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:36:15'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:36:15'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:36:15'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:36:15'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:36:15'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:36:15'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 16:36:15'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 16:36:30'!
test11
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'bbb'. 
	self assert:( robot isInPosition: -3@0 facingTo: #North).
	
	! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:37:06' prior: 50669937!
receiveIntruction: aStringInstruction
	aStringInstruction  = 'bbb' ifTrue: [
	
		aStringInstruction  = 'bb' ifTrue: [
			position := -2@0 
		]ifFalse:[
			aStringInstruction  = 'b' ifTrue:  [
					position := -1 @0 
				]ifFalse: [
					aStringInstruction  do: [:aCharInstruction |
						position := self forwardPosition
					]
			]
		]
	]! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:37:35' prior: 50669984!
receiveIntruction: aStringInstruction
	aStringInstruction  = 'bbb' ifTrue: [
		position := -3@0
	]ifFalse:[
		aStringInstruction  = 'bb' ifTrue: [
			position := -2@0 
		]ifFalse:[
			aStringInstruction  = 'b' ifTrue:  [
					position := -1 @0 
				]ifFalse: [
					aStringInstruction  do: [:aCharInstruction |
						position := self forwardPosition
					]
			]
		]
	]! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:37:36'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:37:36'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:37:36'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:37:36'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:37:36'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:37:36'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:37:36'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:37:36'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:37:36'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:37:36'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 16:37:36'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 16:37:36'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:39:27' prior: 50669998!
receiveIntruction: aStringInstruction
		
				aStringInstruction  do: [:aCharInstruction |
						aCharInstruction  = $b ifTrue:  [
								position := self backwardsPosition
							]ifFalse: [
								position := self forwardPosition
								]
					]
		! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:39:30'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:39:30'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:39:30'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:39:30'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:39:30'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:39:30'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:39:30'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:39:30'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:39:30'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:39:30'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 16:39:30'!
ERROR!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 16:39:30'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:39:33'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'jb 5/14/2023 16:39:41'!
backwardsPosition
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'jb 5/14/2023 16:40:04' prior: 50670084!
backwardsPosition
	^position x -1 @ position y! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:40:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:40:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:40:08'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:40:08'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:40:08'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:40:08'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:40:08'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:40:08'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:40:08'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:40:08'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 16:40:08'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 16:40:08'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 16:40:44'!
test12
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'bfb'. 
	self assert:( robot isInPosition: -1@0 facingTo: #North).
	
	! !

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:40:45'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:40:51'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:37:35' prior: 50670042!
receiveIntruction: aStringInstruction
	aStringInstruction  = 'bbb' ifTrue: [
		position := -3@0
	]ifFalse:[
		aStringInstruction  = 'bb' ifTrue: [
			position := -2@0 
		]ifFalse:[
			aStringInstruction  = 'b' ifTrue:  [
					position := -1 @0 
				]ifFalse: [
					aStringInstruction  do: [:aCharInstruction |
						position := self forwardPosition
					]
			]
		]
	]! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:44:36' prior: 50670199!
receiveIntruction: aStringInstruction
	(aStringInstruction at: 1)= $b ifTrue: [
			aStringInstruction  do:[:aCharInstruction|
			position := self backwardsPosition 	
			]
		]ifFalse: [
			aStringInstruction  do: [:aCharInstruction |
			position := self forwardPosition
					]
				]
			
		
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:44:37'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:44:37'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:44:37'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:44:37'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:44:37'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:44:37'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:44:37'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:44:37'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:44:37'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:44:37'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 16:44:38'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 16:44:38'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:44:38'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:45:19' prior: 50670214!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(aStringInstruction at: 1)= $b ifTrue: [
				aStringInstruction  do:[:aCharInstruction|
				position := self backwardsPosition 	
				]
			]ifFalse: [
				aStringInstruction  do: [:aCharInstruction |
				position := self forwardPosition
						]
					]
			]
		
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:45:21'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:45:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:45:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:45:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:45:21'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:45:21'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:45:21'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:45:21'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:45:21'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:45:21'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 16:45:21'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 16:45:21'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:45:21'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:45:21'!
FAILURE!
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 16:45:58'!
test13
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'l'. 
	self assert:( robot isInPosition: 0@0 facingTo: #West).
	
	! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:51:14' prior: 50670258!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		aStringInstruction  = 'l' ifTrue: [
				direction  := #West
			]ifFalse: [
				(aStringInstruction at: 1)= $b ifTrue: [
					aStringInstruction  do:[:aCharInstruction|
					position := self backwardsPosition 	
					]
				]ifFalse: [
					aStringInstruction  do: [:aCharInstruction |
					position := self forwardPosition
							]
						]
				]
			]
		
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:51:16'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 16:51:16'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:51:16'!
FAILURE!

!methodRemoval: MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:51:30'!
test12
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'bfb'. 
	self assert:( robot isInPosition: -1@0 facingTo: #North).
	
	!
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 16:51:43'!
test12
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'l'. 
	self assert:( robot isInPosition: 0@0 facingTo: #West).
	
	! !

!methodRemoval: MarsRoverTest #test13 stamp: 'jb 5/14/2023 16:51:44'!
test13
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'l'. 
	self assert:( robot isInPosition: 0@0 facingTo: #West).
	
	!
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 16:51:56'!
test13
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'ll'. 
	self assert:( robot isInPosition: 0@0 facingTo: #South).
	
	! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:53:17' prior: 50670314!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		aStringInstruction = 'll' ifTrue: [
			direction  := #South
			] ifFalse: [
				aStringInstruction  = 'l' ifTrue: [
				direction  := #West
			]ifFalse: [
				(aStringInstruction at: 1)= $b ifTrue: [
					aStringInstruction  do:[:aCharInstruction|
					position := self backwardsPosition 	
					]
				]ifFalse: [
					aStringInstruction  do: [:aCharInstruction |
					position := self forwardPosition
							]
						]
				]
			]

			
			]
				
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:53:18'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:53:18'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:53:18'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:53:18'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:53:18'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:53:18'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:53:18'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:53:18'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:53:18'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:53:19'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 16:53:19'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 16:53:19'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:53:19'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 16:53:19'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 16:53:42'!
test14
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'lll'. 
	self assert:( robot isInPosition: 0@0 facingTo: #East).
	
	! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:55:49' prior: 50670397!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		aStringInstruction  = 'lll' ifTrue: [
			direction  := #East
			] ifFalse: [
			aStringInstruction = 'll' ifTrue: [
			direction  := #South
			] ifFalse: [
				aStringInstruction  = 'l' ifTrue: [
				direction  := #West
			]ifFalse: [
				(aStringInstruction at: 1)= $b ifTrue: [
					aStringInstruction  do:[:aCharInstruction|
					position := self backwardsPosition 	
					]
				]ifFalse: [
					aStringInstruction  do: [:aCharInstruction |
					position := self forwardPosition
							]
						]
				]
			]

			]
			
			]
				
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 16:55:50'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 16:57:19'!
test15
	|robot|
	robot := MarsRover deployIn: 0@0 facing: #North. 
	robot receiveIntruction:'llll'. 
	self assert:( robot isInPosition: 0@0 facingTo: #North).
	
	! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 16:58:31' prior: 50670459!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		aStringInstruction  = 'llll' ifTrue: [
				direction := #North
			] ifFalse: [
					aStringInstruction  = 'lll' ifTrue: [
			direction  := #East
			] ifFalse: [
			aStringInstruction = 'll' ifTrue: [
			direction  := #South
			] ifFalse: [
				aStringInstruction  = 'l' ifTrue: [
				direction  := #West
			]ifFalse: [
				(aStringInstruction at: 1)= $b ifTrue: [
					aStringInstruction  do:[:aCharInstruction|
					position := self backwardsPosition 	
					]
				]ifFalse: [
					aStringInstruction  do: [:aCharInstruction |
					position := self forwardPosition
							]
						]
				]
			]

			]
			]
			
			]
				
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 16:58:33'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:02:09' prior: 50670525!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(aStringInstruction at: 1)  = $1 ifTrue: [
				aStringInstruction  do:[:aCharInstruction|
				direction := direction rotateLeft 	
					]

					]ifFalse: [
				(aStringInstruction at: 1)= $b ifTrue: [
					aStringInstruction  do:[:aCharInstruction|
					position := self backwardsPosition 	
					]
				]ifFalse: [
					aStringInstruction  do: [:aCharInstruction |
					position := self forwardPosition
							]
						]
				]
			]

			
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:02:13'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:02:13'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:02:13'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:02:13'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:02:13'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:02:13'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:02:13'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:02:13'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:02:13'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:02:13'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:02:13'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:02:13'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:02:13'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:02:13'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:02:13'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:02:13'!
FAILURE!

Object subclass: #CardinalDirections
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classDefinition: #CardinalDirections category: 'MarsRoverExcercise' stamp: 'jb 5/14/2023 17:03:26'!
Object subclass: #CardinalDirections
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!
!CardinalDirections methodsFor: 'nil' stamp: 'jb 5/14/2023 17:03:36'!
rotateLeft
	self subclassResponsibility ! !

CardinalDirections subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classDefinition: #North category: 'MarsRoverExcercise' stamp: 'jb 5/14/2023 17:03:57'!
CardinalDirections subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

CardinalDirections subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classDefinition: #South category: 'MarsRoverExcercise' stamp: 'jb 5/14/2023 17:04:00'!
CardinalDirections subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

CardinalDirections subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classDefinition: #West category: 'MarsRoverExcercise' stamp: 'jb 5/14/2023 17:04:05'!
CardinalDirections subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

CardinalDirections subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classDefinition: #East category: 'MarsRoverExcercise' stamp: 'jb 5/14/2023 17:04:07'!
CardinalDirections subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!
!East methodsFor: 'nil' stamp: 'jb 5/14/2023 17:04:31' overrides: 50670659!
rotateLeft 
	 ^North  new! !
!North methodsFor: 'nil' stamp: 'jb 5/14/2023 17:04:52' overrides: 50670659!
rotateLeft
	^West new! !
!South methodsFor: 'nil' stamp: 'jb 5/14/2023 17:05:13' overrides: 50670659!
rotateLeft
	^East new! !
!West methodsFor: 'nil' stamp: 'jb 5/14/2023 17:05:33' overrides: 50670659!
rotateLeft
	^South new! !
!MarsRoverTest methodsFor: 'deploying' stamp: 'jb 5/14/2023 17:06:04' prior: 50669436!
test00
	|robot|
	robot := MarsRover deployIn: 0@0 facing: North new. 
	self assert:( robot isInPosition:  0@0 facingTo: North new).
	
	! !
!MarsRoverTest methodsFor: 'deploying' stamp: 'jb 5/14/2023 17:06:36' prior: 50669538!
test01
	|robot|
	robot := MarsRover deployIn: 1@0 facing: North new. 
	self assert:( robot isInPosition:  1@0 facingTo: North new).
	
	! !
!MarsRoverTest methodsFor: 'instruction-empty' stamp: 'jb 5/14/2023 17:07:34'!
deployMarsRoverInCenterNorth

	^ MarsRover deployIn: 0@0 facing: #North! !
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:07:34' prior: 50670389!
test13
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'ll'. 
	self assert:( robot isInPosition: 0@0 facingTo: #South).
	
	! !
!MarsRoverTest methodsFor: 'instruction-empty' stamp: 'jb 5/14/2023 17:07:34' prior: 50669689!
test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction 
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:''. 
	self assert:( robot isInPosition: 	0@0 facingTo: #North).
	
	! !
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 17:07:34' prior: 50669843!
test07
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'ff'. 
	self assert:( robot isInPosition: 2@0 facingTo: #North).
	
	! !
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:07:34' prior: 50670451!
test14
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'lll'. 
	self assert:( robot isInPosition: 0@0 facingTo: #East).
	
	! !
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 17:07:34' prior: 50669884!
test09
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'b'. 
	self assert:( robot isInPosition: -1@0 facingTo: #North).
	
	! !
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:07:34' prior: 50670374!
test12
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'l'. 
	self assert:( robot isInPosition: 0@0 facingTo: #West).
	
	! !
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:07:34' prior: 50670517!
test15
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'llll'. 
	self assert:( robot isInPosition: 0@0 facingTo: #North).
	
	! !
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 17:07:34' prior: 50669929!
test10
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'bb'. 
	self assert:( robot isInPosition: -2@0 facingTo: #North).
	
	! !
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 17:07:34' prior: 50669744!
test06
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'f'. 
	self assert:( robot isInPosition: 1@0 facingTo: #North).
	
	! !
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 17:07:34' prior: 50669976!
test11
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'bbb'. 
	self assert:( robot isInPosition: -3@0 facingTo: #North).
	
	! !
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 17:07:34' prior: 50669851!
test08
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fff'. 
	self assert:( robot isInPosition: 3@0 facingTo: #North).
	
	! !
!MarsRoverTest methodsFor: 'setup-private' stamp: 'jb 5/14/2023 17:08:19' prior: 50670741!
deployMarsRoverInCenterNorth

	^ MarsRover deployIn: 0@0 facing: North new! !
!MarsRoverTest methodsFor: 'deploying' stamp: 'jb 5/14/2023 17:08:36' prior: 50669558!
test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: South new. 
	self assert:( robot isInPosition:  0@0 facingTo: South new).
	
	! !
!MarsRoverTest methodsFor: 'deploying' stamp: 'jb 5/14/2023 17:08:46' prior: 50669646!
test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: West new. 
	self assert:( robot isInPosition:  0@0 facingTo: West new).
	
	! !
!MarsRoverTest methodsFor: 'deploying' stamp: 'jb 5/14/2023 17:09:17' prior: 50669664!
test04
	|robot|
	robot := MarsRover deployIn: 0@0 facing: East new. 
	self assert:( robot isInPosition:  0@0 facingTo: East new).
	
	! !
!MarsRoverTest methodsFor: 'instruction-empty' stamp: 'jb 5/14/2023 17:09:29' prior: 50670755!
test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction 
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:''. 
	self assert:( robot isInPosition: 	0@0 facingTo: North new).
	
	! !
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 17:09:35' prior: 50670816!
test06
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'f'. 
	self assert:( robot isInPosition: 1@0 facingTo: North new).
	
	! !
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 17:09:41' prior: 50670765!
test07
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'ff'. 
	self assert:( robot isInPosition: 2@0 facingTo: North new).
	
	! !
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 17:09:46' prior: 50670833!
test08
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fff'. 
	self assert:( robot isInPosition: 3@0 facingTo: North new).
	
	! !
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 17:09:52' prior: 50670782!
test09
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'b'. 
	self assert:( robot isInPosition: -1@0 facingTo: North new).
	
	! !
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 17:09:56' prior: 50670807!
test10
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'bb'. 
	self assert:( robot isInPosition: -2@0 facingTo: North new).
	
	! !
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 17:10:03' prior: 50670824!
test11
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'bbb'. 
	self assert:( robot isInPosition: -3@0 facingTo: North new).
	
	! !
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:10:10' prior: 50670790!
test12
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'l'. 
	self assert:( robot isInPosition: 0@0 facingTo: West new).
	
	! !
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:10:15' prior: 50670747!
test13
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'ll'. 
	self assert:( robot isInPosition: 0@0 facingTo: South new).
	
	! !
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:10:21' prior: 50670773!
test14
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'lll'. 
	self assert:( robot isInPosition: 0@0 facingTo: East new).
	
	! !
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:10:29' prior: 50670798!
test15
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'llll'. 
	self assert:( robot isInPosition: 0@0 facingTo: North new).
	
	! !

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:10:31'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:10:38'!
FAILURE!
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:10:55'!
_test15
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'llll'. 
	self assert:( robot isInPosition: 0@0 facingTo: North new).
	
	! !

!methodRemoval: MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:10:55'!
test15
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'llll'. 
	self assert:( robot isInPosition: 0@0 facingTo: North new).
	
	!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:10:56'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:10:57'!
FAILURE!
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:11:10'!
test15
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'llll'. 
	self assert:( robot isInPosition: 0@0 facingTo: North new).
	
	! !

!methodRemoval: MarsRoverTest #_test15 stamp: 'jb 5/14/2023 17:11:10'!
_test15
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'llll'. 
	self assert:( robot isInPosition: 0@0 facingTo: North new).
	
	!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:11:11'!
FAILURE!
!MarsRover methodsFor: 'testing' stamp: 'jb 5/14/2023 17:12:31' prior: 50669047!
isInPosition: aPosition facingTo: aDirection 
	^aPosition = self position and:  (self direction isKindOf: (aDirection ))! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:12:32'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:12:32'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:12:32'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:12:32'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:12:32'!
FAILURE!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:12:32'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:12:32'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:12:32'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:12:32'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:12:32'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:12:33'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:12:33'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:12:33'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:12:33'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:12:33'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:12:33'!
FAILURE!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:12:41'!
FAILURE!

robot!

aPosition!

aDirection!

self direction isKindOf: (aDirection )!

self direction!

aDirection!

aPosition = self position !
!MarsRoverTest methodsFor: 'deploying' stamp: 'jb 5/14/2023 17:14:14' prior: 50670726!
test00
	|robot|
	robot := MarsRover deployIn: 0@0 facing: North new. 
	self assert:( robot isInPosition:  0@0 facingTo: North ).
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:14:18'!
PASSED!
!MarsRoverTest methodsFor: 'deploying' stamp: 'jb 5/14/2023 17:14:25' prior: 50670734!
test01
	|robot|
	robot := MarsRover deployIn: 1@0 facing: North new. 
	self assert:( robot isInPosition:  1@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'deploying' stamp: 'jb 5/14/2023 17:14:29' prior: 50670847!
test02
	|robot|
	robot := MarsRover deployIn: 0@0 facing: South new. 
	self assert:( robot isInPosition:  0@0 facingTo: South ).
	
	! !
!MarsRoverTest methodsFor: 'deploying' stamp: 'jb 5/14/2023 17:14:34' prior: 50670855!
test03
	|robot|
	robot := MarsRover deployIn: 0@0 facing: West new. 
	self assert:( robot isInPosition:  0@0 facingTo: West ).
	
	! !
!MarsRoverTest methodsFor: 'deploying' stamp: 'jb 5/14/2023 17:14:38' prior: 50670862!
test04
	|robot|
	robot := MarsRover deployIn: 0@0 facing: East new. 
	self assert:( robot isInPosition:  0@0 facingTo: East ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-empty' stamp: 'jb 5/14/2023 17:14:42' prior: 50670870!
test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction 
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:''. 
	self assert:( robot isInPosition: 	0@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 17:14:47' prior: 50670880!
test06
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'f'. 
	self assert:( robot isInPosition: 1@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 17:14:51' prior: 50670889!
test07
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'ff'. 
	self assert:( robot isInPosition: 2@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-forward' stamp: 'jb 5/14/2023 17:14:55' prior: 50670898!
test08
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fff'. 
	self assert:( robot isInPosition: 3@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 17:15:04' prior: 50670907!
test09
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'b'. 
	self assert:( robot isInPosition: -1@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 17:15:10' prior: 50670916!
test10
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'bb'. 
	self assert:( robot isInPosition: -2@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-backward' stamp: 'jb 5/14/2023 17:15:16' prior: 50670925!
test11
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'bbb'. 
	self assert:( robot isInPosition: -3@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:15:21' prior: 50670934!
test12
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'l'. 
	self assert:( robot isInPosition: 0@0 facingTo: West ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:15:25' prior: 50670942!
test13
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'ll'. 
	self assert:( robot isInPosition: 0@0 facingTo: South ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:15:28' prior: 50670950!
test14
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'lll'. 
	self assert:( robot isInPosition: 0@0 facingTo: East ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:15:32' prior: 50671023!
test15
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'llll'. 
	self assert:( robot isInPosition: 0@0 facingTo: North ).
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:15:37'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:15:37'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:15:37'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:15:37'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:15:37'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:15:37'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:15:37'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:15:37'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:15:37'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:15:37'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:15:37'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:15:37'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:15:37'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:15:37'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:15:37'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:15:37'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:15:49'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:18:21' prior: 50670589!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		
				(aStringInstruction at: 1)= $b ifTrue: [
					aStringInstruction  do:[:aCharInstruction|
					position := self backwardsPosition 	
					]
				]ifFalse: [
					aStringInstruction  do: [:aCharInstruction |
					position := self forwardPosition
							]
						]
				]
			

			
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:18:23'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:18:23'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:18:23'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:18:23'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:18:23'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:18:24'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:18:24'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:18:24'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:18:24'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:18:24'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:18:24'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:18:24'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:18:24'!
FAILURE!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:18:24'!
FAILURE!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:18:24'!
FAILURE!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:18:24'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:20:09' prior: 50671267!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
			(aStringInstruction at: 1  )= $l ifTrue: [
					aStringInstruction  do: [:aCharInstruction|
						direction  := direction  rotateLeft 
						]
				]ifFalse: [
					(aStringInstruction at: 1)= $b ifTrue: [
						aStringInstruction  do:[:aCharInstruction|
						position := self backwardsPosition 	
						]
					]ifFalse: [
						aStringInstruction  do: [:aCharInstruction |
						position := self forwardPosition
								]
							]
					]
			]	
			

			
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:20:10'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:20:10'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:20:10'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:20:10'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:20:10'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:20:11'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:20:11'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:20:11'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:20:11'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:20:11'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:20:11'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:20:11'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:20:11'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:20:11'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:20:11'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:20:11'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-left' stamp: 'jb 5/14/2023 17:20:38'!
test16
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'r'. 
	self assert:( robot isInPosition: 0@0 facingTo: East ).
	
	! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:22:21' prior: 50671320!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		aStringInstruction  = 'r' ifTrue: [
				direction := East new
			]ifFalse:[
				(aStringInstruction at: 1  )= $l ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
						(aStringInstruction at: 1)= $b ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
							aStringInstruction  do: [:aCharInstruction |
							position := self forwardPosition
									]
								]
						]
				]
			]				
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:22:23'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:22:59' prior: 50671387!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		aStringInstruction  = 'r' ifTrue: [
			]ifFalse:[
				(aStringInstruction at: 1  )= $l ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
						(aStringInstruction at: 1)= $b ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
							aStringInstruction  do: [:aCharInstruction |
							position := self forwardPosition
									]
								]
						]
				]
			]	
			
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:23:01'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:23:01'!
FAILURE!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:23:01'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:22:21' prior: 50671451!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		aStringInstruction  = 'r' ifTrue: [
				direction := East new
			]ifFalse:[
				(aStringInstruction at: 1  )= $l ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
						(aStringInstruction at: 1)= $b ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
							aStringInstruction  do: [:aCharInstruction |
							position := self forwardPosition
									]
								]
						]
				]
			]				
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:23:27'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:24:27' prior: 50671517!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		aStringInstruction  = 'rr' ifTrue: [
				direction  := South new				
			]ifFalse: [
				aStringInstruction  = 'r' ifTrue: [
				direction := East new
			]ifFalse:[
				(aStringInstruction at: 1  )= $l ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
						(aStringInstruction at: 1)= $b ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
							aStringInstruction  do: [:aCharInstruction |
							position := self forwardPosition
									]
								]
						]
				]

			]
]				
	
	! !
!MarsRoverTest methodsFor: 'instruction-right' stamp: 'jb 5/14/2023 17:24:40'!
test17
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'r'. 
	self assert:( robot isInPosition: 0@0 facingTo: South ).
	
	! !

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:24:41'!
FAILURE!
!MarsRoverTest methodsFor: 'instruction-right' stamp: 'jb 5/14/2023 17:25:27' prior: 50671607!
test17
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'rr'. 
	self assert:( robot isInPosition: 0@0 facingTo: South ).
	
	! !

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:25:28'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:27:11' prior: 50671581!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		aStringInstruction = 'rrr' ifTrue: [
				direction  := West new
			] ifFalse: [
				
		aStringInstruction  = 'rr' ifTrue: [
				direction  := South new				
			]ifFalse: [
				aStringInstruction  = 'r' ifTrue: [
				direction := East new
			]ifFalse:[
				(aStringInstruction at: 1  )= $l ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
						(aStringInstruction at: 1)= $b ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
							aStringInstruction  do: [:aCharInstruction |
							position := self forwardPosition
									]
								]
						]
				]

			]
			]
]				
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:27:15'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-right' stamp: 'jb 5/14/2023 17:27:31'!
test19
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'rr'. 
	self assert:( robot isInPosition: 0@0 facingTo: West ).
	
	! !

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:27:32'!
FAILURE!
!MarsRoverTest methodsFor: 'instruction-right' stamp: 'jb 5/14/2023 17:27:41' prior: 50671744!
test19
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'rrr'. 
	self assert:( robot isInPosition: 0@0 facingTo: West ).
	
	! !

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:27:42'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-right' stamp: 'jb 5/14/2023 17:27:55'!
test20
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'rrrr'. 
	self assert:( robot isInPosition: 0@0 facingTo: North ).
	
	! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:29:59' prior: 50671672!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(aStringInstruction at:1) = $r ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
				(aStringInstruction at: 1  )= $l ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
						(aStringInstruction at: 1)= $b ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
							aStringInstruction  do: [:aCharInstruction |
							position := self forwardPosition
									]
								]
						]
				]

			]
						
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:30:01'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:30:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:30:01'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:30:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:30:01'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:30:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:30:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:30:01'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:30:02'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:30:02'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:30:02'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:30:02'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:30:02'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:30:02'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:30:02'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:30:02'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:30:02'!
ERROR!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:30:02'!
ERROR!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:30:02'!
ERROR!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 17:30:02'!
ERROR!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:30:05'!
ERROR!
!North methodsFor: 'accessing' stamp: 'jb 5/14/2023 17:30:12'!
rotateRight
	self shouldBeImplemented.! !
!North methodsFor: 'accessing' stamp: 'jb 5/14/2023 17:30:25' prior: 50671894!
rotateRight
	^East new! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:30:28'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:30:29'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:30:29'!
ERROR!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:30:29'!
ERROR!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 17:30:29'!
ERROR!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:30:31'!
ERROR!
!East methodsFor: 'rotations' stamp: 'jb 5/14/2023 17:30:36'!
rotateRight
	self shouldBeImplemented.! !
!East methodsFor: 'rotations' stamp: 'jb 5/14/2023 17:30:45' prior: 50671951!
rotateRight
	^South new! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:30:49'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:30:49'!
ERROR!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 17:30:49'!
ERROR!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:30:51'!
ERROR!
!South methodsFor: 'accessing' stamp: 'jb 5/14/2023 17:30:54'!
rotateRight
	self shouldBeImplemented.! !
!South methodsFor: 'accessing' stamp: 'jb 5/14/2023 17:31:08' prior: 50672008!
rotateRight
	^West new! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:31:12'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 17:31:12'!
ERROR!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 17:31:12'!
ERROR!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:31:22'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 17:31:22'!
ERROR!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 17:31:22'!
ERROR!
!West methodsFor: 'rotations' stamp: 'jb 5/14/2023 17:31:29'!
rotateRight
	self shouldBeImplemented.! !
!West methodsFor: 'rotations' stamp: 'jb 5/14/2023 17:31:42' prior: 50672116!
rotateRight
	^North new! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 17:31:46'!
PASSED!
!CardinalDirections methodsFor: 'rotations' stamp: 'jb 5/14/2023 17:31:57'!
rotateRight
	self subclassResponsibility ! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 17:32:28'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:33:43'!
isForward: aCharacterInstruction
	^aCharacterInstruction = $f! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:33:51'!
isBackward: aCharacterInstruction
	^aCharacterInstruction = $b! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:33:59'!
isLeft: aCharacterInstruction
	^aCharacterInstruction = $l! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:34:07'!
isright: aCharacterInstruction
	^aCharacterInstruction = $r! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:36:07' prior: 50671819!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
							aStringInstruction  do: [:aCharInstruction |
							position := self forwardPosition
									]
								]
						]
				]

			]
						
	
	! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 17:36:09'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 17:39:34' prior: 50672244!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					aStringInstruction  do: [:aCharInstruction |
							position := self forwardPosition
							]
						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !
!MarsRover class methodsFor: 'object serialization' stamp: 'jb 5/14/2023 17:40:10'!
wrongInstructionErrorMessage
 ^'insrucción erronea :('! !

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:40:34'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:40:40'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:40:41'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:40:41'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:40:41'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:40:41'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:40:41'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 17:40:41'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-right' stamp: 'jb 5/14/2023 17:43:28'!
test21
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	self should:[ robot receiveIntruction:  'ñ'
		] raise: Error
		withExceptionDo: [:error| 
			self assert: ( MarsRover  wrongInstructionErrorMessage ) equals:  (error messageText ) .  
			self assert:( robot isInPosition: 0@0 facingTo: North ).		
		]
	
	
	
	
	! !

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 17:43:30'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 18:11:14'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 18:11:15'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:11:15'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-right' stamp: 'jb 5/14/2023 18:11:58'!
test22
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fb'. 
	self assert:( robot isInPosition: 0@0 facingTo: North ).
	
	! !

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:11:59'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 18:15:15' prior: 50672318!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  size =  1 ifTrue: [
				position := self forwardPosition		
				]ifFalse: [
					(self isBackward: (aStringInstruction at: 2)) ifTrue: [
							position  := self backwardsPosition .
						] ifFalse:  [
							aStringInstruction  do: [:aCharInstruction |
								position := self forwardPosition
								]
							]
						]
						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 18:15:16'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 18:15:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 18:15:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 18:15:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 18:15:16'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 18:15:16'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 18:15:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 18:15:16'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 18:15:16'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 18:15:16'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 18:15:17'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 18:15:17'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 18:15:17'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 18:15:17'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 18:15:17'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 18:15:17'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 18:15:17'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 18:15:17'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 18:15:17'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 18:15:17'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:15:17'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:15:17'!
FAILURE!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:15:17'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 18:16:40' prior: 50672532!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  size =  1 ifTrue: [
				position := self forwardPosition		
				]ifFalse: [
					(self isBackward: (aStringInstruction at: 2)) ifTrue: [
							position := self forwardPosition .
							position  := self backwardsPosition .
						] ifFalse:  [
							aStringInstruction  do: [:aCharInstruction |
								position := self forwardPosition
								]
							]
						]
						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:16:42'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 18:24:05' prior: 50672626!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  size =  1 ifTrue: [
				position := self forwardPosition		
				]ifFalse: [
					(self isBackward: (aStringInstruction at: 2)) ifTrue: [
							position := self forwardPosition .
							position  := self backwardsPosition .
						] ifFalse:  [
							(self isLeft: (aStringInstruction  at: 2)) ifTrue: [
									position := self forwardPosition .
									direction  := self rotateLeft 
								] ifFalse: [ 
								aStringInstruction  do: [:aCharInstruction |
								position := self forwardPosition
								]
							]
						]
					]
						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 18:24:12' prior: 50672719!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  size =  1 ifTrue: [
				position := self forwardPosition		
				]ifFalse: [
					(self isBackward: (aStringInstruction at: 2)) ifTrue: [
							position := self forwardPosition .
							position  := self backwardsPosition .
						] ifFalse:  [
							(self isLeft: (aStringInstruction  at: 2)) ifTrue: [
									position := self forwardPosition .
									direction  := direction rotateLeft. 
								] ifFalse: [ 
								aStringInstruction  do: [:aCharInstruction |
								position := self forwardPosition
								]
							]
						]
					]
						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 18:24:13'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 18:24:14'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:24:14'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:24:14'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-right' stamp: 'jb 5/14/2023 18:24:37' prior: 50672522!
test22
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fl'. 
	self assert:( robot isInPosition: 1@0 facingTo: West ).
	
	! !

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:24:39'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:24:41'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 18:24:41'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 18:24:41'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 18:24:41'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 18:24:41'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 18:24:41'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:24:42'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-right' stamp: 'jb 5/14/2023 18:25:06' prior: 50672406!
test21
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fb'. 
	self assert:( robot isInPosition: 0@0 facingTo: North ).
	
	! !

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:25:07'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 18:25:07'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 18:25:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 18:25:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 18:25:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 18:25:07'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 18:25:07'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 18:25:07'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 18:25:07'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:25:08'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:25:11'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 18:25:11'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 18:25:11'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 18:25:11'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:25:12'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:25:49'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 18:25:49'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 18:25:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 18:25:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 18:25:49'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 18:25:49'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:25:50'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 18:33:06'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 18:33:07'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 18:33:07'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 18:33:07'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 18:33:07'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 18:33:07'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:33:07'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:33:07'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 18:41:47'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:06:13' prior: 50672765!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  size = 2 ifTrue: [
					position  := self forwardPosition . 
					(self isBackward:  (aStringInstruction at: 2)) ifTrue:[					
						position  := self backwardsPosition .
						]ifFalse:[
							(self isLeft:  (aStringInstruction  at:2 )) ifTrue:[
									direction  := direction  rotateLeft 
								] ifFalse: [
									(self isright:  (aStringInstruction  at:2 )) ifTrue:[
									direction  := direction  rotateRight 
								] ifFalse: [
									(self isForward:  (aStringInstruction  at:2 )) ifTrue:[
									position  := self  forwardPosition .
								] ifFalse: [
									self error: self class  wrongInstructionErrorMessage 
									
								]

								]

									
								]
						
						]
				]ifFalse: [
					aStringInstruction  do:[:aCharInstruction|
						position:= self forwardPosition .
						
						]
				]

						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:06:15'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:06:33'!
test23
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fl'. 
	self assert:( robot isInPosition: 1@0 facingTo: West ).
	
	! !

!methodRemoval: MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:06:33'!
test22
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fl'. 
	self assert:( robot isInPosition: 1@0 facingTo: West ).
	
	!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:06:41'!
test22
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fb'. 
	self assert:( robot isInPosition: 0@0 facingTo: North ).
	
	! !

!methodRemoval: MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:06:41'!
test21
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fb'. 
	self assert:( robot isInPosition: 0@0 facingTo: North ).
	
	!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:06:57' prior: 50673367!
test23
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fr'. 
	self assert:( robot isInPosition: 1@0 facingTo: East ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:07:03' prior: 50673398!
test23
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fl'. 
	self assert:( robot isInPosition: 1@0 facingTo: West ).
	
	! !

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:07:04'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:07:04'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:07:04'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:07:04'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:07:04'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:07:04'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:07:04'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:07:04'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:07:04'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:07:05'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:07:17'!
test24
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fr'. 
	self assert:( robot isInPosition: 1@0 facingTo: East ).
	
	! !

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:07:19'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:07:42'!
test25
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fñ'. 
	self assert:( robot isInPosition: 1@0 facingTo: East ).
	
	! !

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:07:43'!
ERROR!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:09:27' prior: 50673535!
test25
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	self should: [
		robot receiveIntruction:'fñ'. 
		] raise:  Error 
	withExceptionDo: [:error|
			self assert:( MarsRover  wrongInstructionErrorMessage  ) equals: (error  messageText ).
			self assert:( robot isInPosition: 1@0 facingTo: North ).
	]
	! !

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:09:28'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:09:28'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:09:28'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:09:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:09:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:09:28'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:09:29'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-right' stamp: 'jb 5/14/2023 19:09:46'!
test18
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'rrr'. 
	self assert:( robot isInPosition: 0@0 facingTo: West ).
	
	! !

!methodRemoval: MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:09:46'!
test19
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'rrr'. 
	self assert:( robot isInPosition: 0@0 facingTo: West ).
	
	!
!MarsRoverTest methodsFor: 'instruction-right' stamp: 'jb 5/14/2023 19:09:50'!
test19
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'rrrr'. 
	self assert:( robot isInPosition: 0@0 facingTo: North ).
	
	! !

!methodRemoval: MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:09:50'!
test20
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'rrrr'. 
	self assert:( robot isInPosition: 0@0 facingTo: North ).
	
	!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:10:07'!
test20
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	self should: [
		robot receiveIntruction:'ñ'. 
		] raise:  Error 
	withExceptionDo: [:error|
			self assert:( MarsRover  wrongInstructionErrorMessage  ) equals: (error  messageText ).
			self assert:( robot isInPosition: 0@0 facingTo: North ).
	]
	! !

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:10:09'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:10:19'!
test21
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fb'. 
	self assert:( robot isInPosition: 0@0 facingTo: North ).
	
	! !

!methodRemoval: MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:10:19'!
test22
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fb'. 
	self assert:( robot isInPosition: 0@0 facingTo: North ).
	
	!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:10:22'!
test22
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fl'. 
	self assert:( robot isInPosition: 1@0 facingTo: West ).
	
	! !

!methodRemoval: MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:10:22'!
test23
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fl'. 
	self assert:( robot isInPosition: 1@0 facingTo: West ).
	
	!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:10:26'!
test23
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fr'. 
	self assert:( robot isInPosition: 1@0 facingTo: East ).
	
	! !

!methodRemoval: MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:10:26'!
test24
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fr'. 
	self assert:( robot isInPosition: 1@0 facingTo: East ).
	
	!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:10:30'!
test24
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	self should: [
		robot receiveIntruction:'fñ'. 
		] raise:  Error 
	withExceptionDo: [:error|
			self assert:( MarsRover  wrongInstructionErrorMessage  ) equals: (error  messageText ).
			self assert:( robot isInPosition: 1@0 facingTo: North ).
	]
	! !

!methodRemoval: MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:10:30'!
test25
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	self should: [
		robot receiveIntruction:'fñ'. 
		] raise:  Error 
	withExceptionDo: [:error|
			self assert:( MarsRover  wrongInstructionErrorMessage  ) equals: (error  messageText ).
			self assert:( robot isInPosition: 1@0 facingTo: North ).
	]
	!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:12:27' prior: 50673260!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  size = 2 ifTrue: [
					position  := self forwardPosition . 
					(self isBackward:  (aStringInstruction at: 2)) ifTrue:[					
						position  := self backwardsPosition .
						]ifFalse:[
							(self isLeft:  (aStringInstruction  at:2 )) ifTrue:[
									direction  := direction  rotateLeft 
								] ifFalse: [
									(self isright:  (aStringInstruction  at:2 )) ifTrue:[
									direction  := direction  rotateRight 
								] ifFalse: [
									(self isForward:  (aStringInstruction  at:2 )) ifTrue:[
									position  := self  forwardPosition .
								] ifFalse: [
									self error: self class  wrongInstructionErrorMessage 
									
								]
							]
								]
						]
				]ifFalse: [
					aStringInstruction  do:[:aCharInstruction|
						position:= self forwardPosition .
						
						]
				]

						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:12:29'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:13:12'!
executeCommand: aStringInstruction

	^ (self isBackward:  (aStringInstruction at: 2)) ifTrue:[					
						position  := self backwardsPosition .
						]ifFalse:[
							(self isLeft:  (aStringInstruction  at:2 )) ifTrue:[
									direction  := direction  rotateLeft 
								] ifFalse: [
									(self isright:  (aStringInstruction  at:2 )) ifTrue:[
									direction  := direction  rotateRight 
								] ifFalse: [
									(self isForward:  (aStringInstruction  at:2 )) ifTrue:[
									position  := self  forwardPosition .
								] ifFalse: [
									self error: self class  wrongInstructionErrorMessage 
									
								]
							]
								]
						]! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:13:12' prior: 50673793!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  size = 2 ifTrue: [
					position  := self forwardPosition . 
					self executeCommand: aStringInstruction
				]ifFalse: [
					aStringInstruction  do:[:aCharInstruction|
						position:= self forwardPosition .
						
						]
				]

						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:13:37' prior: 50673906!
executeCommand: aCharInstruction

	^ (self isBackward:  (aCharInstruction at: 2)) ifTrue:[					
						position  := self backwardsPosition .
						]ifFalse:[
							(self isLeft:  (aCharInstruction  at:2 )) ifTrue:[
									direction  := direction  rotateLeft 
								] ifFalse: [
									(self isright:  (aCharInstruction  at:2 )) ifTrue:[
									direction  := direction  rotateRight 
								] ifFalse: [
									(self isForward:  (aCharInstruction  at:2 )) ifTrue:[
									position  := self  forwardPosition .
								] ifFalse: [
									self error: self class  wrongInstructionErrorMessage 
									
								]
							]
								]
						]! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:14:13' prior: 50673966!
executeCommand: aCharInstruction

	^ (self isBackward:  aCharInstruction) ifTrue:[					
						position  := self backwardsPosition .
						]ifFalse:[
							(self isLeft: aCharInstruction ) ifTrue:[
									direction  := direction  rotateLeft 
								] ifFalse: [
									(self isright:  aCharInstruction ) ifTrue:[
									direction  := direction  rotateRight 
								] ifFalse: [
									(self isForward:  aCharInstruction ) ifTrue:[
									position  := self  forwardPosition .
								] ifFalse: [
									self error: self class  wrongInstructionErrorMessage 
									
								]
							]
								]
						]! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:14:18' prior: 50673990!
executeCommand: aCharInstruction

	(self isBackward:  aCharInstruction) ifTrue:[					
						position  := self backwardsPosition .
						]ifFalse:[
							(self isLeft: aCharInstruction ) ifTrue:[
									direction  := direction  rotateLeft 
								] ifFalse: [
									(self isright:  aCharInstruction ) ifTrue:[
									direction  := direction  rotateRight 
								] ifFalse: [
									(self isForward:  aCharInstruction ) ifTrue:[
									position  := self  forwardPosition .
								] ifFalse: [
									self error: self class  wrongInstructionErrorMessage 
									
								]
							]
								]
						]! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:14:20'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:14:20'!
ERROR!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:14:20'!
ERROR!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:14:20'!
ERROR!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:14:20'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:14:36' prior: 50674013!
executeCommand: aCharInstruction

	^(self isBackward:  aCharInstruction) ifTrue:[					
						position  := self backwardsPosition .
						]ifFalse:[
							(self isLeft: aCharInstruction ) ifTrue:[
									direction  := direction  rotateLeft 
								] ifFalse: [
									(self isright:  aCharInstruction ) ifTrue:[
									direction  := direction  rotateRight 
								] ifFalse: [
									(self isForward:  aCharInstruction ) ifTrue:[
									position  := self  forwardPosition .
								] ifFalse: [
									self error: self class  wrongInstructionErrorMessage 
									
								]
							]
								]
						]! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:14:38' prior: 50674095!
executeCommand: aCharInstruction

	(self isBackward:  aCharInstruction) ifTrue:[					
						position  := self backwardsPosition .
						]ifFalse:[
							(self isLeft: aCharInstruction ) ifTrue:[
									direction  := direction  rotateLeft 
								] ifFalse: [
									(self isright:  aCharInstruction ) ifTrue:[
									direction  := direction  rotateRight 
								] ifFalse: [
									(self isForward:  aCharInstruction ) ifTrue:[
									position  := self  forwardPosition .
								] ifFalse: [
									self error: self class  wrongInstructionErrorMessage 
									
								]
							]
								]
						]! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:14:59' prior: 50673930!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  size = 2 ifTrue: [
					position  := self forwardPosition . 
					self executeCommand: (aStringInstruction at: 2). 
				]ifFalse: [
					aStringInstruction  do:[:aCharInstruction|
						position:= self forwardPosition .
						
						]
				]

						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:15:00'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:17:52'!
test25
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'bf'. 
	self assert:( robot isInPosition: 0@0 facingTo: North ).
	
	! !

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:18:09'!
FAILURE!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:19:54'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:19:54'!
FAILURE!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:19:54'!
FAILURE!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:20:13' prior: 50674237!
test25
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fbf'. 
	self assert:( robot isInPosition: 1@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:20:24' prior: 50674312!
test25
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fbb'. 
	self assert:( robot isInPosition: 1@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:20:33'!
test2
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fbf'. 
	self assert:( robot isInPosition: 1@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:20:35' prior: 50674321!
test25
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fbf'. 
	self assert:( robot isInPosition: 1@0 facingTo: North ).
	
	! !

!methodRemoval: MarsRoverTest #test2 stamp: 'jb 5/14/2023 19:20:38'!
test2
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fbf'. 
	self assert:( robot isInPosition: 1@0 facingTo: North ).
	
	!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:20:51'!
test26
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fbb'. 
	self assert:( robot isInPosition: -1@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:21:04'!
test27
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fbl'. 
	self assert:( robot isInPosition: 0@0 facingTo: West ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:21:15'!
test28
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fbr'. 
	self assert:( robot isInPosition: 0@0 facingTo: East ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:21:27'!
test29
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'fbñ'. 
	self assert:( robot isInPosition: 0@0 facingTo: East ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:22:01' prior: 50674377!
test29
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
		self should: [
			robot receiveIntruction:'fbñ'. 
			] raise:  Error 
	withExceptionDo: [:error|
			self assert:( MarsRover  wrongInstructionErrorMessage  ) equals: (error  messageText ).
			self assert:( robot isInPosition: 0@0 facingTo: North ).
	]
	
	
	
	
	
	
	! !

!testRun: #MarsRoverTest #test29 stamp: 'jb 5/14/2023 19:22:03'!
FAILURE!

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:22:07'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:22:08'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:22:08'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:22:08'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:22:08'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:22:08'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:22:08'!
FAILURE!

!testRun: #MarsRoverTest #test26 stamp: 'jb 5/14/2023 19:22:08'!
FAILURE!

!testRun: #MarsRoverTest #test27 stamp: 'jb 5/14/2023 19:22:08'!
FAILURE!

!testRun: #MarsRoverTest #test28 stamp: 'jb 5/14/2023 19:22:08'!
FAILURE!

!testRun: #MarsRoverTest #test29 stamp: 'jb 5/14/2023 19:22:08'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:25:07' prior: 50674141!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  size > 1  ifTrue: [
					position  := self forwardPosition . 
					self executeCommand: (aStringInstruction at: 2). 
				]ifFalse: [
										aStringInstruction  do:[:aCharInstruction|
						position:= self forwardPosition .
						
						]
					
				]

						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:25:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:25:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:25:08'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:25:08'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:25:08'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:25:08'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:25:09'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:25:09'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:25:09'!
FAILURE!

!testRun: #MarsRoverTest #test26 stamp: 'jb 5/14/2023 19:25:09'!
FAILURE!

!testRun: #MarsRoverTest #test27 stamp: 'jb 5/14/2023 19:25:09'!
FAILURE!

!testRun: #MarsRoverTest #test28 stamp: 'jb 5/14/2023 19:25:09'!
FAILURE!

!testRun: #MarsRoverTest #test29 stamp: 'jb 5/14/2023 19:25:09'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:27:44' prior: 50674473!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			position  := self forwardPosition . 
			aStringInstruction  size > 1  ifTrue: [
					self executeCommand: (aStringInstruction at: 2). 
					aStringInstruction  size > 2 ifTrue:  [
							self executeCommand:  (aStringInstruction  at: 3)
						]
				]
						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:27:45'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:27:45'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:27:45'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:27:45'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:27:45'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:27:45'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:27:45'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:27:45'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'jb 5/14/2023 19:27:46'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:28:54' prior: 50674581!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			self executeCommand: (aStringInstruction at: 1). 
			aStringInstruction  size > 1  ifTrue: [
					self executeCommand: (aStringInstruction at: 2). 
					aStringInstruction  size > 2 ifTrue:  [
							self executeCommand:  (aStringInstruction  at: 3)
						]
				]
						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:28:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:28:55'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:28:55'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:28:55'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:28:55'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:28:55'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:28:55'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'jb 5/14/2023 19:28:56'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:30:51' prior: 50674688!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  do:[:aCharInstruction|
					self executeCommand:  aCharInstruction .
				
				]
				
						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:30:52'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:30:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:30:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:30:52'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:30:52'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:30:52'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:30:52'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'jb 5/14/2023 19:30:53'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:31:35' prior: 50674795!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					self executeCommand:  aCharInstruction 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							self executeCommand:  aCharInstruction  
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							self executeCommand:  aCharInstruction  	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  do:[:aCharInstruction|
					self executeCommand:  aCharInstruction .
				
				]
				
						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'jb 5/14/2023 19:31:37'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:30:51' prior: 50674897!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction|
							position := self backwardsPosition 	
							]
						]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  do:[:aCharInstruction|
					self executeCommand:  aCharInstruction .
				
				]
				
						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'jb 5/14/2023 19:32:01'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:35:40'!
test30
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'bff'. 
	self assert:( robot isInPosition: 1@0 facingTo: North ).
	
	! !

!testRun: #MarsRoverTest #test30 stamp: 'jb 5/14/2023 19:35:41'!
FAILURE!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:39:38' prior: 50675000!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							position := self backwardsPosition. 
							aStringInstruction  size > 1 ifTrue:[
									self  executeCommand: ( aStringInstruction  at: 2).
									aStringInstruction  size> 2 ifTrue:[
											self  executeCommand: ( aStringInstruction  at: 3).
										]
								]
							]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  do:[:aCharInstruction|
					self executeCommand:  aCharInstruction .
				
				]
				
						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:39:40'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:39:41'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:39:41'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:39:41'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:39:41'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:39:41'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:39:41'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:39:41'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'jb 5/14/2023 19:39:41'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'jb 5/14/2023 19:39:41'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'jb 5/14/2023 19:39:41'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'jb 5/14/2023 19:39:41'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'jb 5/14/2023 19:39:41'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:41:25' prior: 50675113!
receiveIntruction: aStringInstruction
	aStringInstruction  size = 0 ifFalse: [
		(self isright: (aStringInstruction at:1))  ifTrue: [
				aStringInstruction  do: [:aCharInstruction|
					direction  := direction  rotateRight 
							]	
			]ifFalse:[
		(self isLeft: (aStringInstruction at:1))  ifTrue: [
						aStringInstruction  do: [:aCharInstruction|
							direction  := direction  rotateLeft 
							]
					]ifFalse: [
		(self isBackward: (aStringInstruction at:1))  ifTrue: [
							aStringInstruction  do:[:aCharInstruction | 
								self executeCommand:  aCharInstruction 
								]								
							]ifFalse: [
						
		(self isForward: (aStringInstruction at: 1)) ifTrue:[					
			aStringInstruction  do:[:aCharInstruction|
					self executeCommand:  aCharInstruction .
				
				]
				
						]ifFalse:[
								self error: self class wrongInstructionErrorMessage
							]
									]
								]
						]
				]

! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:41:26'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:41:27'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:41:27'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:41:27'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:41:27'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:41:27'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:41:27'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:41:27'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'jb 5/14/2023 19:41:27'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'jb 5/14/2023 19:41:27'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'jb 5/14/2023 19:41:27'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'jb 5/14/2023 19:41:27'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'jb 5/14/2023 19:41:27'!
PASSED!
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:42:30'!
test31
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'lfbr'. 
	self assert:( robot isInPosition: 1@0 facingTo: North ).
	
	! !
!MarsRoverTest methodsFor: 'instruction-unordered' stamp: 'jb 5/14/2023 19:42:40' prior: 50675328!
test31
	|robot|
	robot := self deployMarsRoverInCenterNorth. 
	robot receiveIntruction:'lfbr'. 
	self assert:( robot isInPosition: 0@0 facingTo: North ).
	
	! !
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:47:38' prior: 50675223!
receiveIntruction: aStringInstruction
	aStringInstruction  do:[:aCharInstruction| 
			self executeCommand:  aCharInstruction 
		]
! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'jb 5/14/2023 19:47:40'!
PASSED!
!MarsRover methodsFor: 'instructions' stamp: 'jb 5/14/2023 19:49:06' prior: 50674118!
executeCommand: aCharInstruction

	(self isBackward:  aCharInstruction) ifTrue:[					
		position  := self backwardsPosition .
		]ifFalse:[
			(self isLeft: aCharInstruction ) ifTrue:[
				direction  := direction  rotateLeft 
				] ifFalse: [
					(self isright:  aCharInstruction ) ifTrue:[
						direction  := direction  rotateRight 
						] ifFalse: [
							(self isForward:  aCharInstruction ) ifTrue:[
								position  := self  forwardPosition .
								] ifFalse: [
									self error: self class  wrongInstructionErrorMessage 
									]
								]
							]
						]! !

!testRun: #MarsRoverTest #test00 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverShouldStayTheSameWhenGivenAnEmptyInstruction stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test26 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test27 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test28 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test29 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test30 stamp: 'jb 5/14/2023 19:49:08'!
PASSED!

!testRun: #MarsRoverTest #test31 stamp: 'jb 5/14/2023 19:49:09'!
PASSED!

----SNAPSHOT----(14 May 2023 19:56:28) CuisUniversity-5706.image priorSource: 10792490!

----QUIT----(14 May 2023 19:56:33) CuisUniversity-5706.image priorSource: 11003957!

----STARTUP---- (17 May 2023 14:35:10) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64 - Copy\CuisUniversity-5706.image!


!classRemoval: #MarsRover stamp: 'jb 5/17/2023 14:35:18'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classRemoval: #West stamp: 'jb 5/17/2023 14:35:18'!
CardinalDirections subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classRemoval: #South stamp: 'jb 5/17/2023 14:35:19'!
CardinalDirections subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classRemoval: #North stamp: 'jb 5/17/2023 14:35:19'!
CardinalDirections subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classRemoval: #East stamp: 'jb 5/17/2023 14:35:19'!
CardinalDirections subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classRemoval: #CardinalDirections stamp: 'jb 5/17/2023 14:35:19'!
Object subclass: #CardinalDirections
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classRemoval: #MarsRoverTest stamp: 'jb 5/17/2023 14:35:20'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

----End fileIn of C:\Users\juanb\Desktop\facultad\1C23\IS1\git\2023-1c\06-Portfolio1\Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/17/2023 14:35:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:35:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:35:45'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/17/2023 14:35:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/17/2023 14:35:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/17/2023 14:35:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/17/2023 14:35:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:35:45'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jb 5/17/2023 14:37:28' prior: 50675794!
balance

	^transactions  inject:  0  into:[:balanceAcumulated :aTransaction|
		aTransaction  affectBalance: balanceAcumulated 
			
		] ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/17/2023 14:37:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:37:32'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:37:32'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/17/2023 14:37:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/17/2023 14:37:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/17/2023 14:37:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/17/2023 14:37:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:37:36'!
ERROR!
!Deposit methodsFor: '*DenotativeObject' stamp: 'jb 5/17/2023 14:37:42'!
affectBalance: balanceAcumulated 
	self shouldBeImplemented.! !
!Deposit methodsFor: '*DenotativeObject' stamp: 'jb 5/17/2023 14:38:11' prior: 50675876!
affectBalance: aBalance
	 ^aBalance  + self value 
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/17/2023 14:38:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/17/2023 14:38:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/17/2023 14:38:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/17/2023 14:38:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/17/2023 14:38:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:38:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:38:15'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:38:15'!
ERROR!
!Withdraw methodsFor: '*DenotativeObject' stamp: 'jb 5/17/2023 14:38:18'!
affectBalance: balanceAcumulated 
	self shouldBeImplemented.! !
!Withdraw methodsFor: '*DenotativeObject' stamp: 'jb 5/17/2023 14:38:31' prior: 50675916!
affectBalance: aBalance
	^aBalance  - self value 
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/17/2023 14:38:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:38:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:38:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/17/2023 14:38:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/17/2023 14:38:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/17/2023 14:38:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/17/2023 14:38:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/17/2023 14:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/17/2023 14:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/17/2023 14:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/17/2023 14:39:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/17/2023 14:39:09'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jb 5/17/2023 14:39:22'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/17/2023 14:40:19'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'jb 5/17/2023 14:40:13'!
test00
	|portfolio|
	portfolio  := Portfolio new. 
	self assert: 0 equals:  portfolio  balance ! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 14:40:22'!
ERROR!
!Portfolio methodsFor: 'associating' stamp: 'jb 5/17/2023 14:40:27'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'associating' stamp: 'jb 5/17/2023 14:40:32' prior: 50676005!
balance
	^0 ! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 14:42:19'!
PASSED!

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 14:42:19'!
PASSED!
TerseGuideHelp is adapted from the Squeak terse guide by Chris Rathman (http://www.angelfire.com/tx4/cus/notes/smalltalk.html), maintained on the swiki at http://wiki.squeak.org/squeak/5699. Copyrights and credit for the original document belong to Chris Rathman.

Examples of use include:

TerseGuideHelp display: #arithmetic
TerseGuideHelp display: #array
TerseGuideHelp display: #transcript

TerseGuideHelp also serves as the model for TerseGuideWindow, which can be opened by:

TerseGuideWindow openTerseGuide
!
Show a terse guide to Cuis in a system window. The window has a text pane with a list pane beside it. The text pane is a kind of Workspace which has the behavior that statements in it can be Done (Cmd-d) or Printed (Cmd-p) in order to observe their effect.

TerseGuideWindow openTerseGuide
!
I represent a topic that can be added to the TerseGuide. Subclasses of me should implement #title and #examples. For instance:

>>title
    ^ 'Numbers'

>> examples
     ^ {
            { #code -> '4 factorial' . #category -> 'Common functions' . #description -> 'factorial' } as: Dictionary.
            { #code -> '2 even' . #category -> 'Common functions' . #description -> 'check if a number is even' } as: Dictionary.
        }!

----STARTUP---- (17 May 2023 14:43:12) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64 - Copy\CuisUniversity-5706.image!


!classRemoval: #MarsRover stamp: 'jb 5/17/2023 14:44:07'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classRemoval: #West stamp: 'jb 5/17/2023 14:44:08'!
CardinalDirections subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classRemoval: #South stamp: 'jb 5/17/2023 14:44:08'!
CardinalDirections subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classRemoval: #North stamp: 'jb 5/17/2023 14:44:08'!
CardinalDirections subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classRemoval: #East stamp: 'jb 5/17/2023 14:44:09'!
CardinalDirections subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classRemoval: #CardinalDirections stamp: 'jb 5/17/2023 14:44:09'!
Object subclass: #CardinalDirections
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

!classRemoval: #MarsRoverTest stamp: 'jb 5/17/2023 14:44:09'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRoverExcercise'!

----End fileIn of C:\Users\juanb\Desktop\facultad\1C23\IS1\git\2023-1c\06-Portfolio1\Portfolio-Ejercicio.st----!

----SNAPSHOT----(17 May 2023 14:44:35) CuisUniversity-5706.image priorSource: 11004046!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jb 5/17/2023 14:45:31' prior: 50675794!
balance

	 ^transactions  inject: 0 into: [:anAccumulatedBalance :aTransaction |
		aTransaction  affectBalance: anAccumulatedBalance 
		
		]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/17/2023 14:45:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:45:33'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:45:33'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/17/2023 14:45:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/17/2023 14:45:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/17/2023 14:45:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/17/2023 14:45:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:45:35'!
ERROR!
!Deposit methodsFor: 'balance' stamp: 'jb 5/17/2023 14:45:45'!
affectBalance: anAccumulatedBalance 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'balance' stamp: 'jb 5/17/2023 14:46:05' prior: 50675849!
affectBalance: anAccumulatedBalance 
	 ^anAccumulatedBalance  - self value 
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/17/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/17/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/17/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/17/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/17/2023 14:46:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:46:09'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:46:09'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/17/2023 14:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/17/2023 14:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/17/2023 14:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/17/2023 14:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/17/2023 14:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:46:12'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:46:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:46:14'!
FAILURE!
!Deposit methodsFor: 'balance' stamp: 'jb 5/17/2023 14:46:34' prior: 50675854!
affectBalance: anAccumulatedBalance 
	 ^anAccumulatedBalance  + self value 
	! !
!Withdraw methodsFor: 'value' stamp: 'jb 5/17/2023 14:46:44'!
affectBalance: anAccumulatedBalance 
	 ^anAccumulatedBalance  - self value ! !
!AccountTransaction methodsFor: 'value' stamp: 'jb 5/17/2023 14:47:09'!
affectBalance: anAccumulatedBalance
	self subclassResponsibility 	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/17/2023 14:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/17/2023 14:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/17/2023 14:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/17/2023 14:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/17/2023 14:47:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/17/2023 14:47:28'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'jb 5/17/2023 14:47:43'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/17/2023 14:48:27'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'jb 5/17/2023 14:48:24'!
test00
	|portfolio|
	portfolio  := Portfolio new.
	self assert:  0 equals: portfolio  balance ! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 14:48:28'!
ERROR!
!Portfolio methodsFor: 'balanc' stamp: 'jb 5/17/2023 14:48:36'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balanc' stamp: 'jb 5/17/2023 14:48:41' prior: 50675984!
balance
	^0! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 14:48:45'!
PASSED!

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 14:48:45'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jb 5/17/2023 14:49:33'!
test01
	|portfolio|
	portfolio  := Portfolio new.
	self assert:  0 equals: portfolio  balance ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jb 5/17/2023 14:51:29' prior: 50675996!
test01
	|portfolio account deposit|
	portfolio  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolio addAccount: account. 
	
	
	self assert: 100 equals: portfolio  balance ! !

!testRun: #PortfolioTest #test01 stamp: 'jb 5/17/2023 14:51:52'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 14:52:03'!
addAccount: account 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/17/2023 14:52:44'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 14:52:43' prior: 50676015!
addAccount: account 
	balance := account balance ! !
!Portfolio methodsFor: 'balance' stamp: 'jb 5/17/2023 14:52:59' overrides: 16920235!
initialize 
	balance  :=0 ! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 14:53:01'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'jb 5/17/2023 14:53:01'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'jb 5/17/2023 14:53:01'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'jb 5/17/2023 14:53:25' prior: 50675988!
balance
	^balance ! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 14:53:26'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'jb 5/17/2023 14:53:26'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jb 5/17/2023 14:54:28'!
test02
	|portfolio account1  deposit1  account2  deposit2 |
	portfolio  := Portfolio new.
	
	
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register:  100  on:  account1 .
	
		
	account2 := ReceptiveAccount new.
	deposit2 := Deposit register:  50  on:  account2 .
	
	
	
	portfolio addAccount: account1. 
	portfolio addAccount: account2.
	
	self assert: 100 equals: portfolio  balance ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jb 5/17/2023 14:54:38' prior: 50676051!
test02
	|portfolio account1  deposit1  account2  deposit2 |
	portfolio  := Portfolio new.
	
	
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register:  100  on:  account1 .
	
		
	account2 := ReceptiveAccount new.
	deposit2 := Deposit register:  50  on:  account2 .
	
	
	
	portfolio addAccount: account1. 
	portfolio addAccount: account2.
	
	self assert: 150 equals: portfolio  balance ! !

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 14:54:48'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 14:55:11' prior: 50676027!
addAccount: account 
	balance := balance + account balance ! !

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 14:55:15'!
PASSED!

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 14:55:15'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'jb 5/17/2023 14:55:15'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 14:55:15'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jb 5/17/2023 14:58:12'!
test03
	|portfolio account deposit|
	portfolio  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolio addAccount: account. 
	
	self should: [
		portfolio addAccount: account. 	
		]  raise: Error  
	description: [:anError| 
		self assert: Portfolio   anError messageText  equals: Portfolio cannotPutTheSameAccountTwice.
		self assert: 100 equals: portfolio  balance 		
		]
	
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jb 5/17/2023 14:59:13' prior: 50676099!
test03
	|portfolio account deposit|
	portfolio  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolio addAccount: account. 
	
	self should: [
		portfolio addAccount: account. 	
		]  raise: Error  
	description: [:anError| 
		self assert:    anError messageText  equals: Portfolio cannotPutTheSameAccountTwice.
		self assert: 100 equals: portfolio  balance 		
		]
	
	
	! !

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 14:59:17'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 14:59:17'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jb 5/17/2023 14:59:46' prior: 50676117!
test03
	|portfolio account deposit|
	portfolio  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolio addAccount: account. 
	
	self should: [
		portfolio addAccount: account. 	
		]  raise: Error  
	description: [:anError| 
		self assert:  anError messageText  equals: Portfolio cannotPutTheSameAccountTwice.
		self assert: 100 equals: portfolio  balance 		
		]
	
	
	! !

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 14:59:49'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 14:59:49'!
ERROR!
!Portfolio class methodsFor: 'nil' stamp: 'jb 5/17/2023 15:02:30'!
cannotPutTheSameAccountTwice
	^'No se pueden poner dos cuentas igualessss' ! !

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:02:52'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:02:52'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:02:52'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:03:00'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:03:00'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jb 5/17/2023 15:03:26' prior: 50676139!
test03
	|portfolio account deposit|
	portfolio  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolio addAccount: account. 
	
	self should: [
		portfolio addAccount: account. 	
		]  raise: Error  
	description: [:anError| 
		
		self assert: 100 equals: portfolio  balance 		
		]
	
	
	! !

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:03:30'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:03:30'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jb 5/17/2023 15:03:44' prior: 50676178!
test03
	|portfolio account deposit|
	portfolio  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolio addAccount: account. 
	
	self should: [
		portfolio addAccount: account. 	
		]  raise: Error  
	description: [:anError| 
		self assert:  anError messageText  equals: Portfolio cannotPutTheSameAccountTwice.
		self assert: 100 equals: portfolio  balance 		
		]
	
	
	! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 15:06:14' prior: 50676085!
addAccount: anAccount 
	balance := balance + anAccount balance 
	accounts add: anAccount! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/17/2023 15:06:22'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 15:06:20' prior: 50676214!
addAccount: anAccount 
	balance := balance + anAccount balance. 
	accounts add: anAccount! !
!Portfolio methodsFor: 'initializing' stamp: 'jb 5/17/2023 15:07:02' prior: 50676032 overrides: 16920235!
initialize 
	balance  :=0. 
	accounts  := OrderedCollection  new.! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:07:05'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'jb 5/17/2023 15:07:05'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:07:05'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:07:05'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:07:05'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:07:05'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 15:10:56' prior: 50676228!
addAccount: anAccount 
	
	accounts detect: [:anAccountsInAccounts|
		anAccountsInAccounts  = anAccount  
		 ] ifFound: [
			self error: self class cannotPutTheSameAccountTwice 
		] ifNone: [

			balance := balance + anAccount balance. 
			accounts add: anAccount
	]! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:10:57'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'jb 5/17/2023 15:10:57'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:10:57'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:10:57'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 15:11:10' prior: 50676254!
addAccount: anAccount 
	
	accounts detect: [:anAccountsInAccounts|
		anAccountsInAccounts  = anAccount  
		 ] ifFound: [
			self error: self class cannotPutTheSameAccountTwice 
		] ifNone: [
			accounts add: anAccount
	]! !
!Portfolio methodsFor: 'balance' stamp: 'jb 5/17/2023 15:11:36' prior: 50676043!
balance
	^accounts sum: [:anAccount| anAccount  balance ]! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:11:38'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'jb 5/17/2023 15:11:38'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:11:38'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:11:38'!
PASSED!

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:11:38'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'jb 5/17/2023 15:11:52' prior: 50676285!
balance
	^accounts sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ]! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:11:54'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'jb 5/17/2023 15:11:54'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:11:54'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:11:54'!
PASSED!
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:14:49'!
test04
	|portfolio1 portfolio2  account deposit|
	portfolio2  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolio2 addAccount: account. 
	portfolio1 := Portfolio  new. 
	portfolio1  addPortfolio:portfolio2 .
	
	self assert: 100 equals: portfolio2  balance ! !
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:15:00' prior: 50676315!
test04
	|portfolio1 portfolio2  account deposit|
	portfolio2  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolio2 addAccount: account. 
	portfolio1 := Portfolio  new. 
	portfolio1  addPortfolio:portfolio2 .
	
	self assert: 100 equals: portfolio1  balance ! !
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:15:26' prior: 50676329!
test04
	|portfolio1 porfolioWithAccount  account deposit|
	porfolioWithAccount  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	porfolioWithAccount addAccount: account. 
	portfolio1 := Portfolio  new. 
	portfolio1  addPortfolio:porfolioWithAccount .
	
	self assert: 100 equals: portfolio1  balance ! !
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:15:45' prior: 50676343!
test04
	|portfolioWithPortfolio porfolioWithAccount  account deposit|
	porfolioWithAccount  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	porfolioWithAccount addAccount: account. 
	portfolioWithPortfolio := Portfolio  new. 
	portfolioWithPortfolio  addPortfolio:porfolioWithAccount .
	
	self assert: 100 equals: portfolioWithPortfolio  balance ! !

!testRun: #PortfolioTest #test04 stamp: 'jb 5/17/2023 15:15:55'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 15:16:03'!
addPortfolio: porfolioWithAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/17/2023 15:18:35'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance accounts portfolioBalance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 15:18:31' prior: 50676376!
addPortfolio: porfolioWithAccount 
	portfolioBalance:= porfolioWithAccount  balance ! !
!Portfolio methodsFor: 'balance' stamp: 'jb 5/17/2023 15:18:51' prior: 50676301!
balance
	^accounts sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ] + portfolioBalance ! !
!Portfolio methodsFor: 'initializing' stamp: 'jb 5/17/2023 15:18:59' prior: 50676235 overrides: 16920235!
initialize 
	portfolioBalance  :=0. 
	accounts  := OrderedCollection  new.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/17/2023 15:19:08'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolioBalance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:19:11'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'jb 5/17/2023 15:19:11'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:19:11'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:19:11'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'jb 5/17/2023 15:19:11'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'jb 5/17/2023 15:19:36' prior: 50676395!
balance
	^(accounts sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ]) + portfolioBalance ! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:19:37'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'jb 5/17/2023 15:19:37'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:19:37'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:19:37'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'jb 5/17/2023 15:19:37'!
PASSED!
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:22:17'!
test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame
	|portfolioWithPortfolio porfolioWithAccount  account deposit|
	porfolioWithAccount  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	porfolioWithAccount addAccount: account. 
	portfolioWithPortfolio := Portfolio  new. 
	portfolioWithPortfolio  addPortfolio:porfolioWithAccount .
	
	self assert: 100 equals: portfolioWithPortfolio  balance ! !

!methodRemoval: PortfolioTest #test04 stamp: 'jb 5/17/2023 15:22:17'!
test04
	|portfolioWithPortfolio porfolioWithAccount  account deposit|
	porfolioWithAccount  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	porfolioWithAccount addAccount: account. 
	portfolioWithPortfolio := Portfolio  new. 
	portfolioWithPortfolio  addPortfolio:porfolioWithAccount .
	
	self assert: 100 equals: portfolioWithPortfolio  balance !

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:22:19'!
PASSED!

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:22:19'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'jb 5/17/2023 15:22:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:22:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:22:19'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:22:19'!
PASSED!
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:22:42'!
test01AddigAnAccountToAPortfolioShouldChangeTheBalance
	|portfolio account deposit|
	portfolio  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolio addAccount: account. 
	
	
	self assert: 100 equals: portfolio  balance ! !

!methodRemoval: PortfolioTest #test01 stamp: 'jb 5/17/2023 15:22:42'!
test01
	|portfolio account deposit|
	portfolio  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolio addAccount: account. 
	
	
	self assert: 100 equals: portfolio  balance !
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:22:52'!
test05
	|portfolioWithPortfolio porfolioWithAccount  account deposit|
	porfolioWithAccount  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	porfolioWithAccount addAccount: account. 
	portfolioWithPortfolio := Portfolio  new. 
	portfolioWithPortfolio  addPortfolio:porfolioWithAccount .
	
	self assert: 100 equals: portfolioWithPortfolio  balance ! !
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:24:45' prior: 50676516!
test05
	|portfolioWithPortfolio porfolioWithAccount  portfolioWithAnotherAccount  account deposit anotherAccount anotherDeposit|
	porfolioWithAccount  := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	porfolioWithAccount addAccount: account. 	

	portfolioWithAnotherAccount  := Portfolio new.
	anotherAccount := ReceptiveAccount new.
	anotherDeposit := Deposit register:  50  on:  account .
	portfolioWithAnotherAccount  addAccount:  anotherAccount . 	


	portfolioWithPortfolio := Portfolio  new. 
	portfolioWithPortfolio  addPortfolio:porfolioWithAccount .
	portfolioWithPortfolio  addPortfolio:portfolioWithAnotherAccount .
	
	self assert: 100 equals: portfolioWithPortfolio  balance ! !

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 15:24:49'!
FAILURE!
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:24:56' prior: 50676532!
test05
	|portfolioWithPortfolio porfolioWithAccount  portfolioWithAnotherAccount  account deposit anotherAccount anotherDeposit|
	porfolioWithAccount  := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	porfolioWithAccount addAccount: account. 	

	portfolioWithAnotherAccount  := Portfolio new.
	anotherAccount := ReceptiveAccount new.
	anotherDeposit := Deposit register:  50  on:  account .
	portfolioWithAnotherAccount  addAccount:  anotherAccount . 	


	portfolioWithPortfolio := Portfolio  new. 
	portfolioWithPortfolio  addPortfolio:porfolioWithAccount .
	portfolioWithPortfolio  addPortfolio:portfolioWithAnotherAccount .
	
	self assert: 150 equals: portfolioWithPortfolio  balance ! !

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 15:24:59'!
FAILURE!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:25:12'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/17/2023 15:26:05'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolioBalance portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 15:26:03' prior: 50676389!
addPortfolio: porfolioWithAccount 
	portfolios add: porfolioWithAccount ! !
!Portfolio methodsFor: 'initializing' stamp: 'jb 5/17/2023 15:26:33' prior: 50676402 overrides: 16920235!
initialize 

	accounts  := OrderedCollection  new.	
	portfolios  := OrderedCollection  new. ! !
!Portfolio methodsFor: 'balance' stamp: 'jb 5/17/2023 15:26:59' prior: 50676427!
balance
	^(accounts sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ]) +( portfolioBalance  sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ]) ! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:27:00'!
ERROR!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 15:27:01'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:27:01'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:27:01'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:27:01'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 15:27:01'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'jb 5/17/2023 15:27:15' prior: 50676614!
balance
	^((accounts sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ]) +( portfolioBalance  sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ]) )! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:27:15'!
ERROR!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 15:27:15'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:27:15'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:27:15'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:27:15'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 15:27:15'!
ERROR!

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:27:41'!
ERROR!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 15:27:41'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:27:41'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:27:41'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:27:41'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 15:27:41'!
ERROR!

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:27:44'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'jb 5/17/2023 15:27:56' prior: 50676639!
balance
	^((accounts sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ]) +( portfolios  sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ]) )! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:27:57'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 15:27:57'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:27:57'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:27:57'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:27:57'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 15:27:57'!
PASSED!
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:28:17' prior: 50676561!
test05
	|portfolioWithPortfolio porfolioWithAccount  account deposit|
	porfolioWithAccount  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	porfolioWithAccount addAccount: account. 
	portfolioWithPortfolio := Portfolio  new. 
	portfolioWithPortfolio  addPortfolio:porfolioWithAccount .
	
	self assert: 100 equals: portfolioWithPortfolio  balance ! !
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:24:56' prior: 50676708!
test05
	|portfolioWithPortfolio porfolioWithAccount  portfolioWithAnotherAccount  account deposit anotherAccount anotherDeposit|
	porfolioWithAccount  := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	porfolioWithAccount addAccount: account. 	

	portfolioWithAnotherAccount  := Portfolio new.
	anotherAccount := ReceptiveAccount new.
	anotherDeposit := Deposit register:  50  on:  account .
	portfolioWithAnotherAccount  addAccount:  anotherAccount . 	


	portfolioWithPortfolio := Portfolio  new. 
	portfolioWithPortfolio  addPortfolio:porfolioWithAccount .
	portfolioWithPortfolio  addPortfolio:portfolioWithAnotherAccount .
	
	self assert: 150 equals: portfolioWithPortfolio  balance ! !
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:28:39'!
test06

	|portfolioWithPortfolio porfolioWithAccount  account deposit|
	porfolioWithAccount  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	porfolioWithAccount addAccount: account. 
	portfolioWithPortfolio := Portfolio  new. 
	portfolioWithPortfolio  addPortfolio:porfolioWithAccount .
	
	self assert: 100 equals: portfolioWithPortfolio  balance ! !
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:29:44' prior: 50676750!
test06

	|portfolioWithPortfolio porfolioWithAccount  account deposit|
	porfolioWithAccount  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	porfolioWithAccount addAccount: account. 
	portfolioWithPortfolio := Portfolio  new. 
	portfolioWithPortfolio  addPortfolio:porfolioWithAccount .
	
	self should: [
		portfolioWithPortfolio  addPortfolio: porfolioWithAccount . 	
		]  raise: Error  
	description: [:anError| 
		self assert:  anError messageText  equals: Portfolio cannotPutTheSamePortfolioTwice.
		self assert: 100 equals: portfolioWithPortfolio  balance 		
		]
	
	
	! !

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 15:29:50'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 15:29:50'!
ERROR!
!Portfolio class methodsFor: 'error handling' stamp: 'jb 5/17/2023 15:30:25'!
cannotPutTheSamePortfolioTwice
	^'no podes hacer eso. error 404 not found, null pointer'! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:30:30'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 15:30:30'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:30:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:30:30'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:30:30'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 15:30:30'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 15:30:30'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 15:30:30'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 15:30:30'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 15:31:40' prior: 50676602!
addPortfolio: aPortfolio2FIle 
	portfolios detect: [:aFiledPortfolio|
		aFiledPortfolio  = aPortfolio2FIle  
		 ] ifFound: [
			self error: self class cannotPutTheSameAccountTwice 
		] ifNone: [
			portfolios add: aPortfolio2FIle 
	]! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:31:44'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 15:31:44'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:31:44'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:31:44'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:31:44'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 15:31:44'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 15:31:44'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 15:33:11' prior: 50676824!
addPortfolio: aPortfolioToAdd 
	portfolios detect: [:aFiledPortfolio|
		aFiledPortfolio  = aPortfolioToAdd  
		 ] ifFound: [
			self error: self class cannotPutTheSameAccountTwice 
		] ifNone: [
			portfolios add: aPortfolioToAdd 
	]! !
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:33:57'!
test07
	|portfolio account deposit|
	portfolio  := Portfolio new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolio addAccount: account. 
	
	
	self assert: 100 equals: portfolio  balance ! !
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:37:01' prior: 50676864!
test07
	|portfolioWithPortfoliosAndAccounts  account deposit aPortfolioWithAnotherAccount anotherAccount anotherDeposit |
	portfolioWithPortfoliosAndAccounts := Portfolio  new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	aPortfolioWithAnotherAccount  := Portfolio new.
	anotherAccount  := ReceptiveAccount  new.
	anotherDeposit  := Deposit  register: 50  on: anotherAccount .
	aPortfolioWithAnotherAccount addAccount: anotherAccount . 
	
	portfolioWithPortfoliosAndAccounts  addAccount:  account .
	portfolioWithPortfoliosAndAccounts  addPortfolio:  aPortfolioWithAnotherAccount .
	
	
	self assert: 150 equals: portfolioWithPortfoliosAndAccounts  balance ! !

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 15:37:05'!
PASSED!

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:37:05'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 15:37:05'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:37:05'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:37:05'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:37:05'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 15:37:05'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 15:37:05'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 15:37:05'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'jb 5/17/2023 15:39:43' prior: 50676683!
balance
	accounts size = 0   ifTrue:  [
		^portfolios  sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ] 	
			]ifFalse:[


	^accounts sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ] ]! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:39:44'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 15:39:44'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:39:44'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:39:44'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:39:44'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 15:39:44'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 15:39:44'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 15:39:44'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 15:39:44'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'jb 5/17/2023 15:27:56' prior: 50676924!
balance
	^((accounts sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ]) +( portfolios  sum: [:anAccount| anAccount  balance ] ifEmpty: [0 ]) )! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:39:59'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 15:39:59'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:39:59'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:39:59'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:39:59'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 15:39:59'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 15:39:59'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 15:39:59'!
PASSED!
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:40:38'!
test08
	|portfolioWithPortfoliosAndAccounts  account deposit aPortfolioWithAnotherAccount anotherAccount anotherDeposit |
	portfolioWithPortfoliosAndAccounts := Portfolio  new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	aPortfolioWithAnotherAccount  := Portfolio new.
	anotherAccount  := ReceptiveAccount  new.
	anotherDeposit  := Deposit  register: 50  on: anotherAccount .
	aPortfolioWithAnotherAccount addAccount: anotherAccount . 
	
	portfolioWithPortfoliosAndAccounts  addAccount:  account .
	portfolioWithPortfoliosAndAccounts  addPortfolio:  aPortfolioWithAnotherAccount .
	
	
	self assert: 150 equals: portfolioWithPortfoliosAndAccounts  balance ! !

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 15:40:47'!
PASSED!

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 15:40:47'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 15:40:47'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 15:40:47'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 15:40:47'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 15:40:48'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 15:40:48'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 15:40:48'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 15:40:48'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 15:40:48'!
PASSED!
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:41:10' prior: 50676986!
test08
	|portfolioWithPortfoliosAndAccounts  account deposit portfolioWithSameAccount anotherAccount anotherDeposit |
	portfolioWithPortfoliosAndAccounts := Portfolio  new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolioWithSameAccount  := Portfolio new.
	anotherAccount  := ReceptiveAccount  new.
	anotherDeposit  := Deposit  register: 50  on: anotherAccount .
	portfolioWithSameAccount addAccount: anotherAccount . 
	
	portfolioWithPortfoliosAndAccounts  addAccount:  account .
	portfolioWithPortfoliosAndAccounts  addPortfolio:  portfolioWithSameAccount .
	
	
	self assert: 150 equals: portfolioWithPortfoliosAndAccounts  balance ! !
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:43:08' prior: 50677038!
test08
	|portfolioWithPortfoliosAndAccounts  account deposit portfolioWithSameAccount |
	portfolioWithPortfoliosAndAccounts := Portfolio  new.
	
	
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolioWithSameAccount  := Portfolio new.
	portfolioWithSameAccount addAccount: account . 
	
	portfolioWithPortfoliosAndAccounts  addAccount:  account .
	
	
	self should: [
		portfolioWithPortfoliosAndAccounts  addPortfolio:  portfolioWithSameAccount .	
		] raise:  Error
			description: [:anError|
				self assert: Portfolio  cannotPutTheSameAccountTwice  equals: anError  messageText .
				self assert: 100 equals: portfolioWithPortfoliosAndAccounts  balance 
	
				] 
	
	
	! !
!PortfolioTest methodsFor: 'test balance' stamp: 'jb 5/17/2023 15:43:37' prior: 50677063!
test08
	|portfolioWithPortfoliosAndAccounts  account deposit portfolioWithSameAccount |

	portfolioWithPortfoliosAndAccounts := Portfolio  new.
	
	account := ReceptiveAccount new.
	deposit := Deposit register:  100  on:  account .
	
	portfolioWithSameAccount  := Portfolio new.
	portfolioWithSameAccount addAccount: account . 
	
	portfolioWithPortfoliosAndAccounts  addAccount:  account .
	
	
	self should: [
		portfolioWithPortfoliosAndAccounts  addPortfolio:  portfolioWithSameAccount .	
		] raise:  Error
			description: [:anError|
				self assert: Portfolio  cannotPutTheSameAccountTwice  equals: anError  messageText .
				self assert: 100 equals: portfolioWithPortfoliosAndAccounts  balance 
	
				] 
	
	
	! !

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 15:43:38'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 15:43:38'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:11:49' prior: 50676275!
addAccount: anAccount 
	
	accounts detect: [:anAccountsInAccounts|
		anAccountsInAccounts  = anAccount  
		 ] ifFound: [
			self error: self class cannotPutTheSameAccountTwice 
		] ifNone: [
		
			portfolios  detect: [:aPortfolio|
					aPortfolio  hasAccount: anAccount 
				]  ifFound: [
					self error: self class cannotPutTheSameAccountTwice 
					]ifNone: [
						accounts add: anAccount
			
			]
	]! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:16:39'!
hasAccount: anAccount 
	
	accounts detect: [:anAccountsInAccounts|
		anAccountsInAccounts  = anAccount  
		 ] ifFound: [
			^true
		] ifNone: [
		
			portfolios  detect: [:aPortfolio|
					aPortfolio  hasAccount: anAccount 
				]  ifFound: [
					^ true
					]ifNone: [
						^false
			
			]
	]! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:17:18' prior: 50677119!
addAccount: anAccount 
	
	(self hasAccount:  anAccount)  ifTrue:  [
			accounts  add: anAccount .
		]! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 16:17:19'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 16:17:19'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 16:17:19'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 16:17:19'!
FAILURE!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 16:17:20'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 16:17:20'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 16:17:20'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 16:17:20'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:17:20'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:17:59' prior: 50677146!
addAccount: anAccount 
	
	(self hasAccount:  anAccount)  ifFalse:  [
			accounts  add: anAccount .
		]! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 16:18:00'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 16:18:00'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 16:18:00'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 16:18:00'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 16:18:00'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 16:18:00'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 16:18:00'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 16:18:00'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:18:00'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:18:00'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:18:00'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:18:40' prior: 50677177!
addAccount: anAccount 
	
	(self hasAccount:  anAccount)  ifFalse:  [
			accounts  add: anAccount .
		]ifTrue:[
			self error: self class cannotPutTheSameAccountTwice 
		]! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 16:18:41'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:18:41'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:18:41'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:18:41'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:18:51'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:18:51'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:18:51'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 16:18:57'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:24:19' prior: 50676854!
addPortfolio: aPortfolioToAdd 
	aPortfolioToAdd  accounts do:[:anAccount |
		(self hasAccount: anAccount)  ifTrue:[
				self error: self class cannotPutTheSameAccountTwice 
			]
		]. 
	aPortfolioToAdd  portfolios do: [:anPortfolio|
		(self hasAccount: anPortfolio )  ifTrue:[
				self error: self class cannotPutTheSamePortfolioTwice 
			]
		
		]! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:24:32' prior: 50677259!
addPortfolio: aPortfolioToAdd 
	aPortfolioToAdd  accounts do:[:anAccount |
		(self hasAccount: anAccount)  ifTrue:[
				self error: self class cannotPutTheSameAccountTwice 
			]
		]. 
	aPortfolioToAdd  portfolios do: [:anPortfolio|
		(self hasPortfolio:  anPortfolio )  ifTrue:[
				self error: self class cannotPutTheSamePortfolioTwice 
			]
		
		]! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:26:24'!
hasPortfolio: aPortfolio
	portfolios  detect: [:aPortfolioFiled |
			aPortfolioFiled  = aPortfolio 
		]  ifFound: [
			^true
		]
	ifNone:[
		portfolios  
		] ! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:27:19' prior: 50677287!
hasPortfolio: aPortfolio
	portfolios  detect: [:aPortfolioFiled |
			aPortfolioFiled  = aPortfolio 
		]  ifFound: [
			^true
		]
	ifNone:[
		portfolios  detect:  [:aPortfolioFiled|
				aPortfolioFiled  hasPortfolio:  aPortfolio 
			] ifFound:[
				^true
			]  ifNone:[^false] 
		] ! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:27:37'!
portfolios 
	^portfolios! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:27:44'!
accounts 
	^accounts! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 16:27:45'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 16:27:45'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 16:27:45'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 16:27:45'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:27:45'!
PASSED!

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 16:28:12'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 16:28:12'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 16:28:12'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 16:28:12'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 16:28:12'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:28:12'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:31:53' prior: 50677295!
hasPortfolio: aPortfolio
	|acc|
	acc := true. 
	portfolios  do: [:aPortfolioFiled |
		aPortfolioFiled  = aPortfolio  ifTrue:[
			acc:= false. 
					] ifFalse:[
				acc := acc and: (aPortfolioFiled  hasPortfolio:  aPortfolio). 
			]
		
		
		]! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:31:56' prior: 50677361!
hasPortfolio: aPortfolio
	|acc|
	acc := true. 
	portfolios  do: [:aPortfolioFiled |
		aPortfolioFiled  = aPortfolio  ifTrue:[
			acc:= false. 
					] ifFalse:[
				acc := acc and: (aPortfolioFiled  hasPortfolio:  aPortfolio). 
			]
		
		]! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:32:01' prior: 50677372!
hasPortfolio: aPortfolio
	|acc|
	acc := true. 
	portfolios  do: [:aPortfolioFiled |
		aPortfolioFiled  = aPortfolio  ifTrue:[
			acc:= false. 
					] ifFalse:[
				acc := acc and: (aPortfolioFiled  hasPortfolio:  aPortfolio). 
			]
		
		]
	! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:32:16' prior: 50677383!
hasPortfolio: aPortfolio
	|acc|
	acc := true. 
	portfolios  do: [:aPortfolioFiled |
		aPortfolioFiled  = aPortfolio  ifTrue:[
			acc:= false. 
					] ifFalse:[
				acc := acc and: (aPortfolioFiled  hasPortfolio:  aPortfolio). 
			]
		
		]
	^acc! !

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 16:32:34'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:32:34'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 16:32:34'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 16:32:34'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 16:32:34'!
FAILURE!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 16:32:41'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/17/2023 16:35:15' prior: 50677273!
addPortfolio: aPortfolioToAdd 
	aPortfolioToAdd  accounts do:[:anAccount |
		(self hasAccount: anAccount)  ifTrue:[
				self error: self class cannotPutTheSameAccountTwice 
			]
		]. 
	aPortfolioToAdd  portfolios do: [:anPortfolio|
		(self hasPortfolio:  anPortfolio )  ifTrue:[
				self error: self class cannotPutTheSamePortfolioTwice 
			]
		
		].
	portfolios  add: aPortfolioToAdd ! !

!testRun: #PortfolioTest #test00 stamp: 'jb 5/17/2023 16:35:16'!
PASSED!

!testRun: #PortfolioTest #test01AddigAnAccountToAPortfolioShouldChangeTheBalance stamp: 'jb 5/17/2023 16:35:16'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'jb 5/17/2023 16:35:16'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'jb 5/17/2023 16:35:16'!
PASSED!

!testRun: #PortfolioTest #test04AddingAPortfolioToAnEmptyPortfolioShouldMakeTheBalanceTheSame stamp: 'jb 5/17/2023 16:35:16'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'jb 5/17/2023 16:35:16'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'jb 5/17/2023 16:35:16'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'jb 5/17/2023 16:35:16'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'jb 5/17/2023 16:35:17'!
PASSED!

----QUIT----(17 May 2023 16:35:46) CuisUniversity-5706.image priorSource: 11013053!

----STARTUP---- (17 May 2023 16:36:18) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64 - Copy\CuisUniversity-5706.image!


----QUIT----(17 May 2023 16:36:36) CuisUniversity-5706.image priorSource: 11065963!

----STARTUP---- (18 May 2023 09:57:41) as /media/lorenz/64711b0a-ff0f-409d-96bb-a97d9ef48761/matienzos/isw1/imagen-cuis/portafolio/linux64/CuisUniversity-5706.image!


----End fileIn of /media/lorenz/64711b0a-ff0f-409d-96bb-a97d9ef48761/matienzos/isw1/imagen-cuis/portafolio/linux64/Portfolio.st----!

----End fileIn of /media/lorenz/64711b0a-ff0f-409d-96bb-a97d9ef48761/matienzos/isw1/imagen-cuis/portafolio/linux64/Portfolio-Ejercicio.st----!
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 09:59:34'!
test00newPortafolioHasBalanceOF0
	|portfolio |
	portfolio  :=  Portfolio  new.
	
	
	self assert: 0 equals: portfolio balance.  
	self assert:OrderedCollection  new equals:  portfolio accounts! !

!methodRemoval: PortfolioTest #test00 stamp: 'lp 5/18/2023 09:59:34'!
test00
	|portfolio |
	portfolio  :=  Portfolio  new.
	
	
	self assert: 0 equals: portfolio balance.  
	self assert:OrderedCollection  new equals:  portfolio accounts!
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 10:00:11'!
test01BalanceofPortafolioWithAnAccountIsTheAccoutnBalance
	|portfolio account  |
	portfolio  :=  Portfolio  new.
	account  := ReceptiveAccount new.

	Deposit register: 100 on: account. 
	portfolio addAcount: account .

	self assert: account balance equals: portfolio balance.  

	! !

!methodRemoval: PortfolioTest #test01 stamp: 'lp 5/18/2023 10:00:11'!
test01
	|portfolio account  |
	portfolio  :=  Portfolio  new.
	account  := ReceptiveAccount new.

	Deposit register: 100 on: account. 
	portfolio addAcount: account .

	self assert: account balance equals: portfolio balance.  

	!
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 10:01:28'!
test02ShouldBalanaceOfAPortafolioWithAnotherPortafaloioBeThatPortafolioBalance
	|portfolio1 portfolio2|
	portfolio1  := Portfolio  new. 
	portfolio2  := Portfolio  new. 
	portfolio1  addPortfolio:  portfolio1. 
	self assert:  portfolio1  balance  equals: portfolio2 balance ! !

!methodRemoval: PortfolioTest #test02 stamp: 'lp 5/18/2023 10:01:28'!
test02
	|portfolio1 portfolio2|
	portfolio1  := Portfolio  new. 
	portfolio2  := Portfolio  new. 
	portfolio1  addPortfolio:  portfolio1. 
	self assert:  portfolio1  balance  equals: portfolio2 balance !
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 10:03:04'!
test03ShouldBalanceOfPortafolioBeTheSumOfHIsBalanceAndItsInnerPortafolios
	|portfolio1 portfolio2  account1 account2  |
	portfolio1  :=  Portfolio  new.
	account1  := ReceptiveAccount new.
	account2 := ReceptiveAccount  new.

	Deposit  register:   50  on:  account2 .
	Deposit register: 100 on: account1. 
	portfolio1 addAcount: account1 .

	
	portfolio2  	:= Portfolio  new.
	portfolio2 addPortfolio: portfolio1 .
	portfolio2  addAcount: account2 .
	
	self assert:  150 equals: portfolio2  balance.  

	! !

!methodRemoval: PortfolioTest #test03 stamp: 'lp 5/18/2023 10:03:04'!
test03
	|portfolio1 portfolio2  account1 account2  |
	portfolio1  :=  Portfolio  new.
	account1  := ReceptiveAccount new.
	account2 := ReceptiveAccount  new.

	Deposit  register:   50  on:  account2 .
	Deposit register: 100 on: account1. 
	portfolio1 addAcount: account1 .

	
	portfolio2  	:= Portfolio  new.
	portfolio2 addPortfolio: portfolio1 .
	portfolio2  addAcount: account2 .
	
	self assert:  150 equals: portfolio2  balance.  

	!
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 10:03:32'!
test04ShouldNotPermitAddTheSameAccountTwice
	|portfolio1 account1 |
	portfolio1  :=  Portfolio  new.
	account1  := ReceptiveAccount new.
	

	
	Deposit register: 100 on: account1. 
	portfolio1 addAcount: account1 .
	
	
	self should: [	portfolio1  addAcount:  account1 . ] 
		raise:  Error
	 withExceptionDo: [:anError|
		self assert:   Portfolio errorMessageAlreadyExist equals: anError messageText . 			
		]  




	

	! !

!methodRemoval: PortfolioTest #test04 stamp: 'lp 5/18/2023 10:03:32'!
test04
	|portfolio1 account1 |
	portfolio1  :=  Portfolio  new.
	account1  := ReceptiveAccount new.
	

	
	Deposit register: 100 on: account1. 
	portfolio1 addAcount: account1 .
	
	
	self should: [	portfolio1  addAcount:  account1 . ] 
		raise:  Error
	 withExceptionDo: [:anError|
		self assert:   Portfolio errorMessageAlreadyExist equals: anError messageText . 			
		]  




	

	!
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 10:04:38'!
test05ShouldNotAddAPortafolioWIthAnAlreadyExistingAccount
	|portfolio1 account1 portfolio2 |
	portfolio1  :=  Portfolio  new.
	account1  := ReceptiveAccount new.
	

	
	Deposit register: 100 on: account1. 
	portfolio1 addAcount: account1 .
	
	portfolio2 := Portfolio  new. 
	portfolio2  addPortfolio:  portfolio1 .
		
	
	self should: [	portfolio2  addAcount:  account1 . ] 
		raise:  Error
	 withExceptionDo: [:anError|
		self assert:   Portfolio errorMessageAlreadyExist equals: anError messageText . 			
		]  




	

	! !

!methodRemoval: PortfolioTest #test05 stamp: 'lp 5/18/2023 10:04:38'!
test05
	|portfolio1 account1 portfolio2 |
	portfolio1  :=  Portfolio  new.
	account1  := ReceptiveAccount new.
	

	
	Deposit register: 100 on: account1. 
	portfolio1 addAcount: account1 .
	
	portfolio2 := Portfolio  new. 
	portfolio2  addPortfolio:  portfolio1 .
		
	
	self should: [	portfolio2  addAcount:  account1 . ] 
		raise:  Error
	 withExceptionDo: [:anError|
		self assert:   Portfolio errorMessageAlreadyExist equals: anError messageText . 			
		]  




	

	!

!testRun: #PortfolioTest #test00newPortafolioHasBalanceOF0 stamp: 'lp 5/18/2023 10:04:44'!
PASSED!

!testRun: #PortfolioTest #test01BalanceofPortafolioWithAnAccountIsTheAccoutnBalance stamp: 'lp 5/18/2023 10:04:44'!
PASSED!

!testRun: #PortfolioTest #test02ShouldBalanaceOfAPortafolioWithAnotherPortafaloioBeThatPortafolioBalance stamp: 'lp 5/18/2023 10:04:44'!
PASSED!

!testRun: #PortfolioTest #test03ShouldBalanceOfPortafolioBeTheSumOfHIsBalanceAndItsInnerPortafolios stamp: 'lp 5/18/2023 10:04:44'!
PASSED!

!testRun: #PortfolioTest #test04ShouldNotPermitAddTheSameAccountTwice stamp: 'lp 5/18/2023 10:04:44'!
PASSED!

!testRun: #PortfolioTest #test05ShouldNotAddAPortafolioWIthAnAlreadyExistingAccount stamp: 'lp 5/18/2023 10:04:44'!
FAILURE!

!testRun: #PortfolioTest #test05ShouldNotAddAPortafolioWIthAnAlreadyExistingAccount stamp: 'lp 5/18/2023 10:04:44'!
FAILURE!

!testRun: #PortfolioTest #test05ShouldNotAddAPortafolioWIthAnAlreadyExistingAccount stamp: 'lp 5/18/2023 10:05:18'!
FAILURE!

!testRun: #PortfolioTest #test05ShouldNotAddAPortafolioWIthAnAlreadyExistingAccount stamp: 'lp 5/18/2023 10:05:18'!
FAILURE!
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 10:08:35' prior: 50681740!
test01BalanceofPortafolioWithAnAccountIsTheAccoutnBalance
	|portfolio account  |
	portfolio  :=  Portfolio  new.
	account  := ReceptiveAccount new.

	Deposit register: 100 on: account. 
	portfolio addAccount: account .

	self assert: account balance equals: portfolio balance.  

	! !

!testRun: #PortfolioTest #test01BalanceofPortafolioWithAnAccountIsTheAccoutnBalance stamp: 'lp 5/18/2023 10:08:35'!
ERROR!

Object subclass: #Portfolio
	instanceVariableNames: 'balance accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lp 5/18/2023 10:09:35'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test00newPortafolioHasBalanceOF0 stamp: 'lp 5/18/2023 10:09:46'!
PASSED!

!testRun: #PortfolioTest #test01BalanceofPortafolioWithAnAccountIsTheAccoutnBalance stamp: 'lp 5/18/2023 10:09:48'!
ERROR!

!testRun: #PortfolioTest #test01BalanceofPortafolioWithAnAccountIsTheAccoutnBalance stamp: 'lp 5/18/2023 10:09:48'!
ERROR!

portfolios!
!Portfolio methodsFor: 'initializing' stamp: 'lp 5/18/2023 10:10:32' prior: 50681650 overrides: 16920235!
initialize
	balance  := 0. 
	accounts:= OrderedCollection  new.
	portfolios:= OrderedCollection  new.! !

!testRun: #PortfolioTest #test01BalanceofPortafolioWithAnAccountIsTheAccoutnBalance stamp: 'lp 5/18/2023 10:10:35'!
FAILURE!

!testRun: #PortfolioTest #test01BalanceofPortafolioWithAnAccountIsTheAccoutnBalance stamp: 'lp 5/18/2023 10:10:35'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 10:11:43' prior: 50681250!
addAccount: anAccount 
	
	(self hasAccount:  anAccount)  ifFalse:  [
			balance := balance + anAccount balance.
			accounts add: anAccount. 
		]ifTrue:[
			self error: self class cannotPutTheSameAccountTwice 
		]! !

!testRun: #PortfolioTest #test01BalanceofPortafolioWithAnAccountIsTheAccoutnBalance stamp: 'lp 5/18/2023 10:11:46'!
PASSED!

!testRun: #PortfolioTest #test02ShouldBalanaceOfAPortafolioWithAnotherPortafaloioBeThatPortafolioBalance stamp: 'lp 5/18/2023 10:11:49'!
PASSED!

!testRun: #PortfolioTest #test03ShouldBalanceOfPortafolioBeTheSumOfHIsBalanceAndItsInnerPortafolios stamp: 'lp 5/18/2023 10:11:50'!
PASSED!

!testRun: #PortfolioTest #test04ShouldNotPermitAddTheSameAccountTwice stamp: 'lp 5/18/2023 10:11:52'!
PASSED!

!testRun: #PortfolioTest #test05ShouldNotAddAPortafolioWIthAnAlreadyExistingAccount stamp: 'lp 5/18/2023 10:11:53'!
FAILURE!

!testRun: #PortfolioTest #test05ShouldNotAddAPortafolioWIthAnAlreadyExistingAccount stamp: 'lp 5/18/2023 10:11:53'!
FAILURE!
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 10:12:44' prior: 50681781!
test03ShouldBalanceOfPortafolioBeTheSumOfHIsBalanceAndItsInnerPortafolios
	|portfolio1 portfolio2  account1 account2  |
	portfolio1  :=  Portfolio  new.
	account1  := ReceptiveAccount new.
	account2 := ReceptiveAccount  new.

	Deposit  register:   50  on:  account2 .
	Deposit register: 100 on: account1. 
	portfolio1 addAccount: account1 .

	
	portfolio2  	:= Portfolio  new.
	portfolio2 addPortfolio: portfolio1 .
	portfolio2  addAcount: account2 .
	
	self assert:  150 equals: portfolio2  balance.  

	! !
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 10:12:46' prior: 50682006!
test03ShouldBalanceOfPortafolioBeTheSumOfHIsBalanceAndItsInnerPortafolios
	|portfolio1 portfolio2  account1 account2  |
	portfolio1  :=  Portfolio  new.
	account1  := ReceptiveAccount new.
	account2 := ReceptiveAccount  new.

	Deposit  register:   50  on:  account2 .
	Deposit register: 100 on: account1. 
	portfolio1 addAccount: account1 .

	
	portfolio2  	:= Portfolio  new.
	portfolio2 addPortfolio: portfolio1 .
	portfolio2  addAccount: account2 .
	
	self assert:  150 equals: portfolio2  balance.  

	! !

!testRun: #PortfolioTest #test03ShouldBalanceOfPortafolioBeTheSumOfHIsBalanceAndItsInnerPortafolios stamp: 'lp 5/18/2023 10:12:47'!
PASSED!

!testRun: #PortfolioTest #test00newPortafolioHasBalanceOF0 stamp: 'lp 5/18/2023 10:12:47'!
PASSED!

!testRun: #PortfolioTest #test01BalanceofPortafolioWithAnAccountIsTheAccoutnBalance stamp: 'lp 5/18/2023 10:12:47'!
PASSED!

!testRun: #PortfolioTest #test02ShouldBalanaceOfAPortafolioWithAnotherPortafaloioBeThatPortafolioBalance stamp: 'lp 5/18/2023 10:12:47'!
PASSED!

!testRun: #PortfolioTest #test03ShouldBalanceOfPortafolioBeTheSumOfHIsBalanceAndItsInnerPortafolios stamp: 'lp 5/18/2023 10:12:47'!
PASSED!

!testRun: #PortfolioTest #test04ShouldNotPermitAddTheSameAccountTwice stamp: 'lp 5/18/2023 10:12:47'!
PASSED!

!testRun: #PortfolioTest #test05ShouldNotAddAPortafolioWIthAnAlreadyExistingAccount stamp: 'lp 5/18/2023 10:12:47'!
FAILURE!

!testRun: #PortfolioTest #test05ShouldNotAddAPortafolioWIthAnAlreadyExistingAccount stamp: 'lp 5/18/2023 10:12:47'!
FAILURE!
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 10:13:07' prior: 50681815!
test04ShouldNotPermitAddTheSameAccountTwice
	|portfolio1 account1 |
	portfolio1  :=  Portfolio  new.
	account1  := ReceptiveAccount new.
	

	
	Deposit register: 100 on: account1. 
	portfolio1 addAccount: account1 .
	
	
	self should: [	portfolio1  addAccount:  account1 . ] 
		raise:  Error
	 withExceptionDo: [:anError|
		self assert:   Portfolio errorMessageAlreadyExist equals: anError messageText . 			
		]  




	

	! !
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 10:13:10' prior: 50681845!
test05ShouldNotAddAPortafolioWIthAnAlreadyExistingAccount
	|portfolio1 account1 portfolio2 |
	portfolio1  :=  Portfolio  new.
	account1  := ReceptiveAccount new.
	

	
	Deposit register: 100 on: account1. 
	portfolio1 addAccount: account1 .
	
	portfolio2 := Portfolio  new. 
	portfolio2  addPortfolio:  portfolio1 .
		
	
	self should: [	portfolio2  addAcount:  account1 . ] 
		raise:  Error
	 withExceptionDo: [:anError|
		self assert:   Portfolio errorMessageAlreadyExist equals: anError messageText . 			
		]  




	

	! !
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 10:13:12' prior: 50682092!
test05ShouldNotAddAPortafolioWIthAnAlreadyExistingAccount
	|portfolio1 account1 portfolio2 |
	portfolio1  :=  Portfolio  new.
	account1  := ReceptiveAccount new.
	

	
	Deposit register: 100 on: account1. 
	portfolio1 addAccount: account1 .
	
	portfolio2 := Portfolio  new. 
	portfolio2  addPortfolio:  portfolio1 .
		
	
	self should: [	portfolio2  addAccount:  account1 . ] 
		raise:  Error
	 withExceptionDo: [:anError|
		self assert:   Portfolio errorMessageAlreadyExist equals: anError messageText . 			
		]  




	

	! !

!testRun: #PortfolioTest #test05ShouldNotAddAPortafolioWIthAnAlreadyExistingAccount stamp: 'lp 5/18/2023 10:13:13'!
FAILURE!

!methodRemoval: Portfolio #addAcount: stamp: 'lp 5/18/2023 10:15:42'!
addAcount: account 
	accounts  do:[:anAccount |
		anAccount = account ifTrue:[
			self error: self class errorMessageAlreadyExist .
			]
		].
	balance := balance + account balance.
	accounts add: account. !

----STARTUP---- (18 May 2023 12:31:33) as /media/lorenz/64711b0a-ff0f-409d-96bb-a97d9ef48761/matienzos/isw1/imagen-cuis/portafolio/linux64/CuisUniversity-5706.image!


----End fileIn of /media/lorenz/64711b0a-ff0f-409d-96bb-a97d9ef48761/matienzos/isw1/imagen-cuis/portafolio/linux64/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test00 stamp: 'lp 5/18/2023 12:32:15'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'lp 5/18/2023 12:32:15'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lp 5/18/2023 12:32:15'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lp 5/18/2023 12:32:15'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lp 5/18/2023 12:32:15'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lp 5/18/2023 12:32:15'!
FAILURE!

!testRun: #PortfolioTest #test00 stamp: 'lp 5/18/2023 12:32:21'!
ERROR!
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 12:32:57' prior: 50681236!
test00
	|portfolio |
	portfolio  :=  Portfolio  new.
	
	
	self assert: 0 equals: portfolio balance.  
	self assert:OrderedCollection  new equals:  portfolio balance! !

!testRun: #PortfolioTest #test00 stamp: 'lp 5/18/2023 12:32:59'!
FAILURE!
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 12:33:13' prior: 50681636!
test00
	|portfolio |
	portfolio  :=  Portfolio  new.
	
	
	self assert: 0 equals: portfolio balance.  
	self assert:OrderedCollection  new equals:  portfolio balance
! !
!PortfolioTest methodsFor: 'test' stamp: 'lp 5/18/2023 12:33:20' prior: 50681647!
test00
	|portfolio |
	portfolio  :=  Portfolio  new.
	
	
	self assert: 0 equals: portfolio balance.  ! !

!testRun: #PortfolioTest #test00 stamp: 'lp 5/18/2023 12:33:21'!
PASSED!

!testRun: #PortfolioTest #test00 stamp: 'lp 5/18/2023 12:33:21'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'lp 5/18/2023 12:33:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'lp 5/18/2023 12:33:21'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'lp 5/18/2023 12:33:21'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'lp 5/18/2023 12:33:21'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'lp 5/18/2023 12:33:21'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'lp 5/18/2023 12:33:21'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'lp 5/18/2023 12:34:09'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'lp 5/18/2023 12:34:09'!
FAILURE!

!classRemoval: #ReceptiveAccount stamp: 'lp 5/18/2023 12:39:46'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'lp 5/18/2023 12:39:46'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'lp 5/18/2023 12:39:46'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'lp 5/18/2023 12:39:47'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'lp 5/18/2023 12:39:47'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'lp 5/18/2023 12:39:47'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'lp 5/18/2023 12:39:47'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /media/lorenz/64711b0a-ff0f-409d-96bb-a97d9ef48761/matienzos/isw1/RepoCatedra/2023-1c/06-Portfolio1/Portfolio-Ejercicio.st----!
!ReceptiveAccount methodsFor: 'balance' stamp: 'lp 5/18/2023 12:40:43' prior: 50681943!
balance

	^transactions sum: [ :aTransaction | aTransaction affetBalance: self ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'lp 5/18/2023 12:41:05' prior: 50681958!
balance

	^transactions inject:0 into:[ :aTransaction | aTransaction affetBalance: self ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/18/2023 12:41:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 12:41:06'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 12:41:06'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/18/2023 12:41:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/18/2023 12:41:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/18/2023 12:41:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/18/2023 12:41:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 12:41:08'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'lp 5/18/2023 12:41:48' prior: 50681964!
balance

	^transactions inject:0 into:[:aBalance :aTransaction | aTransaction affetBalance: aBalance ].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/18/2023 12:41:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 12:41:49'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 12:41:49'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/18/2023 12:41:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/18/2023 12:41:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/18/2023 12:41:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/18/2023 12:41:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 12:41:52'!
ERROR!
!Deposit methodsFor: 'balance' stamp: 'lp 5/18/2023 12:42:06'!
affetBalance: aBalance 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'balance' stamp: 'lp 5/18/2023 12:42:36' prior: 50682036!
affetBalance: aBalance 
	^aBalance + self value! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 12:42:41'!
ERROR!
!Withdraw methodsFor: 'balance' stamp: 'lp 5/18/2023 12:42:48'!
affetBalance: aBalance 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'balance' stamp: 'lp 5/18/2023 12:42:58' prior: 50682049!
affetBalance: aBalance 
	^aBalance - self value! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 12:43:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 12:43:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/18/2023 12:43:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 12:43:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 12:43:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/18/2023 12:43:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/18/2023 12:43:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/18/2023 12:43:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/18/2023 12:43:43'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'lp 5/18/2023 12:43:54'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lp 5/18/2023 12:45:02'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'lp 5/18/2023 12:44:57'!
test00PortofolioShouldStartWithBalanceIn0

|portfolio|
portfolio := Portfolio new.

self assert:0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 12:45:05'!
ERROR!
!Portfolio methodsFor: 'no messages' stamp: 'lp 5/18/2023 12:45:34'!
balance
	^0! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 12:45:37'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:46:44'!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance

|portfolio|
portfolio := Portfolio new.

self assert:0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:47:15' prior: 50682128!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance

|portfolio account|

portfolio := Portfolio new.
account := ReceptiveAccount 


self assert:0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:47:55' prior: 50682136!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance

|portfolio account deposit |

portfolio := Portfolio new.
account := ReceptiveAccount new.
deposit := Deposit register: 100 on: account.


self assert:0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:48:10' prior: 50682146!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance

|portfolio account deposit |

portfolio := Portfolio new.
account := ReceptiveAccount new.
Deposit register: 100 on: account.


self assert:0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:48:20' prior: 50682157!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance

|portfolio account |

portfolio := Portfolio new.
account := ReceptiveAccount new.
Deposit register: 100 on: account.


self assert:100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 12:48:21'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:48:48' prior: 50682168!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance

|portfolio account |

portfolio := Portfolio new.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.


self assert:100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 12:48:50'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 12:48:59'!
addAccount: account 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lp 5/18/2023 12:49:16'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 12:49:14' prior: 50682198!
addAccount: account 
	balance := account balance.! !

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 12:49:20'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:49:50' overrides: 16920235!
initialize

	balance := 0! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:49:56' prior: 50682121!
balance
	^balance! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:50:20' prior: 50682183!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance

|portfolio account |

portfolio := Portfolio initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.


self assert:100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 12:50:20'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:50:32' prior: 50682227!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.


self assert:100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 12:50:32'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 12:50:32'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 12:50:32'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:51:15'!
test02addAccountMakePortfolioBalanceAddAccountBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.


self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:51:50' prior: 50682266!
test02addAccountMakePortfolioBalanceAddAccountBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

account := ReceptiveAccount new.
Deposit register: 50 on: account.

portfolio addAccount: account.


self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:52:15' prior: 50682278!
test02addAccountMakePortfolioBalanceAddAccountBalance

|portfolio account anotherAccount |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio addAccount: account.

anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: account.

portfolio addAccount: account.


self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:52:22' prior: 50682292!
test02addAccountMakePortfolioBalanceAddAccountBalance

|portfolio account anotherAccount |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio addAccount: account.

anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: account.

portfolio addAccount: anotherAccount .


self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:52:25' prior: 50682308!
test02addAccountMakePortfolioBalanceAddAccountBalance

|portfolio account anotherAccount |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio addAccount: account.

anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: account.

portfolio addAccount: anotherAccount .


self assert:150 equals: portfolio balance.! !

!testRun: #PortfolioTest #test02addAccountMakePortfolioBalanceAddAccountBalance stamp: 'lp 5/18/2023 12:52:26'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:52:33' prior: 50682324!
test02addAccountMakePortfolioBalanceAddAccountBalance

|portfolio account anotherAccount |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio addAccount: account.

anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: account.
portfolio addAccount: anotherAccount .


self assert:150 equals: portfolio balance.! !

!testRun: #PortfolioTest #test02addAccountMakePortfolioBalanceAddAccountBalance stamp: 'lp 5/18/2023 12:52:35'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:54:03' prior: 50682344!
test02addAccountMakePortfolioBalanceAddAccountBalance

|portfolio account anotherAccount |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio addAccount: account.

anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio addAccount: anotherAccount .


self assert:150 equals: portfolio balance.! !

!testRun: #PortfolioTest #test02addAccountMakePortfolioBalanceAddAccountBalance stamp: 'lp 5/18/2023 12:54:04'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 12:54:29' prior: 50682210!
addAccount: account 
	balance := balance + account balance.! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 12:54:30'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 12:54:30'!
PASSED!

!testRun: #PortfolioTest #test02addAccountMakePortfolioBalanceAddAccountBalance stamp: 'lp 5/18/2023 12:54:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:56:16'!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance

|portfolio account anotherAccount |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio addAccount: account.

anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio addAccount: anotherAccount .


self assert:150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:57:29' prior: 50682399!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance

|portfolio account portafolioToAdd|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

portfolio := Portfolio new initialize.
portfolio addPortafolio: portafolioToAdd .


self assert:150 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 12:57:32'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:57:38'!
addPortafolio: portafolioToAdd 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 12:58:14' prior: 50682436!
addPortafolio: portafolioToAdd 
	balance := portafolioToAdd balance.! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 12:58:15'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 12:58:15'!
PASSED!

!testRun: #PortfolioTest #test02addAccountMakePortfolioBalanceAddAccountBalance stamp: 'lp 5/18/2023 12:58:15'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 12:58:15'!
FAILURE!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 12:58:15'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:58:22' prior: 50682416!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance

|portfolio account portafolioToAdd|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

portfolio := Portfolio new initialize.
portfolio addPortafolio: portafolioToAdd .


self assert:10 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:58:23' prior: 50682467!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance

|portfolio account portafolioToAdd|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

portfolio := Portfolio new initialize.
portfolio addPortafolio: portafolioToAdd .


self assert:100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 12:58:24'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 12:58:24'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 12:58:24'!
PASSED!

!testRun: #PortfolioTest #test02addAccountMakePortfolioBalanceAddAccountBalance stamp: 'lp 5/18/2023 12:58:24'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 12:58:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:59:27'!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

portfolio := Portfolio new initialize.
portfolio addPortafolio: portafolioToAdd .


self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 12:59:39'!
test02addAccountSHouldAddHisBalance

|portfolio account anotherAccount |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio addAccount: account.

anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio addAccount: anotherAccount .


self assert:150 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test02addAccountMakePortfolioBalanceAddAccountBalance stamp: 'lp 5/18/2023 12:59:42'!
test02addAccountMakePortfolioBalanceAddAccountBalance

|portfolio account anotherAccount |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio addAccount: account.

anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio addAccount: anotherAccount .


self assert:150 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:00:16' prior: 50682519!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd anotherAccount|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio addAccount: anotherAccount .

portfolio := Portfolio new initialize.
portfolio addPortafolio: portafolioToAdd .


self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:00:36' prior: 50682565!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd anotherAccount|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

portfolio := Portfolio new initialize.
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio addAccount: anotherAccount .


portfolio addPortafolio: portafolioToAdd .


self assert:150 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:00:37'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:00:53' prior: 50682441!
addPortafolio: portafolioToAdd 
	balance := balance + portafolioToAdd balance.! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:00:56'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:00:56'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:00:56'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:00:56'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:00:56'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lp 5/18/2023 13:01:39'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:01:46' prior: 50682383!
addAccount: account 
	accounts add: account
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:02:07' prior: 50682219 overrides: 16920235!
initialize
	accounts:= OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:02:51' prior: 50682223!
balance
	^ accounts sum:[:anAccount | anAccount balance] ifEmpty: [0]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:02:52'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:02:52'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:02:52'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:02:52'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:02:52'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:03:34' prior: 50682649!
balance
	^ accounts sum:[:anAccount | anAccount balance] ifEmpty: [0] ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:03:43'!
_test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd anotherAccount|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

portfolio := Portfolio new initialize.
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio addAccount: anotherAccount .


portfolio addPortafolio: portafolioToAdd .


self assert:150 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:03:46'!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd anotherAccount|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

portfolio := Portfolio new initialize.
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio addAccount: anotherAccount .


portfolio addPortafolio: portafolioToAdd .


self assert:150 equals: portfolio balance.!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:03:55'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:03:55'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lp 5/18/2023 13:04:24'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance accounts portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:04:29' prior: 50682644 overrides: 16920235!
initialize
	accounts:= OrderedCollection new.
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:04:43' prior: 50682606!
addPortafolio: portafolioToAdd 
	portfolio := portafolioToAdd ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:05:00' prior: 50682673!
balance
	^ accounts sum:[:anAccount | anAccount balance] ifEmpty: [0] + portfolio  balance! !

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:05:04'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:05:04'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:05:34' prior: 50682738!
addPortafolio: portafolioToAdd 
	balance := balance +portafolioToAdd ! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:05:35' prior: 50682758!
addPortafolio: portafolioToAdd 
	balance := balance + portafolioToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:05:36'!
ERROR!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:05:36'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:05:36'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:05:36'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:05:55' prior: 50682743!
balance
	^ accounts sum:[:anAccount | anAccount balance] ifEmpty: [0] + balance! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:06:04' prior: 50682733 overrides: 16920235!
initialize
	accounts:= OrderedCollection new.
	balance := 0.
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:06:05'!
ERROR!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:06:05'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:06:05'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:06:05'!
ERROR!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:06:08'!
ERROR!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:06:23'!
ERROR!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:07:02'!
ERROR!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:07:02'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:07:02'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:07:02'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:07:19' prior: 50682784!
balance
	^( accounts sum:[:anAccount | anAccount balance] ifEmpty: [0] ) + balance! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:07:19'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:07:19'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:07:19'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:07:19'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:07:19'!
ERROR!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:07:42'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:07:43'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:07:45'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:07:46'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:07:46'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:08:04' prior: 50682763!
addPortafolio: portafolioToAdd 
	balance := balance + portafolioToAdd balance! !

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:08:07'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:08:07'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:08:07'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:08:07'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:08:07'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:08:13'!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd anotherAccount|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

portfolio := Portfolio new initialize.
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio addAccount: anotherAccount .


portfolio addPortafolio: portafolioToAdd .


self assert:150 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:08:13'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:08:13'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:08:13'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:08:13'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:08:13'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:08:13'!
PASSED!

!methodRemoval: PortfolioTest #_test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:08:18'!
_test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd anotherAccount|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

portfolio := Portfolio new initialize.
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio addAccount: anotherAccount .


portfolio addPortafolio: portafolioToAdd .


self assert:150 equals: portfolio balance.!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:09:00' prior: 50682878!
addPortafolio: portafolioToAdd 
	balance := portafolioToAdd balance! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:09:01'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:09:01'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:09:01'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:09:01'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:09:01'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:11:20' prior: 50682962!
addPortafolio: portafolioToAdd 
	balance := 0! !

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:11:23'!
FAILURE!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:11:23'!
FAILURE!

( accounts sum:[:anAccount | anAccount balance] ifEmpty: [0] )!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:13:13' prior: 50682986!
addPortafolio: portafolioToAdd 
	balance := portafolioToAdd balance! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:13:14'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:13:14'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:13:14'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:13:14'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:13:14'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:14:14' prior: 50682903!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd anotherAccount|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

portfolio := Portfolio new initialize.
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio addAccount: anotherAccount.


portfolio addPortafolio: portafolioToAdd .


self assert:150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:15:25' prior: 50683025!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd anotherAccount secondAccount secondPortafolioToAdd |

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd addAccount: secondAccount.

portfolio := Portfolio new initialize.


portfolio addPortafolio: portafolioToAdd .
portfolio addPortafolio: secondPortafolioToAdd .



self assert:150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:15:52' prior: 50683044!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd  secondAccount secondPortafolioToAdd |

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd addAccount: secondAccount.

portfolio := Portfolio new initialize.


portfolio addPortafolio: portafolioToAdd .
portfolio addPortafolio: secondPortafolioToAdd .



self assert:150 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:15:53'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:16:00' prior: 50683068!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd  secondAccount secondPortafolioToAdd |

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd addAccount: secondAccount.

portfolio := Portfolio new initialize.


portfolio addPortafolio: portafolioToAdd .
portfolio addPortafolio: secondPortafolioToAdd .



self assert:200 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:16:01'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'balance accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'lp 5/18/2023 13:16:22'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:16:36' prior: 50682791 overrides: 16920235!
initialize
	accounts:= OrderedCollection new.
	portfolios:=OrderedCollection new.
	balance := 0.
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:16:51' prior: 50683001!
addPortafolio: portafolioToAdd 
	portfolios add: portafolioToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:16:51'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:16:51'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:16:51'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:16:51'!
FAILURE!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:16:51'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:17:10' prior: 50682833!
balance
	^( accounts sum:[:anAccount | anAccount balance] ifEmpty: [0] ) + ( portfolios sum:[:anAccount | anAccount balance] ifEmpty: [0] )! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:17:11'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:17:11'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:17:11'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:17:11'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:17:11'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:21:18'!
test05addAAccountAlreadyInThePortfolioAccountsProducesError
|portfolio account portafolioToAdd  secondAccount secondPortafolioToAdd |

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd addAccount: account.

secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd addAccount: secondAccount.

portfolio := Portfolio new initialize.


portfolio addPortafolio: portafolioToAdd .
portfolio addPortafolio: secondPortafolioToAdd .



self assert:200 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:21:55' prior: 50683191!
test05addAAccountAlreadyInThePortfolioAccountsProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account:=


self assert:200 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:22:06' prior: 50683215!
test05addAAccountAlreadyInThePortfolioAccountsProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.


self assert:200 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:24:28' prior: 50683224!
test05addAAccountAlreadyInThePortfolioAccountsProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert: anError messageText equals: Portfolio cannotAddAlreadyExistingAccount ] .


self assert:200 equals: portfolio balance.! !

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:24:29'!
FAILURE!
!Portfolio class methodsFor: 'no messages' stamp: 'lp 5/18/2023 13:24:59'!
cannotAddAlreadyExistingAccount
^'The Account is Already in the Portfolio'! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:25:04'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:25:04'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:25:04'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:25:04'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:25:04'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:25:04'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:25:04'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:27:14' prior: 50682638!
addAccount: accountToAdd 
	accounts detect: [:account| account = accountToAdd] ifFound:[self error: self class cannotAddAlreadyExistingAccount ]  ifNone: [accounts add: accountToAdd]
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:27:16'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:27:16'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:27:16'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:27:16'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:27:16'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:27:16'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:27:16'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:28:03'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:28:18'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:28:18'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:28:54' prior: 50683235!
test05addAAccountAlreadyInThePortfolioAccountsProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .


self assert:200 equals: portfolio balance.! !

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:28:55'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:29:06'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:31:09'!
FAILURE!

account = accountToAdd!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:32:38'!
FAILURE!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:33:03'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:33:03'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:33:03'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:33:03'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:33:03'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:33:03'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:33:03'!
FAILURE!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:33:07'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:33:07'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:33:07'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:33:07'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:33:07'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:33:07'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:33:07'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:33:59' prior: 50683288!
addAccount: accountToAdd 
	accounts detect: [:account| account = accountToAdd] ifFound:[^self error: self class cannotAddAlreadyExistingAccount ]  ifNone: [accounts add: accountToAdd]
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:34:01'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:34:01'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:34:01'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:34:01'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:34:01'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:34:01'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:34:01'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:34:06' prior: 50683423!
addAccount: accountToAdd 
	accounts detect: [:account| account = accountToAdd] ifFound:[self error: self class cannotAddAlreadyExistingAccount ]  ifNone: [accounts add: accountToAdd]
	
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/18/2023 13:34:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 13:34:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/18/2023 13:34:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/18/2023 13:34:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/18/2023 13:34:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/18/2023 13:34:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/18/2023 13:34:14'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:34:25'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:36:22'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:36:43' prior: 50683458!
addAccount: accountToAdd 
	accounts detect: [:account| account = accountToAdd]ifFound:[self error: self class cannotAddAlreadyExistingAccount ]ifNone: [accounts add: accountToAdd]
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:36:44'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:36:44'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:36:44'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:36:44'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:36:44'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:36:44'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:36:44'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:36:53' prior: 50683501!
addAccount: accountToAdd 
	accounts detect: [:account| account = accountToAdd]ifFound:[]ifNone: [accounts add: accountToAdd]
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:36:54'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:36:54'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:36:54'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:36:54'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:36:54'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:36:54'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:36:54'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:37:09' prior: 50683536!
addAccount: accountToAdd 
	accounts detect: [:account| account = accountToAdd]ifFound:[]ifNone:[]
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:37:09'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:37:09'!
FAILURE!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:37:09'!
FAILURE!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:37:09'!
FAILURE!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:37:09'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:37:09'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:37:19' prior: 50683570!
addAccount: accountToAdd 
	accounts detect: [:account| account = accountToAdd]ifFound:[]ifNone: [accounts add: accountToAdd]
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:37:20'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:37:20'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:37:20'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:37:20'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:37:20'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:37:20'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:37:20'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:37:34' prior: 50683599!
addAccount: accountToAdd 
	accounts detect: [:account| account = accountToAdd]
	ifFound:[]
	ifNone: [accounts add: accountToAdd]
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:37:37' prior: 50683633!
addAccount: accountToAdd 
	accounts detect: [:account| account = accountToAdd]
	ifFound:[]
	ifNone: [accounts add: accountToAdd].
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:37:58' prior: 50683640!
addAccount: accountToAdd 
	accounts detect: [:account| account = accountToAdd]
	ifNone: [accounts add: accountToAdd].

	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:38:01' prior: 50683647!
addAccount: accountToAdd 
	accounts detect: [:account| account = accountToAdd]
	ifNone: [accounts add: accountToAdd].
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:38:15' prior: 50683654!
addAccount: accountToAdd 
	accounts detect: [:account| (account = accountToAdd) not]
	ifNone: [accounts add: accountToAdd].
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:38:18' prior: 50683661!
addAccount: accountToAdd 
	accounts detect: [:account| (account = accountToAdd) not]
	ifNone: [accounts add: accountToAdd].
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:38:38' prior: 50683668!
addAccount: accountToAdd 
	accounts detect: [:account| (account = accountToAdd) not]
	ifNone: [].
	accounts add: accountToAdd
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:38:47' prior: 50683675!
addAccount: accountToAdd 
	accounts detect: [:account| (account = accountToAdd) not]
	ifNone: [self error: self class cannotAddAlreadyExistingAccount ].
	accounts add: accountToAdd
	
	
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:38:48'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:38:48'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:38:48'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:38:48'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:38:48'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:38:48'!
ERROR!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:39:00'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:39:02'!
ERROR!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:39:02'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:39:18' prior: 50683682!
addAccount: accountToAdd 
	accounts detect:[:account| (account = accountToAdd) not]
	ifNone: [self error: self class cannotAddAlreadyExistingAccount ].
	accounts add: accountToAdd
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:40:19' prior: 50683725!
addAccount: accountToAdd 
	accounts detect:[:account| (account = accountToAdd) not]
	ifFound: [self error: self class cannotAddAlreadyExistingAccount ]
	ifNone:[accounts add: accountToAdd]
	
	
	
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:40:20'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:40:20'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:40:20'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:40:20'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:40:20'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:40:20'!
FAILURE!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:40:23'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:41:35' prior: 50683734!
addAccount: accountToAdd 
	accounts detect:[:account| account = accountToAdd]
	ifFound: [self error: self class cannotAddAlreadyExistingAccount ]
	ifNone:[accounts add: accountToAdd]
	
	
	
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:41:37'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:41:37'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:41:37'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:41:37'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:41:37'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:41:37'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:41:37'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:42:21' prior: 50683769!
addAccount: accountToAdd 
	accounts detect:[| account | account = accountToAdd]
	ifFound: [self error: self class cannotAddAlreadyExistingAccount ]
	ifNone:[accounts add: accountToAdd]
	
	
	
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:42:23'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:42:23'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:42:23'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:42:23'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:42:23'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:42:23'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:42:58' prior: 50683805!
addAccount: accountToAdd 
	accounts detect:[:account| ( account = accountToAdd)]
	ifFound: [self error: self class cannotAddAlreadyExistingAccount ]
	ifNone:[accounts add: accountToAdd]
	
	
	
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:42:59'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:42:59'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:42:59'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:42:59'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:42:59'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:42:59'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:42:59'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:43:10' prior: 50683837!
addAccount: accountToAdd 
	accounts detect:[:account| ( account = accountToAdd)]
	ifFound:[self error: self class cannotAddAlreadyExistingAccount ]
	ifNone:[accounts add: accountToAdd]
	
	
	
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:43:11'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:43:11'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:43:11'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:43:11'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:43:11'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:43:11'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:43:11'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 13:45:39' prior: 50683873!
addAccount: accountToAdd 
	accounts detect:[:account| ( account = accountToAdd)]
	ifFound:[:accoutn | self error: self class cannotAddAlreadyExistingAccount ]
	ifNone:[accounts add: accountToAdd]
	
	
	
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:45:40'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:45:40'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:45:40'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:45:40'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:45:40'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:45:40'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:45:40'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 13:45:48' prior: 50683336!
test05addAAccountAlreadyInThePortfolioAccountsProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:45:49'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 13:45:49'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 13:45:49'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 13:45:49'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 13:45:49'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 13:45:49'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 13:45:49'!
PASSED!

----SNAPSHOT----(18 May 2023 13:45:54) CuisUniversity-5706.image priorSource: 11186107!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:08:15'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:08:15'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:08:15'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:08:15'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:08:15'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:08:15'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:11:39'!
test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:12:08' prior: 50684014!
test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:12:30' prior: 50684031!
test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:12:38' prior: 50684048!
test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortafolio addAccount: account.
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:13:07' prior: 50684066!
test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortafolio addAccount: account.
portfolio addPortafolio: innerPortafolio .
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:13:09'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:13:45'!
hasAccount: accountToAdd

	^ accounts detect:[:account| ( account = accountToAdd)]
	ifFound:[:accoutn | self error: self class cannotAddAlreadyExistingAccount ]
	ifNone:[accounts add: accountToAdd]! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:13:45' prior: 50683909!
addAccount: accountToAdd 
	self hasAccount: accountToAdd
	
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:14:39' prior: 50684117!
addAccount: accountToAdd 
	self hasAccount: accountToAdd.
	portfolios do:[:innerPorfolio| innerPorfolio hasAccount: accountToAdd ]
	
	
	
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:14:43'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:14:43'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:16:34' prior: 50684122!
addAccount: accountToAdd 
	(self hasAccount: accountToAdd) 
	ifTrue:[ self error: self class cannotAddAlreadyExistingAccount ] 
	ifFalse: [].
	portfolios do:[:innerPorfolio| innerPorfolio hasAccount: accountToAdd ]
	
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:16:47' prior: 50684156!
addAccount: accountToAdd 
	(self hasAccount: accountToAdd) 
	ifTrue:[ self error: self class cannotAddAlreadyExistingAccount ] 
	ifFalse: [portfolios do:[:innerPorfolio| innerPorfolio hasAccount: accountToAdd ]].
	
	
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:17:19' prior: 50684108!
hasAccount: accountToAdd

	^ accounts detect:[:account| ( account = accountToAdd)]
	ifFound:[:accoutn | ^true]
	ifNone:[^false]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:17:20'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:17:20'!
FAILURE!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:17:20'!
FAILURE!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:17:20'!
FAILURE!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:17:20'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:17:20'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:17:20'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:18:03' prior: 50684166!
addAccount: accountToAdd 
	(self hasAccount: accountToAdd) 
	ifTrue:[ self error: self class cannotAddAlreadyExistingAccount ] 
	ifFalse: [portfolios do:[:innerPorfolio| innerPorfolio hasAccount: accountToAdd ]].
	accounts add: accountToAdd 
	
	
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:18:04' prior: 50684210!
addAccount: accountToAdd 
	(self hasAccount: accountToAdd) 
	ifTrue:[ self error: self class cannotAddAlreadyExistingAccount ] 
	ifFalse: [portfolios do:[:innerPorfolio| innerPorfolio hasAccount: accountToAdd ]].
	accounts add: accountToAdd.
	
	
	
	
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:18:05'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:18:05'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:18:05'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:18:05'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:18:05'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:18:05'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:18:05'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:18:05'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:20:51' prior: 50684221!
addAccount: accountToAdd 
	(self hasAccount: accountToAdd) 
	ifTrue:[ self error: self class cannotAddAlreadyExistingAccount ] 
	ifFalse: [|acc|
		acc:=true.
		portfolios do:[:innerPorfolio| acc := acc and:( innerPorfolio hasAccount: accountToAdd) ].
		acc ifTrue:[self error: self class cannotAddAlreadyExistingAccount]
			ifFalse:[accounts add: accountToAdd]].
		
	
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:21:04' prior: 50684263!
addAccount: accountToAdd 
	(self hasAccount: accountToAdd) 
	ifTrue:[ self error: self class cannotAddAlreadyExistingAccount ] 
	ifFalse: [|acc|
		acc:=false.
		portfolios do:[:innerPorfolio| acc := acc and:( innerPorfolio hasAccount: accountToAdd) ].
		acc ifTrue:[self error: self class cannotAddAlreadyExistingAccount]
			ifFalse:[accounts add: accountToAdd]].
		
	
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:21:18' prior: 50684278!
addAccount: accountToAdd 
	(self hasAccount: accountToAdd) 
	ifTrue:[ self error: self class cannotAddAlreadyExistingAccount ] 
	ifFalse: [|acc|
		acc:=false.
		portfolios do:[:innerPorfolio| acc := acc or:( innerPorfolio hasAccount: accountToAdd) ].
		acc ifTrue:[self error: self class cannotAddAlreadyExistingAccount]
			ifFalse:[accounts add: accountToAdd]].
		
	
	
	
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:21:19'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:21:19'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:21:19'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:21:19'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:21:19'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:21:19'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:21:19'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:21:51'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:21:51'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:21:51'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:21:51'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:21:51'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:21:51'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:21:51'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:23:32'!
test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError
|portfolio account innerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortafolio addAccount: account.
portfolio addPortafolio: innerPortafolio .
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:23:49'!
test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortafolio addAccount: account.
portfolio addPortafolio: innerPortafolio .
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!methodRemoval: PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:23:49'!
test06addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortafolio addAccount: account.
portfolio addPortafolio: innerPortafolio .
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:24:32' prior: 50684380!
test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio portafolioInInnerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
portafolioInInnerPortafolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortafolio addAccount: account.
portfolio addPortafolio: innerPortafolio .
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:24:48' prior: 50684421!
test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio portafolioInInnerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
portafolioInInnerPortafolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portafolioInInnerPortafolio addAccount: account.
portfolio addPortafolio: innerPortafolio .
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:25:24' prior: 50684444!
test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio portafolioInInnerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
portafolioInInnerPortafolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portafolioInInnerPortafolio addAccount: account.
innerPortafolio addPortafolio: portafolioInInnerPortafolio.
portfolio addPortafolio: innerPortafolio .
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:25:26'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:27:33' prior: 50684293!
addAccount: accountToAdd 
	(self hasAccount: accountToAdd) 
	ifTrue:[ self error: self class cannotAddAlreadyExistingAccount ] 
	ifFalse: [
		portfolios do:[:aPortfolio| aPortfolio hasAccount: accountToAdd ]
		"|acc|
		acc:=false.
		portfolios do:[:innerPorfolio| acc := acc or:( innerPorfolio hasAccount: accountToAdd) ].
		acc ifTrue:[self error: self class cannotAddAlreadyExistingAccount]
			ifFalse:[accounts add: accountToAdd]"
			].
		
	
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:28:35'!
hasAccountInAccounts: accountToAdd

	^ accounts detect:[:account| ( account = accountToAdd)]
	ifFound:[:accoutn | ^true]
	ifNone:[^false]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:28:35' prior: 50684496!
addAccount: accountToAdd 
	(self hasAccountInAccounts: accountToAdd) 
	ifTrue:[ self error: self class cannotAddAlreadyExistingAccount ] 
	ifFalse: [
		portfolios do:[:aPortfolio| aPortfolio hasAccountInAccounts: accountToAdd ]
		"|acc|
		acc:=false.
		portfolios do:[:innerPorfolio| acc := acc or:( innerPorfolio hasAccount: accountToAdd) ].
		acc ifTrue:[self error: self class cannotAddAlreadyExistingAccount]
			ifFalse:[accounts add: accountToAdd]"
			].
		
	
	
	
	
! !

!methodRemoval: Portfolio #hasAccount: stamp: 'lp 5/18/2023 14:28:35'!
hasAccount: accountToAdd

	^ accounts detect:[:account| ( account = accountToAdd)]
	ifFound:[:accoutn | ^true]
	ifNone:[^false]!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:29:42' prior: 50684521!
addAccount: accountToAdd 
	(self hasAccountInAccounts: accountToAdd) 
	ifTrue:[ self error: self class cannotAddAlreadyExistingAccount ] 
	ifFalse: [
		portfolios do:[:aPortfolio| aPortfolio hasAccountInAccounts: accountToAdd ].
		"|acc|
		acc:=false.
		portfolios do:[:innerPorfolio| acc := acc or:( innerPorfolio hasAccount: accountToAdd) ].
		acc ifTrue:[self error: self class cannotAddAlreadyExistingAccount]
			ifFalse:[accounts add: accountToAdd]"
			].
	accounts add: accountToAdd 
		
	
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:30:16'!
hasAccount: accountToAdd

	^ (self hasAccountInAccounts: accountToAdd) 
	ifTrue:[ self error: self class cannotAddAlreadyExistingAccount ] 
	ifFalse: [
		portfolios do:[:aPortfolio| aPortfolio hasAccountInAccounts: accountToAdd ].
		"|acc|
		acc:=false.
		portfolios do:[:innerPorfolio| acc := acc or:( innerPorfolio hasAccount: accountToAdd) ].
		acc ifTrue:[self error: self class cannotAddAlreadyExistingAccount]
			ifFalse:[accounts add: accountToAdd]"
			]! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:30:16' prior: 50684545!
addAccount: accountToAdd 
	self hasAccount: accountToAdd.
	accounts add: accountToAdd 
		
	
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:30:40'!
hasAccountInInnerPortfolios: accountToAdd

	^ portfolios do:[:aPortfolio| aPortfolio hasAccountInAccounts: accountToAdd ]! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:30:40' prior: 50684563!
hasAccount: accountToAdd

	^ (self hasAccountInAccounts: accountToAdd) 
	ifTrue:[ self error: self class cannotAddAlreadyExistingAccount ] 
	ifFalse: [
		self hasAccountInInnerPortfolios: accountToAdd.
		"|acc|
		acc:=false.
		portfolios do:[:innerPorfolio| acc := acc or:( innerPorfolio hasAccount: accountToAdd) ].
		acc ifTrue:[self error: self class cannotAddAlreadyExistingAccount]
			ifFalse:[accounts add: accountToAdd]"
			]! !

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:30:54'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:30:54'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:30:54'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:30:54'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:30:54'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:30:54'!
FAILURE!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:30:54'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:30:59'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:32:28' prior: 50684587!
hasAccountInInnerPortfolios: accountToAdd

	^ self portfolios do:[:aPortfolio| aPortfolio hasAccountInAccounts: accountToAdd ]! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:32:41'!
portfolios
	^portfolios ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:32:42'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:32:42'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:32:42'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:32:42'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:32:42'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:32:42'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:32:42'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:32:42'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:30:40' prior: 50684642!
hasAccountInInnerPortfolios: accountToAdd

	^ portfolios do:[:aPortfolio| aPortfolio hasAccountInAccounts: accountToAdd ]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:33:07'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:33:07'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:33:07'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:33:07'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:33:07'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:33:07'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:33:07'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:33:07'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:33:09'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:34:51'!
accounts
	^accounts ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:34:52'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:34:52'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:34:52'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:34:54'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:35:22' prior: 50684513!
hasAccountInAccounts: accountToAdd

	^ self accounts detect:[:account| ( account = accountToAdd)]
	ifFound:[:accoutn | ^true]
	ifNone:[^false]! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:35:29' prior: 50684765!
hasAccountInAccounts: accountToAdd

	^ (self accounts) detect:[:account| ( account = accountToAdd)]
	ifFound:[:accoutn | ^true]
	ifNone:[^false]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:35:30'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:35:30'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:35:30'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:35:30'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:35:30'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:35:30'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:35:30'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:35:30'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:35:32'!
FAILURE!

(self accounts)!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:36:59'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:36:59'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:36:59'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:36:59'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:36:59'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:36:59'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:36:59'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:36:59'!
FAILURE!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:37:36'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:37:36'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:37:36'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:37:36'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:37:36'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:37:36'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:37:36'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:37:36'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:37:37'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:37:42'!
FAILURE!

( account = accountToAdd)!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:39:35' prior: 50684594!
hasAccount: accountToAdd

	^ (self hasAccountInAccounts: accountToAdd) 
	ifTrue:[] 
	ifFalse: [
		self hasAccountInInnerPortfolios: accountToAdd.
		"|acc|
		acc:=false.
		portfolios do:[:innerPorfolio| acc := acc or:( innerPorfolio hasAccount: accountToAdd) ].
		acc ifTrue:[self error: self class cannotAddAlreadyExistingAccount]
			ifFalse:[accounts add: accountToAdd]"
			]! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:39:40' prior: 50684773!
hasAccountInAccounts: accountToAdd

	^ (self accounts) detect:[:account| ( account = accountToAdd)]
	ifFound:[:accoutn |  self error: self class cannotAddAlreadyExistingAccount ]
	ifNone:[^false]! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:39:50' prior: 50684888!
hasAccount: accountToAdd

	^ (self hasAccountInAccounts: accountToAdd) 
	ifFalse: [
		self hasAccountInInnerPortfolios: accountToAdd.
		"|acc|
		acc:=false.
		portfolios do:[:innerPorfolio| acc := acc or:( innerPorfolio hasAccount: accountToAdd) ].
		acc ifTrue:[self error: self class cannotAddAlreadyExistingAccount]
			ifFalse:[accounts add: accountToAdd]"
			]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:40:01'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:40:01'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:40:01'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:40:01'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:40:01'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:40:01'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:40:01'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:40:01'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:40:01'!
FAILURE!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:40:08'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:40:10'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:40:10'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:41:48' prior: 50684684!
hasAccountInInnerPortfolios: accountToAdd

	^ portfolios do:[:aPortfolio| aPortfolio hasAccount: accountToAdd ]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:41:49'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:41:49'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:41:49'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:41:49'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:41:49'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:41:49'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:41:49'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:41:49'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:41:57' prior: 50684912!
hasAccount: accountToAdd

	^ (self hasAccountInAccounts: accountToAdd) 
	ifFalse: [
		self hasAccountInInnerPortfolios: accountToAdd.
			]! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:44:00'!
canAdd: accountToAdd

	^ self hasAccount: accountToAdd! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:44:00' prior: 50684581!
addAccount: accountToAdd 
	self canAdd: accountToAdd.
	accounts add: accountToAdd 
		
	
	
	
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:50:14'!
test08addAPortfolioAlreadyInThePortfolioinnerPortafoliosProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:52:59'!
test08addAPortafolioWIthAAlreadyExistingAccount
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!methodRemoval: PortfolioTest #test08addAPortfolioAlreadyInThePortfolioinnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:52:59'!
test08addAPortfolioAlreadyInThePortfolioinnerPortafoliosProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:53:29' prior: 50685046!
test08addAPortafolioWIthAAlreadyExistingAccount
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:53:46' prior: 50685079!
test08addAPortafolioWIthAAlreadyExistingAccount
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:54:01' prior: 50685095!
test08addAPortafolioWIthAAlreadyExistingAccount
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:54:10' prior: 50685113!
test08addAPortafolioWIthAAlreadyExistingAccount
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
portafolioToAdd addAccount: account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccount stamp: 'lp 5/18/2023 14:54:11'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:55:27' prior: 50683141!
addPortafolio: portafolioToAdd 
	
	portfolios add: portafolioToAdd ! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 14:56:57' prior: 50685154!
addPortafolio: portafolioToAdd 
	accounts do:[:anAccount| portafolioToAdd hasAccount: anAccount ].
	portfolios add: portafolioToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 14:56:58'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 14:56:58'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 14:56:58'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 14:56:58'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 14:56:58'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 14:56:58'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 14:56:58'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 14:56:58'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccount stamp: 'lp 5/18/2023 14:56:58'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:59:00'!
test08addAPortafolioWIthAAlreadyExistingAccountInTheAccounts
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
portafolioToAdd addAccount: account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!methodRemoval: PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccount stamp: 'lp 5/18/2023 14:59:00'!
test08addAPortafolioWIthAAlreadyExistingAccount
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
portafolioToAdd addAccount: account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:59:34'!
test08addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
portafolioToAdd addAccount: account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 14:59:43'!
test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
portafolioToAdd addAccount: account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!methodRemoval: PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios stamp: 'lp 5/18/2023 14:59:43'!
test08addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
portafolioToAdd addAccount: account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 15:00:15' prior: 50685260!
test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios
|portfolio account portafolioToAdd innerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
portafolioToAdd addAccount: account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 15:00:38' prior: 50685301!
test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios
|portfolio account portafolioToAdd innerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio addAccount: account.
portfolio addPortafolio: innerPortfolio .
portafolioToAdd addAccount: account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 15:00:46' prior: 50685323!
test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios
|portfolio account portafolioToAdd innerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio addAccount: account.
portfolio addPortafolio: innerPortfolio .
portafolioToAdd addAccount: account .

self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios stamp: 'lp 5/18/2023 15:00:47'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 15:02:43' prior: 50685159!
addPortafolio: portafolioToAdd 
	accounts do:[:anAccount| portafolioToAdd hasAccount: anAccount ].
	portfolios do:[:aPortfolio| aPortfolio accounts ].
	portfolios add: portafolioToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 15:02:44'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 15:02:44'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 15:02:44'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 15:02:44'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 15:02:44'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 15:02:44'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 15:02:44'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 15:02:44'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheAccounts stamp: 'lp 5/18/2023 15:02:44'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios stamp: 'lp 5/18/2023 15:02:44'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios stamp: 'lp 5/18/2023 15:02:44'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 15:03:35'!
haveTheSameAccount: portafolioToAdd

	^ accounts do:[:anAccount| portafolioToAdd hasAccount: anAccount ]! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 15:03:35' prior: 50685374!
addPortafolio: portafolioToAdd 
	self haveTheSameAccount: portafolioToAdd.
	portfolios do:[:aPortfolio| aPortfolio accounts ].
	portfolios add: portafolioToAdd ! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 15:03:58' prior: 50685432!
addPortafolio: portafolioToAdd 
	self haveTheSameAccount: portafolioToAdd.
	portfolios do:[:aPortfolio| aPortfolio accounts haveTheSameAccount: portafolioToAdd ].
	portfolios add: portafolioToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 15:03:59'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 15:03:59'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 15:03:59'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 15:03:59'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 15:03:59'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 15:03:59'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 15:03:59'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 15:03:59'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheAccounts stamp: 'lp 5/18/2023 15:03:59'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios stamp: 'lp 5/18/2023 15:03:59'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 15:04:33' prior: 50685440!
addPortafolio: portafolioToAdd 
	self haveTheSameAccount: portafolioToAdd.
	portfolios do:[:aPortfolio| aPortfolio haveTheSameAccount: portafolioToAdd ].
	portfolios add: portafolioToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 15:04:34'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 15:04:34'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 15:04:34'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 15:04:34'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 15:04:34'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 15:04:34'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 15:04:34'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 15:04:34'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheAccounts stamp: 'lp 5/18/2023 15:04:34'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios stamp: 'lp 5/18/2023 15:04:34'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 15:04:44' prior: 50685489!
addPortafolio: portafolioToAdd 
	self haveTheSameAccount: portafolioToAdd.
	portfolios do:[:aPortfolio| aPortfolio haveTheSameAccount: portafolioToAdd].
	portfolios add: portafolioToAdd ! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 15:05:09'!
failIfFoundSameAccountIn: portafolioToAdd

	self haveTheSameAccount: portafolioToAdd.
	portfolios do:[:aPortfolio| aPortfolio haveTheSameAccount: portafolioToAdd]! !
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 15:05:09' prior: 50685537!
addPortafolio: portafolioToAdd 
	self failIfFoundSameAccountIn: portafolioToAdd.
	portfolios add: portafolioToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheAccounts stamp: 'lp 5/18/2023 15:05:12'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios stamp: 'lp 5/18/2023 15:05:12'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 15:05:30'!
test10addAPortafolioWIthAAlreadyExistingAccountInInnerPortfolios
|portfolio account portafolioToAdd innerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio addAccount: account.
portfolio addPortafolio: innerPortfolio .
portafolioToAdd addAccount: account .

self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 15:07:05' prior: 50685599!
test10addAPortafolioWIthAAlreadyExistingAccountInInnerPortfolios
|portfolio account portafolioToAdd innerPortfolio innerPortfolioInTheInnerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 
innerPortfolioInTheInnerPortfolio:= Portfolio new initialize .

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolioInTheInnerPortfolio addAccount: account.
innerPortfolio  addPortafolio: innerPortfolioInTheInnerPortfolio .
portfolio addPortafolio: innerPortfolio .
portafolioToAdd addAccount: account .

self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInInnerPortfolios stamp: 'lp 5/18/2023 15:07:05'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'lp 5/18/2023 15:07:40' prior: 50685545!
failIfFoundSameAccountIn: portafolioToAdd

	self haveTheSameAccount: portafolioToAdd.
	portfolios do:[:aPortfolio| aPortfolio failIfFoundSameAccountIn: portafolioToAdd]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/18/2023 15:07:40'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/18/2023 15:07:40'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/18/2023 15:07:40'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/18/2023 15:07:40'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/18/2023 15:07:40'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/18/2023 15:07:40'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/18/2023 15:07:40'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/18/2023 15:07:40'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheAccounts stamp: 'lp 5/18/2023 15:07:40'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios stamp: 'lp 5/18/2023 15:07:40'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInInnerPortfolios stamp: 'lp 5/18/2023 15:07:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 15:09:39'!
test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
portafolioToAdd addAccount: account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!methodRemoval: PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheAccounts stamp: 'lp 5/18/2023 15:09:39'!
test08addAPortafolioWIthAAlreadyExistingAccountInTheAccounts
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
portafolioToAdd addAccount: account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 15:09:56'!
test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios
|portfolio account portafolioToAdd innerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio addAccount: account.
portfolio addPortafolio: innerPortfolio .
portafolioToAdd addAccount: account .

self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!methodRemoval: PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios stamp: 'lp 5/18/2023 15:09:56'!
test09addAPortafolioWIthAAlreadyExistingAccountInTheInmeidatePortfolios
|portfolio account portafolioToAdd innerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio addAccount: account.
portfolio addPortafolio: innerPortfolio .
portafolioToAdd addAccount: account .

self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 15:10:15'!
test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios
|portfolio account portafolioToAdd innerPortfolio innerPortfolioInTheInnerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 
innerPortfolioInTheInnerPortfolio:= Portfolio new initialize .

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolioInTheInnerPortfolio addAccount: account.
innerPortfolio  addPortafolio: innerPortfolioInTheInnerPortfolio .
portfolio addPortafolio: innerPortfolio .
portafolioToAdd addAccount: account .

self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!methodRemoval: PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInInnerPortfolios stamp: 'lp 5/18/2023 15:10:15'!
test10addAPortafolioWIthAAlreadyExistingAccountInInnerPortfolios
|portfolio account portafolioToAdd innerPortfolio innerPortfolioInTheInnerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 
innerPortfolioInTheInnerPortfolio:= Portfolio new initialize .

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolioInTheInnerPortfolio addAccount: account.
innerPortfolio  addPortafolio: innerPortfolioInTheInnerPortfolio .
portfolio addPortafolio: innerPortfolio .
portafolioToAdd addAccount: account .

self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 15:10:54'!
test11addAPortafolioWIthAAlreadyExistingAccountInThePortfolioAdderInmidiatePortfolios
|portfolio account portafolioToAdd innerPortfolio innerPortfolioInTheInnerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 
innerPortfolioInTheInnerPortfolio:= Portfolio new initialize .

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolioInTheInnerPortfolio addAccount: account.
innerPortfolio  addPortafolio: innerPortfolioInTheInnerPortfolio .
portfolio addPortafolio: innerPortfolio .
portafolioToAdd addAccount: account .

self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/18/2023 15:11:43' prior: 50685854!
test11addAPortafolioWIthAAlreadyExistingAccountInThePortfolioAdderInmidiatePortfolios
|portfolio account portafolioToAdd innerPortfolio |


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio addAccount: account.
portafolioToAdd  addPortafolio: innerPortfolio .
portafolioToAdd addAccount: account .

self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test11addAPortafolioWIthAAlreadyExistingAccountInThePortfolioAdderInmidiatePortfolios stamp: 'lp 5/18/2023 15:11:46'!
ERROR!

!testRun: #PortfolioTest #test11addAPortafolioWIthAAlreadyExistingAccountInThePortfolioAdderInmidiatePortfolios stamp: 'lp 5/18/2023 15:13:55'!
ERROR!

!testRun: #PortfolioTest #test11addAPortafolioWIthAAlreadyExistingAccountInThePortfolioAdderInmidiatePortfolios stamp: 'lp 5/18/2023 15:13:55'!
ERROR!

!testRun: #PortfolioTest #test11addAPortafolioWIthAAlreadyExistingAccountInThePortfolioAdderInmidiatePortfolios stamp: 'lp 5/18/2023 15:14:25'!
ERROR!

!methodRemoval: PortfolioTest #test11addAPortafolioWIthAAlreadyExistingAccountInThePortfolioAdderInmidiatePortfolios stamp: 'lp 5/18/2023 15:14:46'!
test11addAPortafolioWIthAAlreadyExistingAccountInThePortfolioAdderInmidiatePortfolios
|portfolio account portafolioToAdd innerPortfolio |


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio addAccount: account.
portafolioToAdd  addPortafolio: innerPortfolio .
portafolioToAdd addAccount: account .

self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

!

----SNAPSHOT----(18 May 2023 15:15:11) CuisUniversity-5706.image priorSource: 11274796!

----STARTUP---- (20 May 2023 20:12:32) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64 - Copy\CuisUniversity-5706.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jb 5/20/2023 20:13:21'!
test11
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
portafolioToAdd addAccount: account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jb 5/20/2023 20:16:25' prior: 50678088!
test11|portfolio account portafolioToAdd register|

portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
account := ReceptiveAccount new.
register :=  Deposit register: 100 on: account.

portfolio addAccount: account.
portafolioToAdd addAccount: account .
self assert: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:16:27'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/20/2023 20:16:38'!
hasRegistered: register 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/20/2023 20:16:46' prior: 50678123!
hasRegistered: register 
	 ^true! !

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:16:51'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:16:51'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:16:51'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:16:51'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:16:51'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:16:51'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:16:51'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:16:51'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:16:51'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:16:51'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:16:51'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:16:51'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:16:51'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'jb 5/20/2023 20:17:49'!
test12|portfolio account portafolioToAdd register|

portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio addAccount: account.
portafolioToAdd addAccount: account .
self deny: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:17:50'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/20/2023 20:21:25' prior: 50678128!
hasRegistered: aRegister 
	 accounts  detect: [:anAccount| anAccount  hasRegistered:  aRegister] ifNone: [portfolios  detect:  [:aPortfolio | aPortfolio  hasRegistered: aRegister ] ifNone: [^false]] ^true! !

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:21:29'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/20/2023 20:21:46' prior: 50678200!
hasRegistered: aRegister 
	 accounts  detect: [:anAccount| anAccount  hasRegistered:  aRegister] ifNone: [portfolios  detect:  [:aPortfolio | aPortfolio  hasRegistered: aRegister ] ifNone: [^false]].^true! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:21:47'!
PASSED!

!classDefinition: #FinancialElement category: 'Portfolio-Ejercicio' stamp: 'jb 5/20/2023 20:23:05'!
Object subclass: #FinancialElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialElement subclass: #Portfolio
	instanceVariableNames: 'balance accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/20/2023 20:23:05'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'balance accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialElement subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'jb 5/20/2023 20:23:13'!
FinancialElement subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialElement methodsFor: 'no messages' stamp: 'jb 5/20/2023 20:23:34'!
hasRegistered: aRegister
	self  subclassResponsibility ! !
!FinancialElement methodsFor: 'as yet unclassified' stamp: 'jb 5/20/2023 20:23:41'!
balance
	self  subclassResponsibility ! !
!FinancialElement methodsFor: 'as yet unclassified' stamp: 'jb 5/20/2023 20:23:46'!
transactions
	self  subclassResponsibility ! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/20/2023 20:24:54'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'balance accounts portfolios financialElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'balance' stamp: 'jb 5/20/2023 20:24:52' prior: 50677956 overrides: 50678311!
balance
	^ financialElements sum:[:aFinancialElement | aFinancialElement  balance] ifEmpty: [0] ! !
!Portfolio methodsFor: 'initialization' stamp: 'jb 5/20/2023 20:25:23' prior: 50677964 overrides: 16920235!
initialize
	accounts:= OrderedCollection new.
	portfolios:=OrderedCollection new.	financialElements  := OrderedCollection new. 
	
	balance := 0.
! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 20:25:46' prior: 50677973!
addAccount: accountToAdd 
	self canAdd: accountToAdd.	
	financialElements  add: accountToAdd .
	accounts add: accountToAdd 
		
	
	
	
	
! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 20:26:02' prior: 50677979!
addPortafolio: portafolioToAdd 
	self failIfFoundSameAccountIn: portafolioToAdd.		
		financialElements  add: portafolioToAdd .
	portfolios add: portafolioToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:26:04'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:26:04'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:26:04'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:26:04'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:26:04'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:26:04'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:26:04'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:26:04'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:26:04'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:26:04'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:26:04'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:26:04'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:26:04'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/20/2023 20:27:52' prior: 50678212 overrides: 50678306!
hasRegistered: aRegister 
	^ financialElements  detect:  [:aFinancialElement|
		aFinancialElement  hasRegistered:  aRegister
		] ifFound:[false] ifNone:[true]
 	! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:27:53'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:27:53'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:27:53'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:27:53'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:27:53'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:27:53'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:27:53'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:27:54'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:27:54'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:27:54'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:27:54'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:27:54'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:27:54'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/20/2023 20:29:06' prior: 50678411 overrides: 50678306!
hasRegistered: aRegister 
	^ financialElements  detect:  [:aFinancialElement|
		aFinancialElement  hasRegistered:  aRegister
		] ifFound:[:aFinancialElement|  false] ifNone:[true]
 	! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:29:07'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:29:07'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:29:07'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:29:07'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:29:07'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:29:07'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:29:08'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:29:08'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:29:08'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:29:08'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:29:08'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:29:08'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:29:08'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/20/2023 20:29:25' prior: 50678470 overrides: 50678306!
hasRegistered: aRegister 
	^ financialElements  detect:  [:aFinancialElement|
		aFinancialElement  hasRegistered:  aRegister
		] ifFound:[:aFinancialElement|  ^false] ifNone:[^true]
 	! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:29:26'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:29:26'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:29:26'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:29:26'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:29:26'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:29:26'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:29:26'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:29:26'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:29:26'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:29:26'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:29:26'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:29:26'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:29:26'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/20/2023 20:29:53' prior: 50678529 overrides: 50678306!
hasRegistered: aRegister 
	^ financialElements  detect:  [:aFinancialElement|
		aFinancialElement  hasRegistered:  aRegister
		] ifFound:[:aFinancialElement|  ^true] ifNone:[^false]
 	! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:29:54'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:29:54'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:29:54'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:29:54'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:29:54'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:29:54'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:29:54'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:29:55'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:29:55'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:29:55'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:29:55'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:29:55'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:29:55'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/20/2023 20:32:36' prior: 50678588 overrides: 50678306!
hasRegistered: aRegister 
	^ financialElements  anySatisfy: [:aFinancialElement | aFinancialElement  hasRegistered:  aRegister]
	! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:32:37'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:32:37'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:32:37'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:32:37'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:32:37'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:32:37'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:32:37'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:32:37'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:32:37'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:32:38'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:32:38'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:32:38'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:32:38'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/20/2023 20:34:00' prior: 50677542!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add:account.

self assert:100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:34:03'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 20:34:15'!
add: account 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 20:34:27' prior: 50678719!
add: anAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 20:35:02' prior: 50678344!
addAccount: accountToAdd 
	self hasAccount: accountToAdd.	
	financialElements  add: accountToAdd .
	accounts add: accountToAdd 
		
	
	
	
	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:35:06'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:35:06'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:35:06'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:35:06'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:35:06'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:35:06'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:35:06'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:35:06'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:35:06'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:35:06'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:35:06'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:35:06'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:35:06'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:35:06'!
ERROR!

!methodRemoval: Portfolio #canAdd: stamp: 'jb 5/20/2023 20:35:20'!
canAdd: accountToAdd

	^ self hasAccount: accountToAdd!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 20:41:06' prior: 50678723!
add: anAccount 
		financialElements  add: anAccount ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:41:08'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:41:08'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:41:08'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:41:08'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:41:08'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:41:08'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:41:08'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:41:08'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:41:08'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:41:08'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:41:08'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:41:08'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:41:08'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/20/2023 20:41:51' prior: 50677554!
test02addAccountSHouldAddHisBalance

|portfolio account anotherAccount |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add: account.

anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio add: anotherAccount .


self assert:150 equals: portfolio balance.! !

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:41:52'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:41:52'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/20/2023 20:41:59' prior: 50678847!
test02addAccountSHouldAddHisBalance

|portfolio account anotherAccount |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add: account.

anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio add: anotherAccount .
self assert:150 equals: portfolio balance.! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 20:43:23' prior: 50677997!
hasAccount: accountToAdd

	^ (self hasAccountInFinancialElements: accountToAdd) 
	ifFalse: [
		self hasAccountInInnerPortfolios: accountToAdd.
			]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:43:37'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:43:37'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:43:37'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:43:37'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:43:37'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:43:37'!
ERROR!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:43:37'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:43:37'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:43:37'!
ERROR!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:43:37'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:43:37'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:43:37'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:43:37'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:43:41'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 20:43:49'!
hasAccountInFinancialElements: accountToAdd 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 20:46:55' prior: 50678991!
hasAccountInFinancialElements: accountToAdd 
	
	( financialElements   anySatisfy: [:aFinancialElement | 
			aFinancialElement  = accountToAdd  
		] )ifTrue:[
			self error: self class cannotAddAlreadyExistingAccount		
		]
		^true	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:47:00'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:47:00'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:47:00'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:47:00'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:47:00'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:47:00'!
ERROR!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:47:00'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:47:00'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:47:00'!
ERROR!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:47:00'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:47:00'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:47:01'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:47:01'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:47:03'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 20:47:14' prior: 50678996!
hasAccountInFinancialElements: accountToAdd 
	
	( financialElements   anySatisfy: [:aFinancialElement | 
			aFinancialElement  = accountToAdd  
		] )ifTrue:[
			self error: self class cannotAddAlreadyExistingAccount		
		].
		^true	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:47:17'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:47:17'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:47:17'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:47:17'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:47:17'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:47:17'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:47:17'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:47:17'!
FAILURE!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:47:17'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:47:17'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:47:17'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:47:17'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:47:17'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:47:19'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:47:46'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 20:49:07' prior: 50679060!
hasAccountInFinancialElements: accountToAdd 
	
	( financialElements   anySatisfy: [:aFinancialElement | 
			aFinancialElement  = accountToAdd  
		] )ifTrue:[
			self error: self class cannotAddAlreadyExistingAccount		
		].
		^false	
! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:49:10'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:49:10'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:49:10'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:49:10'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:49:10'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:49:10'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:49:10'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:49:10'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:49:10'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:49:10'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:49:10'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:49:10'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:49:10'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/20/2023 20:49:50' prior: 50677569!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance

|portfolio account portafolioToAdd|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio addPortafolio: portafolioToAdd .


self assert:100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:49:52'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:49:52'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/20/2023 20:50:00' prior: 50679189!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance

|portfolio account portafolioToAdd|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .


self assert:100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:50:02'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:50:02'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/20/2023 20:50:12' prior: 50679259!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance

|portfolio account portafolioToAdd|

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .

self assert:100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:50:13'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:50:13'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:50:13'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:50:13'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:50:13'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:50:13'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:50:14'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:50:14'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:50:14'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:50:14'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:50:14'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:50:14'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:50:14'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:50:14'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/20/2023 20:52:07' prior: 50677608!
test05addAAccountAlreadyInThePortfolioAccountsProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add: account.
self should: [portfolio add: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:52:10'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:52:24'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 20:52:45' prior: 50678792!
add: anAccount 
		self hasAccount:  anAccount .
		financialElements  add: anAccount ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/20/2023 20:52:47'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/20/2023 20:52:47'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/20/2023 20:52:47'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/20/2023 20:52:47'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/20/2023 20:52:47'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/20/2023 20:52:47'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/20/2023 20:52:47'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/20/2023 20:52:47'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/20/2023 20:52:47'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/20/2023 20:52:47'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/20/2023 20:52:47'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/20/2023 20:52:47'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/20/2023 20:52:47'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 21:20:39' prior: 50679423!
add: anAccount 
		financialElements  do:[:aFinancialElement|
				aFinancialElement  equalsOrHaveTheAccount: anAccount 
			].
		financialElements  add: anAccount ! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/20/2023 21:23:45' prior: 50679478!
add: anAccount 

		financialElements  do:[:aFinancialElement|
				self checkIfThisFinancialElement: aFinancialElement   hasOrIsThisAccount: anAccount
			].
	
		financialElements  add: anAccount ! !

----QUIT----(20 May 2023 21:23:56) CuisUniversity-5706.image priorSource: 11085771!

----STARTUP---- (21 May 2023 14:03:58) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64 - Copy\CuisUniversity-5706.image!


!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:04:08'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:04:08'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:04:08'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:04:08'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:04:08'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:04:08'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:04:08'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:04:08'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:04:08'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:04:08'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:04:08'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:04:08'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:04:08'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:04:11'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 14:04:25'!
checkIfThisFinancialElement: aFinancialElement hasOrIsThisAccount: anAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 14:07:43' prior: 50679555!
checkIfThisFinancialElement: aFinancialElement hasOrIsThisAccount: anAccount 
	  (aFinancialElement  hasOrIsThisAccount: anAccount  ) ifFalse:[
			self error: self class cannotAddAlreadyExistingAccount .
		] ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:07:48'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:07:48'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:07:48'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:07:48'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:07:48'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:07:48'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:07:48'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:07:48'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:07:48'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:07:48'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:07:48'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:07:48'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:07:49'!
FAILURE!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:07:50'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 14:07:58'!
hasOrIsThisAccount: anAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 14:08:14' prior: 50679623!
hasOrIsThisAccount: anAccount 
	^self = anAccount ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:08:17'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:08:17'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:08:17'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:08:17'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:08:17'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:08:17'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:08:17'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:08:17'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:08:17'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:08:17'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:08:17'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:08:17'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:08:17'!
FAILURE!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:08:19'!
ERROR!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:08:42'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:08:42'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:08:42'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:08:42'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:08:42'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:08:42'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:08:42'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:08:42'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:08:42'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:08:42'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:08:42'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:08:42'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:08:42'!
FAILURE!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:08:52'!
ERROR!

self !

anAccount !

self = anAccount !
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 14:09:53' prior: 50679628!
hasOrIsThisAccount: anAccount 
	^self transactions  = anAccount transactions ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:09:57'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:09:57'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:09:57'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:09:57'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:09:57'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:09:57'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:09:57'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:09:57'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:09:57'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:09:57'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:09:57'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:09:57'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:09:57'!
FAILURE!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:09:59'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:12:33'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 14:13:04' prior: 50679561!
checkIfThisFinancialElement: aFinancialElement hasOrIsThisAccount: anAccount 
	  (aFinancialElement  hasOrIsThisAccount: anAccount  ) ifTrue:[
			self error: self class cannotAddAlreadyExistingAccount .
		] ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:13:07'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:13:08'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:13:08'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:13:08'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:13:08'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:13:08'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:13:08'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:13:08'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:13:08'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:13:08'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:13:08'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:13:08'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:13:09'!
PASSED!
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 14:13:28' prior: 50679740!
hasOrIsThisAccount: anAccount 
	^self = anAccount  ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/21/2023 14:13:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/21/2023 14:13:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/21/2023 14:13:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/21/2023 14:13:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/21/2023 14:13:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/21/2023 14:13:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/21/2023 14:13:29'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 14:13:50' prior: 50677585!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd  secondAccount secondPortafolioToAdd |

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd addAccount: secondAccount.

portfolio := Portfolio new initialize.


portfolio addPortafolio: portafolioToAdd .
portfolio addPortafolio: secondPortafolioToAdd .



self assert:200 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:13:52'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:13:52'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:13:52'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:13:52'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:13:52'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:13:52'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:13:52'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:13:52'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:13:52'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:13:52'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:13:54'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:13:54'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:13:54'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:13:54'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 14:14:21' prior: 50677624!
test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError
|portfolio account innerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortafolio add: account.
portfolio addPortafolio: innerPortafolio .
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:14:24'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:14:24'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:14:24'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:14:25'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:14:25'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:14:25'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:14:25'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:14:25'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:14:25'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:14:25'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:14:25'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:14:25'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:14:25'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:14:25'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 14:14:34' prior: 50677644!
test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio portafolioInInnerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
portafolioInInnerPortafolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portafolioInInnerPortafolio add: account.
innerPortafolio addPortafolio: portafolioInInnerPortafolio.
portfolio addPortafolio: innerPortafolio .
self should: [portfolio addAccount: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:14:40'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:14:41'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:14:41'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:14:41'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:14:41'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:14:41'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:14:41'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:14:41'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:14:41'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:14:41'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:14:41'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:14:41'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:14:41'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:14:41'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 14:14:49' prior: 50677669!
test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add: account.
portafolioToAdd add: account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:14:50'!
FAILURE!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:14:55'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:14:55'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:14:56'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:14:56'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:14:56'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:14:56'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:14:56'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:14:56'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:14:56'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:14:56'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:14:56'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:14:56'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:14:56'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:14:56'!
FAILURE!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 14:15:34' prior: 50680123!
test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add: account.
portafolioToAdd add: account .
self should: [portfolio add: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:15:39'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:15:39'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:15:39'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:15:39'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:15:39'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:15:39'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:15:39'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:15:39'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:15:39'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:15:39'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:15:39'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:15:39'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:15:39'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:15:39'!
FAILURE!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:16:20'!
FAILURE!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:16:31'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:18:21'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:18:21'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:18:21'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:18:21'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:18:21'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:18:21'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:18:21'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:18:21'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:18:21'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:18:21'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:18:21'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:18:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:18:21'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:18:21'!
FAILURE!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 14:18:54' prior: 50680202!
test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio addAccount: account.
portafolioToAdd addAccount:  account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:18:56'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:18:56'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 14:30:31' prior: 50679893!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd  secondAccount secondPortafolioToAdd |

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd add: secondAccount.

portfolio := Portfolio new initialize.


portfolio addPortafolio: portafolioToAdd .
portfolio addPortafolio: secondPortafolioToAdd .



self assert:200 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:30:31'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:30:31'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 14:30:42' prior: 50679970!
test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError
|portfolio account innerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortafolio add: account.
portfolio addPortafolio: innerPortafolio .
self should: [portfolio add: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:30:43'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 14:33:49'!
hasOrIsThisAccount: anAccount
	^financialElements  anySatisfy: [:aFinancialElement|
		aFinancialElement  hasOrIsThisAccount:  anAccount 
		]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:34:20'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:34:20'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:34:20'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:34:20'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:34:20'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:34:20'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:34:20'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:34:20'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:34:20'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:34:20'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:34:20'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:34:20'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:34:20'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 14:34:40' prior: 50680044!
test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio portafolioInInnerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
portafolioInInnerPortafolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portafolioInInnerPortafolio add: account.
innerPortafolio addPortafolio: portafolioInInnerPortafolio.
portfolio addPortafolio: innerPortafolio .
self should: [portfolio add: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:34:41'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:34:41'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 14:34:54' prior: 50680340!
test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add: account.
portafolioToAdd add:  account .
self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:34:55'!
FAILURE!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 14:35:32' prior: 50680651!
test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add: account.
portafolioToAdd add:  account .
self should: [portfolio add: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:35:58'!
FAILURE!

financialElements!

aFinancialElement!

aFinancialElement!

anAccount!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 14:41:12' prior: 50679486!
add: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElementToAdd isKindOf:  ReceptiveAccount ) ifTrue:[
				self checkIfThisFinancialElement: aFinancialElement   hasOrIsThisAccount: aFinancialElementToAdd].
			self checkIfThisFinancialElement: aFinancialElement  hasOrIsThisPortfolio: aFinancialElementToAdd .
			].
	
		financialElements  add: aFinancialElementToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:41:15'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:41:15'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:41:15'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:41:15'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:41:15'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:41:15'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:41:15'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:41:15'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:41:15'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:41:15'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:41:15'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:41:15'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:41:15'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:41:25'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 14:41:32'!
checkIfThisFinancialElement: aFinancialElement hasOrIsThisPortfolio: aFinancialElementToAdd 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 14:43:43' prior: 50680771!
checkIfThisFinancialElement: aFinancialElement hasOrIsThisPortfolio: aPortfolio 
	aFinancialElement hasOrIsThisPortfolio: aPortfolio! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 14:43:54' prior: 50680778!
checkIfThisFinancialElement: aFinancialElement hasOrIsThisPortfolio: aPortfolio 
	^aFinancialElement hasOrIsThisPortfolio: aPortfolio! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:44:06'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:44:06'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:44:06'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:44:06'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:44:06'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:44:06'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:44:06'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:44:06'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:44:06'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:44:06'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:44:06'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:44:06'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:44:06'!
FAILURE!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:44:08'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 14:44:14'!
hasOrIsThisPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 14:44:19' prior: 50680845!
hasOrIsThisPortfolio: aPortfolio 
	^false! !

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:44:23'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:44:26'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:44:26'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:44:26'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:44:26'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:44:26'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:44:26'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:44:26'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:44:26'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:44:26'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:44:26'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:44:26'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:44:26'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:44:26'!
FAILURE!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:44:26'!
FAILURE!

aFinancialElement!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 14:47:08' prior: 50680703!
add: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElementToAdd isKindOf:  ReceptiveAccount ) ifTrue:[
				self checkIfThisFinancialElement: aFinancialElement   hasOrIsThisAccount: aFinancialElementToAdd
			]ifFalse:[
				self checkIfThisFinancialElement: aFinancialElement  hasOrIsThisPortfolio: aFinancialElementToAdd .
			]
		].
	
		financialElements  add: aFinancialElementToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:47:09'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:47:09'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:47:09'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:47:09'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:47:09'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:47:09'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:47:09'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:47:09'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:47:09'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:47:09'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:47:09'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:47:09'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:47:09'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:47:09'!
FAILURE!

aFinancialElement!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 14:48:19' prior: 50680785!
checkIfThisFinancialElement: aFinancialElement hasOrIsThisPortfolio: aPortfolio 
	(aFinancialElement hasOrIsThisPortfolio: aPortfolio) ifTrue:[
		self error: self class cannotAddAlreadyExistingAccount 
		]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 14:48:27'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 14:48:27'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 14:48:27'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 14:48:27'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 14:48:27'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 14:48:27'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 14:48:27'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 14:48:27'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:48:27'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 14:48:27'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 14:48:27'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 14:48:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 14:48:27'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 14:48:27'!
FAILURE!

aFinancialElement hasOrIsThisPortfolio: aPortfolio!

aFinancialElement!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 14:57:02' prior: 50680913!
add: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						]

				] 
		].
	
		financialElements  add: aFinancialElementToAdd ! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 14:58:51' prior: 50681050!
add: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 (aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue:[
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						]

				] 
		].
	
		financialElements  add: aFinancialElementToAdd ! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:00:08' prior: 50681070!
add: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 (aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue:[
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						(aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						]

				] 
		].
	
		financialElements  add: aFinancialElementToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:00:09'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:00:09'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:00:09'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:00:09'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:00:09'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:00:09'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:00:09'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:00:09'!
FAILURE!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:00:09'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:00:10'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:00:10'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:00:10'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:00:10'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:01:55' prior: 50681094!
add: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 (aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue:[
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						(aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						(aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						]

				] 
		].
	
		financialElements  add: aFinancialElementToAdd ! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:05:40' prior: 50681173!
add: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 (aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue:[
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						(aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						(aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						
						]

				] 
		].
	
		financialElements  add: aFinancialElementToAdd ! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:07:43'!
canThisFiancialElementBeAdded: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 ^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd 
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd 
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [

						]

				] 
		].
	
		! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:07:52'!
canThisFinancialElementBeAdded: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 ^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd 
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd 
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [

						]

				] 
		].
	
		! !

!methodRemoval: Portfolio #canThisFiancialElementBeAdded: stamp: 'jb 5/21/2023 15:07:52'!
canThisFiancialElementBeAdded: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 ^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd 
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd 
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [

						]

				] 
		].
	
		!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:12:55' prior: 50681266!
canThisFinancialElementBeAdded: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 ^(aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) not.
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^(aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement) not 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						^(aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) not
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^ aFinancialElement  canThisFinancialElementBeAdded:  aFinancialElementToAdd .
						]
				] 
		].
	
		! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:13:13'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:13:13'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:13:13'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:13:13'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:13:13'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:13:13'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:13:13'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:13:13'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:13:13'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:13:14'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:13:14'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:13:14'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:13:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/21/2023 15:13:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/21/2023 15:13:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/21/2023 15:13:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/21/2023 15:13:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/21/2023 15:13:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/21/2023 15:13:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/21/2023 15:13:14'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:16:25' prior: 50681207!
add: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 (aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue:[
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						(aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						(aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					
				] 
		].
	
		financialElements  add: aFinancialElementToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:16:27'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:16:42'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:16:46'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:16:46'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:16:46'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:16:46'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:16:46'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:16:46'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:16:46'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:16:47'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:16:47'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:16:47'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:16:47'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:16:47'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:16:47'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:16:48'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:16:48'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:16:48'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:16:49'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:16:49'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:16:49'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:16:49'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:16:49'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:16:49'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:16:49'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:16:49'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:16:49'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:16:49'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:16:50'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:16:51'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:16:51'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:16:51'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:16:51'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:16:51'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:16:51'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:16:51'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:16:51'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:16:51'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:16:51'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:16:51'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:16:52'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:16:52'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:16:52'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:16:52'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:16:52'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:16:52'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:16:52'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:16:52'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:16:52'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:16:52'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:16:52'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:16:52'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:16:52'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:20:43'!
checkIfThisElementCouldBeAdded: aFinancialElementToAdd 

		(financialElements  anySatisfy:  [:aFinancialElement|
			aFinancialElement  canThisFinancialElementBeAdded:  aFinancialElementToAdd 
			]) ifTrue:[
				self error: self class cannotAddAlreadyExistingAccount .
			]
	
		! !

!methodRemoval: Portfolio #checkIfThisElementCouldBeAdded: stamp: 'jb 5/21/2023 15:21:32'!
checkIfThisElementCouldBeAdded: aFinancialElementToAdd 

		(financialElements  anySatisfy:  [:aFinancialElement|
			aFinancialElement  canThisFinancialElementBeAdded:  aFinancialElementToAdd 
			]) ifTrue:[
				self error: self class cannotAddAlreadyExistingAccount .
			]
	
		!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 15:25:00' prior: 50677689!
test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios
|portfolio account portafolioToAdd innerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio add:  account.
portfolio addPortafolio: innerPortfolio .
portafolioToAdd add: account .

self should: [portfolio addPortafolio: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:25:06'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:25:06'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:25:06'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:25:06'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:25:06'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:25:06'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:25:06'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:25:07'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:25:07'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:25:07'!
FAILURE!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:25:07'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:25:07'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:25:07'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:25:07'!
FAILURE!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 15:25:21' prior: 50681776!
test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios
|portfolio account portafolioToAdd innerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio add:  account.
portfolio addPortafolio: innerPortfolio .
portafolioToAdd add: account .

self should: [portfolio add: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 15:25:27' prior: 50681855!
test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios
|portfolio account portafolioToAdd innerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio add:  account.
portfolio add: innerPortfolio .
portafolioToAdd add: account .

self should: [portfolio add: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:25:30'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:25:30'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:25:30'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:25:30'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:25:30'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:25:30'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:25:30'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:25:30'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:25:30'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:25:30'!
FAILURE!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:25:30'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:25:30'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:25:30'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:25:30'!
FAILURE!

aFinancialElement!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:27:06' prior: 50681422!
add: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 (aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue:[
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						(aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue: [
						(aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					
				] 
		].
	
		financialElements  add: aFinancialElementToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:27:11'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:27:11'!
FAILURE!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:27:11'!
FAILURE!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:27:11'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:27:11'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 15:27:25' prior: 50680491!
test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError
|portfolio account innerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortafolio add: account.
portfolio add: innerPortafolio .
self should: [portfolio add: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:27:27'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:27:27'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:27:27'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:27:27'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:27:27'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:27:27'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:27:27'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:27:27'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:27:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:27:27'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:27:27'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:27:27'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:27:27'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:27:33'!
FAILURE!

aFinancialElement!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:29:30' prior: 50681958!
add: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 (aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue:[
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						(aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						(aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					
				] 
		].
	
		financialElements  add: aFinancialElementToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:29:33'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:29:33'!
FAILURE!

aFinancialElementToAdd!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:32:01' prior: 50682114!
add: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 (aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue:[
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						(aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						(aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ) ifTrue: [
							self error: self class cannotAddAlreadyExistingAccount .
							]
						].
					 (aFinancialElementToAdd   isKindOf:  Portfolio ) ifTrue:  [
						
						]
					
				] 
		].
	
		financialElements  add: aFinancialElementToAdd ! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:32:54' prior: 50681317!
canThisFinancialElementBeAdded: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 ^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd  .
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^ aFinancialElement  canThisFinancialElementBeAdded:  aFinancialElementToAdd .
						]
				] 
		].
	
		! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:33:38'!
doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 ^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd  .
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^ aFinancialElement  canThisFinancialElementBeAdded:  aFinancialElementToAdd .
						]
				] 
		].
	
		! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 15:33:39' prior: 50682236!
canThisFinancialElementBeAdded: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 ^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd  .
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^ aFinancialElement  doesItContainsOrIsThisFinancialElement:  aFinancialElementToAdd .
						]
				] 
		].
	
		! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 15:33:39' prior: 50682264!
doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 ^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd  .
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^ aFinancialElement  doesItContainsOrIsThisFinancialElement:  aFinancialElementToAdd .
						]
				] 
		].
	
		! !

!methodRemoval: Portfolio #canThisFinancialElementBeAdded: stamp: 'jb 5/21/2023 15:33:39'!
canThisFinancialElementBeAdded: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 ^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd  .
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^ aFinancialElement  doesItContainsOrIsThisFinancialElement:  aFinancialElementToAdd .
						]
				] 
		].
	
		!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:36:05'!
checkIfItCanAddThisFinancialElement: aPortfolio 
	financialElements  anySatisfy: [:aFinancialElement |
		aFinancialElement 
		]! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:36:37' prior: 50682379!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	financialElements  anySatisfy: [:aFinancialElement |
		aFinancialElement doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 
		]! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:37:10' prior: 50682386!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	(financialElements  anySatisfy: [:aFinancialElement |
		aFinancialElement doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 
		]) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 15:37:46' prior: 50682201!
add: aFinancialElementToAdd 
		self checkIfItCanAddThisFinancialElement:  aFinancialElementToAdd . 
		financialElements  add: aFinancialElementToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:37:51'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:37:51'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:37:51'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:37:51'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:37:51'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:37:51'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:37:51'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:37:51'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:37:51'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:37:51'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:37:52'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:37:52'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:37:52'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:37:56'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:39:21' prior: 50682395!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	(self checkIfItCanAddThisFinancialElement:  aFinancialElementToAdd ) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:39:22'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:39:33' prior: 50682468!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	(self checkIfItCanAddThisFinancialElement:  aFinancialElementToAdd) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:39:46' prior: 50682481!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	(self doesItContainsOrIsThisFinancialElement:  aFinancialElementToAdd) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:39:47'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:39:47'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:39:47'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:39:47'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:39:47'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:39:48'!
ERROR!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:39:48'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:39:48'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:39:48'!
ERROR!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:39:48'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:39:48'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:39:48'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:39:48'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:39:56'!
ERROR!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:40:04'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:41:55' prior: 50682322!
doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 ^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd  .
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^ aFinancialElement  doesItContainsOrIsThisFinancialElement:  aFinancialElementToAdd .
						]
				] 
		]
	^false
	.
	
		! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:41:57'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:41:57'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:41:57'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:41:57'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:41:57'!
ERROR!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:41:57'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:41:57'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:41:57'!
ERROR!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:41:57'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:41:57'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:42:01'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:42:09' prior: 50682557!
doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 

		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						 ^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd  .
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						^aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						^ aFinancialElement  doesItContainsOrIsThisFinancialElement:  aFinancialElementToAdd .
						]
				] 
		].
	^false
	.
	
		! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:42:16'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:42:21'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:42:21'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:42:21'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:42:21'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:42:21'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:42:21'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:42:21'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:42:21'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:42:21'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:42:21'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:42:21'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:42:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:42:21'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:44:47' prior: 50682640!
doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 
		|acc| 
		acc:= false.  
		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						  acc:= acc or: (aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ).
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						acc:= acc or: (aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement) 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						acc := acc or: (aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd)
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						acc:= acc or: ( aFinancialElement  doesItContainsOrIsThisFinancialElement:  aFinancialElementToAdd ).
						]
				] 
		].
	^false
	.
	
		! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:44:52' prior: 50682769!
doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 
		|acc| 
		acc:= false.  
		financialElements  do:[:aFinancialElement|
			(aFinancialElement  isKindOf: ReceptiveAccount ) ifTrue:  [
					(aFinancialElementToAdd  isKindOf:  ReceptiveAccount  ) ifTrue: [
						  acc:= acc or: (aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd ).
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						acc:= acc or: (aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement) 
						]
				] ifFalse:[
					(aFinancialElementToAdd   isKindOf:  ReceptiveAccount  ) ifTrue: [
						acc := acc or: (aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd)
						]. 
					(aFinancialElementToAdd   isKindOf:  Portfolio  ) ifTrue:  [
						acc:= acc or: ( aFinancialElement  doesItContainsOrIsThisFinancialElement:  aFinancialElementToAdd ).
						]
				] 
		].
	^acc
	.
	
		! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:44:53'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:44:53'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:44:53'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:44:53'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:44:53'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:44:53'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:44:53'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:44:53'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:44:53'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:44:53'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:44:53'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:44:53'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:44:53'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 15:47:11' prior: 50677713!
test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios
|portfolio account portafolioToAdd innerPortfolio innerPortfolioInTheInnerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 
innerPortfolioInTheInnerPortfolio:= Portfolio new initialize .

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolioInTheInnerPortfolio add: account.
innerPortfolio  add:  innerPortfolioInTheInnerPortfolio .
portfolio add: innerPortfolio .
portafolioToAdd add: account .

self should: [portfolio add: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:47:13'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:47:13'!
PASSED!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'jb 5/21/2023 15:47:21' prior: 50678107!
test11|portfolio account portafolioToAdd register|

portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
account := ReceptiveAccount new.
register :=  Deposit register: 100 on: account.

portfolio add: account.
portafolioToAdd addAccount: account .
self assert: ( portfolio  hasRegistered: register )! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'jb 5/21/2023 15:47:27' prior: 50682967!
test11|portfolio account portafolioToAdd register|

portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
account := ReceptiveAccount new.
register :=  Deposit register: 100 on: account.

portfolio add: account.
portafolioToAdd add: account .
self assert: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:47:28'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:47:28'!
PASSED!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'jb 5/21/2023 15:47:42' prior: 50678182!
test12|portfolio account portafolioToAdd register|

portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio add: account.
portafolioToAdd add: account .
self deny: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:47:44'!
PASSED!

!methodRemoval: Portfolio #addAccount: stamp: 'jb 5/21/2023 15:47:52'!
addAccount: accountToAdd 
	self hasAccount: accountToAdd.	
	financialElements  add: accountToAdd .
	accounts add: accountToAdd 
		
	
	
	
	
!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 15:48:14' prior: 50680415!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd  secondAccount secondPortafolioToAdd |

portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd add: secondAccount.

portfolio := Portfolio new initialize.


portfolio add: portafolioToAdd .
portfolio add: secondPortafolioToAdd .



self assert:200 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:48:15'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:48:15'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 15:48:29' prior: 50680572!
test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio portafolioInInnerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
portafolioInInnerPortafolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portafolioInInnerPortafolio add: account.
innerPortafolio add: portafolioInInnerPortafolio.
portfolio add: innerPortafolio .
self should: [portfolio add: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:48:31'!
PASSED!

!methodRemoval: Portfolio #addPortafolio: stamp: 'jb 5/21/2023 15:48:39'!
addPortafolio: portafolioToAdd 
	self failIfFoundSameAccountIn: portafolioToAdd.		
		financialElements  add: portafolioToAdd .
	portfolios add: portafolioToAdd !

!methodRemoval: Portfolio #failIfFoundSameAccountIn: stamp: 'jb 5/21/2023 15:48:50'!
failIfFoundSameAccountIn: portafolioToAdd

	self haveTheSameAccount: portafolioToAdd.
	portfolios do:[:aPortfolio| aPortfolio failIfFoundSameAccountIn: portafolioToAdd]!

!methodRemoval: Portfolio #hasAccount: stamp: 'jb 5/21/2023 15:49:07'!
hasAccount: accountToAdd

	^ (self hasAccountInFinancialElements: accountToAdd) 
	ifFalse: [
		self hasAccountInInnerPortfolios: accountToAdd.
			]!

!methodRemoval: Portfolio #hasAccountInAccounts: stamp: 'jb 5/21/2023 15:49:11'!
hasAccountInAccounts: accountToAdd

	^ (self accounts) detect:[:account| ( account = accountToAdd)]
	ifFound:[:accoutn |  self error: self class cannotAddAlreadyExistingAccount ]
	ifNone:[^false]!

!methodRemoval: Portfolio #hasAccountInFinancialElements: stamp: 'jb 5/21/2023 15:49:19'!
hasAccountInFinancialElements: accountToAdd 
	
	( financialElements   anySatisfy: [:aFinancialElement | 
			aFinancialElement  = accountToAdd  
		] )ifTrue:[
			self error: self class cannotAddAlreadyExistingAccount		
		].
		^false	
!

!methodRemoval: Portfolio #hasAccountInInnerPortfolios: stamp: 'jb 5/21/2023 15:49:24'!
hasAccountInInnerPortfolios: accountToAdd

	^ portfolios do:[:aPortfolio| aPortfolio hasAccount: accountToAdd ]!

!methodRemoval: Portfolio #haveTheSameAccount: stamp: 'jb 5/21/2023 15:49:29'!
haveTheSameAccount: portafolioToAdd

	^ accounts do:[:anAccount| portafolioToAdd hasAccount: anAccount ]!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 15:49:34'!
PASSED!

!methodRemoval: Portfolio #accounts stamp: 'jb 5/21/2023 15:49:59'!
accounts
	^accounts !

!methodRemoval: Portfolio #portfolios stamp: 'jb 5/21/2023 15:50:00'!
portfolios
	^portfolios !
!Portfolio methodsFor: 'initialization' stamp: 'jb 5/21/2023 15:50:07' prior: 50678336 overrides: 16920235!
initialize
financialElements  := OrderedCollection new. 
	
! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 15:50:18'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios financialElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 15:50:18'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'portfolios financialElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 15:50:18'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'financialElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: Portfolio #checkIfThisFinancialElement:hasOrIsThisAccount: stamp: 'jb 5/21/2023 15:50:36'!
checkIfThisFinancialElement: aFinancialElement hasOrIsThisAccount: anAccount 
	  (aFinancialElement  hasOrIsThisAccount: anAccount  ) ifTrue:[
			self error: self class cannotAddAlreadyExistingAccount .
		] !

!methodRemoval: Portfolio #checkIfThisFinancialElement:hasOrIsThisPortfolio: stamp: 'jb 5/21/2023 15:50:45'!
checkIfThisFinancialElement: aFinancialElement hasOrIsThisPortfolio: aPortfolio 
	(aFinancialElement hasOrIsThisPortfolio: aPortfolio) ifTrue:[
		self error: self class cannotAddAlreadyExistingAccount 
		]!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:54:00' prior: 50682801!
doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 
		
		^ financialElements  anySatisfy:[:aFinancialElement|
			aFinancialElement doesItContainsOrIsThisFinancialElement:  aFinancialElement 
		].
	
	
	
		! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:55:57' prior: 50683435!
doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 
		
		^ financialElements  anySatisfy:[:aFinancialElement|
			(aFinancialElementToAdd  isKindOf:  ReceptiveAccount ) ifTrue:[
						aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd 
				].
			(aFinancialElementToAdd  isKindOf:  Portfolio ) ifTrue:[
				aFinancialElement doesItContainsOrIsThisFinancialElement:  aFinancialElement 
		]
	].
	
	
	
		! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:07:20' prior: 50683445!
doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 
		
		^ financialElements  anySatisfy:[:aFinancialElement|
			(aFinancialElementToAdd  isKindOf:  ReceptiveAccount ) ifTrue:[
						aFinancialElement  hasOrIsThisAccount:  aFinancialElementToAdd 
				].
			(aFinancialElementToAdd  isKindOf:  Portfolio ) ifTrue:[
				(aFinancialElement  isKindOf:  Portfolio ) ifTrue:  [
					aFinancialElement doesItContainsOrIsThisFinancialElement:  aFinancialElement]. 
				(aFinancialElement  isKindOf:  ReceptiveAccount  ) ifTrue: [
					aFinancialElementToAdd  hasOrIsThisAccount:  aFinancialElement 
					]
		]
	].
	
	
	
		! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 16:07:22'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 16:07:22'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:07:22'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 16:07:22'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:07:22'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 16:07:22'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 16:07:22'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 16:07:22'!
FAILURE!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 16:07:22'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 16:07:22'!
FAILURE!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 16:07:22'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 16:07:22'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 16:07:22'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 15:54:00' prior: 50683461!
doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 
		
		^ financialElements  anySatisfy:[:aFinancialElement|
			aFinancialElement doesItContainsOrIsThisFinancialElement:  aFinancialElement 
		].
	
	
	
		! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:10:16' prior: 50683534!
doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 
		
		^ financialElements  anySatisfy:[:aFinancialElement|
			  aFinancialElementToAdd couldItBeConteinedInOrIsThisFinancialElement: aFinancialElement 
		].
	
	
	
		! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 16:10:21'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 16:10:21'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:10:21'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 16:10:21'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:10:21'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 16:10:21'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 16:10:21'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 16:10:21'!
FAILURE!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 16:10:21'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 16:10:21'!
FAILURE!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 16:10:21'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 16:10:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 16:10:21'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:10:23'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 16:10:34'!
couldItBeConteinedInOrIsThisFinancialElement: aFinancialElement 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 16:10:56' prior: 50683607!
couldItBeConteinedInOrIsThisFinancialElement: aFinancialElement 
	^aFinancialElement  hasOrIsThisAccount:  self.! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 16:11:00'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 16:11:00'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 16:11:00'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 16:11:00'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 16:11:00'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:11:00'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:11:00'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 16:11:00'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 16:11:00'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 16:11:00'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 16:11:00'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 16:11:00'!
FAILURE!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 16:11:00'!
FAILURE!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:11:02'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:11:08'!
couldItBeConteinedInOrIsThisFinancialElement: aFinancialElement 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:11:49' prior: 50683672!
couldItBeConteinedInOrIsThisFinancialElement: aFinancialElement 
	 ^aFinancialElement  doesItHaveOrIsThisPortfolio: self.! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 16:11:56'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 16:11:56'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 16:11:56'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 16:11:56'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 16:11:56'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:11:56'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 16:11:56'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 16:11:56'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 16:11:56'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:11:56'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 16:11:56'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 16:11:56'!
FAILURE!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 16:11:56'!
FAILURE!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:11:58'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:12:04'!
doesItHaveOrIsThisPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:12:53' prior: 50683738!
doesItHaveOrIsThisPortfolio: aPortfolio 
	self doesItContainsOrIsThisFinancialElement:  aPortfolio .! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 16:12:56'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 16:12:56'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 16:12:56'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 16:12:56'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 16:12:56'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:12:56'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 16:12:56'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 16:12:56'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 16:12:56'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:12:56'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 16:12:56'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 16:12:56'!
FAILURE!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 16:12:56'!
FAILURE!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:12:58'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 16:13:04'!
doesItHaveOrIsThisPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 16:13:22' prior: 50683802!
doesItHaveOrIsThisPortfolio: aPortfolio 
	^aPortfolio  hasOrIsThisAccount:  self.! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:13:26'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 16:13:26'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 16:13:26'!
FAILURE!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 16:13:26'!
FAILURE!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:13:28'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:13:57' prior: 50683743!
doesItHaveOrIsThisPortfolio: aPortfolio 
	^self doesItContainsOrIsThisFinancialElement:  aPortfolio .! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 16:13:58'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 16:13:58'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:13:58'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 16:13:58'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:13:58'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 16:13:58'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 16:13:58'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 16:13:58'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 16:13:58'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 16:13:58'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 16:13:58'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 16:13:58'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 16:13:58'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:15:24'!
doesItContainsThisFinancialElement: aFinancialElementToAdd 
		
		^ financialElements  anySatisfy:[:aFinancialElement|
			  aFinancialElementToAdd couldItBeConteinedInOrIsThisFinancialElement: aFinancialElement 
		].
	
	
	
		! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:15:24' prior: 50682490!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	(self doesItContainsThisFinancialElement:  aFinancialElementToAdd) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:15:24' prior: 50683866!
doesItHaveOrIsThisPortfolio: aPortfolio 
	^self doesItContainsThisFinancialElement:  aPortfolio .! !

!methodRemoval: Portfolio #doesItContainsOrIsThisFinancialElement: stamp: 'jb 5/21/2023 16:15:24'!
doesItContainsOrIsThisFinancialElement: aFinancialElementToAdd 
		
		^ financialElements  anySatisfy:[:aFinancialElement|
			  aFinancialElementToAdd couldItBeConteinedInOrIsThisFinancialElement: aFinancialElement 
		].
	
	
	
		!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:18:41'!
isIncludedOrEqualTo: aFinancialElement 
	 ^aFinancialElement  doesItHaveOrIsThisPortfolio: self.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 16:18:41'!
isIncludedOrEqualTo: aFinancialElement 
	^aFinancialElement  hasOrIsThisAccount:  self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:18:42' prior: 50683922!
doesItContainsThisFinancialElement: aFinancialElementToAdd 
		
		^ financialElements  anySatisfy:[:aFinancialElement|
			  aFinancialElementToAdd isIncludedOrEqualTo: aFinancialElement 
		].
	
	
	
		! !

!methodRemoval: Portfolio #couldItBeConteinedInOrIsThisFinancialElement: stamp: 'jb 5/21/2023 16:18:42'!
couldItBeConteinedInOrIsThisFinancialElement: aFinancialElement 
	 ^aFinancialElement  doesItHaveOrIsThisPortfolio: self.!

!methodRemoval: ReceptiveAccount #couldItBeConteinedInOrIsThisFinancialElement: stamp: 'jb 5/21/2023 16:18:42'!
couldItBeConteinedInOrIsThisFinancialElement: aFinancialElement 
	^aFinancialElement  hasOrIsThisAccount:  self.!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 16:18:44'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 16:18:44'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:18:44'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 16:18:44'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:18:44'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 16:18:44'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 16:18:44'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 16:18:44'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 16:18:44'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 16:18:44'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 16:18:44'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 16:18:44'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 16:18:44'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:20:03'!
includesThisPortfolio: aPortfolio 
	^self doesItContainsThisFinancialElement:  aPortfolio .! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 16:20:03'!
includesThisPortfolio: aPortfolio 
	^aPortfolio  hasOrIsThisAccount:  self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:20:03' prior: 50683959!
isIncludedOrEqualTo: aFinancialElement 
	 ^aFinancialElement  includesThisPortfolio: self.! !

!methodRemoval: Portfolio #doesItHaveOrIsThisPortfolio: stamp: 'jb 5/21/2023 16:20:03'!
doesItHaveOrIsThisPortfolio: aPortfolio 
	^self doesItContainsThisFinancialElement:  aPortfolio .!

!methodRemoval: ReceptiveAccount #doesItHaveOrIsThisPortfolio: stamp: 'jb 5/21/2023 16:20:03'!
doesItHaveOrIsThisPortfolio: aPortfolio 
	^aPortfolio  hasOrIsThisAccount:  self.!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:20:46'!
doesItHaveAnAccountInCommonWith: aPortfolio 
	^self doesItContainsThisFinancialElement:  aPortfolio .! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 16:20:46'!
doesItHaveAnAccountInCommonWith: aPortfolio 
	^aPortfolio  hasOrIsThisAccount:  self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:20:46' prior: 50684056!
isIncludedOrEqualTo: aFinancialElement 
	 ^aFinancialElement  doesItHaveAnAccountInCommonWith: self.! !

!methodRemoval: Portfolio #includesThisPortfolio: stamp: 'jb 5/21/2023 16:20:46'!
includesThisPortfolio: aPortfolio 
	^self doesItContainsThisFinancialElement:  aPortfolio .!

!methodRemoval: ReceptiveAccount #includesThisPortfolio: stamp: 'jb 5/21/2023 16:20:46'!
includesThisPortfolio: aPortfolio 
	^aPortfolio  hasOrIsThisAccount:  self.!

!methodRemoval: ReceptiveAccount #hasOrIsThisPortfolio: stamp: 'jb 5/21/2023 16:22:15'!
hasOrIsThisPortfolio: aPortfolio 
	^false!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:22:28'!
hasThisAccount: anAccount
	^financialElements  anySatisfy: [:aFinancialElement|
		aFinancialElement  hasOrIsThisAccount:  anAccount 
		]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 16:22:28'!
hasThisAccount: anAccount 
	^self = anAccount  ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:22:28' prior: 50680514!
hasOrIsThisAccount: anAccount
	^financialElements  anySatisfy: [:aFinancialElement|
		aFinancialElement  hasThisAccount:  anAccount 
		]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:22:28' prior: 50683965!
isIncludedOrEqualTo: aFinancialElement 
	^aFinancialElement  hasThisAccount:  self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:22:28' prior: 50684079!
doesItHaveAnAccountInCommonWith: aPortfolio 
	^aPortfolio  hasThisAccount:  self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:22:28' prior: 50684106!
hasThisAccount: anAccount
	^financialElements  anySatisfy: [:aFinancialElement|
		aFinancialElement  hasThisAccount:  anAccount 
		]! !

!methodRemoval: Portfolio #hasOrIsThisAccount: stamp: 'jb 5/21/2023 16:22:28'!
hasOrIsThisAccount: anAccount
	^financialElements  anySatisfy: [:aFinancialElement|
		aFinancialElement  hasThisAccount:  anAccount 
		]!

!methodRemoval: ReceptiveAccount #hasOrIsThisAccount: stamp: 'jb 5/21/2023 16:22:28'!
hasOrIsThisAccount: anAccount 
	^self = anAccount  !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/21/2023 16:22:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/21/2023 16:22:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/21/2023 16:22:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/21/2023 16:22:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/21/2023 16:22:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/21/2023 16:22:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/21/2023 16:22:33'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 16:22:36'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 16:22:36'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:22:36'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 16:22:36'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:22:36'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 16:22:36'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 16:22:36'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 16:22:36'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 16:22:36'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 16:22:36'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 16:22:36'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 16:22:36'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 16:22:36'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:24:21'!
hasOrIsThisAccount: anAccount
	^financialElements  anySatisfy: [:aFinancialElement|
		aFinancialElement  hasThisAccount:  anAccount 
		]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 16:24:21'!
hasOrIsThisAccount: anAccount 
	^self = anAccount  ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:24:21' prior: 50684138!
hasThisAccount: anAccount
	^financialElements  anySatisfy: [:aFinancialElement|
		aFinancialElement  hasOrIsThisAccount:  anAccount 
		]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:24:21' prior: 50684132!
doesItHaveAnAccountInCommonWith: aPortfolio 
	^aPortfolio  hasOrIsThisAccount:  self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:24:21' prior: 50684126!
isIncludedOrEqualTo: aFinancialElement 
	^aFinancialElement  hasOrIsThisAccount:  self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:24:21' prior: 50684232!
hasOrIsThisAccount: anAccount
	^financialElements  anySatisfy: [:aFinancialElement|
		aFinancialElement  hasOrIsThisAccount:  anAccount 
		]! !

!methodRemoval: Portfolio #hasThisAccount: stamp: 'jb 5/21/2023 16:24:21'!
hasThisAccount: anAccount
	^financialElements  anySatisfy: [:aFinancialElement|
		aFinancialElement  hasOrIsThisAccount:  anAccount 
		]!

!methodRemoval: ReceptiveAccount #hasThisAccount: stamp: 'jb 5/21/2023 16:24:21'!
hasThisAccount: anAccount 
	^self = anAccount  !
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:32:01'!
doesAnyOfItsElementsHasAnAccountInCommonWith: aFinancialElementToAdd 
		
		^ financialElements  anySatisfy:[:aFinancialElement|
			  aFinancialElementToAdd isIncludedOrEqualTo: aFinancialElement 
		].
	
	
	
		! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:32:01' prior: 50683933!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	(self doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:32:01' prior: 50684073!
doesItHaveAnAccountInCommonWith: aPortfolio 
	^self doesAnyOfItsElementsHasAnAccountInCommonWith:  aPortfolio .! !

!methodRemoval: Portfolio #doesItContainsThisFinancialElement: stamp: 'jb 5/21/2023 16:32:01'!
doesItContainsThisFinancialElement: aFinancialElementToAdd 
		
		^ financialElements  anySatisfy:[:aFinancialElement|
			  aFinancialElementToAdd isIncludedOrEqualTo: aFinancialElement 
		].
	
	
	
		!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/21/2023 16:34:08'!
sharesAnAccountWith: aFinancialElement 
	 ^aFinancialElement  doesItHaveAnAccountInCommonWith: self.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 16:34:08'!
sharesAnAccountWith: aFinancialElement 
	^aFinancialElement  hasOrIsThisAccount:  self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 16:34:08' prior: 50684282!
doesAnyOfItsElementsHasAnAccountInCommonWith: aFinancialElementToAdd 
		
		^ financialElements  anySatisfy:[:aFinancialElement|
			  aFinancialElementToAdd sharesAnAccountWith: aFinancialElement 
		].
	
	
	
		! !

!methodRemoval: Portfolio #isIncludedOrEqualTo: stamp: 'jb 5/21/2023 16:34:08'!
isIncludedOrEqualTo: aFinancialElement 
	 ^aFinancialElement  doesItHaveAnAccountInCommonWith: self.!

!methodRemoval: ReceptiveAccount #isIncludedOrEqualTo: stamp: 'jb 5/21/2023 16:34:08'!
isIncludedOrEqualTo: aFinancialElement 
	^aFinancialElement  hasOrIsThisAccount:  self.!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 16:34:15'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 16:34:15'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:34:15'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 16:34:15'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:34:15'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 16:34:15'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 16:34:15'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 16:34:15'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 16:34:15'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 16:34:15'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 16:34:15'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 16:34:15'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 16:34:15'!
PASSED!
!ReceptiveAccount methodsFor: 'testing' stamp: 'jb 5/21/2023 16:34:46' prior: 50684252!
doesItHaveAnAccountInCommonWith: aFinancialElement 
	^aFinancialElement  hasOrIsThisAccount:  self.! !
!FinancialElement methodsFor: 'transactions' stamp: 'jb 5/21/2023 16:39:14'!
doesItHaveAnAccountInCommonWith: aFinancialElement
	self  subclassResponsibility ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 16:39:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 16:39:27'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 16:41:38'!
test13

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add:account.


self assert:100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 16:41:40'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 16:41:40'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 16:45:18' prior: 50684461!
test13
|portfolioFather portfolioChild account |
portfolioFather := Portfolio new initialize .portfolioChild := Portfolio new initialize .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFather  add:account.portfolioFather  add: portfolioChild  . 

self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].


! !

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 16:45:19'!
FAILURE!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 16:46:53' prior: 50684526!
test13
|portfolioFather portfolioChild account |
portfolioFather := Portfolio new initialize .portfolioChild := Portfolio new initialize .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFather  add:account.portfolioFather  add: portfolioChild  . 

self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 16:47:46'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 16:57:38'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 16:59:55'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'financialElements father'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 16:59:53' prior: 50684292!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	father doesAnyOfItsElementsHasAnAccountInCommonWith:   aFinancialElementToAdd . 
	
	(self doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:01:13' prior: 50684578!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	
	(father doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:01:17'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:01:17'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:01:17'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:01:17'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:01:17'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:01:17'!
ERROR!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:01:17'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:01:17'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:01:17'!
ERROR!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:01:17'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:01:17'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:01:17'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:01:17'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:01:17'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'jb 5/21/2023 17:01:36' prior: 50683385 overrides: 16920235!
initialize
financialElements  := OrderedCollection new. 
	
father := self! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:01:38'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:01:38'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:01:38'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 17:02:43' prior: 50682407!
add: aFinancialElementToAdd 
		self checkIfItCanAddThisFinancialElement:  aFinancialElementToAdd . 
		financialElements  add: aFinancialElementToAdd. 
		(aFinancialElementToAdd  isKindOf:  Portfolio ) ifTrue: [
			aFinancialElementToAdd  changeFather: self. 
			]! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 17:03:03'!
chageFather: aPortfolio
	father:= aPortfolio ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:03:04'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:03:04'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:03:04'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:03:04'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:03:04'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:03:04'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:03:04'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:03:04'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:03:04'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:03:04'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:03:04'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:03:04'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:03:04'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:03:04'!
ERROR!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:03:42'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:03:42'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:03:42'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:03:42'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:03:42'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:03:42'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:03:42'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:03:42'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:03:49'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 17:04:03'!
changeFather: aPortfolio
	father:= aPortfolio ! !

!methodRemoval: Portfolio #chageFather: stamp: 'jb 5/21/2023 17:04:03'!
chageFather: aPortfolio
	father:= aPortfolio !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:04:04'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:04:04'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:04:04'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:04:04'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:04:04'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:04:04'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:04:04'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:04:04'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:04:04'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:04:04'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:04:04'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:04:05'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:04:05'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:04:05'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 17:05:37' prior: 50684547!
test13
|portfolioFatherLeft   portfolioFatherRight  portfolioChild account |portfolioFatherLeft  := Portfolio  new.
portfolioFatherRight := Portfolio new  .portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFatherLeft  add:account.portfolioFatherLeft add: portfolioChild  . 
portfolioFatherRight  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 17:05:47' prior: 50684897!
test13
|portfolioFatherLeft   portfolioFatherRight  portfolioChild account |portfolioFatherLeft  := Portfolio  new.
portfolioFatherRight := Portfolio new  .portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFatherLeft  add:account.portfolioFatherLeft add: portfolioChild  . 

portfolioFatherRight  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:05:55'!
FAILURE!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 17:10:27'!
test14
|portfolioFatherLeft   portfolioFatherRight  portfolioChild account |portfolioFatherLeft  := Portfolio  new.
portfolioFatherRight := Portfolio new  .portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFatherLeft  add:account.portfolioFatherLeft add: portfolioChild  . 

portfolioFatherRight  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 17:10:45' prior: 50684919!
test13
|portfolioFatherLeft     portfolioChild account |portfolioFatherLeft  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFatherLeft  add:account.portfolioFatherLeft add: portfolioChild  . 




self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:10:46'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:10:47'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 17:10:47'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 17:10:47'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'jb 5/21/2023 17:11:17' prior: 50684653 overrides: 16920235!
initialize
financialElements  := OrderedCollection new. 
	
father := OrderedCollection  new. 
father add: self . ! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:12:13' prior: 50684591!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	father  do: [:aFather |
	(aFather doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	]! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 17:14:33' prior: 50684836!
changeFather: aPortfolio
	father remove: [self] ifAbsent:[
		].
	father add: aPortfolio ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 17:14:35'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 17:37:02'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'financialElements parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 17:37:02' prior: 50685060!
changeFather: aPortfolio
	parents remove: [self] ifAbsent:[
		].
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 17:37:02' prior: 50685042 overrides: 16920235!
initialize
financialElements  := OrderedCollection new. 
	
parents := OrderedCollection  new. 
parents add: self . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 17:37:02' prior: 50685049!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	parents  do: [:aFather |
	(aFather doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	]! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:37:25' prior: 50685143!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	parents  do: [:aParent |
	(aParent doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	]! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 17:39:06'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'financialElements family'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 17:39:06' prior: 50685129!
changeFather: aPortfolio
	family remove: [self] ifAbsent:[
		].
	family add: aPortfolio ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 17:39:06' prior: 50685136 overrides: 16920235!
initialize
financialElements  := OrderedCollection new. 
	
family := OrderedCollection  new. 
family add: self . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 17:39:06' prior: 50685154!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	family  do: [:aParent |
	(aParent doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	]! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:39:16' prior: 50685187!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	family  do: [:aFamilyMember |
	(aFamilyMember doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	]! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:40:36'!
doesAnyOfItsElementsHasAnAccountInCommonWith: aFinancialElementToAdd  notStoppingBy: aPortfolio 
		
		^ financialElements  anySatisfy:[:aFinancialElement|
			  aFinancialElementToAdd sharesAnAccountWith: aFinancialElement 
		].
	
	
	
		! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:42:31' prior: 50685209!
doesAnyOfItsElementsHasAnAccountInCommonWith: aFinancialElementToAdd  notStoppingBy: aPortfolioToAvoid 
		|acc|
		acc:= false. 
		 financialElements  do:[:aFinancialElement|
			aFinancialElement  = aPortfolioToAvoid ifFalse:[
				acc:= acc or: ( aFinancialElementToAdd sharesAnAccountWith: aFinancialElement)  
			]
		].
	^acc
	
	
		! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:43:10' prior: 50685198!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	family  do: [:aFamilyMember |
	(aFamilyMember doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	]! !
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 17:43:24' prior: 50685173!
changeFather: aPortfolio
	
	family add: aPortfolio ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:43:26'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 17:43:26'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 17:43:29' prior: 50685246!
changeFather: aPortfolio
	family add: aPortfolio ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:43:30'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 17:43:30'!
PASSED!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:47:21' prior: 50685220!
doesAnyOfItsElementsHasAnAccountInCommonWith: aFinancialElementToAdd  notStoppingBy: aPortfolioToAvoid 
		^ (aFinancialElementToAdd  reject:  [:aFinancialElement |
				aFinancialElement  = aPortfolioToAvoid  
			] )anySatisfy:  [ :aFinancialElement |
					aFinancialElement  doesItHaveAnAccountInCommonWith:  aFinancialElementToAdd  
			]
	
		! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:47:49' prior: 50685364!
doesAnyOfItsElementsHasAnAccountInCommonWith: aFinancialElementToAdd  notStoppingBy: aPortfolioToAvoid 
		^ (aFinancialElementToAdd  reject:  [:aFinancialElement |
				aFinancialElement  = aPortfolioToAvoid  
			] )anySatisfy:  [ :aFinancialElement |
					aFinancialElementToAdd  sharesAnAccountWith:  aFinancialElement 
			]
	
		! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:47:51'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:47:51'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 17:47:51'!
ERROR!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:48:13' prior: 50685378!
doesAnyOfItsElementsHasAnAccountInCommonWith: aFinancialElementToAdd  notStoppingBy: aPortfolioToAvoid 
		^ (financialElements  reject:  [:aFinancialElement |
				aFinancialElement  = aPortfolioToAvoid  
			] )anySatisfy:  [ :aFinancialElement |
					aFinancialElementToAdd  sharesAnAccountWith:  aFinancialElement 
			]
	
		! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:48:14'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 17:48:14'!
PASSED!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:48:38' prior: 50685446!
doesAnyOfItsElementsHasAnAccountInCommonWith: aFinancialElementToAdd  notStoppingBy: aPortfolioToAvoid 
		^ (financialElements  reject:  [:aFinancialElement |
				aFinancialElement  = aPortfolioToAvoid  
			] )anySatisfy:  [ :aFinancialElement |
					aFinancialElementToAdd  sharesAnAccountWith:  aFinancialElement ]
	
		! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:49:07'!
financialElementsWithout: aPortfolioToAvoid

	^ financialElements  reject:  [:aFinancialElement |
				aFinancialElement  = aPortfolioToAvoid  
			]! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 17:49:07' prior: 50685514!
doesAnyOfItsElementsHasAnAccountInCommonWith: aFinancialElementToAdd  notStoppingBy: aPortfolioToAvoid 
		^ (self financialElementsWithout: aPortfolioToAvoid )anySatisfy:  [ :aFinancialElement |
					aFinancialElementToAdd  sharesAnAccountWith:  aFinancialElement ]
	
		! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:49:23'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:49:23'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:49:23'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:49:23'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:49:23'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:49:23'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:49:23'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:49:23'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:49:24'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:49:24'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:49:24'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:49:24'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:49:24'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:49:24'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 17:49:24'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 17:49:36'!
test15
|portfolioFatherLeft   portfolioFatherRight  portfolioChild account |portfolioFatherLeft  := Portfolio  new.
portfolioFatherRight := Portfolio new  .portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFatherLeft  add:account.portfolioFatherLeft add: portfolioChild  . 

portfolioFatherRight  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 17:51:41' prior: 50685601!
test15
| portfolioRoot    portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot   add:account.
portfolioRoot  add: portfolioFather .

portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 17:51:42'!
FAILURE!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 17:54:59'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 17:54:59'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 17:54:59'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 17:54:59'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 17:54:59'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 17:54:59'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 17:55:00'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 17:55:00'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 17:55:00'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 17:55:00'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 17:55:00'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 17:55:00'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 17:55:00'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 17:55:00'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 17:55:00'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 17:55:00'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 17:55:00'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'jb 5/21/2023 18:13:57' prior: 50685180 overrides: 16920235!
initialize
financialElements  := OrderedCollection new. 
	
family := OrderedCollection  new. 
! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 18:14:41' prior: 50685234!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	family  do: [:aFamilyMember |
	(aFamilyMember doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	].
	financialElements doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:14:43'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:14:43'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:14:43'!
ERROR!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 18:15:19' prior: 50685712!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	family  do: [:aFamilyMember |
	(aFamilyMember doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	].
	self doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:15:21'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:15:21'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:15:21'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:15:21'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:15:21'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:15:21'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:15:21'!
FAILURE!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:15:21'!
FAILURE!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:15:21'!
FAILURE!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:15:21'!
FAILURE!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:15:21'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:15:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:15:21'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:15:21'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:15:21'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:15:21'!
FAILURE!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 18:15:52' prior: 50685783!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	family  do: [:aFamilyMember |
	(aFamilyMember doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	].
	(self doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:15:54'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:15:54'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:15:54'!
FAILURE!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 18:16:41' prior: 50685854!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	|roots|
	roots := OrderedCollection  new. 
	
	
	
	
	family  do: [:aFamilyMember |
	(aFamilyMember doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	].
	(self doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 18:16:48'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'financialElements parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 18:16:48' prior: 50685305!
changeFather: aPortfolio
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 18:16:48' prior: 50685706 overrides: 16920235!
initialize
financialElements  := OrderedCollection new. 
	
parents := OrderedCollection  new. 
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 18:16:48' prior: 50685930!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	|roots|
	roots := OrderedCollection  new. 
	
	
	
	
	parents  do: [:aFamilyMember |
	(aFamilyMember doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	].
	(self doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 18:18:06' prior: 50685970!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	|roots|
	roots := OrderedCollection  new. 
	
	parents  do: [:aParent|
		roots add: aParent roots.
		
		].
	
	
	roots  do: [:aFamilyMember |
	(aFamilyMember doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	].
	(self doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:18:11'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:18:11'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:18:11'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:18:11'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:18:14'!
FAILURE!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 18:23:25'!
roots
	|collectionOfRoots| 
	collectionOfRoots  := OrderedCollection new. 
 	parents  ifNil:  [
		collectionOfRoots  add: self
		^ collectionOfRoots 
		].
	parents  do:[:aParent|
		collectionOfRoots  addAll:  aParent  roots. 
		]. 
	^collectionOfRoots  ! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 18:24:22' prior: 50685989!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	
	(self roots ) do: [:aRoot |
	(aRoot doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	].
	(self doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:24:23'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:24:23'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:24:23'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:24:23'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:24:27'!
FAILURE!

self roots!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 18:25:36' prior: 50686079!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	
	(self roots ) do: [:aRoot |
		(aRoot doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	].
	(self doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:26:40'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:26:40'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:26:40'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:26:40'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:26:42'!
FAILURE!

parents add: aPortfolio !

aPortfolio!

aFinancialElementToAdd!

a Portfolio!

portfolioChild!

aParent!

aParent  roots!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 18:29:56' prior: 50686068!
roots
	|collectionOfRoots| 
	collectionOfRoots  := OrderedCollection new. 
 	parents  ifNil:  [
		collectionOfRoots  add: self
		^ collectionOfRoots copy
		].
	parents  do:[:aParent|
		collectionOfRoots  addAll:  aParent  roots. 
		]. 
	^collectionOfRoots  ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:29:59'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:29:59'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:29:59'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:29:59'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:29:59'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:29:59'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:29:59'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:29:59'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:29:59'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:29:59'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:29:59'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:29:59'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:30:00'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:30:00'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:30:00'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:30:00'!
FAILURE!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 18:30:44' prior: 50686236!
roots
	|collectionOfRoots| 
	collectionOfRoots  := OrderedCollection new. 
 	parents  ifNil:  [
		collectionOfRoots  add: self
		^ collectionOfRoots copy
		].
	parents  do:[:aParent|
		collectionOfRoots  addAll:  aParent  roots. 
		^collectionOfRoots  
		]. 
	! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:30:45'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:30:45'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:30:45'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:30:46'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:30:46'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:30:46'!
ERROR!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:30:46'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:30:46'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:30:46'!
ERROR!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:30:46'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:30:46'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:30:46'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:30:46'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:30:46'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:30:46'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:30:46'!
ERROR!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 18:30:55' prior: 50686304!
roots
	|collectionOfRoots| 
	collectionOfRoots  := OrderedCollection new. 
 	parents  ifNil:  [
		collectionOfRoots  add: self
		^ collectionOfRoots copy
		].
	parents  do:[:aParent|
		collectionOfRoots  addAll:  aParent  roots. 
		
		]. 
	^collectionOfRoots  ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:30:56'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:30:57'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:30:57'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:30:57'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:30:57'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:30:57'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:30:57'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:30:57'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:30:57'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:30:57'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:30:57'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:30:57'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:30:57'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:30:57'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:30:57'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:30:57'!
FAILURE!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 18:31:44' prior: 50686372!
roots
	|collectionOfRoots| 
	collectionOfRoots  := OrderedCollection new. 
 	parents  ifEmpty: [
		collectionOfRoots  add:self .
		^collectionOfRoots 
		].
	parents  do:[:aParent|
		collectionOfRoots  addAll:  aParent  roots. 
		
		]. 
	^collectionOfRoots  ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:31:46'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:31:46'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 18:34:03' prior: 50685623!
test15
| portfolioRoot1   portfolioRoot2   portfolioFather  portfolioChild account |portfolioRoot1  := Portfolio new. 
portfolioRoot2  := Portfolio new. 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot2   add:account.
portfolioRoot2  add: portfolioFather .
portfolioRoot1  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:34:05'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:34:05'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 18:34:13'!
test16
| portfolioRoot1   portfolioRoot2   portfolioFather  portfolioChild account |portfolioRoot1  := Portfolio new. 
portfolioRoot2  := Portfolio new. 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot2   add:account.
portfolioRoot2  add: portfolioFather .
portfolioRoot1  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:34:53'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 18:34:53'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 18:34:57'!
test17
| portfolioRoot1   portfolioRoot2   portfolioFather  portfolioChild account |portfolioRoot1  := Portfolio new. 
portfolioRoot2  := Portfolio new. 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot2   add:account.
portfolioRoot2  add: portfolioFather .
portfolioRoot1  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 18:34:59'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 18:34:59'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 18:36:33' prior: 50686736!
test17

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add:account.

self assert:100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 18:36:36'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:36:36'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:36:36'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:36:36'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:36:36'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:36:36'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:36:36'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:36:36'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:36:36'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:36:36'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:36:37'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:36:37'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:36:37'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:36:37'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:36:37'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:36:37'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:36:37'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 18:36:37'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 18:36:37'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 18:37:40' prior: 50686823!
test17

|portfolio account register |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection  new with: register  )equals: portfolio transactions .! !

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 18:37:41'!
ERROR!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 18:37:59' prior: 50686897!
test17

|portfolio account register |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 18:38:00'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'jb 5/21/2023 18:40:02' overrides: 50678315!
transactions
	|transactions|
	transactions := OrderedCollection  new. 
	financialElements  do: [:aFinancialElement|
		transactions  addAll:  aFinancialElement  transactions .	
		
		]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 18:40:11' prior: 50686925 overrides: 50678315!
transactions
	|transactions|
	transactions := OrderedCollection  new. 
	financialElements  do: [:aFinancialElement|
		transactions  addAll:  aFinancialElement  transactions .	
	]
	^transactions ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:40:12'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:40:12'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:40:12'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:40:12'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 18:40:13'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 18:40:13'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 18:40:13'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 18:40:18' prior: 50686935 overrides: 50678315!
transactions
	|transactions|
	transactions := OrderedCollection  new. 
	financialElements  do: [:aFinancialElement|
		transactions  addAll:  aFinancialElement  transactions .	
	].
	^transactions ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 18:40:20'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 18:40:20'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 18:40:49'!
test18
| portfolioRoot1   portfolioRoot2   portfolioFather  portfolioChild account |portfolioRoot1  := Portfolio new. 
portfolioRoot2  := Portfolio new. 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot2   add:account.
portfolioRoot2  add: portfolioFather .
portfolioRoot1  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 18:41:25' prior: 50687079!
test18
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.

portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 18:41:26'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 18:41:27'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 18:41:27'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/21/2023 18:41:37' prior: 50686508!
test15
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.

portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:41:38'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 18:41:38'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 18:41:38'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 18:41:39'!
PASSED!

----QUIT----(21 May 2023 18:53:32) CuisUniversity-5706.image priorSource: 11131013!

----STARTUP---- (21 May 2023 23:11:48) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64 - Copy\CuisUniversity-5706.image!

!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 23:12:58'!
addParent: aPortfolio
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:12:59' prior: 50684713!
add: aFinancialElementToAdd 
		self checkIfItCanAddThisFinancialElement:  aFinancialElementToAdd . 
		financialElements  add: aFinancialElementToAdd. 
		(aFinancialElementToAdd  isKindOf:  Portfolio ) ifTrue: [
			aFinancialElementToAdd  addParent: self. 
			]! !

!methodRemoval: Portfolio #changeFather: stamp: 'jb 5/21/2023 23:12:59'!
changeFather: aPortfolio
	parents add: aPortfolio !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:13:01'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 23:13:02'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 23:13:02'!
PASSED!
!Portfolio methodsFor: 'adding' stamp: 'jb 5/21/2023 23:17:16' prior: 50687288!
add: aFinancialElementToAdd 
		self checkIfItCanAddThisFinancialElement:  aFinancialElementToAdd . 
		financialElements  add: aFinancialElementToAdd. 
		aFinancialElementToAdd addToPortfoliosThatHaveThisFinancialElement: self.  ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:17:18'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 23:17:19'!
ERROR!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:17:21'!
ERROR!
!ReceptiveAccount methodsFor: 'adding private' stamp: 'jb 5/21/2023 23:17:29'!
addToPortfoliosThatHaveThisFinancialElement: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'adding private' stamp: 'jb 5/21/2023 23:17:45' prior: 50687444!
addToPortfoliosThatHaveThisFinancialElement: aPortfolio ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:17:49'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:17:51'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 23:17:51'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:17:51'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 23:17:51'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 23:17:51'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 23:17:51'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 23:17:51'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 23:17:51'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 23:17:51'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 23:17:51'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 23:17:51'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 23:17:51'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:17:51'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 23:17:51'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 23:17:51'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 23:17:51'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 23:17:51'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 23:17:51'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:17:54'!
ERROR!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 23:17:59'!
addToPortfoliosThatHaveThisFinancialElement: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 23:18:06' prior: 50687522!
addToPortfoliosThatHaveThisFinancialElement: aPortfolio 
	parents add: aPortfolio ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:18:09'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 23:18:10'!
PASSED!

!methodRemoval: Portfolio #addParent: stamp: 'jb 5/21/2023 23:18:25'!
addParent: aPortfolio
	parents add: aPortfolio !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 23:19:12'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'financialElements portfoliosThatHasThisPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:19:12' prior: 50686440!
roots
	|collectionOfRoots| 
	collectionOfRoots  := OrderedCollection new. 
 	portfoliosThatHasThisPortfolio  ifEmpty: [
		collectionOfRoots  add:self .
		^collectionOfRoots 
		].
	portfoliosThatHasThisPortfolio  do:[:aParent|
		collectionOfRoots  addAll:  aParent  roots. 
		
		]. 
	^collectionOfRoots  ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:19:12' prior: 50685963 overrides: 16920235!
initialize
financialElements  := OrderedCollection new. 
	
portfoliosThatHasThisPortfolio := OrderedCollection  new. 
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:19:12' prior: 50687528!
addToPortfoliosThatHaveThisFinancialElement: aPortfolio 
	portfoliosThatHasThisPortfolio add: aPortfolio ! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 23:32:52'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'financialElements portfoliosThatHasThisPortfolio portfolioHirarchy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 23:32:50' prior: 50687610!
roots
	"
	|collectionOfRoots| 
	collectionOfRoots  := OrderedCollection new. 
 	portfoliosThatHasThisPortfolio  ifEmpty: [
		collectionOfRoots  add:self .
		^collectionOfRoots 
		].
	portfoliosThatHasThisPortfolio  do:[:aParent|
		collectionOfRoots  addAll:  aParent  roots. 
		
		].  "
	^portfolioHirarchy allRoots.  ! !

!classDefinition: #PortfolioHirarchy category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 23:33:35'!
Object subclass: #PortfolioHirarchy
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'jb 5/21/2023 23:33:27' prior: 50687624 overrides: 16920235!
initialize
financialElements  := OrderedCollection new. 
	
portfoliosThatHasThisPortfolio := OrderedCollection  new. 
portfolioHirarchy  := PortfolioHirarchy of: self. ! !
!PortfolioHirarchy class methodsFor: 'nil' stamp: 'jb 5/21/2023 23:34:19'!
of: aPortfolioToStablishHirarchy
	^self new intializeWith: aPortfolioToStablishHirarchy ! !

PortfolioHirarchy subclass: #PortfolioRoot
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioRoot category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 23:35:30'!
PortfolioHirarchy subclass: #PortfolioRoot
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioHirarchy subclass: #PortfolioBranched
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioBranched category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 23:35:38'!
PortfolioHirarchy subclass: #PortfolioBranched
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioHirarchy class methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:36:00' prior: 50687677!
of: aPortfolioToStablishHirarchy
	^PortfolioRoot new intializeWith: aPortfolioToStablishHirarchy ! !

!classDefinition: 'PortfolioRoot class' category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 23:36:50'!
PortfolioRoot class
	instanceVariableNames: 'portfolio'!
!PortfolioRoot class methodsFor: 'nil' stamp: 'jb 5/21/2023 23:36:48'!
initializeWith: aPortfolioToStablishHirarchy
	portfolio := aPortfolioToStablishHirarchy 
	! !
!PortfolioRoot class methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:38:14'!
add: aPortfolioUpInTheHirarchy
	^PortfolioBranched  of: portfolio  with: aPortfolioUpInTheHirarchy 
	! !
!PortfolioBranched class methodsFor: 'nil' stamp: 'jb 5/21/2023 23:39:04'!
of: aPortfolioToMakeHirarchy with: aPortfolioToBeginHirarchy 
	^ self new initializeWith: aPortfolioToMakeHirarchy  and: aPortfolioToBeginHirarchy  ! !

!classDefinition: #PortfolioBranched category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 23:40:40'!
PortfolioHirarchy subclass: #PortfolioBranched
	instanceVariableNames: 'portfolioChild'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioBranched category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 23:40:41'!
PortfolioHirarchy subclass: #PortfolioBranched
	instanceVariableNames: 'portfolioChild parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioBranched methodsFor: 'nil' stamp: 'jb 5/21/2023 23:40:46'!
initializeWith: aPortfolioToMakeHirarchy  and: aPortfolioToBeginHirarchy
	portfolioChild := aPortfolioToMakeHirarchy  . 
	parents := OrderedCollection  new. 
	parents  add: aPortfolioToBeginHirarchy ! !
!PortfolioHirarchy methodsFor: 'nil' stamp: 'jb 5/21/2023 23:42:26'!
allRoots 
	self subclassResponsibility ! !
!PortfolioRoot methodsFor: 'no messages' stamp: 'jb 5/21/2023 23:43:28' overrides: 50687766!
allRoots 
	 ^OrderedCollection  new! !

!methodRemoval: PortfolioRoot class #initializeWith: stamp: 'jb 5/21/2023 23:43:51'!
initializeWith: aPortfolioToStablishHirarchy
	portfolio := aPortfolioToStablishHirarchy 
	!

!classDefinition: #PortfolioRoot category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 23:44:07'!
PortfolioHirarchy subclass: #PortfolioRoot
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioRoot methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:44:06'!
initializeWith: aPortfolioToStablishHirarchy
	portfolio := aPortfolioToStablishHirarchy 
	! !

!methodRemoval: PortfolioRoot class #add: stamp: 'jb 5/21/2023 23:44:17'!
add: aPortfolioUpInTheHirarchy
	^PortfolioBranched  of: portfolio  with: aPortfolioUpInTheHirarchy 
	!
!PortfolioRoot methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:44:24'!
add: aPortfolioUpInTheHirarchy
	^PortfolioBranched  of: portfolio  with: aPortfolioUpInTheHirarchy 
	! !
!PortfolioRoot class methodsFor: 'no messages' stamp: 'jb 5/21/2023 23:45:01' overrides: 50687709!
of: aPortfolioToMakeHirarchy
	^self new initializeWith:  aPortfolioToMakeHirarchy ! !
!PortfolioRoot methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:45:23' prior: 50687771 overrides: 50687766!
allRoots 
	 ^OrderedCollection  with:  portfolio ! !
!PortfolioBranched methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:46:14'!
add: aPortfolioToAddToHirarchy
	parents  add: aPortfolioToAddToHirarchy ! !
!PortfolioBranched methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:48:15' overrides: 50687766!
allRoots
	|collectionOfRoots|
	collectionOfRoots  := OrderedCollection  new. 
	parents  do: [:aParentPortfolio|
		collectionOfRoots  addAll:  aParentPortfolio  roots
		]
	^collectionOfRoots ! !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 23:48:55' prior: 50687631!
addToPortfoliosThatHaveThisFinancialElement: aPortfolio 
	portfoliosThatHasThisPortfolio add: aPortfolio .
	portfolioHirarchy  := portfolioHirarchy add: aPortfolio ! !
!PortfolioBranched methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:49:07' prior: 50687820!
add: aPortfolioToAddToHirarchy
	parents  add: aPortfolioToAddToHirarchy. 
	^self! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 23:49:13'!
ERROR!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:49:17'!
ERROR!
!PortfolioHirarchy class methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:49:55' prior: 50687709!
of: aPortfolioToStablishHirarchy
	^PortfolioRoot new initializeWith: aPortfolioToStablishHirarchy ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:50:00'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 23:50:00'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 23:50:00'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 23:50:00'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 23:50:00'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 23:50:00'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:50:02'!
FAILURE!
!PortfolioBranched methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:50:29' prior: 50687826 overrides: 50687766!
allRoots
	|collectionOfRoots|
	collectionOfRoots  := OrderedCollection  new. 
	parents  do: [:aParentPortfolio|
		collectionOfRoots  addAll:  aParentPortfolio  roots
		].
	^collectionOfRoots ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:50:32'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:50:32'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 23:50:32'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:50:32'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 23:50:32'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 23:50:32'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:50:33'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 23:50:33'!
PASSED!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 23:50:54' prior: 50687835!
addToPortfoliosThatHaveThisFinancialElement: aPortfolio 

	portfolioHirarchy  := portfolioHirarchy add: aPortfolio ! !
!Portfolio methodsFor: 'initialization' stamp: 'jb 5/21/2023 23:51:00' prior: 50687669 overrides: 16920235!
initialize
financialElements  := OrderedCollection new. 
	

portfolioHirarchy  := PortfolioHirarchy of: self. ! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jb 5/21/2023 23:51:13'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'financialElements portfolioHirarchy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 23:52:22'!
addToPortfoliosInTheHirarchy: aPortfolio 

	portfolioHirarchy  := portfolioHirarchy add: aPortfolio ! !
!ReceptiveAccount methodsFor: 'adding private' stamp: 'jb 5/21/2023 23:52:22'!
addToPortfoliosInTheHirarchy: aPortfolio ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jb 5/21/2023 23:52:22' prior: 50687367!
add: aFinancialElementToAdd 
		self checkIfItCanAddThisFinancialElement:  aFinancialElementToAdd . 
		financialElements  add: aFinancialElementToAdd. 
		aFinancialElementToAdd addToPortfoliosInTheHirarchy: self.  ! !

!methodRemoval: Portfolio #addToPortfoliosThatHaveThisFinancialElement: stamp: 'jb 5/21/2023 23:52:22'!
addToPortfoliosThatHaveThisFinancialElement: aPortfolio 

	portfolioHirarchy  := portfolioHirarchy add: aPortfolio !

!methodRemoval: ReceptiveAccount #addToPortfoliosThatHaveThisFinancialElement: stamp: 'jb 5/21/2023 23:52:22'!
addToPortfoliosThatHaveThisFinancialElement: aPortfolio !
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 23:55:35' prior: 50686156!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	
	(self roots ) do: [:aRoot |
		(aRoot doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd ) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	].
	(self doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd notStoppingBy: self) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 23:55:36'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 23:55:36'!
PASSED!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 23:55:47' prior: 50688119!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	
	
	(self roots ) do: [:aRoot |
		(aRoot doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd ) ifTrue: [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	].! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 23:55:48'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 23:55:48'!
PASSED!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/21/2023 23:57:29' prior: 50688199!
checkIfItCanAddThisFinancialElement: aFinancialElementToAdd
	(portfolioHirarchy  doesAnyElementInHirarchyHaveAnAccountInCommonWith: aFinancialElementToAdd ) ifTrue:  [
			self error: self class cannotAddAlreadyExistingAccount 
		]
	
	! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:57:37'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:57:37'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 23:57:37'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:57:37'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 23:57:37'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 23:57:38'!
ERROR!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:57:39'!
ERROR!
!PortfolioHirarchy methodsFor: 'hirarchy' stamp: 'jb 5/21/2023 23:57:47'!
doesAnyElementInHirarchyHaveAnAccountInCommonWith: aFinancialElementToAdd 
	self shouldBeImplemented.! !
!PortfolioHirarchy methodsFor: 'hirarchy' stamp: 'jb 5/21/2023 23:57:52' prior: 50688351!
doesAnyElementInHirarchyHaveAnAccountInCommonWith: aFinancialElementToAdd 
	self subclassResponsibility ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:57:56'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 23:57:56'!
ERROR!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:57:58'!
ERROR!
!PortfolioRoot methodsFor: 'hirarchy' stamp: 'jb 5/21/2023 23:58:06' overrides: 50688358!
doesAnyElementInHirarchyHaveAnAccountInCommonWith: aFinancialElementToAdd 
	self shouldBeImplemented.! !
!PortfolioRoot methodsFor: 'hirarchy' stamp: 'jb 5/21/2023 23:58:17' prior: 50688432 overrides: 50688358!
doesAnyElementInHirarchyHaveAnAccountInCommonWith: aFinancialElementToAdd 
	portfolio  doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd ! !
!PortfolioRoot methodsFor: 'hirarchy' stamp: 'jb 5/21/2023 23:58:24' prior: 50688439 overrides: 50688358!
doesAnyElementInHirarchyHaveAnAccountInCommonWith: aFinancialElementToAdd 
	^portfolio  doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:58:27'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/21/2023 23:58:27'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/21/2023 23:58:27'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/21/2023 23:58:27'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/21/2023 23:58:27'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/21/2023 23:58:28'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/21/2023 23:58:30'!
FAILURE!
!PortfolioBranched methodsFor: 'as yet unclassified' stamp: 'jb 5/22/2023 00:00:59' overrides: 50688358!
doesAnyElementInHirarchyHaveAnAccountInCommonWith: aFinancialElementToAdd 
	^self allRoots  anySatisfy: [:aPortfolioRoot|
		aPortfolioRoot  doesItHaveAnAccountInCommonWith:  aFinancialElementToAdd 
		]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 00:01:05'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 00:01:05'!
PASSED!
!PortfolioBranched methodsFor: 'as yet unclassified' stamp: 'jb 5/22/2023 00:02:53' prior: 50687990 overrides: 50687766!
allRoots
	|collectionOfRoots|
	collectionOfRoots  := OrderedCollection  new. 
	parents  do: [:aParentPortfolio|
		collectionOfRoots  addAll:  aParentPortfolio  allRoots
		].
	^collectionOfRoots ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 00:02:58'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 00:02:58'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 00:02:58'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 00:02:58'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 00:02:58'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 00:02:58'!
ERROR!
!PortfolioBranched methodsFor: 'as yet unclassified' stamp: 'jb 5/22/2023 00:03:18' prior: 50688597 overrides: 50687766!
allRoots
	|collectionOfRoots|
	collectionOfRoots  := OrderedCollection  new. 
	parents  do: [:aParentPortfolio|
		collectionOfRoots  addAll:  aParentPortfolio  roots 
		].
	^collectionOfRoots ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 00:03:22'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 00:03:22'!
PASSED!
!Portfolio methodsFor: 'adding private' stamp: 'jb 5/22/2023 00:03:42' prior: 50687647!
roots
	
	^portfolioHirarchy allRoots.  ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 00:03:44'!
PASSED!

----QUIT----(22 May 2023 00:04:26) CuisUniversity-5706.image priorSource: 11380008!

----STARTUP---- (22 May 2023 11:54:07) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64 - Copy\CuisUniversity-5706.image!


!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 11:54:17'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 11:54:17'!
PASSED!
!PortfolioHirarchy methodsFor: 'hirarchy' stamp: 'jb 5/22/2023 11:55:23'!
add:aPortfolioToAddInTheHirarchy
	self subclassResponsibility  ! !

Object subclass: #PortfolioHirarchy
	instanceVariableNames: 'portfolioInTheCenterOfTheHirarchy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioHirarchy category: 'Portfolio-Ejercicio' stamp: 'jb 5/22/2023 11:57:13'!
Object subclass: #PortfolioHirarchy
	instanceVariableNames: 'portfolioInTheCenterOfTheHirarchy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioHirarchy methodsFor: 'hirarchy' stamp: 'jb 5/22/2023 11:57:40'!
initializeWith: aPortfolio
	portfolioInTheCenterOfTheHirarchy  := aPortfolio ! !

!methodRemoval: PortfolioRoot #initializeWith: stamp: 'jb 5/22/2023 11:58:10'!
initializeWith: aPortfolioToStablishHirarchy
	portfolio := aPortfolioToStablishHirarchy 
	!
!PortfolioRoot methodsFor: 'adding' stamp: 'jb 5/22/2023 11:58:19' prior: 50687801 overrides: 50688882!
add: aPortfolioUpInTheHirarchy
	^PortfolioBranched  of: portfolioInTheCenterOfTheHirarchy  with: aPortfolioUpInTheHirarchy 
	! !
!PortfolioRoot methodsFor: 'hirarchy' stamp: 'jb 5/22/2023 11:58:37' prior: 50687815 overrides: 50687766!
allRoots 
	 ^OrderedCollection  with:  portfolioInTheCenterOfTheHirarchy ! !
!PortfolioRoot methodsFor: 'hirarchy' stamp: 'jb 5/22/2023 11:58:46' prior: 50688448 overrides: 50688358!
doesAnyElementInHirarchyHaveAnAccountInCommonWith: aFinancialElementToAdd 
	^portfolioInTheCenterOfTheHirarchy  doesAnyOfItsElementsHasAnAccountInCommonWith:  aFinancialElementToAdd ! !

!classDefinition: #PortfolioRoot category: 'Portfolio-Ejercicio' stamp: 'jb 5/22/2023 11:58:55'!
PortfolioHirarchy subclass: #PortfolioRoot
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioBranched methodsFor: 'initializing' stamp: 'jb 5/22/2023 11:59:21' prior: 50687757!
initializeWith: aPortfolioToMakeHirarchy  and: aPortfolioToBeginHirarchy
	parents := OrderedCollection  new. 
	parents  add: aPortfolioToBeginHirarchy .
	super initializeWith:  aPortfolioToMakeHirarchy ! !

!classDefinition: #PortfolioBranched category: 'Portfolio-Ejercicio' stamp: 'jb 5/22/2023 11:59:48'!
PortfolioHirarchy subclass: #PortfolioBranched
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:28:51'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:28:51'!
PASSED!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'jb 5/22/2023 12:32:27' prior: 50682981!
test11|portfolio account portafolioToAdd register|

portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
account := ReceptiveAccount new.
register :=  Deposit register: 100 on: account.

portfolio add: account.

self assert: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:32:29'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:32:30'!
PASSED!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'jb 5/22/2023 12:32:37' prior: 50689026!
test11|portfolio account  register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
register :=  Deposit register: 100 on: account.

portfolio add: account.

self assert: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:32:38'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:32:39'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:32:39'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:32:39'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:32:39'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:32:39'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:32:39'!
PASSED!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'jb 5/22/2023 12:33:14' prior: 50683047!
test12|portfolio account register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:33:16'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:33:17'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:33:17'!
PASSED!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'jb 5/22/2023 12:33:54'!
test19|portfolio account register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:33:55'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:33:55'!
PASSED!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'jb 5/22/2023 12:34:26' prior: 50689260!
test19|portfolio  portfolioToAdd account register|

portfolio := Portfolio new .portfolioToAdd  := Portfolio  new. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'jb 5/22/2023 12:35:17' prior: 50689341!
test19|portfolio  portfolioToAdd account register|

portfolio := Portfolio new .portfolioToAdd  := Portfolio  new. 

account := ReceptiveAccount new.
register:= Deposit register: 100 on: account.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .

self assert: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:35:19'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:36:11'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:36:12'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:36:12'!
PASSED!
!Portfolio methodsFor: 'register' stamp: 'jb 5/22/2023 12:38:29' prior: 50678647 overrides: 50678306!
hasRegistered: aRegister 
|acc|
	acc := false. 
	 financialElements  do:[:aFinancialElement|
		(aFinancialElement  isKindOf:ReceptiveAccount  ) ifTrue:  [
				acc := acc or: ( aFinancialElement  hasRegistered:  aRegister)  
			]
		
		].
	 ^acc! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:38:30'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:38:31'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:38:31'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:38:31'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:38:31'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:38:31'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:38:31'!
FAILURE!
!Portfolio methodsFor: 'register' stamp: 'jb 5/22/2023 12:40:24' prior: 50689503 overrides: 50678306!
hasRegistered: aRegister 
|acc|
	acc := false. 
	 financialElements  do:[:aFinancialElement|
		(aFinancialElement  isKindOf:ReceptiveAccount  ) ifTrue:  [
				acc := acc or: ( aFinancialElement  hasRegistered:  aRegister)  
			]. 
		(aFinancialElement  isKindOf:Portfolio  ) ifTrue: [
				acc := acc or: ( aFinancialElement  hasRegistered:  aRegister)  
			] 
		
		].
	 ^acc! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:40:25'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:40:26'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:40:26'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:40:26'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:40:26'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:40:26'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:40:26'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:40:26'!
PASSED!
!Portfolio methodsFor: 'register' stamp: 'jb 5/22/2023 12:42:19' prior: 50689583 overrides: 50678306!
hasRegistered: aRegister 
	^financialElements  anySatisfy:  [:aFinancialElement|
		aFinancialElement hasRegistered:  aRegister 
		
		]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:42:21'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:42:21'!
PASSED!
!Portfolio methodsFor: 'register' stamp: 'jb 5/22/2023 12:42:26' prior: 50689664 overrides: 50678306!
hasRegistered: aRegister 
	^financialElements  anySatisfy:  [:aFinancialElement|
		aFinancialElement hasRegistered:  aRegister 
		]! !
!Portfolio methodsFor: 'transactions' stamp: 'jb 5/22/2023 12:46:20' prior: 50687009 overrides: 50678315!
transactions
	|transactions|
	transactions := OrderedCollection  new. 
	financialElements  do: [:aFinancialElement|
		(aFinancialElement  isKindOf:  ReceptiveAccount ) ifTrue:[
			transactions  addAll:  aFinancialElement  transactions .	
		
			]
		
	].
	^transactions ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:46:23'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:46:26'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:46:26'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/22/2023 12:46:48'!
test20

|portfolio account register |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/22/2023 12:47:41' prior: 50689889!
test20

|portfolio portfolioToAdd account register |
portfolioToAdd := Portfolio  new. 
portfolio := Portfolio new  .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolioToAdd add:account.portfolio  add: portfolioToAdd  .

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !

!testRun: #PortfolioTest #test20 stamp: 'jb 5/22/2023 12:47:42'!
FAILURE!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/22/2023 12:47:50' prior: 50689901!
test20

|portfolio portfolioToAdd account register |
portfolioToAdd := Portfolio  new. 
portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolioToAdd add:account.portfolio  add: portfolioToAdd  .

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !
!Portfolio methodsFor: 'transactions' stamp: 'jb 5/22/2023 12:48:13' prior: 50689746 overrides: 50678315!
transactions
	|transactions|
	transactions := OrderedCollection  new. 
	financialElements  do: [:aFinancialElement|
		(aFinancialElement  isKindOf:  ReceptiveAccount ) ifTrue:[
			transactions  addAll:  aFinancialElement  transactions .	
		
			].
		(aFinancialElement  isKindOf:  Portfolio ) ifTrue:[
			transactions  addAll:  aFinancialElement  transactions .	
		
			].
	
			
	].
	^transactions ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:48:16'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:48:17'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:48:17'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:48:17'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:48:17'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:48:17'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'jb 5/22/2023 12:48:17'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'jb 5/22/2023 12:48:38' prior: 50689933 overrides: 50678315!
transactions
	|transactions|
	transactions := OrderedCollection  new. 
	financialElements  do: [:aFinancialElement|
		transactions  addAll:  aFinancialElement  transactions 
	
			
	].
	^transactions ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:48:39'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'jb 5/22/2023 12:48:39'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'jb 5/22/2023 12:53:51' prior: 50690018 overrides: 50678315!
transactions
	|transactions|
	transactions := OrderedCollection  new. 
	financialElements  do: [:aFinancialElement|
		transactions  addAll:  aFinancialElement  transactions			
	].
	^transactions ! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'jb 5/22/2023 12:53:52'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'jb 5/22/2023 12:53:53'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'jb 5/22/2023 12:53:53'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'jb 5/22/2023 12:53:53'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'jb 5/22/2023 12:53:53'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'jb 5/22/2023 12:53:53'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'jb 5/22/2023 12:53:53'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'jb 5/22/2023 12:53:53'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/22/2023 13:15:25'!
test30

| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.

portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'jb 5/22/2023 13:15:30'!
test30BLA

| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.

portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!methodRemoval: PortfolioTest #test30BLA stamp: 'jb 5/22/2023 13:15:34'!
test30BLA

| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.

portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


!

!methodRemoval: PortfolioTest #test30 stamp: 'jb 5/22/2023 13:15:36'!
test30

| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.

portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


!

----QUIT----(22 May 2023 13:17:20) CuisUniversity-5706.image priorSource: 11429149!

----STARTUP---- (22 May 2023 13:21:09) as C:\Users\RYZEN\Desktop\windows64\CuisUniversity-5706.image!


!classRemoval: #ReceptiveAccount stamp: 'lp 5/22/2023 13:21:23'!
FinancialElement subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'lp 5/22/2023 13:21:23'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'financialElements parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialElement stamp: 'lp 5/22/2023 13:21:24'!
Object subclass: #FinancialElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'lp 5/22/2023 13:21:24'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'lp 5/22/2023 13:21:25'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'lp 5/22/2023 13:21:25'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'lp 5/22/2023 13:21:25'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'lp 5/22/2023 13:21:26'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\RYZEN\Desktop\windows64\Portfolio-Ejercicio.st----!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:25:29' prior: 50691991!
test13
|portfolioFather portfolioChild account |portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFather  add:account.portfolioFather add: portfolioChild  . 




self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:27:24'!
test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio
|portfolioFather portfolioChild account |portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFather  add:account.portfolioFather add: portfolioChild  . 




self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!methodRemoval: PortfolioTest #test13 stamp: 'lp 5/22/2023 13:27:27'!
test13
|portfolioFather portfolioChild account |portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFather  add:account.portfolioFather add: portfolioChild  . 




self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:28:31'!
test14cannotAddAnAccounttoAPortfolioWhenThereIsManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount
|portfolioFatherLeft   portfolioFatherRight  portfolioChild account |portfolioFatherLeft  := Portfolio  new.
portfolioFatherRight := Portfolio new  .portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFatherLeft  add:account.portfolioFatherLeft add: portfolioChild  . 

portfolioFatherRight  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!methodRemoval: PortfolioTest #test14 stamp: 'lp 5/22/2023 13:28:35'!
test14
|portfolioFatherLeft   portfolioFatherRight  portfolioChild account |portfolioFatherLeft  := Portfolio  new.
portfolioFatherRight := Portfolio new  .portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFatherLeft  add:account.portfolioFatherLeft add: portfolioChild  . 

portfolioFatherRight  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:29:13'!
test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.

portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!methodRemoval: PortfolioTest #test15 stamp: 'lp 5/22/2023 13:29:16'!
test15
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.

portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:30:08'!
test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio
| portfolioRoot1   portfolioRoot2   portfolioFather  portfolioChild account |portfolioRoot1  := Portfolio new. 
portfolioRoot2  := Portfolio new. 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot2   add:account.
portfolioRoot2  add: portfolioFather .
portfolioRoot1  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!methodRemoval: PortfolioTest #test16 stamp: 'lp 5/22/2023 13:30:10'!
test16
| portfolioRoot1   portfolioRoot2   portfolioFather  portfolioChild account |portfolioRoot1  := Portfolio new. 
portfolioRoot2  := Portfolio new. 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot2   add:account.
portfolioRoot2  add: portfolioFather .
portfolioRoot1  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:30:17'!
test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount
|portfolioFatherLeft   portfolioFatherRight  portfolioChild account |portfolioFatherLeft  := Portfolio  new.
portfolioFatherRight := Portfolio new  .portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFatherLeft  add:account.portfolioFatherLeft add: portfolioChild  . 

portfolioFatherRight  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


! !

!methodRemoval: PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereIsManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 13:30:21'!
test14cannotAddAnAccounttoAPortfolioWhenThereIsManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount
|portfolioFatherLeft   portfolioFatherRight  portfolioChild account |portfolioFatherLeft  := Portfolio  new.
portfolioFatherRight := Portfolio new  .portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFatherLeft  add:account.portfolioFatherLeft add: portfolioChild  . 

portfolioFatherRight  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


!

!methodRemoval: PortfolioTest #test18 stamp: 'lp 5/22/2023 13:30:34'!
test18
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.

portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self  should: [portfolioChild  add: account ] 
	raise:  Error
	withExceptionDo: [:anError|
		self assert:  anError  messageText  equals: Portfolio  cannotAddAlreadyExistingAccount  
		].
	
	


!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 13:31:31'!
test11transactionInAddedAccount|portfolio account  register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
register :=  Deposit register: 100 on: account.

portfolio add: account.

self assert: ( portfolio  hasRegistered: register )! !

!methodRemoval: PortfolioTest #test11 stamp: 'lp 5/22/2023 13:31:33'!
test11|portfolio account  register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
register :=  Deposit register: 100 on: account.

portfolio add: account.

self assert: ( portfolio  hasRegistered: register )!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 13:31:53'!
test12transactionNotInAddedAccount|portfolio account register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )! !

!methodRemoval: PortfolioTest #test12 stamp: 'lp 5/22/2023 13:31:53'!
test12|portfolio account register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 13:32:27'!
test19transactionInAddedPortfolio|portfolio  portfolioToAdd account register|

portfolio := Portfolio new .portfolioToAdd  := Portfolio  new. 

account := ReceptiveAccount new.
register:= Deposit register: 100 on: account.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .

self assert: ( portfolio  hasRegistered: register )! !

!methodRemoval: PortfolioTest #test19 stamp: 'lp 5/22/2023 13:32:30'!
test19|portfolio  portfolioToAdd account register|

portfolio := Portfolio new .portfolioToAdd  := Portfolio  new. 

account := ReceptiveAccount new.
register:= Deposit register: 100 on: account.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .

self assert: ( portfolio  hasRegistered: register )!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 13:33:13'!
test11hasRegisterInAddedAccount|portfolio account  register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
register :=  Deposit register: 100 on: account.

portfolio add: account.

self assert: ( portfolio  hasRegistered: register )! !

!methodRemoval: PortfolioTest #test11transactionInAddedAccount stamp: 'lp 5/22/2023 13:33:13'!
test11transactionInAddedAccount|portfolio account  register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
register :=  Deposit register: 100 on: account.

portfolio add: account.

self assert: ( portfolio  hasRegistered: register )!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 13:33:28'!
test12hasRegisterNotInAddedAccount|portfolio account register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )! !

!methodRemoval: PortfolioTest #test12transactionNotInAddedAccount stamp: 'lp 5/22/2023 13:33:28'!
test12transactionNotInAddedAccount|portfolio account register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 13:33:42'!
test19hasRegisterInAddedPortfolio|portfolio  portfolioToAdd account register|

portfolio := Portfolio new .portfolioToAdd  := Portfolio  new. 

account := ReceptiveAccount new.
register:= Deposit register: 100 on: account.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .

self assert: ( portfolio  hasRegistered: register )! !

!methodRemoval: PortfolioTest #test19transactionInAddedPortfolio stamp: 'lp 5/22/2023 13:33:43'!
test19transactionInAddedPortfolio|portfolio  portfolioToAdd account register|

portfolio := Portfolio new .portfolioToAdd  := Portfolio  new. 

account := ReceptiveAccount new.
register:= Deposit register: 100 on: account.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .

self assert: ( portfolio  hasRegistered: register )!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 13:34:21'!
test17transactionsOfAddedAccounts

|portfolio account register |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !

!methodRemoval: PortfolioTest #test17 stamp: 'lp 5/22/2023 13:34:21'!
test17

|portfolio account register |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 13:34:42'!
test20transactionsOfAddedPortfolio

|portfolio portfolioToAdd account register |
portfolioToAdd := Portfolio  new. 
portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolioToAdd add:account.portfolio  add: portfolioToAdd  .

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !

!methodRemoval: PortfolioTest #test20 stamp: 'lp 5/22/2023 13:34:42'!
test20

|portfolio portfolioToAdd account register |
portfolioToAdd := Portfolio  new. 
portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolioToAdd add:account.portfolio  add: portfolioToAdd  .

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:37:42'!
shouldFailWhenAdding: portfolio toPortfolio: portafolioToAdd

	^ self should: [portfolio add: portafolioToAdd ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ]! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:37:42' prior: 50691963!
test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios
|portfolio account portafolioToAdd innerPortfolio innerPortfolioInTheInnerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 
innerPortfolioInTheInnerPortfolio:= Portfolio new initialize .

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolioInTheInnerPortfolio add: account.
innerPortfolio  add:  innerPortfolioInTheInnerPortfolio .
portfolio add: innerPortfolio .
portafolioToAdd add: account .

self shouldFailWhenAdding: portfolio toPortfolio: portafolioToAdd .

! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:37:42' prior: 50691940!
test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios
|portfolio account portafolioToAdd innerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio add:  account.
portfolio add: innerPortfolio .
portafolioToAdd add: account .

self shouldFailWhenAdding: portfolio toPortfolio: portafolioToAdd .

! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:37:42' prior: 50691920!
test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add: account.
portafolioToAdd add:  account .
self shouldFailWhenAdding: portfolio toPortfolio: portafolioToAdd .

! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:38:56' prior: 50691861!
test05addAAccountAlreadyInThePortfolioAccountsProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add: account.

self shouldFailWhenAdding: account toPortfolio: Portfolio.
self should: [portfolio add: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] .

! !

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:38:57'!
FAILURE!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:39:36' prior: 50693275!
test05addAAccountAlreadyInThePortfolioAccountsProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add: account.

self shouldFailWhenAdding: account toPortfolio: Portfolio.
"self should: [portfolio add: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] ."

! !

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:39:38'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:39:38'!
FAILURE!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:41:00' prior: 50693203!
shouldFailWhenAdding: portfolio toPortfolio: portfolioToAdd

	^ self should: [portfolioToAdd add: portfolio ]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ]! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 13:41:02'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 13:41:02'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 13:41:02'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 13:41:02'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 13:41:02'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:41:02'!
FAILURE!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 13:41:02'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 13:41:02'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 13:41:03'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 13:41:03'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 13:41:03'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 13:41:03'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 13:41:03'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:41:03'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 13:41:03'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:41:03'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:41:03'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 13:41:03'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 13:41:03'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 13:41:03'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:41:03'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:41:14'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:41:14'!
FAILURE!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:41:44' prior: 50693297!
test05addAAccountAlreadyInThePortfolioAccountsProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add: account.

self shouldFailWhenAdding: account toPortfolio: portfolio .
"self should: [portfolio add: account]
	 raise: Error 
	 withExceptionDo:[:anError|
		self assert:( anError messageText) equals:( Portfolio cannotAddAlreadyExistingAccount) ] ."

! !

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 13:41:45'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 13:41:45'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:41:57' prior: 50693428!
test05addAAccountAlreadyInThePortfolioAccountsProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add: account.

self shouldFailWhenAdding: account toPortfolio: portfolio .

! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:42:09' prior: 50691877!
test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError
|portfolio account innerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortafolio add: account.
portfolio add: innerPortafolio .
self shouldFailWhenAdding: account toPortfolio: portfolio .
! !

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 13:42:10'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 13:42:10'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 13:42:10'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 13:42:10'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 13:42:10'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 13:42:11'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 13:42:11'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:42:19' prior: 50691896!
test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio portafolioInInnerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
portafolioInInnerPortafolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

portafolioInInnerPortafolio add: account.
innerPortafolio add: portafolioInInnerPortafolio.
portfolio add: innerPortafolio .self shouldFailWhenAdding: account toPortfolio: portfolio .
! !

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 13:42:20'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 13:42:20'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:42:49' prior: 50693646!
test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError
|portfolio account innerPortafolio portafolioInInnerPortafolio |


portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
portafolioInInnerPortafolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioInInnerPortafolio add: account.
innerPortafolio add: portafolioInInnerPortafolio.
portfolio add: innerPortafolio .self shouldFailWhenAdding: account toPortfolio: portfolio .
! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:43:51' prior: 50693259!
test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts
|portfolio account portafolioToAdd|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add: account.
portafolioToAdd add:  account .
self shouldFailWhenAdding: portafolioToAdd toPortfolio: portfolio .

! !

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 13:43:51'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 13:43:51'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 13:43:51'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 13:43:51'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 13:43:51'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 13:43:51'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:43:51'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 13:43:51'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 13:43:52'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 13:43:52'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 13:43:52'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 13:43:52'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 13:43:52'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 13:43:52'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:43:52'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 13:43:52'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:43:52'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:43:52'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 13:43:52'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 13:43:52'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 13:43:52'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:44:05' prior: 50693772!
test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts
|portfolio account portfolioToAdd|


portfolio := Portfolio new initialize.
portfolioToAdd := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

portfolio add: account.
portfolioToAdd add:  account .
self shouldFailWhenAdding: portfolioToAdd toPortfolio: portfolio .

! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:44:35' prior: 50693239!
test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios
|portfolio account portfolioToAdd innerPortfolio|


portfolio := Portfolio new initialize.
portfolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio add:  account.
portfolio add: innerPortfolio .
portfolioToAdd add: account .

self shouldFailWhenAdding: portfolio toPortfolio: portfolioToAdd .

! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:44:40' prior: 50693890!
test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios
|portfolio account portfolioToAdd innerPortfolio|


portfolio := Portfolio new initialize.
portfolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolio add:  account.
portfolio add: innerPortfolio .
portfolioToAdd add: account .
self shouldFailWhenAdding: portfolioToAdd toPortfolio: portfolio .

! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:45:03' prior: 50693214!
test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios
|portfolio account portafolioToAdd innerPortfolio innerPortfolioInTheInnerPortfolio|


portfolio := Portfolio new initialize.
portafolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 
innerPortfolioInTheInnerPortfolio:= Portfolio new initialize .

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolioInTheInnerPortfolio add: account.
innerPortfolio  add:  innerPortfolioInTheInnerPortfolio .
portfolio add: innerPortfolio .
portafolioToAdd add: account .

self shouldFailWhenAdding: portafolioToAdd toPortfolio: portfolio .
! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:45:11' prior: 50693930!
test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios
|portfolio account portfolioToAdd innerPortfolio innerPortfolioInTheInnerPortfolio|


portfolio := Portfolio new initialize.
portfolioToAdd := Portfolio  new initialize. 
innerPortfolio := Portfolio  new initialize. 
innerPortfolioInTheInnerPortfolio:= Portfolio new initialize .

account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortfolioInTheInnerPortfolio add: account.
innerPortfolio  add:  innerPortfolioInTheInnerPortfolio .
portfolio add: innerPortfolio .
portfolioToAdd add: account .

self shouldFailWhenAdding: portfolioToAdd toPortfolio: portfolio .
! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:45:29' prior: 50692762!
test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio
|portfolioFather portfolioChild account |portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFather  add:account.portfolioFather add: portfolioChild  . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:45:43' prior: 50692934!
test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount
|portfolioFatherLeft   portfolioFatherRight  portfolioChild account |portfolioFatherLeft  := Portfolio  new.
portfolioFatherRight := Portfolio new  .portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFatherLeft  add:account.portfolioFatherLeft add: portfolioChild  . 

portfolioFatherRight  add: portfolioChild . 

self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	
	


! !

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 13:45:44'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 13:45:44'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 13:45:44'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 13:45:44'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 13:45:44'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 13:45:44'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:45:44'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 13:45:45'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 13:45:45'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:45:50' prior: 50692844!
test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.

portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	
	
	


! !

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 13:45:51'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 13:45:52'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 13:46:01' prior: 50692886!
test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio
| portfolioRoot1   portfolioRoot2   portfolioFather  portfolioChild account |portfolioRoot1  := Portfolio new. 
portfolioRoot2  := Portfolio new. 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot2   add:account.
portfolioRoot2  add: portfolioFather .
portfolioRoot1  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	
	
	


! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 13:46:42' prior: 50693175!
test20transactionsOfAddedPortfolio

|portfolio portfolioToAdd account register |
portfolioToAdd := Portfolio  new. 

portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolioToAdd add:account.portfolio  add: portfolioToAdd  .

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !
!Portfolio methodsFor: 'adding private' stamp: 'lp 5/22/2023 14:26:03'!
doesAnyOfItsElementsof: aFinancialElementsCollection HasAnAccountInCommonWith: aFinancialElementToAdd 
		
		^ aFinancialElementsCollection  anySatisfy:[:aFinancialElement|
			  aFinancialElementToAdd sharesAnAccountWith: aFinancialElement 
		].
	
	
	
		! !
!Portfolio methodsFor: 'adding private' stamp: 'lp 5/22/2023 14:26:33' prior: 50692417!
doesAnyOfItsElementsHasAnAccountInCommonWith: aFinancialElementToAdd 
		
		^ self doesAnyOfItsElementsof: financialElements HasAnAccountInCommonWith: aFinancialElementToAdd 
		"financialElements  anySatisfy:[:aFinancialElement|
			  aFinancialElementToAdd sharesAnAccountWith: aFinancialElement 
		]."
	
	
	
		! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 14:26:34'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 14:26:34'!
PASSED!
!Portfolio methodsFor: 'adding private' stamp: 'lp 5/22/2023 14:26:39' prior: 50694259!
doesAnyOfItsElementsHasAnAccountInCommonWith: aFinancialElementToAdd 
		
		^ self doesAnyOfItsElementsof: financialElements HasAnAccountInCommonWith: aFinancialElementToAdd 

	
	
	
		! !
!Portfolio methodsFor: 'adding private' stamp: 'lp 5/22/2023 14:27:08' prior: 50692426!
doesAnyOfItsElementsHasAnAccountInCommonWith: aFinancialElementToAdd  notStoppingBy: aPortfolioToAvoid 
		^ self doesAnyOfItsElementsof: (self financialElementsWithout: aPortfolioToAvoid ) HasAnAccountInCommonWith:  aPortfolioToAvoid 
		! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 14:27:09'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 14:27:09'!
PASSED!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:28:25'!
xxx: aBlock

|portfolio portfolioToAdd account register |
portfolioToAdd := Portfolio  new. 

portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.


self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:28:35' prior: 50694455!
xxx: aBlock

|portfolio portfolioToAdd account register |
portfolioToAdd := Portfolio  new. 

portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.
aBlock value.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:28:45' prior: 50694468!
xxx: aBlock

|portfolio  account register |

portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.
aBlock value.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 14:28:48'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 14:28:48'!
PASSED!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:29:47' prior: 50693152!
test17transactionsOfAddedAccounts

|portfolio account register |
portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .


self xxx:[portfolio add: account]! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:30:36' prior: 50694574!
test17transactionsOfAddedAccounts
"
|portfolio account register |
portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions ."


self xxx:[:portfolio : account | portfolio add: account]! !

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:30:38'!
ERROR!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:31:11' prior: 50694481!
xxx: aBlock

|portfolio  account register |

portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.
aBlock value: portfolio value: account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 14:31:11'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 14:31:11'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 14:31:11'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 14:31:12'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 14:31:12'!
PASSED!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:32:39'!
xxx: aBlock yyy:aBlock2

|portfolio  account register |

portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.
aBlock value: portfolio value: account value:aBlock2 .

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 14:32:40'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 14:32:40'!
PASSED!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:33:23' prior: 50694588!
test17transactionsOfAddedAccounts
"
|portfolio account register |
portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions ."


self xxx:[:portfolio : account | portfolio add: account] yyy:[]! !

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:33:24'!
ERROR!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:33:37' prior: 50694794!
test17transactionsOfAddedAccounts
"
|portfolio account register |
portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions ."


self xxx:[:portfolio : account | portfolio add: account]! !

!methodRemoval: PortfolioTest #xxx:yyy: stamp: 'lp 5/22/2023 14:34:14'!
xxx: aBlock yyy:aBlock2

|portfolio  account register |

portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.
aBlock value: portfolio value: account value:aBlock2 .

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:34:27' prior: 50694606!
xxx: aBlock

|portfolio  account register |

portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.
portfolio add:account.
aBlock value: portfolio value: account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:35:27' prior: 50694812!
test17transactionsOfAddedAccounts
"
|portfolio account register |
portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions ."


self xxx:[]! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:35:40' prior: 50694852!
test17transactionsOfAddedAccounts
"
|portfolio account register |
portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions ."


self xxx:[:port : paort]! !

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:35:41'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 14:35:42'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 14:35:42'!
PASSED!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:37:13' prior: 50694233!
test20transactionsOfAddedPortfolio

self xxx:[:portfolio : portfolioToAdd |portfolio  add: portfolioToAdd].
! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:38:15' prior: 50694963!
test20transactionsOfAddedPortfolio
|portfolio|
portfolio := Portfolio  new.
self xxx:[:portfolioToAdd |portfolio  add: portfolioToAdd].
! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:38:24' prior: 50694839!
xxx: aBlock

|portfolio  account register |

portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.
portfolio add:account.
aBlock value: portfolio.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:38:43' prior: 50694865!
test17transactionsOfAddedAccounts
"
|portfolio account register |
portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions ."


self xxx:[:port]! !

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:38:44'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 14:38:44'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 14:38:44'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 14:38:45'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 14:38:45'!
PASSED!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:40:34' prior: 50694978!
xxx: aBlock

|portfolio  account register |
portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.
portfolio add:account.
aBlock value: portfolio.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:41:34' prior: 50695089!
xxx: aBlock

|portfolio  account register portfolioFather |
portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.
portfolio add:account.
aBlock value: portfolio value: portfolioFather.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:41:55' prior: 50695101!
xxx: aBlock

|portfolio  account register portfolioFather |
portfolio := Portfolio new .
portfolioFather:= Portfolio new.
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.
portfolio add:account.
aBlock value: portfolio value: portfolioFather.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:41:56'!
ERROR!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 14:41:56'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 14:41:56'!
ERROR!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:42:14' prior: 50695115!
xxx: aBlock

|portfolio  account register portfolioFather |
portfolio := Portfolio new .
portfolioFather:= Portfolio new.
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.
portfolio add:account.
aBlock value: portfolio value: portfolioFather.

self assert: (OrderedCollection   with: register  )equals: portfolioFather transactions .! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:35:27' prior: 50694991!
test17transactionsOfAddedAccounts
"
|portfolio account register |
portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions ."


self xxx:[]! !
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 14:43:25' prior: 50695226!
test17transactionsOfAddedAccounts

|portfolio account register |
portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolio add:account.

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .
! !

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 14:43:26'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 14:43:26'!
ERROR!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 14:43:26'!
ERROR!
!PortfolioTest methodsFor: 'transaction' stamp: 'lp 5/22/2023 13:46:42' prior: 50694970!
test20transactionsOfAddedPortfolio

|portfolio portfolioToAdd account register |
portfolioToAdd := Portfolio  new. 

portfolio := Portfolio new .
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.

portfolioToAdd add:account.portfolio  add: portfolioToAdd  .

self assert: (OrderedCollection   with: register  )equals: portfolio transactions .! !

!methodRemoval: PortfolioTest #xxx: stamp: 'lp 5/22/2023 14:43:44'!
xxx: aBlock

|portfolio  account register portfolioFather |
portfolio := Portfolio new .
portfolioFather:= Portfolio new.
account := ReceptiveAccount new.
register:=Deposit register: 100 on: account.
portfolio add:account.
aBlock value: portfolio value: portfolioFather.

self assert: (OrderedCollection   with: register  )equals: portfolioFather transactions .!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:44:03' prior: 50693098!
test12hasRegisterNotInAddedAccount|portfolio account register|

portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:45:07'!
xxx:aBlcok|portfolio account register|

portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:45:11' prior: 50695382!
xxx:aBlock|portfolio account register|

portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:46:00' prior: 50695369!
test12hasRegisterNotInAddedAccount|portfolio account register|

portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
register :=

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:46:09' prior: 50695408!
test12hasRegisterNotInAddedAccount|portfolio account register|

portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
register :=Deposit register: 100 on: account.

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:46:10'!
FAILURE!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:46:18'!
FAILURE!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:46:18'!
FAILURE!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:46:21'!
FAILURE!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:46:21'!
FAILURE!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:46:33' prior: 50695419!
test12hasRegisterNotInAddedAccount|portfolio account register|

portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
register :=Deposit register: 100 on: account.


self deny: ( portfolio  hasRegistered: register )! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:46:45' prior: 50695395!
xxx:aBlock|portfolio account register|

portfolio := Portfolio new initialize.
account := ReceptiveAccount new.

register :=Deposit register: 100 on: account.


self deny: ( portfolio  hasRegistered: register )! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:47:06' prior: 50695458!
xxx:aBlock|portfolio account register|

portfolio := Portfolio new initialize.
account := ReceptiveAccount new.

register :=Deposit register: 100 on: account.

aBlock  value: portfolio  value:account .


self deny: ( portfolio  hasRegistered: register )! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:47:15' prior: 50693075!
test11hasRegisterInAddedAccount|portfolio account  register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
register :=  Deposit register: 100 on: account.
portfolio add: account.

self assert: ( portfolio  hasRegistered: register )! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:48:17' prior: 50695480!
test11hasRegisterInAddedAccountself xxx:[:portfolio : account : register |
portfolio add: account.

self assert: ( portfolio  hasRegistered: register )
]! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:48:55' prior: 50695447!
test12hasRegisterNotInAddedAccountself xxx:[:portfolio : something : register|

self deny: ( portfolio  hasRegistered: register )]! !

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:48:56'!
ERROR!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:50:15' prior: 50695468!
xxx:aBlock|portfolio account register|

portfolio := Portfolio new initialize.
account := ReceptiveAccount new.

register :=Deposit register: 100 on: account.

aBlock  value: portfolio  value:account .
! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:50:29' prior: 50695511!
xxx:aBlock|portfolio account |

portfolio := Portfolio new initialize.
account := ReceptiveAccount new.

aBlock  value: portfolio  value:account .
! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:51:02' prior: 50695492!
test11hasRegisterInAddedAccountself xxx:[:portfolio : account  |
	|register|
	register := Deposit 
portfolio add: account.

self assert: ( portfolio  hasRegistered: register )
]! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:51:19' prior: 50695529!
test11hasRegisterInAddedAccountself xxx:[:portfolio : account  |
	|register|
	register := Deposit  register: 100 on: account.
	portfolio add: account.

	self assert: ( portfolio  hasRegistered: register )
]! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:51:25' prior: 50695538!
test11hasRegisterInAddedAccountself xxx:[:portfolio : account  |
	|register|
	register := Deposit  register: 100 on: account.
	portfolio add: account.
	self assert: ( portfolio  hasRegistered: register )
]! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:52:02' prior: 50695500!
test12hasRegisterNotInAddedAccountself xxx:[:portfolio : account |
	|register|
	register := Deposit  register: 100 on: account.

self deny: ( portfolio  hasRegistered: register )]! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:52:08' prior: 50695558!
test12hasRegisterNotInAddedAccountself xxx:[:portfolio : account |
	|register|
	register := Deposit  register: 100 on: account.
	self deny: ( portfolio  hasRegistered: register )]! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:53:07'!
m1: account m2: portfolio

	|register|
	register := Deposit  register: 100 on: account.
	self deny: ( portfolio  hasRegistered: register )! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:53:07' prior: 50695567!
test12hasRegisterNotInAddedAccountself xxx:[:portfolio : account |
	self m1: account m2: portfolio]! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:53:18'!
m1: account m2: portfolio m3:aBlock

	|register|
	register := Deposit  register: 100 on: account.
	self deny: ( portfolio  hasRegistered: register )! !

!methodRemoval: PortfolioTest #m1:m2: stamp: 'lp 5/22/2023 14:53:22'!
m1: account m2: portfolio

	|register|
	register := Deposit  register: 100 on: account.
	self deny: ( portfolio  hasRegistered: register )!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:53:36' prior: 50695584!
test12hasRegisterNotInAddedAccountself xxx:[:portfolio : account |
	self m1: account m2: portfolio m3:[]]! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:54:03' prior: 50695548!
test11hasRegisterInAddedAccountself xxx:[:portfolio : account  |
	self m1: portfolio m2: account  m3:[]
]! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:54:13' prior: 50695590!
m1: account m2: portfolio m3:aBlock

	|register|
	register := Deposit  register: 100 on: account.
	aBlock value.
	self deny: ( portfolio  hasRegistered: register )! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:54:41' prior: 50695612!
test11hasRegisterInAddedAccountself xxx:[:portfolio : account  |
	self m1: portfolio m2: account  m3:[portfolio add: account.]
]! !
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:55:12' prior: 50695605!
test12hasRegisterNotInAddedAccountself xxx:[:portfolio : account |
	self m1: account m2: portfolio m3:[:value :each ]]! !

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:55:13'!
ERROR!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:55:31'!
ERROR!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:55:31'!
ERROR!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:57:00' prior: 50695628!
test11hasRegisterInAddedAccountself xxx:[:portfolio : account  |
	self m1: portfolio m2: account  m3:[:portofioAdded : accountAdded | portofioAdded add: accountAdded .]
]! !

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:57:00'!
ERROR!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:57:17' prior: 50695653!
test11hasRegisterInAddedAccountself xxx:[:portfolio : account  |
	self m1: account m2: portfolio  m3:[:portofioAdded : accountAdded | portofioAdded add: accountAdded .]
]! !

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:57:17'!
ERROR!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:57:41' prior: 50695619!
m1: account m2: portfolio m3:aBlock

	|register|
	register := Deposit  register: 100 on: account.
	aBlock value: portfolio value : account.
	self deny: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:57:44'!
ERROR!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:58:03' prior: 50695677!
m1: account m2: portfolio m3:aBlock

	|register|
	register := Deposit  register: 100 on: account.
	aBlock value: portfolio value: account.
	self deny: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:58:04'!
FAILURE!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 14:58:04'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 14:58:05'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 14:58:05'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 14:58:05'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:58:05'!
FAILURE!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:59:00'!
FAILURE!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 14:59:00'!
FAILURE!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 14:59:50'!
PASSED!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 13:33:13' prior: 50695665!
test11hasRegisterInAddedAccount|portfolio account  register|

portfolio := Portfolio new initialize.

account := ReceptiveAccount new.
register :=  Deposit register: 100 on: account.

portfolio add: account.

self assert: ( portfolio  hasRegistered: register )! !

!methodRemoval: PortfolioTest #m1:m2:m3: stamp: 'lp 5/22/2023 15:00:35'!
m1: account m2: portfolio m3:aBlock

	|register|
	register := Deposit  register: 100 on: account.
	aBlock value: portfolio value: account.
	self deny: ( portfolio  hasRegistered: register )!

!methodRemoval: PortfolioTest #xxx: stamp: 'lp 5/22/2023 15:00:38'!
xxx:aBlock|portfolio account |

portfolio := Portfolio new initialize.
account := ReceptiveAccount new.

aBlock  value: portfolio  value:account .
!
!PortfolioTest methodsFor: 'hasRegisteredTest' stamp: 'lp 5/22/2023 14:44:03' prior: 50695636!
test12hasRegisterNotInAddedAccount|portfolio account register|

portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.register :=  Withdraw  register:  50  on:  ReceptiveAccount  new.

portfolio add: account.

self deny: ( portfolio  hasRegistered: register )! !

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:00:51'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:00:51'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:00:51'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:00:51'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:00:51'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:00:51'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:00:51'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:00:51'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:00:52'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:00:52'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:00:52'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:00:52'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:00:52'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:00:52'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:00:52'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:00:52'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:00:52'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:00:52'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:00:52'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:00:52'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:00:52'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:01:35' prior: 50691790!
test00PortofolioShouldStartWithBalanceIn0

|portfolio|
portfolio := Portfolio new.
self assert:0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:03:44' prior: 50691809!
test02addAccountSHouldAddHisBalance

|portfolio account anotherAccount |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add: account.
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio add: anotherAccount .
self assert:150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:03:48' prior: 50695926!
test02addAccountSHouldAddHisBalance

|portfolio account anotherAccount |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add: account.
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio add: anotherAccount .


self assert:150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:04:12' prior: 50691797!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add:account.

self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:04:17'!
xxx

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add:account.

self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:05:23' prior: 50695941!
test02addAccountSHouldAddHisBalanceself xxx :[:portfolio ||anotherAccount |
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio add: anotherAccount .
] with: 150
! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:05:41'!
xxx: aBlock with: aExpectedBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add:account.

self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:06:00' prior: 50695986!
xxx: aBlock with: aExpectedBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add:account.

self assert:aExpectedBalance equals: portfolio balance.! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:06:01'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:06:01'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:06:02'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:06:02'!
ERROR!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:06:17' prior: 50695997!
xxx: aBlock with: aExpectedBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add:account.
aBlock  value: portfolio .
self assert:aExpectedBalance equals: portfolio balance.! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:06:18'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:06:18'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:06:18'!
ERROR!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:06:46' prior: 50695956!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance
self xxx: [:aomething|] with: 100.! !

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:06:47'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:06:47'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:06:47'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:06:48'!
ERROR!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:06:48'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:06:48'!
ERROR!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:06:55' prior: 50695977!
test02addAccountSHouldAddHisBalanceself xxx:[:portfolio ||anotherAccount |
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio add: anotherAccount .
] with: 150
! !

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:06:56'!
PASSED!

!methodRemoval: PortfolioTest #xxx stamp: 'lp 5/22/2023 15:07:14'!
xxx

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add:account.

self assert:100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:08:46'!
expectForAPortafolioWithAnAccountAnd: aBlock ThisBalance: aExpectedBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add:account.
aBlock  value: portfolio .
self assert:aExpectedBalance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:08:46' prior: 50696286!
test02addAccountSHouldAddHisBalanceself expectForAPortafolioWithAnAccountAnd:[:portfolio ||anotherAccount |
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio add: anotherAccount .
] ThisBalance: 150
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:08:46' prior: 50696190!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance
self expectForAPortafolioWithAnAccountAnd: [:aomething|] ThisBalance: 100.! !

!methodRemoval: PortfolioTest #xxx:with: stamp: 'lp 5/22/2023 15:08:46'!
xxx: aBlock with: aExpectedBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add:account.
aBlock  value: portfolio .
self assert:aExpectedBalance equals: portfolio balance.!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:09:02' prior: 50696414!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance
self expectForAPortafolioWithAnAccountAnd: [:nothing|] ThisBalance: 100.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:09:50' prior: 50691839!
test04addAPortafolioSHouldAddHisBalance

|portfolio account portafolioToAdd  secondAccount secondPortafolioToAdd |
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.
secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd add: secondAccount.
portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
portfolio add: secondPortafolioToAdd .
self assert:200 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:10:10' prior: 50693532!
test05addAAccountAlreadyInThePortfolioAccountsProducesError
|portfolio account    |


portfolio := Portfolio new initialize.
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add: account.

self shouldFailWhenAdding: account toPortfolio: portfolio .

! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:10:25' prior: 50693544!
test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError
|portfolio account innerPortafolio |
portfolio := Portfolio new initialize.
innerPortafolio:= Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.

innerPortafolio add: account.
portfolio add: innerPortafolio .
self shouldFailWhenAdding: account toPortfolio: portfolio .
! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:11:48'!
xxx: aBlock
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.

portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	
	
	


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:12:03' prior: 50696490!
xxx: aBlock
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.
aBlock value.
portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	
	
	


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:13:37' prior: 50694211!
test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio
| portfolioRoot1   portfolioRoot2   portfolioFather  portfolioChild account |portfolioRoot1  := Portfolio new. 
portfolioRoot2  := Portfolio new. 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot2   add:account.
portfolioRoot2  add: portfolioFather .
portfolioRoot1  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .

self xxx:[:portfolioAdded |
	|anotherPortfolioRoot|
	anotherPortfolioRoot  := Portfolio new. 
	anotherPortfolioRoot  add: portfolioFather .

	]
	
	


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:13:49' prior: 50696507!
xxx: aBlock
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.
aBlock value: portfolioFather .
portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	
	
	


! !

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:14:00'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:14:14' prior: 50696524!
test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio


self xxx:[:portfolioAdded |
	|anotherPortfolioRoot|
	anotherPortfolioRoot  := Portfolio new. 
	anotherPortfolioRoot  add: portfolioAdded .

	]
	
	


! !

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:14:15'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:14:15'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:14:15'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:14:15'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:14:15'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:14:15'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:14:15'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:14:15'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:14:15'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:14:15'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:14:15'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:14:16'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:14:16'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:14:16'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:14:16'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:14:16'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:14:16'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:14:16'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:14:16'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:14:16'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:14:16'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:14:30' prior: 50694105!
test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio
self xxx:[:nothing].
	
	
	


! !

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:14:31'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:14:31'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:18:01'!
shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndIsAncestorTo: aBlock
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.
aBlock value: portfolioFather .
portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	
	
	


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:18:01' prior: 50696672!
test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio
self shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndIsAncestorTo:[:nothing].
	
	
	


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:18:01' prior: 50696574!
test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio


self shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndIsAncestorTo:[:portfolioAdded |
	|anotherPortfolioRoot|
	anotherPortfolioRoot  := Portfolio new. 
	anotherPortfolioRoot  add: portfolioAdded .

	]
	
	


! !

!methodRemoval: PortfolioTest #xxx: stamp: 'lp 5/22/2023 15:18:01'!
xxx: aBlock
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.
aBlock value: portfolioFather .
portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	
	
	


!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:18:34'!
shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndDo: aBlock
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.
aBlock value: portfolioFather .
portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	
	
	


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:18:34' prior: 50696795!
test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio


self shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndDo:[:portfolioAdded |
	|anotherPortfolioRoot|
	anotherPortfolioRoot  := Portfolio new. 
	anotherPortfolioRoot  add: portfolioAdded .

	]
	
	


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:18:34' prior: 50696785!
test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio
self shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndDo:[:nothing].
	
	
	


! !

!methodRemoval: PortfolioTest #shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndIsAncestorTo: stamp: 'lp 5/22/2023 15:18:34'!
shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndIsAncestorTo: aBlock
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.
aBlock value: portfolioFather .
portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	
	
	


!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:18:36'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:18:36'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:19:06'!
xxx: aBlock
|portfolioFather portfolioChild account |portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioFather  add:account.portfolioFather add: portfolioChild  . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:19:24' prior: 50696974!
xxx: aBlock
|portfolioFather portfolioChild account a |portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.
aBlock value: a.
portfolioFather  add:account.portfolioFather add: portfolioChild  . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:19:41' prior: 50693980!
test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio
self xxx:[:nothing]


! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:21:03' prior: 50693997!
test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount
self xxx:[:portfolioChild |
	|portfolioFatherLeft|portfolioFatherLeft  := Portfolio  new.portfolioFatherLeft add: portfolioChild ]
	


! !

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:21:04'!
ERROR!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:21:20' prior: 50696988!
xxx: aBlock
|portfolioFather portfolioChild account |portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.
aBlock value: portfolioChild .
portfolioFather  add:account.portfolioFather add: portfolioChild  . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	


! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:21:24'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:21:24'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:21:24'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:21:24'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:21:24'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:21:24'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:21:24'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:21:24'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:21:24'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:21:24'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:21:25'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:21:25'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:21:25'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:21:25'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:21:25'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:21:25'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:21:25'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:21:25'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:21:25'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:21:25'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:23:01'!
shouldFailWhenAddingAnAccountToAPortfolioWhoHasAnPortfolioWithTheSameAccountAnd: aBlock
|portfolioFather portfolioChild account |portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.
aBlock value: portfolioChild .
portfolioFather  add:account.portfolioFather add: portfolioChild  . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:23:01' prior: 50697003!
test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio
self shouldFailWhenAddingAnAccountToAPortfolioWhoHasAnPortfolioWithTheSameAccountAnd:[:nothing]


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:23:01' prior: 50697010!
test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount
self shouldFailWhenAddingAnAccountToAPortfolioWhoHasAnPortfolioWithTheSameAccountAnd:[:portfolioChild |
	|portfolioFatherLeft|portfolioFatherLeft  := Portfolio  new.portfolioFatherLeft add: portfolioChild ]
	


! !

!methodRemoval: PortfolioTest #xxx: stamp: 'lp 5/22/2023 15:23:01'!
xxx: aBlock
|portfolioFather portfolioChild account |portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.
aBlock value: portfolioChild .
portfolioFather  add:account.portfolioFather add: portfolioChild  . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	


!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:23:58'!
shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndAlsoIsPredecesorTo: aBlock
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.
aBlock value: portfolioFather .
portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	
	
	


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:23:59' prior: 50696858!
test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio
self shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndAlsoIsPredecesorTo:[:nothing].
	
	
	


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:23:59' prior: 50696845!
test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio


self shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndAlsoIsPredecesorTo:[:portfolioAdded |
	|anotherPortfolioRoot|
	anotherPortfolioRoot  := Portfolio new. 
	anotherPortfolioRoot  add: portfolioAdded .

	]
	
	


! !

!methodRemoval: PortfolioTest #shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndDo: stamp: 'lp 5/22/2023 15:23:59'!
shouldFailWhenAddingAnAccountToAPorfolioWhoHasAAcestorAndDo: aBlock
| portfolioRoot      portfolioFather  portfolioChild account |portfolioRoot  := Portfolio new. 
 
portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.

portfolioRoot add:account.
aBlock value: portfolioFather .
portfolioRoot  add: portfolioFather . 
portfolioFather  add: portfolioChild . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	
	
	


!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:24:17'!
shouldFailWhenAddingAnAccountToAPortfolioWhoHasAnPortfolioWithTheSameAccountAndAlsoIsChildOf: aBlock
|portfolioFather portfolioChild account |portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.
aBlock value: portfolioChild .
portfolioFather  add:account.portfolioFather add: portfolioChild  . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:24:17' prior: 50697150!
test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount
self shouldFailWhenAddingAnAccountToAPortfolioWhoHasAnPortfolioWithTheSameAccountAndAlsoIsChildOf:[:portfolioChild |
	|portfolioFatherLeft|portfolioFatherLeft  := Portfolio  new.portfolioFatherLeft add: portfolioChild ]
	


! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:24:17' prior: 50697140!
test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio
self shouldFailWhenAddingAnAccountToAPortfolioWhoHasAnPortfolioWithTheSameAccountAndAlsoIsChildOf:[:nothing]


! !

!methodRemoval: PortfolioTest #shouldFailWhenAddingAnAccountToAPortfolioWhoHasAnPortfolioWithTheSameAccountAnd: stamp: 'lp 5/22/2023 15:24:17'!
shouldFailWhenAddingAnAccountToAPortfolioWhoHasAnPortfolioWithTheSameAccountAnd: aBlock
|portfolioFather portfolioChild account |portfolioFather  := Portfolio  new.
portfolioChild := Portfolio new  .

account := ReceptiveAccount new.Deposit register: 100 on: account.
aBlock value: portfolioChild .
portfolioFather  add:account.portfolioFather add: portfolioChild  . 


self shouldFailWhenAdding: account toPortfolio: portfolioChild .
	


!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:24:57' prior: 50697259!
test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount
self shouldFailWhenAddingAnAccountToAPortfolioWhoHasAnPortfolioWithTheSameAccountAndAlsoIsChildOf:[:portfolioChild |
	|portfolioFatherLeft|	portfolioFatherLeft  := Portfolio  new.	portfolioFatherLeft add: portfolioChild ]
	


! !
!PortfolioTest methodsFor: 'expect' stamp: 'lp 5/22/2023 15:27:50'!
expectForAPortafolioWithAnAccountAndWith: aBlock ThisBalance: aExpectedBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add:account.
aBlock  value: portfolio .
self assert:aExpectedBalance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:27:50' prior: 50696403!
test02addAccountSHouldAddHisBalanceself expectForAPortafolioWithAnAccountAndWith:[:portfolio ||anotherAccount |
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio add: anotherAccount .
] ThisBalance: 150
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:27:50' prior: 50696433!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance
self expectForAPortafolioWithAnAccountAndWith: [:nothing|] ThisBalance: 100.! !

!methodRemoval: PortfolioTest #expectForAPortafolioWithAnAccountAnd:ThisBalance: stamp: 'lp 5/22/2023 15:27:50'!
expectForAPortafolioWithAnAccountAnd: aBlock ThisBalance: aExpectedBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add:account.
aBlock  value: portfolio .
self assert:aExpectedBalance equals: portfolio balance.!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:27:52'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:27:52'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:27:52'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:27:52'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:27:52'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:27:52'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:27:52'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:27:52'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:27:52'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:27:53'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:27:53'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:27:53'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:27:53'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:27:53'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:27:53'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:27:53'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:27:53'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:27:53'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:27:53'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:27:53'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:27:53'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:31:51' prior: 50691824!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance

|portfolio account portafolioToAdd|

self expectForAPortafolioWithAnAccountAndWith: [] ThisBalance: 100.
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .

self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:33:01'!
xxx: aBlock

|portfolio account portafolioToAdd|

self expectForAPortafolioWithAnAccountAndWith: [] ThisBalance: 100.
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .

self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:33:16' prior: 50697462!
xxx: aBlock

|portfolio account portafolioToAdd|

self expectForAPortafolioWithAnAccountAndWith: [] ThisBalance: 100.
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value.
self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:33:37'!
xxx: aBlock  ThisBalance: expectedBalance

|portfolio account portafolioToAdd|

self expectForAPortafolioWithAnAccountAndWith: [] ThisBalance: 100.
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value.
self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:34:05' prior: 50697494!
xxx: aBlock ThisBalance: expectedBalance

|portfolio account portafolioToAdd|

self expectForAPortafolioWithAnAccountAndWith: [] ThisBalance: 100.
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value.
self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:34:14' prior: 50697511!
xxx: aBlock ThisBalance: expectedBalance
|portfolio account portafolioToAdd|

self expectForAPortafolioWithAnAccountAndWith: [] ThisBalance: 100.
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value.
self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:34:36' prior: 50697528!
xxx: aBlock ThisBalance: expectedBalance
|portfolio account portafolioToAdd|

self expectForAPortafolioWithAnAccountAndWith: [] ThisBalance: 100.
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value.
self assert:expectedBalance equals: portfolio balance.! !

!methodRemoval: PortfolioTest #xxx: stamp: 'lp 5/22/2023 15:34:46'!
xxx: aBlock

|portfolio account portafolioToAdd|

self expectForAPortafolioWithAnAccountAndWith: [] ThisBalance: 100.
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value.
self assert:100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:35:09' prior: 50696441!
test04addAPortafolioSHouldAddHisBalance
|portfolio account portafolioToAdd  secondAccount secondPortafolioToAdd |
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.
secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd add: secondAccount.
portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
portfolio add: secondPortafolioToAdd .
self assert:200 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:35:34' prior: 50697445!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance

|portfolio account portafolioToAdd|
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .

self assert:100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:38:12' prior: 50697577!
test04addAPortafolioSHouldAddHisBalance
self xxx:[:portfolio|
	|secondPortafolioToAdd secondAccount|
	
secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd add: secondAccount.
portfolio add: secondPortafolioToAdd .
]  ThisBalance: 200.
! !

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:38:13'!
ERROR!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:38:25' prior: 50697545!
xxx: aBlock ThisBalance: expectedBalance
|portfolio account portafolioToAdd|

self expectForAPortafolioWithAnAccountAndWith: [] ThisBalance: 100.
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value:portfolio .
self assert:expectedBalance equals: portfolio balance.! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:38:25'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:38:25'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:38:25'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:38:25'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:38:25'!
ERROR!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:38:25'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:38:25'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:38:25'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:38:25'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:38:25'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:38:26'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:38:26'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:38:26'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:38:26'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:38:26'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:38:26'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:38:26'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:38:26'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:38:26'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:38:26'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:38:26'!
ERROR!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:38:49' prior: 50697631!
xxx: aBlock ThisBalance: expectedBalance
|portfolio account portafolioToAdd|
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value:portfolio .
self assert:expectedBalance equals: portfolio balance.! !

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:38:52'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:38:53'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:38:53'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:38:53'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:38:53'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:38:53'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:38:53'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:39:22' prior: 50697599!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance
self xxx:  [:nothing]ThisBalance: 100.
! !

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:39:23'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:39:24'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:39:24'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:40:12' prior: 50697733!
xxx: aBlock ThisBalance: expectedBalance
|portfolio account portafolioToAdd|
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value:portfolio .
self assert:expectedBalance + 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:40:21' prior: 50697614!
test04addAPortafolioSHouldAddHisBalance
self xxx:[:portfolio|
	|secondPortafolioToAdd secondAccount|
	
secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd add: secondAccount.
portfolio add: secondPortafolioToAdd .
]  ThisBalance: 100.
! !

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:40:22'!
FAILURE!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:40:22'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:40:23'!
FAILURE!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:41:00' prior: 50697923!
xxx: aBlock ThisBalance: expectedBalance
|portfolio account portafolioToAdd|
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value:portfolio .
self assert:expectedBalance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:41:05' prior: 50697939!
test04addAPortafolioSHouldAddHisBalance
self xxx:[:portfolio|
	|secondPortafolioToAdd secondAccount|
	
secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd add: secondAccount.
portfolio add: secondPortafolioToAdd .
]  ThisBalance: 200.
! !

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:41:06'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:41:06'!
PASSED!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:42:16' prior: 50698057!
test04addAPortafolioSHouldAddHisBalance
self xxx:[:portfolio|
	|secondPortafolioToAdd secondAccount|
	
secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd add: secondAccount.
portfolio add: secondPortafolioToAdd .
]  ThisBalance: 100.
! !
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:43:11'!
ExpectWithAnPortfolioWithBalanceOf100AndAfterDoing: aBlock ThisBalance: expectedBalance
|portfolio account portafolioToAdd|
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value:portfolio .
self assert:expectedBalance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:43:11' prior: 50698156!
test04addAPortafolioSHouldAddHisBalance
self ExpectWithAnPortfolioWithBalanceOf100AndAfterDoing:[:portfolio|
	|secondPortafolioToAdd secondAccount|
	
secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd add: secondAccount.
portfolio add: secondPortafolioToAdd .
]  ThisBalance: 100.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 15:43:11' prior: 50697830!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance
self ExpectWithAnPortfolioWithBalanceOf100AndAfterDoing:  [:nothing]ThisBalance: 100.
! !

!methodRemoval: PortfolioTest #xxx:ThisBalance: stamp: 'lp 5/22/2023 15:43:11'!
xxx: aBlock ThisBalance: expectedBalance
|portfolio account portafolioToAdd|
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value:portfolio .
self assert:expectedBalance equals: portfolio balance.!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:43:13'!
FAILURE!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:43:13'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:43:13'!
FAILURE!
!PortfolioTest methodsFor: 'balance Test' stamp: 'lp 5/22/2023 15:43:23' prior: 50698187!
test04addAPortafolioSHouldAddHisBalance
self ExpectWithAnPortfolioWithBalanceOf100AndAfterDoing:[:portfolio|
	|secondPortafolioToAdd secondAccount|
	
secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd add: secondAccount.
portfolio add: secondPortafolioToAdd .
]  ThisBalance: 200.
! !

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:43:23'!
PASSED!

!testRun: #PortfolioTest #test00PortofolioShouldStartWithBalanceIn0 stamp: 'lp 5/22/2023 15:43:23'!
PASSED!

!testRun: #PortfolioTest #test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance stamp: 'lp 5/22/2023 15:43:23'!
PASSED!

!testRun: #PortfolioTest #test02addAccountSHouldAddHisBalance stamp: 'lp 5/22/2023 15:43:23'!
PASSED!

!testRun: #PortfolioTest #test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test04addAPortafolioSHouldAddHisBalance stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test05addAAccountAlreadyInThePortfolioAccountsProducesError stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test06addAAccountAlreadyInThePortfolioInnerPortafolioProducesError stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test07addAAccountAlreadyInThePortfolioInnerPortafoliosProducesError stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test08addAPortafolioWIthAAlreadyExistingAccountInTheReceptorPortfolioAccounts stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test09addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInmeidatePortfolios stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test10addAPortafolioWIthAAlreadyExistingAccountInThePortfolioReceptorInnerPortfolios stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test11hasRegisterInAddedAccount stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test12hasRegisterNotInAddedAccount stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasAddedTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test14cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHasAddedThePortfolioAndOneHasTheAccount stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test15cannotAddAnAccounttoAPortfolioWhenThereIsAnotherPortfolioWhoHasTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test16cannotAddAnAccounttoAPortfolioWhenThereAreManyPortfoliosWhoHaveTheAccountAndThePortfolio stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test17transactionsOfAddedAccounts stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test19hasRegisterInAddedPortfolio stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

!testRun: #PortfolioTest #test20transactionsOfAddedPortfolio stamp: 'lp 5/22/2023 15:43:24'!
PASSED!

----SNAPSHOT----(22 May 2023 15:54:33) CuisUniversity-5706.image priorSource: 11522171!

----QUIT----(22 May 2023 15:54:37) CuisUniversity-5706.image priorSource: 11736323!

----STARTUP---- (22 May 2023 16:00:16) as C:\Users\RYZEN\Desktop\windows64\CuisUniversity-5706.image!

!PortfolioTest methodsFor: 'expect' stamp: 'lp 5/22/2023 16:01:33'!
expectForAPortafolioWithAnAccountAndBalance100AfterAdding: aBlock ThisBalance: aExpectedBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add:account.
aBlock  value: portfolio .
self assert:aExpectedBalance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 16:01:33' prior: 50697328!
test02addAccountSHouldAddHisBalanceself expectForAPortafolioWithAnAccountAndBalance100AfterAdding:[:portfolio ||anotherAccount |
anotherAccount := ReceptiveAccount new.
Deposit register: 50 on: anotherAccount .
portfolio add: anotherAccount .
] ThisBalance: 150
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 16:01:33' prior: 50697339!
test01addFirstAccountMakePortfolioBalanceEqualsToTheAccountBalance
self expectForAPortafolioWithAnAccountAndBalance100AfterAdding: [:nothing|] ThisBalance: 100.! !

!methodRemoval: PortfolioTest #expectForAPortafolioWithAnAccountAndWith:ThisBalance: stamp: 'lp 5/22/2023 16:01:33'!
expectForAPortafolioWithAnAccountAndWith: aBlock ThisBalance: aExpectedBalance

|portfolio account |

portfolio := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portfolio add:account.
aBlock  value: portfolio .
self assert:aExpectedBalance equals: portfolio balance.!
!PortfolioTest methodsFor: 'expect' stamp: 'lp 5/22/2023 16:02:02'!
ExpectForAPortfolioWithBalanceOf100AfterDoing: aBlock ThisBalance: expectedBalance
|portfolio account portafolioToAdd|
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value:portfolio .
self assert:expectedBalance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 16:02:02' prior: 50698311!
test04addAPortafolioSHouldAddHisBalance
self ExpectForAPortfolioWithBalanceOf100AfterDoing:[:portfolio|
	|secondPortafolioToAdd secondAccount|
	
secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd add: secondAccount.
portfolio add: secondPortafolioToAdd .
]  ThisBalance: 200.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 16:02:02' prior: 50698203!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance
self ExpectForAPortfolioWithBalanceOf100AfterDoing:  [:nothing]ThisBalance: 100.
! !

!methodRemoval: PortfolioTest #ExpectWithAnPortfolioWithBalanceOf100AndAfterDoing:ThisBalance: stamp: 'lp 5/22/2023 16:02:03'!
ExpectWithAnPortfolioWithBalanceOf100AndAfterDoing: aBlock ThisBalance: expectedBalance
|portfolio account portafolioToAdd|
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value:portfolio .
self assert:expectedBalance equals: portfolio balance.!
!PortfolioTest methodsFor: 'expect' stamp: 'lp 5/22/2023 16:02:18'!
expectForAPortfolioWithBalanceOf100AfterDoing: aBlock ThisBalance: expectedBalance
|portfolio account portafolioToAdd|
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value:portfolio .
self assert:expectedBalance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 16:02:18' prior: 50698500!
test03addFirstAPortafolioMakeTheBalanceEqualsToTheAddedPoratafolioBalance
self expectForAPortfolioWithBalanceOf100AfterDoing:  [:nothing]ThisBalance: 100.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'lp 5/22/2023 16:02:18' prior: 50698484!
test04addAPortafolioSHouldAddHisBalance
self expectForAPortfolioWithBalanceOf100AfterDoing:[:portfolio|
	|secondPortafolioToAdd secondAccount|
	
secondPortafolioToAdd := Portfolio new initialize .
secondAccount := ReceptiveAccount new.
Deposit register: 100 on: secondAccount.
secondPortafolioToAdd add: secondAccount.
portfolio add: secondPortafolioToAdd .
]  ThisBalance: 200.
! !

!methodRemoval: PortfolioTest #ExpectForAPortfolioWithBalanceOf100AfterDoing:ThisBalance: stamp: 'lp 5/22/2023 16:02:18'!
ExpectForAPortfolioWithBalanceOf100AfterDoing: aBlock ThisBalance: expectedBalance
|portfolio account portafolioToAdd|
portafolioToAdd := Portfolio new initialize .
account := ReceptiveAccount new.
Deposit register: 100 on: account.
portafolioToAdd add: account.

portfolio := Portfolio new initialize.
portfolio add: portafolioToAdd .
aBlock  value:portfolio .
self assert:expectedBalance equals: portfolio balance.!

----STARTUP---- (25 May 2023 14:48:40) as C:\Users\RYZEN\Desktop\windows64\CuisUniversity-5706.image!


!classRemoval: #PortfolioRoot stamp: 'lp 5/25/2023 14:48:49'!
PortfolioHirarchy subclass: #PortfolioRoot
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioBranched stamp: 'lp 5/25/2023 14:48:49'!
PortfolioHirarchy subclass: #PortfolioBranched
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioHirarchy stamp: 'lp 5/25/2023 14:48:50'!
Object subclass: #PortfolioHirarchy
	instanceVariableNames: 'portfolioInTheCenterOfTheHirarchy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'lp 5/25/2023 14:48:50'!
FinancialElement subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'lp 5/25/2023 14:48:51'!
FinancialElement subclass: #Portfolio
	instanceVariableNames: 'financialElements portfolioHirarchy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialElement stamp: 'lp 5/25/2023 14:48:51'!
Object subclass: #FinancialElement
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'lp 5/25/2023 14:48:51'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'lp 5/25/2023 14:48:52'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'lp 5/25/2023 14:48:52'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'lp 5/25/2023 14:48:52'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'lp 5/25/2023 14:48:53'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\RYZEN\Desktop\windows64\Portfolio-Solucion.st----!

TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransactionTest category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 14:51:47'!
TestCase subclass: #TransactionTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransactionTest methodsFor: 'no messages' stamp: 'lp 5/25/2023 14:51:59'!
test01NewTransfer
! !

!classDefinition: #Transferencia category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 14:52:36'!
Object subclass: #Transferencia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:52:33' prior: 50699392!
test01NewTransfer

|transfer|

transfer := Transferencia new.! !

!classRenamed: #Transferencia as: #Transaction stamp: 'lp 5/25/2023 14:53:03'!
Smalltalk renameClassNamed: #Transferencia as: #Transaction!
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:53:03' prior: 50699404!
test01NewTransfer

|transfer|

transfer := Transaction new.! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:53:24' prior: 50699414!
test01NewTransfer

|transfer|

transfer := Transaction new.

! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:55:08' prior: 50699420!
test01NewTransfer

|transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.

transfer := Transaction new.

self assert: accountExtracted equals:1.
self assert: accountDeposit  equals:1.! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:56:01' prior: 50699426!
test01NewTransfer

|transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
Deposit register: 100 on: accountExtracted .

transfer := Transaction new.

self assert: accountExtracted equals:1.
self assert: accountDeposit  equals:1.! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:56:10' prior: 50699438!
test01NewTransfer

|transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
Deposit register: 100 on: accountExtracted.

transfer := Transaction new.

self assert: accountExtracted equals:1.
self assert: accountDeposit  equals:1.! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:56:36' prior: 50699451!
test01NewTransfer

|transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transaction new.

self assert: accountExtracted equals:1.
self assert: accountDeposit  equals:1.! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:57:28' prior: 50699464!
test01NewTransfer

|transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transaction.

self assert: accountExtracted equals:1.
self assert: accountDeposit  equals:1.! !

!classRenamed: #Transaction as: #Transfer stamp: 'lp 5/25/2023 14:57:36'!
Smalltalk renameClassNamed: #Transaction as: #Transfer!
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:57:36' prior: 50699476!
test01NewTransfer

|transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer.

self assert: accountExtracted equals:1.
self assert: accountDeposit  equals:1.! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:58:14' prior: 50699492!
test01NewTransfer

|transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer thisAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert: accountExtracted equals:1.
self assert: accountDeposit  equals:1.! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:58:49' prior: 50699504!
test01NewTransfer

|transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer thisAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert: accountExtracted balance equals: -100.
self assert: accountDeposit  equals: 100.! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:59:03' prior: 50699517!
test01NewTransfer

|transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer thisAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert: accountExtracted balance equals: -100.
self assert: accountDeposit  balance equals: 100.! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 14:59:26' prior: 50699531!
test01NewTransfer

|accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


Transfer thisAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert: accountExtracted balance equals: -100.
self assert: accountDeposit  balance equals: 100.! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 14:59:36'!
ERROR!
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 14:59:49'!
thisAmmount: aRenameMe1 from: accountExtracted to: accountDeposit 
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:01:46' prior: 50699560!
thisAmmount: aRenameMe1 from: accountExtracted to: accountDeposit 
	Deposit register: aRenameMe1 on: accountDeposit .
	Withdraw register: aRenameMe1 on: accountExtracted 
	^ self new.! !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:01:52' prior: 50699566!
thisAmmount: anAmmount from: accountExtracted to: accountDeposit 
	Deposit register: anAmmount on: accountDeposit .
	Withdraw register: anAmmount on: accountExtracted 
	^ self new.! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:01:56'!
ERROR!

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:01:56'!
ERROR!
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:02:04' prior: 50699575!
thisAmmount: anAmmount from: accountExtracted to: accountDeposit 
	Deposit register: anAmmount on: accountDeposit .
	Withdraw register: anAmmount on: accountExtracted .
	^ self new.! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:02:05'!
PASSED!
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:03:06'!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	Deposit register: anAmmount on: accountDeposit .
	Withdraw register: anAmmount on: accountExtracted .
	^ self new.! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:03:07' prior: 50699545!
test01NewTransfer

|accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert: accountExtracted balance equals: -100.
self assert: accountDeposit  balance equals: 100.! !

!methodRemoval: Transfer class #thisAmmount:from:to: stamp: 'lp 5/25/2023 15:03:07'!
thisAmmount: anAmmount from: accountExtracted to: accountDeposit 
	Deposit register: anAmmount on: accountDeposit .
	Withdraw register: anAmmount on: accountExtracted .
	^ self new.!
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:07:33'!
test02chekingLegs

|accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert: accountExtracted balance equals: -100.
self assert: accountDeposit  balance equals: 100.! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:08:12' prior: 50699631!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert: accountExtracted balance equals: -100.
self assert: accountDeposit  balance equals: 100.! !
!TransactionTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:09:13' prior: 50699644!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction).
self assert: (accountDeposit  hasRegistered: transaction).! !

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:09:25'!
FAILURE!
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:13:14' prior: 50699601!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	Deposit register: anAmmount on: accountDeposit .
	Withdraw register: anAmmount on: accountExtracted.
	^ self new.! !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:13:27' prior: 50699675!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	Deposit register: anAmmount on: accountDeposit .
	Withdraw register: anAmmount on: accountExtracted.
	^ self new.! !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:13:40' prior: 50699684!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := self new.
	Deposit register: anAmmount on: accountDeposit .
	Withdraw register: anAmmount on: accountExtracted.
	^ self new.! !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:14:16' prior: 50699694!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := self new.
	Deposit register: anAmmount on: accountDeposit .
	Withdraw register: anAmmount on: accountExtracted.
	accountExtracted register: aTransfer .
	accountDeposit register: aTransfer 
		^ self new.! !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:14:21' prior: 50699704!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := self new.
	Deposit register: anAmmount on: accountDeposit .
	Withdraw register: anAmmount on: accountExtracted.
	accountExtracted register: aTransfer .
	accountDeposit register: aTransfer .
		^ self new.! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:14:25'!
ERROR!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:14:25'!
FAILURE!

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:14:30'!
ERROR!
!Transfer methodsFor: 'no messages' stamp: 'lp 5/25/2023 15:15:58'!
affectBalance: aBalanceAmmount
^0! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:16:04' prior: 50699737!
affectBalance: aBalanceAmmount
 aBalanceAmmount ! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:16:05'!
FAILURE!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:16:05'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:16:13' prior: 50699742!
affectBalance: aBalanceAmmount
^ aBalanceAmmount ! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:16:14'!
PASSED!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:16:14'!
FAILURE!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:16:14'!
FAILURE!

 transactions includes: aTransaction!
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:17:37' prior: 50699717!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := self new.
	Deposit register: anAmmount on: accountDeposit .
	Withdraw register: anAmmount on: accountExtracted.
	accountExtracted register: aTransfer .
	accountDeposit register: aTransfer .
		^ aTransfer.! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:17:43'!
PASSED!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:17:43'!
PASSED!
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:18:11' prior: 50699766!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := self new.
	accountExtracted register: aTransfer .
	accountDeposit register: aTransfer .
		^ aTransfer.! !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:18:21' prior: 50699784!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := self new.
	accountExtracted register: aTransfer .
	accountDeposit register: aTransfer .
	^ aTransfer.! !

Transfer subclass: #ExtractionLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ExtractionLeg category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:22:50'!
Transfer subclass: #ExtractionLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #DepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:22:56'!
Transfer subclass: #DepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:25:09' prior: 50699794!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := self new.
	accountExtracted register: aTransfer depositLeg.
	accountDeposit register: aTransfer .
	^ aTransfer.! !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:25:26' prior: 50699827!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := self new.
	accountExtracted register: aTransfer extractedLeg.
	accountDeposit register: aTransfer depositLeg.
	^ aTransfer.! !

!classDefinition: #TranferHead category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:29:37'!
Transfer subclass: #TranferHead
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:29:27' prior: 50699837!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := TranferHead new.
	accountExtracted register: aTransfer extractedLeg.
	accountDeposit register: aTransfer depositLeg.
	^ aTransfer.! !

!classRenamed: #TranferHead as: #TransferHead stamp: 'lp 5/25/2023 15:29:45'!
Smalltalk renameClassNamed: #TranferHead as: #TransferHead!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:29:45' prior: 50699855!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := TransferHead new.
	accountExtracted register: aTransfer extractedLeg.
	accountDeposit register: aTransfer depositLeg.
	^ aTransfer.! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:30:09'!
ERROR!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:30:09'!
ERROR!

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:30:27'!
ERROR!
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:30:40'!
extractedLeg
	self shouldBeImplemented.! !
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:31:20' prior: 50699888!
extractedLeg
	^ ExtractionLeg of:self.! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:31:27'!
ERROR!
!ExtractionLeg class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:31:41'!
of: aTransferHead 
	self shouldBeImplemented.! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:31:44'!
ERROR!
!ExtractionLeg class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:32:04' prior: 50699900!
of: aTransferHead 
	^self new! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:32:06'!
ERROR!
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:32:15'!
depositLeg
	self shouldBeImplemented.! !
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:32:32' prior: 50699915!
depositLeg
	^DepositLeg of:self! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:32:32'!
ERROR!
!DepositLeg class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:32:37'!
of: aTransferHead 
	self shouldBeImplemented.! !
!DepositLeg class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:32:47' prior: 50699927!
of: aTransferHead 
	^self new.! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:32:51'!
FAILURE!

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:32:57'!
FAILURE!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:32:57'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:33:47' prior: 50699752!
affectBalance: aBalanceAmmount
 self subclassResponsibility ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:34:19' prior: 50699945!
affectBalance: aBalanceAmmount
 ^aBalanceAmmount ! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:34:24'!
FAILURE!

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:34:24'!
FAILURE!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:34:33'!
FAILURE!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:34:33'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:34:43' prior: 50699950!
affectBalance: aBalanceAmmount
 	^aBalanceAmmount ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:35:04' prior: 50699966!
affectBalance: aBalanceAmmount
 	self subclassResponsibility ! !

!methodRemoval: Transfer #affectBalance: stamp: 'lp 5/25/2023 15:35:17'!
affectBalance: aBalanceAmmount
 	self subclassResponsibility !
!DepositLeg methodsFor: 'no messages' stamp: 'lp 5/25/2023 15:35:44'!
affectBalance: aBalanceAmmount! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:35:52' prior: 50699980!
affectBalance: aBalanceAmmount
	^ aBalanceAmmount - 100! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:35:56' prior: 50699984!
affectBalance: aBalanceAmmount
	^ aBalanceAmmount + 100! !
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:36:53' prior: 50699989!
affectBalance: aBalanceAmmount
	^ aBalanceAmmount + self transferHead value.! !
!ExtractionLeg methodsFor: 'no messages' stamp: 'lp 5/25/2023 15:37:14'!
affectBalance: aBalanceAmmount
	^ aBalanceAmmount - self transferHead value.! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:37:25'!
ERROR!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:37:25'!
FAILURE!

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:37:28'!
ERROR!
!ExtractionLeg methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:37:47'!
transferHead
	self shouldBeImplemented.! !

DepositLeg class
	instanceVariableNames: 'transferHead'!

!classDefinition: 'DepositLeg class' category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:38:04'!
DepositLeg class
	instanceVariableNames: 'transferHead'!

TransferHead class
	instanceVariableNames: 'transferHead'!

!classDefinition: 'TransferHead class' category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:38:49'!
TransferHead class
	instanceVariableNames: 'transferHead'!

DepositLeg class
	instanceVariableNames: ''!

!classDefinition: 'DepositLeg class' category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:38:56'!
DepositLeg class
	instanceVariableNames: ''!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:39:12'!
Transfer subclass: #DepositLeg
	instanceVariableNames: 'transferHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!DepositLeg methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:39:10' prior: 50699994!
affectBalance: aBalanceAmmount
	^ aBalanceAmmount +  transferHead value.! !

!classDefinition: #ExtractionLeg category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:39:27'!
Transfer subclass: #ExtractionLeg
	instanceVariableNames: 'transferHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ExtractionLeg methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:39:26' prior: 50699999!
affectBalance: aBalanceAmmount
	^ aBalanceAmmount - transferHead value.! !
!ExtractionLeg class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:40:04' prior: 50699908!
of: aTransferHead 
	
	^self new initializeWith: aTransferHead .! !
!ExtractionLeg methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:40:25'!
initializeWith: aTransferHead! !

!methodRemoval: ExtractionLeg #transferHead stamp: 'lp 5/25/2023 15:40:28'!
transferHead
	self shouldBeImplemented.!
!ExtractionLeg methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:40:31' prior: 50700070!
initializeWith: aTransferHead
	! !

!classDefinition: #TransferLegs category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:42:13'!
Transfer subclass: #TransferLegs
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferLegs subclass: #DepositLeg
	instanceVariableNames: 'transferHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:42:13'!
TransferLegs subclass: #DepositLeg
	instanceVariableNames: 'transferHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferLegs subclass: #ExtractionLeg
	instanceVariableNames: 'transferHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ExtractionLeg category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:42:28'!
TransferLegs subclass: #ExtractionLeg
	instanceVariableNames: 'transferHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferLegs class methodsFor: 'no messages' stamp: 'lp 5/25/2023 15:42:51'!
of: aTransferHead 
	^self new.! !
!TransferLegs class methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:43:19' prior: 50700115!
of: aTransferHead 
	^self new initializeWith: aTransferHead .! !

!methodRemoval: DepositLeg class #of: stamp: 'lp 5/25/2023 15:43:28'!
of: aTransferHead 
	^self new.!

!methodRemoval: ExtractionLeg class #of: stamp: 'lp 5/25/2023 15:43:32'!
of: aTransferHead 
	
	^self new initializeWith: aTransferHead .!

!methodRemoval: ExtractionLeg #initializeWith: stamp: 'lp 5/25/2023 15:43:51'!
initializeWith: aTransferHead
	!

TransferLegs subclass: #DepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #DepositLeg category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:44:05'!
TransferLegs subclass: #DepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferLegs subclass: #ExtractionLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ExtractionLeg category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:44:08'!
TransferLegs subclass: #ExtractionLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLegs category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:44:55'!
Transfer subclass: #TransferLegs
	instanceVariableNames: 'transferHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferLegs methodsFor: 'no messages' stamp: 'lp 5/25/2023 15:44:54'!
initializeWith: aTransferHead

	transferHead := aTransferHead 
	! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:45:22'!
affectBalance 
	self subclassResponsibility ! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:45:27'!
affectBalance: aBlance
	self subclassResponsibility ! !

!methodRemoval: TransferLegs #affectBalance stamp: 'lp 5/25/2023 15:45:30'!
affectBalance 
	self subclassResponsibility !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:45:35' prior: 50700176!
affectBalance: aBalance
	self subclassResponsibility ! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:45:45'!
ERROR!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:45:45'!
FAILURE!

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:45:47'!
ERROR!
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:47:00' prior: 50699870!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := TransferHead withValue: anAmmount .
	accountExtracted register: aTransfer extractedLeg.
	accountDeposit register: aTransfer depositLeg.
	^ aTransfer.! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:47:02'!
ERROR!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:47:02'!
ERROR!

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:47:04'!
ERROR!
!TransferHead class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:47:18'!
withValue: anAmmount 
	self shouldBeImplemented.! !
!TransferHead class methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:48:02' prior: 50700217!
withValue: anAmmount 
	^ self new initializeWith: anAmmount .! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:48:05'!
ERROR!

!classDefinition: #TransferHead category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:48:11'!
Transfer subclass: #TransferHead
	instanceVariableNames: 'ammount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:48:11'!
initializeWith: anAmmount 
	self shouldBeImplemented.
	ammount := anAmmount.! !
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:48:17' prior: 50700237!
initializeWith: anAmmount 
	
	ammount := anAmmount.! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:48:23'!
ERROR!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:48:23'!
FAILURE!

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:48:25'!
ERROR!
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:48:49' overrides: 16902254!
value
	^ ammount ! !

!testRun: #TransactionTest #test01NewTransfer stamp: 'lp 5/25/2023 15:48:56'!
PASSED!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:48:57'!
FAILURE!

!testRun: #TransactionTest #test02chekingLegs stamp: 'lp 5/25/2023 15:48:57'!
FAILURE!

!classRenamed: #TransactionTest as: #TransferTest stamp: 'lp 5/25/2023 15:49:24'!
Smalltalk renameClassNamed: #TransactionTest as: #TransferTest!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 15:49:29'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 15:49:29'!
FAILURE!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 15:49:29'!
FAILURE!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 15:49:33'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 15:49:33'!
FAILURE!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 15:49:33'!
FAILURE!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 15:50:45'!
FAILURE!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 15:50:45'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:52:35' prior: 50699658!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction leftLeg).
self assert: (accountDeposit  hasRegistered: transaction).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:52:46' prior: 50700294!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction extractionLeg).
self assert: (accountDeposit  hasRegistered: transaction).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:52:53' prior: 50700309!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction extractionLeg).
self assert: (accountDeposit  hasRegistered: transaction depositLeg).! !
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:55:46' prior: 50700243!
initializeWith: anAmmount 
	
	ammount := anAmmount.
	 ExtractionLeg of: self.! !

!classDefinition: #TransferHead category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:56:09'!
Transfer subclass: #TransferHead
	instanceVariableNames: 'ammount extractionLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:56:01' prior: 50700339!
initializeWith: anAmmount 
	
	ammount := anAmmount.
	 extractionLeg := ExtractionLeg of: self.! !
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:57:26' prior: 50700353!
initializeWith: anAmmount 
	
	ammount := anAmmount.
	! !

!classDefinition: #TransferHead category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:58:23'!
Transfer subclass: #TransferHead
	instanceVariableNames: 'ammount extractionLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:58:21' prior: 50699920!
depositLeg
	depositLeg ifNil:[depositLeg:= DepositLeg of: self].
	^depositLeg! !
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:58:52' prior: 50699893!
extractedLeg
	depositLeg ifNil:[depositLeg:= DepositLeg of: self].
	^depositLeg! !

!classDefinition: #TransferHead category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:58:59'!
Transfer subclass: #TransferHead
	instanceVariableNames: 'ammount extractionLeg estractionLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferHead methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:58:59' prior: 50700378!
extractedLeg
	estractionLeg ifNil:[estractionLeg:= DepositLeg of: self].
	^estractionLeg! !
!TransferHead methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:58:59' prior: 50700372!
depositLeg
	estractionLeg ifNil:[estractionLeg:= DepositLeg of: self].
	^estractionLeg! !

!classDefinition: #TransferHead category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 15:59:08'!
Transfer subclass: #TransferHead
	instanceVariableNames: 'ammount extractionLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferHead methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:59:08' prior: 50700393!
extractedLeg
	depositLeg ifNil:[depositLeg:= DepositLeg of: self].
	^depositLeg! !
!TransferHead methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 15:59:09' prior: 50700399!
depositLeg
	depositLeg ifNil:[depositLeg:= DepositLeg of: self].
	^depositLeg! !
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:59:23' prior: 50700414!
extractedLeg
	extractionLeg ifNil:[depositLeg:= DepositLeg of: self].
	^depositLeg! !
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 15:59:35' prior: 50700426!
extractedLeg
	extractionLeg ifNil:[extractionLeg= DepositLeg of: self].
	^extractionLeg! !

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 15:59:44'!
ERROR!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 15:59:44'!
ERROR!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 15:59:46'!
ERROR!
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 16:00:40' prior: 50700432!
extractedLeg
	extractionLeg ifNil:[extractionLeg := DepositLeg of: self].
	^extractionLeg! !

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:00:45'!
FAILURE!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:00:45'!
ERROR!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:00:47'!
FAILURE!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:00:57'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:01:14' prior: 50700324!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction extractedLeg ).
self assert: (accountDeposit  hasRegistered: transaction depositLeg).! !

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:01:18'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:01:20'!
FAILURE!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:01:53'!
FAILURE!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:01:53'!
FAILURE!
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 16:04:17' prior: 50700446!
extractedLeg
	extractionLeg ifNil:[extractionLeg := ExtractionLeg of: self].
	^extractionLeg! !

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:04:22'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:04:22'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:06:48' prior: 50700463!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction extractedLeg ).
self assert: (accountDeposit  hasRegistered: transaction depositLeg).
! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:10:28' overrides: 16901772!
= aTransaction
	(aTransaction isKindOf: TransferLegs) ifTrue:[^ transferHead = aTransaction transferHead]
! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:10:42' prior: 50700517 overrides: 16901772!
= aTransaction
	(aTransaction isKindOf: TransferLegs) ifTrue:[^ transferHead = aTransaction transferHead]
	ifFalse:[^false]
! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:12:36' prior: 50700525 overrides: 16901772!
= aTransaction
	(aTransaction isKindOf: Transfer )ifTrue:[
		(aTransaction isKindOf: TransferLegs) ifTrue:[^ transferHead = aTransaction transferHead]
		ifFalse:[^transferHead = aTransaction ]
		]
! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:13:06' prior: 50700533 overrides: 16901772!
= aTransaction
	(aTransaction isKindOf: Transfer )ifTrue:[
		(aTransaction isKindOf: TransferLegs) ifTrue:[^ transferHead = aTransaction transferHead]
		ifFalse:[^transferHead = aTransaction]
		].
	^false
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:13:24' prior: 50700501!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction  ).
self assert: (accountDeposit  hasRegistered: transaction ).
! !

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:13:25'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:13:25'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:13:25'!
PASSED!
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:13:49' overrides: 16901788!
hash
	super hash.! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:13:54' prior: 50700576 overrides: 16901788!
hash
	^ super hash! !

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:13:59'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:13:59'!
PASSED!
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:15:49' prior: 50700543 overrides: 16901772!
= aTransaction
	(aTransaction isKindOf: Transfer )ifTrue:[
		
		aTransaction xxx: self
		"(aTransaction isKindOf: TransferLegs) ifTrue:[^ transferHead = aTransaction transferHead]
		ifFalse:[^transferHead = aTransaction]"
		].
	^false
! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:16:53'!
xxx: aTransferLeg
	aTransferLeg isEqualToATransactionLeg: self! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:17:43'!
isEqualToATransactionLeg: aTransactionLeg^ transferHead = aTransactionLeg transferHead! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:17:45' prior: 50700606!
isEqualToATransactionLeg: aTransactionLeg^ transferHead = aTransactionLeg transferHead.! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:17:51' prior: 50700612!
isEqualToATransactionLeg: aTransactionLeg
^ transferHead = aTransactionLeg transferHead.! !
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 16:18:51'!
xxx: aTransactionLeg
	aTransactionLeg headIsEqualTo: self! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:19:17'!
headIsEqualTo: aTransaction
	^ transferHead = aTransaction! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:19:28' prior: 50700629!
headIsEqualTo: aTransferHead
	^ transferHead = aTransferHead! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:20:06' prior: 50700591 overrides: 16901772!
= aTransaction
	(aTransaction isKindOf: Transfer )ifTrue:[
		
	^aTransaction xxx: self]
	^false
! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:20:13' prior: 50700640 overrides: 16901772!
= aTransaction
	(aTransaction isKindOf: Transfer )ifTrue:[
		
	^aTransaction xxx: self].
	^false
! !

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:20:15'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:20:15'!
ERROR!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:20:15'!
ERROR!
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 16:21:26'!
isEqualToATransferLeg: aTransactionLeg
	aTransactionLeg headIsEqualTo: self! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:21:26'!
isEqualToATransferLeg: aTransferLeg
	aTransferLeg isEqualToATransactionLeg: self! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:21:26' prior: 50700647 overrides: 16901772!
= aTransaction
	(aTransaction isKindOf: Transfer )ifTrue:[
		
	^aTransaction isEqualToATransferLeg: self].
	^false
! !

!methodRemoval: TransferHead #xxx: stamp: 'lp 5/25/2023 16:21:26'!
xxx: aTransactionLeg
	aTransactionLeg headIsEqualTo: self!

!methodRemoval: TransferLegs #xxx: stamp: 'lp 5/25/2023 16:21:26'!
xxx: aTransferLeg
	aTransferLeg isEqualToATransactionLeg: self!
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:21:47' prior: 50700666!
isEqualToATransferLeg: aTransferLeg
	^aTransferLeg isEqualToATransactionLeg: self! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:21:52' prior: 50700618!
isEqualToATransactionLeg: aTransactionLeg
	^ transferHead = aTransactionLeg transferHead.! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:22:44' prior: 50700688!
isEqualToATransferLeg: aTransferLeg
	^transferHead = aTransferLeg transferHead! !

!methodRemoval: TransferLegs #isEqualToATransactionLeg: stamp: 'lp 5/25/2023 16:22:47'!
isEqualToATransactionLeg: aTransactionLeg
	^ transferHead = aTransactionLeg transferHead.!
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:23:22'!
transferHead
	^ transferHead ! !

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:23:29'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:23:29'!
ERROR!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:23:29'!
ERROR!
!TransferHead methodsFor: 'initialization' stamp: 'lp 5/25/2023 16:24:19' prior: 50700661!
isEqualToATransferLeg: aTransactionLeg
	^ aTransactionLeg headIsEqualTo: self! !

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:24:21'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:24:21'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:25:58' prior: 50700553!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction ).
self assert: (accountDeposit  hasRegistered: transaction ).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:26:35' prior: 50700734!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction ).
self assert: (accountDeposit  hasRegistered: transaction ).
self assert: accountExtracted transactions equals: #(transaction)
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:26:43' prior: 50700749!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction ).
self assert: (accountDeposit  hasRegistered: transaction ).
self assert: (accountExtracted transactions) equals: #(transaction)
! !

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:26:44'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:28:25' prior: 50700766!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction ).
self assert: (accountDeposit  hasRegistered: transaction ).
self assert: (accountExtracted transactions) equals:( OrderedCollection with: transaction) ! !

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:28:27'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:28:27'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:28:27'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:29:38' prior: 50700786!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction ).
self assert: (accountDeposit  hasRegistered: transaction ).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:29:48' prior: 50700812!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction).
self assert: (accountDeposit  hasRegistered: transaction ).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:39:37'!
test02transferAreInTransaction

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction).
self assert: (accountDeposit  hasRegistered: transaction ).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:40:31' prior: 50700841!
test02transferAreInTransaction

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted transactions includes: transfer).
self assert: (accountDeposit transactions includes: transfer).
! !

!testRun: #TransferTest #test02transferAreInTransaction stamp: 'lp 5/25/2023 16:40:32'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 16:40:32'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 16:40:32'!
PASSED!

!testRun: #TransferTest #test02transferAreInTransaction stamp: 'lp 5/25/2023 16:40:32'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:40:37'!
test03transferAreInTransaction

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted transactions includes: transfer).
self assert: (accountDeposit transactions includes: transfer).
! !

!methodRemoval: TransferTest #test02transferAreInTransaction stamp: 'lp 5/25/2023 16:40:38'!
test02transferAreInTransaction

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted transactions includes: transfer).
self assert: (accountDeposit transactions includes: transfer).
!

TestCase subclass: #ReportesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportesTest category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 16:50:19'!
TestCase subclass: #ReportesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportesTest methodsFor: 'no messages' stamp: 'lp 5/25/2023 16:53:35'!
test01empyAccountSummaryReportGivesOnlyTheBalance

self assert: 'balance = 0' equals: (ReceptiveAccount new) accountSummary
! !

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 16:53:38'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 16:53:52'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 16:54:02' prior: 50700933!
accountSummary
	^ 'balance = 0'! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 16:54:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 16:54:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 16:54:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 16:54:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 16:54:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 16:54:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 16:54:03'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 16:54:12' prior: 50700938!
accountSummary
	^ 'balance = ', 0! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 16:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 16:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 16:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 16:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 16:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 16:54:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 16:54:13'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:56:16' prior: 50700923!
test01empyAccountSummaryReportGivesOnlyTheBalance
|account|
account := ReceptiveAccount  new.


self assert: 'balance = 0' equals: (ReceptiveAccount new) accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:56:26'!
test02empyAccountSummaryReportGivesOnlyTheBalance
|account|
account := ReceptiveAccount  new.


self assert: 'balance = 0' equals: (ReceptiveAccount new) accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:56:32' prior: 50701000!
test01empyAccountSummaryReportGivesOnlyTheBalance


self assert: 'balance = 0' equals: (ReceptiveAccount new) accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:56:55'!
test02AccountSummaryGivesADeposit
|account|
account := ReceptiveAccount  new.


self assert: 'balance = 0' equals: (ReceptiveAccount new) accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:57:55' prior: 50701024!
test02AccountSummaryGivesADeposit
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100.
balance = 0' 
equals: (ReceptiveAccount new) accountSummary
! !

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 16:58:12'!
ERROR!

!methodRemoval: ReportesTest #test02empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 16:58:47'!
test02empyAccountSummaryReportGivesOnlyTheBalance
|account|
account := ReceptiveAccount  new.


self assert: 'balance = 0' equals: (ReceptiveAccount new) accountSummary
!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 16:58:49'!
ERROR!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 16:58:49'!
ERROR!

'balance = ', 0!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 16:59:17' prior: 50701032!
test02AccountSummaryGivesADeposit
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100.
balance = 0' 
equals: account accountSummary
! !

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 16:59:18'!
ERROR!

'hola', 0!

'hola', 0 asString!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:00:02' prior: 50700969!
accountSummary
	^ 'balance = ', 0 asString! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:00:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:00:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:00:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:00:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:00:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:00:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:00:07'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/25/2023 17:00:13'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/25/2023 17:00:13'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/25/2023 17:00:13'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:00:17'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:00:17'!
FAILURE!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:00:17'!
FAILURE!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:00:25'!
FAILURE!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:00:25'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:01:49' prior: 50701075!
accountSummary

	^ 'balance = ', 0 asString! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:05:56' prior: 50701130!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) isTrue:[accountSummary , 'Deposito por 100'] 
		]
	^ 'balance = ', 0 asString! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:06:23' prior: 50701135!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) isTrue:[accountSummary , 'Deposito por 100.'] 
		].
	^ 'balance = ', 0 asString! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:07:13' prior: 50701145!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) isTrue:[accountSummary , 'Deposito por' , (transactions at:1) value ,'.'] 
		].
	^ 'balance = ', 0 asString! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:08:21' prior: 50701155!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) isTrue:[accountSummary , 'Deposito por' , (transactions at:1) value ,'.\n'] 
		].
	^ 'balance = ', 0 asString! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:08:32' prior: 50701166!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) isTrue:[accountSummary , 'Deposito por' , (transactions at:1) value ,'.\n'] 
		].
	^ accountSummary ,'balance = ', 0 asString! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:08:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:08:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:08:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:08:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:08:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:08:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:08:35'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:08:39'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:08:39'!
ERROR!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:08:39'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:08:50' prior: 50701177!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary , 'Deposito por' , (transactions at:1) value ,'.\n'] 
		].
	^ accountSummary ,'balance = ', 0 asString! !

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:08:53'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:08:53'!
ERROR!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:08:53'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:09:14' prior: 50701224!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary , 'Deposito por' , (transactions at:1) value asString ,'.\n'] 
		].
	^ accountSummary ,'balance = ', 0 asString! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:09:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:09:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:09:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:09:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:09:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:09:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:09:15'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:09:19'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:09:19'!
FAILURE!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:09:19'!
FAILURE!

ReceptiveAccountTest subclass: #ReportesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportesTest category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 17:09:39'!
ReceptiveAccountTest subclass: #ReportesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:09:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:09:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:09:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:09:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:09:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:09:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:09:44'!
PASSED!

TestCase subclass: #ReportesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportesTest category: 'Portfolio-Solucion' stamp: 'lp 5/25/2023 17:09:54'!
TestCase subclass: #ReportesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:09:56'!
FAILURE!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:09:56'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:11:50' prior: 50701245!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary : accountSummary , 'Deposito por' , (transactions at:1) value asString ,'.\n'] 
		].
	^ accountSummary ,'balance = ', 0 asString! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:11:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:11:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:11:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:11:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:11:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:11:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:11:51'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:11:54'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:11:54'!
ERROR!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:11:54'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:12:04' prior: 50701350!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por' , (transactions at:1) value asString ,'.\n'] 
		].
	^ accountSummary ,'balance = ', 0 asString! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:12:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:12:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:12:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:12:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:12:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:12:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:12:05'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:12:09'!
FAILURE!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:12:09'!
FAILURE!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:12:45' prior: 50701061!
test02AccountSummaryGivesADeposit
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100.\nbalance = 0' 
equals: account accountSummary
! !

'Deposito por 100.\nbalance = 0' !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:13:16' prior: 50701443!
test02AccountSummaryGivesADeposit
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100./nbalance = 0' 
equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:13:23' prior: 50701454!
test02AccountSummaryGivesADeposit
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100.\nbalance = 0' 
equals: account accountSummary
! !

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:13:24'!
FAILURE!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:13:41' prior: 50701464!
test02AccountSummaryGivesADeposit
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100.
balance = 0' 
equals: account accountSummary
! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:13:49' prior: 50701398!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.\n'] 
		].
	^ accountSummary ,'balance = ', 0 asString! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:13:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:13:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:13:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:13:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:13:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:13:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:13:51'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:13:54'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:13:54'!
FAILURE!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:13:54'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:14:37' prior: 50701486!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String cr] 
		].
	^ accountSummary ,'balance = ', 0 asString! !

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:14:45'!
ERROR!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:14:45'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:14:53' prior: 50701534!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String ] 
		].
	^ accountSummary ,'balance = ', 0 asString! !

----SNAPSHOT----(25 May 2023 17:15:36) CuisUniversity-5706.image priorSource: 11736412!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:15:42' prior: 50701553!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ] 
		].
	^ accountSummary ,'balance = ', 0 asString! !

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:15:47'!
FAILURE!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:15:47'!
FAILURE!

'Deposito por 100.
balance = 0'!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:16:34' prior: 50701477!
test02AccountSummaryGivesADeposit
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100.
balance = 0'
equals: account accountSummary
! !

account accountSummary!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:17:07' prior: 50701588!
test02AccountSummaryGivesADeposit
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100.',String crString ,'balance = 0'
equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:17:10' prior: 50701598!
test02AccountSummaryGivesADeposit
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100.',String crString ,'balance = 0'
	equals: account accountSummary
! !

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:17:12'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:17:12'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:17:12'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:17:21'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:17:59'!
test02AccountSummaryGivesAWithdraw
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100.',String crString ,'balance = 0'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:18:07'!
test03AccountSummaryGivesAWithdraw
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100.',String crString ,'balance = 0'
	equals: account accountSummary
! !

!methodRemoval: ReportesTest #test02AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 17:18:07'!
test02AccountSummaryGivesAWithdraw
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100.',String crString ,'balance = 0'
	equals: account accountSummary
!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:18:16' prior: 50701641!
test03AccountSummaryGivesAWithdraw
|account|
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .


self assert: 'Deposito por 100.',String crString ,'balance = 0'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:18:25' prior: 50701608!
test02AccountSummaryGivesADeposit
|account|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .


self assert: 'Deposito por 100.',String crString ,'balance = 100'
	equals: account accountSummary
! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:18:48' prior: 50701568!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ] 
		].
	^ accountSummary ,'balance = ',  self balance asString ! !

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:18:51'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:18:51'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 17:18:52'!
FAILURE!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 17:18:52'!
FAILURE!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:19:22' prior: 50701661!
test03AccountSummaryGivesAWithdraw
|account|
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .


self assert: 'Extraccion por 100.',String crString ,'balance = -100'
	equals: account accountSummary
! !

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 17:19:30'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:20:21' prior: 50701681!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ] 
			
		].
	^ accountSummary ,'balance = ',  self balance asString ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:20:31' prior: 50701721!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
			
		].
	^ accountSummary ,'balance = ',  self balance asString ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:20:44' prior: 50701734!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ] 
			
		].
	^ accountSummary ,'balance = ',  self balance asString ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:21:05' prior: 50701747!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		].
	^ accountSummary ,'balance = ',  self balance asString ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:21:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:21:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:21:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:21:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:21:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:21:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:21:06'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:21:10'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:21:10'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 17:21:10'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:21:40'!
test04AccountSummaryGivesAExitTransfer
|account|
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .


self assert: 'Extraccion por 100.',String crString ,'balance = -100'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:22:48' prior: 50701819!
test04AccountSummaryGivesAExitTransfer
|account|
account := ReceptiveAccount  new.
Transfer 


self assert: 'Extraccion por 100.',String crString ,'balance = -100'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:24:02' prior: 50701830!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit|
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .


self assert: 'Extraccion por 100.',String crString ,'balance = -100'
	equals: accountExtracted accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:24:41' prior: 50701840!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit|
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .


self assert: 'Salida por Transferencia por 100.',String crString ,'balance = -100'
	equals: accountExtracted accountSummary
! !

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:24:59'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:25:22' prior: 50701765!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		].
	^ accountSummary ,'balance = ',  self balance asString ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:25:58' prior: 50701872!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		((transactions at:1) isKindOf: Transfer) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		].
	^ accountSummary ,'balance = ',  self balance asString ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:25:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:25:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:25:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:25:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:25:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:25:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:25:59'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:26:02'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:26:02'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 17:26:02'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:26:02'!
FAILURE!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:26:02'!
FAILURE!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:26:11'!
FAILURE!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:26:11'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:26:44' prior: 50701896!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		((transactions at:1) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		].
	^ accountSummary ,'balance = ',  self balance asString ! !

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:26:46'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:26:46'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 17:26:46'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:26:46'!
FAILURE!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:26:47'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:27:17' prior: 50701969!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		((transactions at:1) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (transactions at:1) value asString ,'.', String crString ] .
		].
	^ accountSummary ,'balance = ',  self balance asString ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:27:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:27:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:27:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:27:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:27:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:27:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:27:20'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:27:38'!
FAILURE!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:27:38'!
FAILURE!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:28:07' prior: 50701854!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit|
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .


self assert: 'Salida por Transferencia de 100.',String crString ,'balance = -100'
	equals: accountExtracted accountSummary
! !

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:28:09'!
FAILURE!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:28:09'!
FAILURE!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:29:30'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:32:54' prior: 50702009!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		((transactions at:1) class isKindOf: Transfer ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (transactions at:1) value asString ,'.', String crString ] .
		].
	^ accountSummary ,'balance = ',  self balance asString ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:32:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:32:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:32:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:32:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:32:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:32:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:32:58'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:33:02'!
FAILURE!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:33:02'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:33:51' prior: 50702090!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		((transactions at:1) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (transactions at:1) value asString ,'.', String crString ] .
		].
	^ accountSummary ,'balance = ',  self balance asString ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:34:28' prior: 50702147!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		((transactions at:1) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (transactions at:1) transferHead value asString ,'.', String crString ] .
		].
	^ accountSummary ,'balance = ',  self balance asString ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:34:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:34:31'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:34:35'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:34:46'!
test04AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit|
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .


self assert: 'Salida por Transferencia de 100.',String crString ,'balance = -100'
	equals: accountExtracted accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:34:54' prior: 50702225!
test04AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit|
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .


self assert: 'Salida por Transferencia de 100.',String crString ,'balance = -100'
	equals: accountDeposit accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:34:59' prior: 50702240!
test04AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit|
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .


self assert: 'Entrada por Transferencia de 100.',String crString ,'balance = -100'
	equals: accountDeposit accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:35:09'!
test05AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit|
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .


self assert: 'Entrada por Transferencia de 100.',String crString ,'balance = -100'
	equals: accountDeposit accountSummary
! !

!methodRemoval: ReportesTest #test04AccountSummaryGivesAInTransfer stamp: 'lp 5/25/2023 17:35:12'!
test04AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit|
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .


self assert: 'Entrada por Transferencia de 100.',String crString ,'balance = -100'
	equals: accountDeposit accountSummary
!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/25/2023 17:35:13'!
FAILURE!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/25/2023 17:35:13'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:35:42' prior: 50702171!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		((transactions at:1) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (transactions at:1) transferHead value asString ,'.', String crString ] .
		((transactions at:1) isKindOf: DepositLeg ) ifTrue:[accountSummary := accountSummary , 'Entrada por Transferencia de ' , (transactions at:1) transferHead value asString ,'.', String crString ] .
		].
	^ accountSummary ,'balance = ',  self balance asString ! !

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/25/2023 17:35:49'!
FAILURE!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/25/2023 17:35:49'!
FAILURE!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:36:02' prior: 50702268!
test05AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit|
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .


self assert: 'Entrada por Transferencia de 100.',String crString ,'balance = 100'
	equals: accountDeposit accountSummary
! !

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/25/2023 17:36:04'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:36:39' prior: 50702341!
test05AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit|
accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .


self assert: 'Entrada por Transferencia de 100.',String crString ,'balance = 100'
	equals: accountDeposit accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:39:57'!
test06AccountSummaryGivesMany
|accountExtracted accountDeposit|
accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .


self assert: 'Entrada por Transferencia de 100.',String crString ,'balance = 100'
	equals: accountDeposit accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:40:45' prior: 50702373!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit|
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountToExtract  to: accountToDeposit .


self assert: 'Entrada por Transferencia de 100.',String crString ,'balance = 100'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:41:14' prior: 50702387!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit|
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 

Transfer theAmmount: 100 from: accountToExtract  to: accountToDeposit .


self assert: 'Entrada por Transferencia de 100.',String crString ,'balance = 100'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:41:46' prior: 50702403!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit|
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: accountToExtract  to: accountToDeposit .


self assert: 'Entrada por Transferencia de 100.',String crString ,'balance = 100'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:41:59' prior: 50702420!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit|
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .


self assert: 'Entrada por Transferencia de 100.',String crString ,'balance = 100'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:42:13' prior: 50702438!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit|
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .



self assert: 'Entrada por Transferencia de 100.',String crString ,'balance = 100'
	equals: account accountSummary
! !

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'lp 5/25/2023 17:42:13'!
FAILURE!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:42:32' prior: 50702455!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit|
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .



self assert: 

'Entrada por Transferencia de 100.',String crString ,'balance = 100'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:42:59' prior: 50702477!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit|
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .



self assert: 
'Deposito por 100.',String crString ,
'Extraccion por 100.',String crString ,
'Entrada por Transferencia de 100.',String crString ,'balance = 100'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:43:02' prior: 50702496!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit|
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .



self assert: 
'Deposito por 100.',String crString ,
'Extraccion por 50.',String crString ,
'Entrada por Transferencia de 100.',String crString ,'balance = 100'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:43:27' prior: 50702518!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit|
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .



self assert: 
'Deposito por 100.',String crString ,
'Extraccion por 50.',String crString ,
'Salida por Transferencia de 20.',String crString,
'Entrada por Transferencia de 30.',String crString ,'balance = 100'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:43:39' prior: 50702540!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit|
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .



self assert: 
'Deposito por 100.',String crString ,
'Extraccion por 50.',String crString ,
'Salida por Transferencia de 20.',String crString,
'Entrada por Transferencia de 30.',String crString ,
'balance = 60'
	equals: account accountSummary
! !

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'lp 5/25/2023 17:43:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:44:13' prior: 50702303!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		((transactions at:1) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (transactions at:1) transferHead value asString ,'.', String crString ] .
		((transactions at:1) isKindOf: DepositLeg ) ifTrue:[accountSummary := accountSummary , 'Entrada por Transferencia de ' , (transactions at:1) transferHead value asString ,'.', String crString ] .
		].
	^ accountSummary ,'balance = ',  self balance asString ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:44:27' prior: 50702589!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		transactions do:[
		((transactions at:1) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((transactions at:1) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		((transactions at:1) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (transactions at:1) transferHead value asString ,'.', String crString ] .
		((transactions at:1) isKindOf: DepositLeg ) ifTrue:[accountSummary := accountSummary , 'Entrada por Transferencia de ' , (transactions at:1) transferHead value asString ,'.', String crString ] .
		].]
	^ accountSummary ,'balance = ',  self balance asString ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:44:57' prior: 50702620!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		transactions do:[:aTransaction |
		((aTransaction) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (transactions at:1) value asString ,'.', String crString ].
		((aTransaction) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (transactions at:1) value asString ,'.', String crString ] .
		((aTransaction) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (transactions at:1) transferHead value asString ,'.', String crString ] .
		((aTransaction) isKindOf: DepositLeg ) ifTrue:[accountSummary := accountSummary , 'Entrada por Transferencia de ' , (transactions at:1) transferHead value asString ,'.', String crString ] .
		].]
	^ accountSummary ,'balance = ',  self balance asString ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:45:14' prior: 50702651!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		transactions do:[:aTransaction |
		((aTransaction) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (aTransaction) value asString ,'.', String crString ].
		((aTransaction) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (aTransaction) value asString ,'.', String crString ] .
		((aTransaction) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (aTransaction) transferHead value asString ,'.', String crString ] .
		((aTransaction) isKindOf: DepositLeg ) ifTrue:[accountSummary := accountSummary , 'Entrada por Transferencia de ' , (aTransaction) transferHead value asString ,'.', String crString ] .
		].]
	^ accountSummary ,'balance = ',  self balance asString ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/25/2023 17:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/25/2023 17:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/25/2023 17:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/25/2023 17:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/25/2023 17:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/25/2023 17:45:16'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'lp 5/25/2023 17:45:21'!
ERROR!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'lp 5/25/2023 17:45:21'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:45:29' prior: 50702682!
accountSummary
	|accountSummary|
	accountSummary :=''.
	(transactions size = 0) ifFalse:[
		transactions do:[:aTransaction |
		((aTransaction) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (aTransaction) value asString ,'.', String crString ].
		((aTransaction) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (aTransaction) value asString ,'.', String crString ] .
		((aTransaction) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (aTransaction) transferHead value asString ,'.', String crString ] .
		((aTransaction) isKindOf: DepositLeg ) ifTrue:[accountSummary := accountSummary , 'Entrada por Transferencia de ' , (aTransaction) transferHead value asString ,'.', String crString ] .
		].].
	^ accountSummary ,'balance = ',  self balance asString ! !

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'lp 5/25/2023 17:45:32'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:45:32'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:45:32'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 17:45:32'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:45:32'!
PASSED!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/25/2023 17:45:32'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'lp 5/25/2023 17:45:32'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:49:24'!
test07emptyPortfolioAccountSumaryGivesBalance0
|account accountToExtract accountToDeposit|
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .



self assert: 
'Deposito por 100.',String crString ,
'Extraccion por 50.',String crString ,
'Salida por Transferencia de 20.',String crString,
'Entrada por Transferencia de 30.',String crString ,
'balance = 60'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:49:45' prior: 50702798!
test07emptyPortfolioAccountSumaryGivesBalance0
|account accountToExtract accountToDeposit|

account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .



self assert: 
'Deposito por 100.',String crString ,
'Extraccion por 50.',String crString ,
'Salida por Transferencia de 20.',String crString,
'Entrada por Transferencia de 30.',String crString ,
'balance = 60'
	equals: account accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:50:28' prior: 50702822!
test07emptyPortfolioAccountSumaryGivesBalance0
|portfolio |

portfolio := Portfolio new.


self assert: 
'Deposito por 100.',String crString ,
'Extraccion por 50.',String crString ,
'Salida por Transferencia de 20.',String crString,
'Entrada por Transferencia de 30.',String crString ,
'balance = 60'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:50:42' prior: 50702846!
test07emptyPortfolioAccountSumaryGivesBalance0
|portfolio |

portfolio := Portfolio new.


self assert: 
'balance = 0'
	equals: portfolio accountSummary
! !

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 17:50:43'!
ERROR!
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 17:50:52'!
accountSummary
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 17:52:27' prior: 50702871!
accountSummary
	^'balance = ', self balance ! !

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:52:31'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:52:31'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 17:52:32'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:52:32'!
PASSED!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/25/2023 17:52:32'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'lp 5/25/2023 17:52:32'!
PASSED!

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 17:52:33'!
ERROR!

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 17:52:33'!
ERROR!
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 17:52:45' prior: 50702875!
accountSummary
	^'balance = ', self balance asString! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lp 5/25/2023 17:52:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lp 5/25/2023 17:52:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lp 5/25/2023 17:52:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lp 5/25/2023 17:52:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lp 5/25/2023 17:52:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lp 5/25/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lp 5/25/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lp 5/25/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lp 5/25/2023 17:52:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lp 5/25/2023 17:52:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lp 5/25/2023 17:52:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lp 5/25/2023 17:52:48'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lp 5/25/2023 17:52:48'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lp 5/25/2023 17:52:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lp 5/25/2023 17:52:49'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:52:53'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:52:53'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 17:52:53'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:52:54'!
PASSED!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/25/2023 17:52:54'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'lp 5/25/2023 17:52:54'!
PASSED!

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 17:52:54'!
PASSED!

----SNAPSHOT----(25 May 2023 17:52:59) CuisUniversity-5706.image priorSource: 11837255!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:54:02'!
calculateAccountSummary
	|accountSummary|
		transactions do:[:aTransaction |
		((aTransaction) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (aTransaction) value asString ,'.', String crString ].
		((aTransaction) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (aTransaction) value asString ,'.', String crString ] .
		((aTransaction) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (aTransaction) transferHead value asString ,'.', String crString ] .
		((aTransaction) isKindOf: DepositLeg ) ifTrue:[accountSummary := accountSummary , 'Entrada por Transferencia de ' , (aTransaction) transferHead value asString ,'.', String crString ] .
		]! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:56:08' prior: 50702993!
calculateAccountSummary
	|accountSummary|

		transactions do:[:aTransaction |
		((aTransaction) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (aTransaction) value asString ,'.', String crString ].
		((aTransaction) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (aTransaction) value asString ,'.', String crString ] .
		((aTransaction) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (aTransaction) transferHead value asString ,'.', String crString ] .
		((aTransaction) isKindOf: DepositLeg ) ifTrue:[accountSummary := accountSummary , 'Entrada por Transferencia de ' , (aTransaction) transferHead value asString ,'.', String crString ] .
		].
	^accountSummary ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:56:25' prior: 50703020!
calculateAccountSummary
	|accountSummary|

	accountSummary  := ''.
		transactions do:[:aTransaction |
		((aTransaction) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (aTransaction) value asString ,'.', String crString ].
		((aTransaction) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (aTransaction) value asString ,'.', String crString ] .
		((aTransaction) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (aTransaction) transferHead value asString ,'.', String crString ] .
		((aTransaction) isKindOf: DepositLeg ) ifTrue:[accountSummary := accountSummary , 'Entrada por Transferencia de ' , (aTransaction) transferHead value asString ,'.', String crString ] .
		].
	^accountSummary ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:56:47' prior: 50702745!
accountSummary
	|accountSummary|
	accountSummary := self calculateAccountSummary 
	^ accountSummary ,'balance = ',  self balance asString ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/25/2023 17:57:15' prior: 50703077!
accountSummary
	
	^ self calculateAccountSummary ,'balance = ',  self balance asString ! !

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 17:57:18'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 17:57:18'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 17:57:18'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 17:57:18'!
PASSED!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/25/2023 17:57:18'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'lp 5/25/2023 17:57:18'!
PASSED!

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 17:57:18'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:58:22' prior: 50702860!
test07emptyPortfolioAccountSumaryGivesBalance0
|portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.


self assert: 
'balance = 0'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:58:37' prior: 50703114!
test07emptyPortfolioAccountSumaryGivesBalance0
|portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolio  add: account .


self assert: 
'balance = 0'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:59:27'!
test08PortfolioWithAnAccountAccountSumaryGivesBalance0
|portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolio  add: account .


self assert: 
'balance = 0'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:59:40' prior: 50703125!
test07emptyPortfolioAccountSumaryGivesBalance0
|portfolio |

portfolio := Portfolio new.


self assert: 
'balance = 0'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 17:59:49' prior: 50703136!
test08PortfolioWithAnAccountAccountSumaryGivesBalance0
|portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolio  add: account .


self assert: 
'Extraccion por 100.',String crString ,
'balance = 0'
	equals: portfolio accountSummary
! !

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 17:59:50'!
FAILURE!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:00:02' prior: 50703156!
test08PortfolioWithAnAccountAccountSumaryGivesBalance0
|portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolio  add: account .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:01:21' prior: 50702906!
accountSummary
	(accounts size = 0) ifFalse:[
		(accounts at:1)
		].
	
	^'balance = ', self balance asString! !
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:01:42' prior: 50703186!
accountSummary
	(accounts size = 0) ifFalse:[
		(accounts at:1) accountSummary 
		].
	
	^'balance = ', self balance asString! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lp 5/25/2023 18:01:43'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lp 5/25/2023 18:01:43'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lp 5/25/2023 18:01:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lp 5/25/2023 18:01:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lp 5/25/2023 18:01:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lp 5/25/2023 18:01:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lp 5/25/2023 18:01:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lp 5/25/2023 18:01:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lp 5/25/2023 18:01:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lp 5/25/2023 18:01:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lp 5/25/2023 18:01:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lp 5/25/2023 18:01:45'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lp 5/25/2023 18:01:46'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lp 5/25/2023 18:01:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lp 5/25/2023 18:01:46'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 18:01:50'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 18:01:50'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 18:01:50'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 18:01:51'!
PASSED!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/25/2023 18:01:51'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'lp 5/25/2023 18:01:51'!
PASSED!

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 18:01:51'!
PASSED!

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 18:01:51'!
FAILURE!

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 18:01:52'!
FAILURE!
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:03:19' prior: 50703193!
accountSummary
|accountSummary|
	accountSummary  := ''.
	(accounts size = 0) ifFalse:[
		accountSummary  , (accounts at:1) accountSummary 
		].
	
	^'balance = ', self balance asString! !
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:03:27' prior: 50703288!
accountSummary
|accountSummary|
	accountSummary  := ''.
	(accounts size = 0) ifFalse:[
		accountSummary  , (accounts at:1) accountSummary 
		].
	
	^ accountSummary , 'balance = ', self balance asString! !

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 18:03:30'!
FAILURE!

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 18:03:30'!
FAILURE!
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:03:57' prior: 50703297!
accountSummary
|accountSummary|
	accountSummary  := ''.
	(accounts size = 0) ifFalse:[
		accountSummary :=  (accounts at:1) accountSummary 
		].
	
	^ accountSummary , 'balance = ', self balance asString! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lp 5/25/2023 18:03:58'!
PASSED!

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 18:04:03'!
FAILURE!

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 18:04:03'!
FAILURE!
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:04:24' prior: 50703314!
accountSummary
|accountSummary|
	accountSummary  := ''.
	(accounts size = 0) ifFalse:[
		accountSummary :=  (accounts at:1) calculateAccountSummary 
		].
	
	^ accountSummary , 'balance = ', self balance asString! !

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 18:04:27'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:06:14' prior: 50703173!
test08PortfolioWithAnAccountAccountSumaryGivesBalance0
|portfolioToAdd portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolioToAdd := Portfolio new.
portfolio  add: account .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:06:43' prior: 50703402!
test08PortfolioWithAnAccountAccountSumaryGivesBalance0
|portfolioToAdd portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolioToAdd := Portfolio new.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:06:50'!
test09PortfolioWithAnAccountAccountSumaryGivesBalance0
|portfolioToAdd portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolioToAdd := Portfolio new.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:07:12' prior: 50703417!
test08PortfolioWithAnAccountAccountSumaryGivesBalance0
| portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolio add: account .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:07:40'!
test09PortfolioWithAnotherPortfolioAccountSumary
|portfolioToAdd portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolioToAdd := Portfolio new.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !

!methodRemoval: ReportesTest #test09PortfolioWithAnAccountAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 18:07:40'!
test09PortfolioWithAnAccountAccountSumaryGivesBalance0
|portfolioToAdd portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolioToAdd := Portfolio new.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:07:48'!
test08PortfolioWithAnAccountAccountSumary
| portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolio add: account .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !

!methodRemoval: ReportesTest #test08PortfolioWithAnAccountAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 18:07:48'!
test08PortfolioWithAnAccountAccountSumaryGivesBalance0
| portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolio add: account .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
!

!testRun: #ReportesTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/25/2023 18:09:38'!
ERROR!

!testRun: #ReportesTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/25/2023 18:09:38'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:10:03'!
calculateAccountSummary
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:11:05' prior: 50703525!
calculateAccountSummary
	|accountSummary|
	accountSummary  := ''.
	(accounts size = 0) ifFalse:[
		accountSummary :=  (accounts at:1) calculateAccountSummary 
		].
	
	^ accountSummary ! !

!testRun: #ReportesTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/25/2023 18:12:35'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:13:06'!
test10PortfolioWithTwoAccountsAccountSumary
|portfolioToAdd portfolio account |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolioToAdd := Portfolio new.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:13:40' prior: 50703542!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

portfolio := Portfolio new.
portfolio add: accountWithDraw .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:14:10' prior: 50703558!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountWithDraw := ReceptiveAccount  new.
Deposit register: 10 on: accountWithDraw .

portfolio := Portfolio new.
portfolio add: accountWithDraw .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:14:26' prior: 50703572!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountDeposit .


self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:14:29' prior: 50703589!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountDeposit .

self assert: 
'Extraccion por 100.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:15:15' prior: 50703606!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountDeposit .

self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -100'
	equals: portfolio accountSummary
! !

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:15:21'!
FAILURE!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:15:21'!
FAILURE!
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:16:21' prior: 50703388!
accountSummary
|accountSummary|
	accountSummary  := ''.
	(accounts size = 0) ifFalse:[
		accountSummary := accountSummary ,(accounts at:1) calculateAccountSummary 
		].
	
	^ accountSummary , 'balance = ', self balance asString! !
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:17:22' prior: 50703648!
accountSummary
|accountSummary|
	accountSummary  := ''.
	(accounts size = 0) ifFalse:[
		accountSummary := accountSummary ,(accounts at:1) calculateAccountSummary .
		(accountSummary size = 1) ifFalse:[
			accountSummary := accountSummary ,(accounts at:1) calculateAccountSummary .
		]
	].
	
	^ accountSummary , 'balance = ', self balance asString! !

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:17:26'!
FAILURE!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:17:26'!
FAILURE!
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:17:55' prior: 50703658!
accountSummary
|accountSummary|
	accountSummary  := ''.
	(accounts size = 0) ifFalse:[
		accountSummary := accountSummary ,(accounts at:1) calculateAccountSummary .
		(accountSummary size = 1) ifFalse:[
			accountSummary := accountSummary ,(accounts at:2) calculateAccountSummary .
		]
	].
	
	^ accountSummary , 'balance = ', self balance asString! !

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:17:59'!
ERROR!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:17:59'!
ERROR!
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:18:47' prior: 50703679!
accountSummary
|accountSummary|
	accountSummary  := ''.
	(accounts size = 0) ifFalse:[
		accountSummary := accountSummary ,(accounts at:1) calculateAccountSummary .
		(accountSummary size = 2) ifTrue:[
			accountSummary := accountSummary ,(accounts at:2) calculateAccountSummary .
		]
	].
	
	^ accountSummary , 'balance = ', self balance asString! !

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:18:51'!
FAILURE!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/25/2023 18:19:58'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/25/2023 18:19:58'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/25/2023 18:19:58'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/25/2023 18:19:58'!
PASSED!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/25/2023 18:19:59'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'lp 5/25/2023 18:19:59'!
PASSED!

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/25/2023 18:19:59'!
PASSED!

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/25/2023 18:19:59'!
PASSED!

!testRun: #ReportesTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/25/2023 18:20:00'!
PASSED!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:20:00'!
FAILURE!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:20:00'!
FAILURE!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:20:37' prior: 50703623!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountDeposit .

self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:21:02' prior: 50703755!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .


self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:21:03'!
FAILURE!
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:21:58' prior: 50703700!
accountSummary
|accountSummary|
	accountSummary  := ''.
	(accounts size = 0) ifFalse:[
		accountSummary := accountSummary ,(accounts at:1) calculateAccountSummary .
		(accounts size = 2) ifTrue:[
			accountSummary := accountSummary ,(accounts at:2) calculateAccountSummary .
		]
	].
	
	^ accountSummary , 'balance = ', self balance asString! !

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:22:01'!
PASSED!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:22:10'!
PASSED!

----SNAPSHOT----(25 May 2023 18:24:26) CuisUniversity-5706.image priorSource: 11882876!

----SNAPSHOT----(25 May 2023 18:26:03) CuisUniversity-5706.image priorSource: 11909267!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:27:11'!
test10PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .


self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:27:36' prior: 50703821!
test10PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .


self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:27:51' prior: 50703841!
test10PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .


self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:28:36' prior: 50703861!
test10PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .


self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:29:13' prior: 50703882!
test10PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .


self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:29:33' prior: 50703904!
test10PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .



self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:30:02' prior: 50703927!
test10PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

portfolioChild add: portfolioGrandson .
portfolio add: portfolioChild .

self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'lp 5/25/2023 18:30:19'!
test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

portfolioChild add: portfolioGrandson .
portfolio add: portfolioChild .

self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !

!methodRemoval: ReportesTest #test10PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/25/2023 18:30:19'!
test10PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

portfolioChild add: portfolioGrandson .
portfolio add: portfolioChild .

self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
!

!testRun: #ReportesTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/25/2023 18:30:23'!
FAILURE!

!testRun: #ReportesTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/25/2023 18:30:23'!
FAILURE!

!testRun: #ReportesTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/25/2023 18:30:48'!
FAILURE!

!testRun: #ReportesTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/25/2023 18:30:48'!
FAILURE!

----SNAPSHOT----(25 May 2023 18:33:07) CuisUniversity-5706.image priorSource: 11909356!
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:33:51' prior: 50703795!
accountSummary
|accountSummary|
	accountSummary  := ''.
	accounts do:[:anAccount |
			anAccount calculateAccountSummary .
		].
	
	^ accountSummary , 'balance = ', self balance asString! !
!Portfolio methodsFor: 'reportes' stamp: 'lp 5/25/2023 18:34:11' prior: 50704046!
accountSummary
|accountSummary|
	accountSummary  := ''.
	accounts do:[:anAccount |
			accountSummary := accountSummary , anAccount calculateAccountSummary .
		].
	
	^ accountSummary , 'balance = ', self balance asString! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'lp 5/25/2023 18:34:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'lp 5/25/2023 18:34:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'lp 5/25/2023 18:34:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'lp 5/25/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'lp 5/25/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'lp 5/25/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'lp 5/25/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'lp 5/25/2023 18:34:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'lp 5/25/2023 18:34:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'lp 5/25/2023 18:34:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'lp 5/25/2023 18:34:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'lp 5/25/2023 18:34:15'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'lp 5/25/2023 18:34:16'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'lp 5/25/2023 18:34:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'lp 5/25/2023 18:34:16'!
PASSED!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/25/2023 18:34:20'!
PASSED!

!testRun: #ReportesTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/25/2023 18:34:22'!
PASSED!

----SNAPSHOT----(25 May 2023 18:34:36) CuisUniversity-5706.image priorSource: 11916537!

----STARTUP---- (27 May 2023 14:02:03) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64 - Copy\CuisUniversity-5706.image!


!testRun: #TransferTest #test01NewTransfer stamp: 'jb 5/27/2023 14:02:16'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'jb 5/27/2023 14:02:17'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'jb 5/27/2023 14:02:17'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 14:07:27'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 14:07:27'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 14:07:27'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 14:07:27'!
PASSED!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 14:07:27'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 14:07:27'!
PASSED!

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 14:07:27'!
PASSED!

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 14:07:27'!
PASSED!

!testRun: #ReportesTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 14:07:27'!
PASSED!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 14:07:27'!
PASSED!

!testRun: #ReportesTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 14:07:27'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'jb 5/27/2023 14:10:04'!
test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

portfolioChild add: portfolioGrandson .
portfolio add: portfolioChild .

self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !

!testRun: #ReportesTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:10:05'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 14:10:05'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 14:10:05'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 14:10:05'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 14:10:05'!
PASSED!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 14:10:06'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 14:10:06'!
PASSED!

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 14:10:06'!
PASSED!

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 14:10:06'!
PASSED!

!testRun: #ReportesTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 14:10:06'!
PASSED!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 14:10:06'!
PASSED!

!testRun: #ReportesTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 14:10:06'!
PASSED!

!testRun: #ReportesTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:10:07'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'jb 5/27/2023 14:11:43' prior: 50704183!
test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary
| portfolio portfolioChild accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolio := Portfolio new.
portfolioChild add: accountWithDraw .
portfolio add: accountDeposit .


portfolio add: portfolioChild .

self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'jb 5/27/2023 14:12:17' prior: 50704254!
test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary
| portfolio portfolioChild accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.
portfolio := Portfolio new.

portfolioChild add: accountWithDraw .
portfolio add: accountDeposit .


portfolio add: portfolioChild .

self assert: 
'Deposito por 10.',String crString ,
'Extraccion por 100.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !

!testRun: #ReportesTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:12:19'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 14:12:19'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 14:12:19'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 14:12:19'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 14:12:19'!
PASSED!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 14:12:19'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 14:12:21'!
PASSED!

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 14:12:21'!
PASSED!

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 14:12:21'!
PASSED!

!testRun: #ReportesTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 14:12:21'!
PASSED!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 14:12:21'!
PASSED!

!testRun: #ReportesTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 14:12:21'!
PASSED!

!testRun: #ReportesTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:12:21'!
PASSED!

!testRun: #ReportesTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:12:25'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 14:12:25'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 14:12:26'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 14:12:26'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 14:12:26'!
PASSED!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 14:12:26'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 14:12:26'!
PASSED!

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 14:12:26'!
PASSED!

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 14:12:26'!
PASSED!

!testRun: #ReportesTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 14:12:27'!
PASSED!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 14:12:27'!
PASSED!

!testRun: #ReportesTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 14:12:27'!
PASSED!

!testRun: #ReportesTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:12:27'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'jb 5/27/2023 14:14:42'!
test13emptyAccountShouldGive0NetTransfer
| portfolio portfolioChild accountDeposit accountWithDraw |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.
portfolio := Portfolio new.

portfolioChild add: accountWithDraw .
portfolio add: accountDeposit .


portfolio add: portfolioChild .

self assert: 
'Deposito por 10.',String crString ,
'Extraccion por 100.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'jb 5/27/2023 14:15:03' prior: 50704390!
test13emptyAccountShouldGive0NetTransfer
! !

!testRun: #ReportesTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 14:15:05'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 14:15:05'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 14:15:05'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 14:15:05'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 14:15:05'!
PASSED!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 14:15:05'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 14:15:05'!
PASSED!

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 14:15:06'!
PASSED!

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 14:15:06'!
PASSED!

!testRun: #ReportesTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 14:15:06'!
PASSED!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 14:15:06'!
PASSED!

!testRun: #ReportesTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 14:15:06'!
PASSED!

!testRun: #ReportesTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:15:06'!
PASSED!

!testRun: #ReportesTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 14:15:06'!
PASSED!
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'jb 5/27/2023 14:16:24' prior: 50704412!
test13emptyAccountShouldGive0NetTransfer
self assert: 0 equals: ReceptiveAccount  new netTransfer! !
!ReportesTest methodsFor: 'as yet unclassified' stamp: 'jb 5/27/2023 14:16:27' prior: 50704465!
test13emptyAccountShouldGive0NetTransfer
self assert: 0 equals: ReceptiveAccount  new netTransfer
! !

!testRun: #ReportesTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 14:16:28'!
ERROR!
!ReceptiveAccount methodsFor: 'reportss' stamp: 'jb 5/27/2023 14:16:45'!
netTransfer
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reportss' stamp: 'jb 5/27/2023 14:16:57' prior: 50704481!
netTransfer
	^0! !

!testRun: #ReportesTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 14:17:01'!
PASSED!

!testRun: #ReportesTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 14:17:02'!
PASSED!

!testRun: #ReportesTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 14:17:02'!
PASSED!

!testRun: #ReportesTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 14:17:02'!
PASSED!

!testRun: #ReportesTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 14:17:02'!
PASSED!

!testRun: #ReportesTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 14:17:02'!
PASSED!

!testRun: #ReportesTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 14:17:02'!
PASSED!

!testRun: #ReportesTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 14:17:02'!
PASSED!

!testRun: #ReportesTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 14:17:03'!
PASSED!

!testRun: #ReportesTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 14:17:03'!
PASSED!

!testRun: #ReportesTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 14:17:03'!
PASSED!

!testRun: #ReportesTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 14:17:03'!
PASSED!

!testRun: #ReportesTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:17:03'!
PASSED!

!testRun: #ReportesTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 14:17:03'!
PASSED!
!Account methodsFor: 'transactions' stamp: 'jb 5/27/2023 14:17:34'!
netTransfer
	self subclassResponsibility ! !
!Account methodsFor: 'reports' stamp: 'jb 5/27/2023 14:18:32'!
accountSummary
	self subclassResponsibility ! !

!classRenamed: #ReportesTest as: #ReportsTest stamp: 'jb 5/27/2023 14:18:42'!
Smalltalk renameClassNamed: #ReportesTest as: #ReportsTest!

!classRenamed: #ReportsTest as: #AccountTest stamp: 'jb 5/27/2023 14:23:25'!
Smalltalk renameClassNamed: #ReportsTest as: #AccountTest!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 14:23:29'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 14:23:29'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 14:23:29'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 14:23:29'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 14:23:29'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 14:23:29'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 14:23:29'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 14:23:29'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 14:23:29'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 14:23:29'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 14:23:29'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:23:29'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 14:23:29'!
PASSED!
!AccountTest methodsFor: 'net transfer test' stamp: 'jb 5/27/2023 14:26:26'!
test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer
|account transfer|
account := ReceptiveAccount  new. 
transfer:= Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
self assert: 100 equals: account netTransfer
! !

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 14:26:33'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 14:27:12' prior: 50704486 overrides: 50704538!
netTransfer
	^100! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/27/2023 14:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 14:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 14:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/27/2023 14:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/27/2023 14:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/27/2023 14:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/27/2023 14:27:13'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 14:27:21' prior: 50704615 overrides: 50704538!
netTransfer
	^0! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 14:27:37' prior: 50704646 overrides: 50704538!
netTransfer
	^100! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 14:27:40'!
FAILURE!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 14:27:40'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 14:27:40'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 14:29:50' prior: 50704650 overrides: 50704538!
netTransfer
	(transactions  anySatisfy:  [:aTransaction | 
		aTransaction  isKindOf:  Transfer 
		] )ifFalse:  [^0 ] ifTrue: [^100]
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/27/2023 14:29:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 14:29:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 14:29:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/27/2023 14:29:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/27/2023 14:29:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/27/2023 14:29:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/27/2023 14:29:52'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 14:29:57'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 14:29:57'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 14:32:29' prior: 50704706 overrides: 50704538!
netTransfer
	transactions  do:  [:aTransaction | 
		(aTransaction  isKindOf:  Transfer  ) ifTrue:  [
				^ aTransaction  value 
			]
		] . 
	^0 
		! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/27/2023 14:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 14:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 14:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/27/2023 14:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/27/2023 14:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/27/2023 14:32:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/27/2023 14:32:30'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 14:32:34'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 14:32:34'!
FAILURE!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 14:32:34'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 14:32:59' prior: 50704789 overrides: 50704538!
netTransfer
	transactions  do:  [:aTransaction | 
		(aTransaction  isKindOf:  Transfer  ) ifTrue:  [
				^( aTransaction  value )
			]
		] . 
	^0 
		! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/27/2023 14:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 14:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 14:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/27/2023 14:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/27/2023 14:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/27/2023 14:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/27/2023 14:33:00'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 14:33:04'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 14:33:04'!
FAILURE!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 14:33:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 14:34:31' prior: 50703048!
calculateAccountSummary
	|accountSummary|

	accountSummary  := ''.
		transactions do:[:aTransaction |
		((aTransaction) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (aTransaction) value asString ,'.', String crString ].
		((aTransaction) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (aTransaction) value asString ,'.', String crString ] .
		((aTransaction) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (aTransaction)  value asString ,'.', String crString ] .
		((aTransaction) isKindOf: DepositLeg ) ifTrue:[accountSummary := accountSummary , 'Entrada por Transferencia de ' , (aTransaction) value value asString ,'.', String crString ] .
		].
	^accountSummary ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 14:34:36' prior: 50704963!
calculateAccountSummary
	|accountSummary|

	accountSummary  := ''.
		transactions do:[:aTransaction |
		((aTransaction) isKindOf: Deposit) ifTrue:[accountSummary := accountSummary , 'Deposito por ' , (aTransaction) value asString ,'.', String crString ].
		((aTransaction) isKindOf: Withdraw) ifTrue:[accountSummary := accountSummary , 'Extraccion por ' , (aTransaction) value asString ,'.', String crString ] .
		((aTransaction) isKindOf: ExtractionLeg ) ifTrue:[accountSummary := accountSummary , 'Salida por Transferencia de ' , (aTransaction)  value asString ,'.', String crString ] .
		((aTransaction) isKindOf: DepositLeg ) ifTrue:[accountSummary := accountSummary , 'Entrada por Transferencia de ' , (aTransaction) value  asString ,'.', String crString ] .
		].
	^accountSummary ! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'jb 5/27/2023 14:34:53' overrides: 16902254!
value 
	^ transferHead  value ! !
!Transfer methodsFor: 'no messages' stamp: 'jb 5/27/2023 14:35:17' overrides: 16902254!
value
	self subclassResponsibility ! !

!testRun: #TransferTest #test01NewTransfer stamp: 'jb 5/27/2023 14:35:20'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'jb 5/27/2023 14:35:20'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'jb 5/27/2023 14:35:20'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 14:35:33'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 14:35:34'!
PASSED!

----SNAPSHOT----(27 May 2023 15:27:01) CuisUniversity-5706.image priorSource: 11919322!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:28:55'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:28:55'!
PASSED!
!AccountTest methodsFor: 'net transfer test' stamp: 'jb 5/27/2023 15:33:02'!
test15AccountWithTwoTransfersGiveCorrectNetTransfer
|account |
account := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
Transfer theAmmount:  50  from:  account to: ReceptiveAccount  new.  
self assert: 50 equals: account netTransfer
! !

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:33:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:34:31' prior: 50704876 overrides: 50704538!
netTransfer
	transactions  inject: 0 into:  [:netTransfer :aTransaction | 
		(aTransaction  isKindOf:  Transfer  ) ifTrue:  [
				^netTransfer  + ( aTransaction  value )
			] ifFalse:[
				^netTransfer  
			]
		] . 
	^0 
		! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:35:12' prior: 50705152 overrides: 50704538!
netTransfer
	^transactions  inject: 0 into:  [:netTransfer :aTransaction | 
		(aTransaction  isKindOf:  Transfer  ) ifTrue:  [
				^netTransfer  + ( aTransaction  value )
			] ifFalse:[
				^netTransfer  
			]
		] . 
	
		! !

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:35:15'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:36:55' prior: 50705163 overrides: 50704538!
netTransfer
|netTransfer|
netTransfer  := 0. 
	transactions  do:  [ :aTransaction | 
		(aTransaction  isKindOf:  Transfer  ) ifTrue:  [
			netTransfer := 	netTransfer  + ( aTransaction  value )

		] 
	]. 
	^netTransfer  
		! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/27/2023 15:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 15:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 15:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/27/2023 15:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/27/2023 15:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/27/2023 15:36:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/27/2023 15:36:58'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 15:37:01'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 15:37:01'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 15:37:01'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 15:37:01'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 15:37:01'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 15:37:01'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 15:37:01'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 15:37:01'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 15:37:01'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 15:37:02'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 15:37:02'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 15:37:02'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:37:02'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:37:02'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:37:02'!
FAILURE!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:37:02'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:37:54' prior: 50705178 overrides: 50704538!
netTransfer
|netTransfer|
netTransfer  := 0. 
	transactions  do:  [ :aTransaction | 
		(aTransaction  isKindOf:  Transfer  ) ifTrue:  [
			aTransaction  affectBalance:  netTransfer 

		] 
	]. 
	^netTransfer  
		! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/27/2023 15:37:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 15:37:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 15:37:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/27/2023 15:37:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/27/2023 15:37:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/27/2023 15:37:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/27/2023 15:37:55'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:38:01'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:38:01'!
FAILURE!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:38:01'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:39:30' prior: 50705271 overrides: 50704538!
netTransfer
|netTransfer|
netTransfer  := 0. 
	transactions  do:  [ :aTransaction | 
		(aTransaction  isKindOf:  DepositLeg ) ifTrue:  [
			netTransfer  := netTransfer  + aTransaction  value. 
		] .
		(aTransaction  isKindOf:  ExtractionLeg  ) ifTrue:  [
			netTransfer  := netTransfer  - aTransaction  value. 
		] .
	
	]. 
	^netTransfer  
		! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/27/2023 15:39:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 15:39:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 15:39:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/27/2023 15:39:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/27/2023 15:39:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/27/2023 15:39:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/27/2023 15:39:32'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:39:38'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:39:38'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:37:54' prior: 50705360 overrides: 50704538!
netTransfer
|netTransfer|
netTransfer  := 0. 
	transactions  do:  [ :aTransaction | 
		(aTransaction  isKindOf:  Transfer  ) ifTrue:  [
			aTransaction  affectBalance:  netTransfer 

		] 
	]. 
	^netTransfer  
		! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:40:40' prior: 50705453 overrides: 50704538!
netTransfer
|netTransfer|
netTransfer  := 0. 
	transactions  do:  [ :aTransaction | 
		(aTransaction  isKindOf:  Transfer  ) ifTrue:  [
			aTransaction  affectNetTransfer:  netTransfer 

		] 
	]. 
	^netTransfer  
		! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:40:57'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:40:57'!
ERROR!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:40:57'!
ERROR!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:40:59'!
ERROR!
!DepositLeg methodsFor: 'reports aux' stamp: 'jb 5/27/2023 15:41:11'!
affectNetTransfer: netTransfer 
	self shouldBeImplemented.! !
!DepositLeg methodsFor: 'reports aux' stamp: 'jb 5/27/2023 15:41:33' prior: 50705529!
affectNetTransfer: netTransfer 
	netTransfer  + self value ! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:41:37'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:41:38'!
FAILURE!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:41:38'!
ERROR!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:41:40'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:42:18' prior: 50705464 overrides: 50704538!
netTransfer
|netTransfer|
netTransfer  := 0. 
	transactions  do:  [ :aTransaction | 
		(aTransaction  isKindOf:  Transfer  ) ifTrue:  [
			netTransfer  := aTransaction  affectNetTransfer:  netTransfer 

		] 
	]. 
	^netTransfer  
		! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:42:24'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:42:24'!
FAILURE!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:42:24'!
ERROR!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:42:26'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:39:30' prior: 50705596 overrides: 50704538!
netTransfer
|netTransfer|
netTransfer  := 0. 
	transactions  do:  [ :aTransaction | 
		(aTransaction  isKindOf:  DepositLeg ) ifTrue:  [
			netTransfer  := netTransfer  + aTransaction  value. 
		] .
		(aTransaction  isKindOf:  ExtractionLeg  ) ifTrue:  [
			netTransfer  := netTransfer  - aTransaction  value. 
		] .
	
	]. 
	^netTransfer  
		! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:42:57'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:42:57'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:45:05' prior: 50705663 overrides: 50704538!
netTransfer
^transactions  inject:  0  into: 	[:netTransfer :aTransaction | 
	aTransaction  affectNetTransfer: netTransfer  
	
	]! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:39:30' prior: 50705730 overrides: 50704538!
netTransfer
|netTransfer|
netTransfer  := 0. 
	transactions  do:  [ :aTransaction | 
		(aTransaction  isKindOf:  DepositLeg ) ifTrue:  [
			netTransfer  := netTransfer  + aTransaction  value. 
		] .
		(aTransaction  isKindOf:  ExtractionLeg  ) ifTrue:  [
			netTransfer  := netTransfer  - aTransaction  value. 
		] .
	
	]. 
	^netTransfer  
		! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:46:04' prior: 50705738 overrides: 50704538!
netTransfer
|netTransfer|
netTransfer  := 0. 
	transactions  do:  [ :aTransaction | 
		(aTransaction  isKindOf:  DepositLeg ) ifTrue:  [
			netTransfer  := netTransfer  + aTransaction  value. 
		] .
		(aTransaction  isKindOf:  ExtractionLeg  ) ifTrue:  [
			netTransfer  := netTransfer  - aTransaction  value. 
		] .
		(aTransaction  isKindOf: Deposit ) ifTrue: [
			netTransfer  := netTransfer
			].
		(aTransaction  isKindOf: Withdraw ) ifTrue: [
			netTransfer  := netTransfer
			].	
	]. 
	^netTransfer  
		! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/27/2023 15:46:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 15:46:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 15:46:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/27/2023 15:46:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/27/2023 15:46:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/27/2023 15:46:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/27/2023 15:46:05'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:45:05' prior: 50705753 overrides: 50704538!
netTransfer
^transactions  inject:  0  into: 	[:netTransfer :aTransaction | 
	aTransaction  affectNetTransfer: netTransfer  
	
	]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/27/2023 15:46:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 15:46:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/27/2023 15:46:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/27/2023 15:46:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/27/2023 15:46:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/27/2023 15:46:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/27/2023 15:46:36'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:39:30' prior: 50705799 overrides: 50704538!
netTransfer
|netTransfer|
netTransfer  := 0. 
	transactions  do:  [ :aTransaction | 
		(aTransaction  isKindOf:  DepositLeg ) ifTrue:  [
			netTransfer  := netTransfer  + aTransaction  value. 
		] .
		(aTransaction  isKindOf:  ExtractionLeg  ) ifTrue:  [
			netTransfer  := netTransfer  - aTransaction  value. 
		] .
	
	]. 
	^netTransfer  
		! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:46:04' prior: 50705833 overrides: 50704538!
netTransfer
|netTransfer|
netTransfer  := 0. 
	transactions  do:  [ :aTransaction | 
		(aTransaction  isKindOf:  DepositLeg ) ifTrue:  [
			netTransfer  := netTransfer  + aTransaction  value. 
		] .
		(aTransaction  isKindOf:  ExtractionLeg  ) ifTrue:  [
			netTransfer  := netTransfer  - aTransaction  value. 
		] .
		(aTransaction  isKindOf: Deposit ) ifTrue: [
			netTransfer  := netTransfer
			].
		(aTransaction  isKindOf: Withdraw ) ifTrue: [
			netTransfer  := netTransfer
			].	
	]. 
	^netTransfer  
		! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:51:11'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:51:11'!
PASSED!
!AccountTest methodsFor: 'net transfer test' stamp: 'jb 5/27/2023 15:52:52'!
test16emptyPortfolioShouldGive0NetTransfer
|account |
account := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
Transfer theAmmount:  50  from:  account to: ReceptiveAccount  new.  
self assert: 50 equals: account netTransfer
! !
!AccountTest methodsFor: 'net transfer test' stamp: 'jb 5/27/2023 15:53:12' prior: 50705919!
test16emptyPortfolioShouldGive0NetTransfer
self assert: 0 equals: Portfolio  new netTransfer
! !

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:53:14'!
ERROR!
!Account methodsFor: 'reports' stamp: 'jb 5/27/2023 15:53:27' prior: 50704538!
netTransfer
	^0! !

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:53:32'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:53:32'!
PASSED!
!AccountTest methodsFor: 'net transfer test' stamp: 'jb 5/27/2023 15:55:48'!
test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer
|account portfolio |
account := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
Transfer theAmmount:  50  from:  account to: ReceptiveAccount  new.
portfolio := Portfolio  new add: account .  

self assert: account  netTransfer  equals: portfolio netTransfer
! !

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:55:53'!
FAILURE!
!Account methodsFor: 'reports' stamp: 'jb 5/27/2023 15:56:51' prior: 50705940!
netTransfer
	self subclassResponsibility ! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 15:56:56'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 15:56:56'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 15:56:56'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 15:56:56'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 15:56:56'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 15:56:56'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 15:56:56'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 15:56:56'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 15:56:57'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 15:56:57'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 15:56:57'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 15:56:57'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:56:57'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:56:57'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:56:57'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:56:57'!
ERROR!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:56:57'!
ERROR!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:57:02'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'jb 5/27/2023 15:57:22' overrides: 50706021!
netTransfer
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reports' stamp: 'jb 5/27/2023 15:57:29' prior: 50706088 overrides: 50706021!
netTransfer
	^0! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 15:57:32'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:57:32'!
FAILURE!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 15:57:32'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'jb 5/27/2023 16:00:32' prior: 50706093 overrides: 50706021!
netTransfer
	accounts  do: [:anAccount|
		(anAccount  isKindOf:  ReceptiveAccount )   ifTrue:  [^ anAccount  netTransfer ]
		 ] . 
	^0! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:00:38'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:00:39'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:00:39'!
PASSED!
!AccountTest methodsFor: 'net transfer test' stamp: 'jb 5/27/2023 16:02:14'!
test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer
|account innerPortfolio  portfolio|
account := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
Transfer theAmmount:  50  from:  account to: ReceptiveAccount  new.
innerPortfolio  := Portfolio  new add: account .  
portfolio  := Portfolio  new add: innerPortfolio . 
self assert: account  netTransfer  equals: portfolio netTransfer
! !

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:02:15'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'jb 5/27/2023 16:03:04' prior: 50706161 overrides: 50706021!
netTransfer
	accounts  do: [:anAccount|
		(anAccount  isKindOf:  ReceptiveAccount )   ifTrue:  [^ anAccount  netTransfer ].
		(anAccount  isKindOf:  Portfolio ) ifTrue:  [^anAccount  netTransfer ]
		
		 ] . 
	^0! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/27/2023 16:03:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/27/2023 16:03:06'!
PASSED!
!Portfolio methodsFor: 'reports' stamp: 'jb 5/27/2023 16:03:32' prior: 50706251 overrides: 50706021!
netTransfer
	accounts  do: [:anAccount|
		^anAccount  netTransfer 
		 ] . 
	^0! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/27/2023 16:03:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/27/2023 16:03:33'!
PASSED!
!AccountTest methodsFor: 'net transfer test' stamp: 'jb 5/27/2023 16:05:14'!
test19PortfolioWithMultipleAccountsShouldGiveCorrectNetTransfer
|account1 account2   portfolio|
account1  := ReceptiveAccount  new.
account2  := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account1.  
Transfer theAmmount:  50  from:  account2 to: ReceptiveAccount  new.
portfolio   := Portfolio  new add: account1 .  
portfolio  add: account2 .
self assert: 50   equals: portfolio netTransfer
! !

!testRun: #AccountTest #test19PortfolioWithMultipleAccountsShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:05:37'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'jb 5/27/2023 16:03:04' prior: 50706319 overrides: 50706021!
netTransfer
	accounts  do: [:anAccount|
		(anAccount  isKindOf:  ReceptiveAccount )   ifTrue:  [^ anAccount  netTransfer ].
		(anAccount  isKindOf:  Portfolio ) ifTrue:  [^anAccount  netTransfer ]
		
		 ] . 
	^0! !
!Portfolio methodsFor: 'reports' stamp: 'jb 5/27/2023 16:07:22' prior: 50706403 overrides: 50706021!
netTransfer
|netTransfer|
netTransfer  :=0.
	accounts  do: [:anAccount|
		(anAccount  isKindOf:  ReceptiveAccount )   ifTrue:  [netTransfer:= netTransfer  + anAccount  netTransfer ].
		(anAccount  isKindOf:  Portfolio ) ifTrue:  [^anAccount  netTransfer ]
		
		 ] . 
	^0! !
!Portfolio methodsFor: 'reports' stamp: 'jb 5/27/2023 16:07:30' prior: 50706413 overrides: 50706021!
netTransfer
|netTransfer|
netTransfer  :=0.
	accounts  do: [:anAccount|
		(anAccount  isKindOf:  ReceptiveAccount )   ifTrue:  [netTransfer:= netTransfer  + anAccount  netTransfer ].
		(anAccount  isKindOf:  Portfolio ) ifTrue:  [^anAccount  netTransfer ]
		
		 ] . 
	^netTransfer ! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:07:36'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultipleAccountsShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:07:36'!
PASSED!
!AccountTest methodsFor: 'net transfer test' stamp: 'jb 5/27/2023 16:08:54'!
test20PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer
|account1 account2   innerPortfolio  portfolio|
account1  := ReceptiveAccount  new.
account2  := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account1.  
Transfer theAmmount:  50  from:  account2 to: ReceptiveAccount  new.
portfolio   := Portfolio  new add: account1 .  
innerPortfolio  :=  Portfolio  new  add: account2 .
portfolio  add: innerPortfolio  .

self assert: 50   equals: portfolio netTransfer
! !

!testRun: #AccountTest #test20PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:09:11'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'jb 5/27/2023 16:09:36' prior: 50706425 overrides: 50706021!
netTransfer
|netTransfer|
netTransfer  :=0.
	accounts  do: [:anAccount|
		(anAccount  isKindOf:  ReceptiveAccount )   ifTrue:  [netTransfer:= netTransfer  + anAccount  netTransfer ].
		(anAccount  isKindOf:  Portfolio ) ifTrue:  [netTransfer :=  anAccount  netTransfer ]
		
		 ] . 
	^netTransfer ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/27/2023 16:09:37'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultipleAccountsShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:09:40'!
PASSED!

!testRun: #AccountTest #test20PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:09:40'!
FAILURE!

!testRun: #AccountTest #test20PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:09:40'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'jb 5/27/2023 16:11:13' prior: 50706530 overrides: 50706021!
netTransfer
|netTransfer|
netTransfer  :=0.
	accounts  do: [:anAccount|
		(anAccount  isKindOf:  ReceptiveAccount )   ifTrue:  [netTransfer:= netTransfer  + anAccount  netTransfer ].
		(anAccount  isKindOf:  Portfolio ) ifTrue:  [netTransfer :=  netTransfer + anAccount  netTransfer ]
		
		 ] . 
	^netTransfer ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/27/2023 16:11:15'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultipleAccountsShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:11:18'!
PASSED!

!testRun: #AccountTest #test20PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:11:18'!
PASSED!
!Portfolio methodsFor: 'reports' stamp: 'jb 5/27/2023 16:13:33' prior: 50706677 overrides: 50706021!
netTransfer
^accounts inject:  0  into: [:anAccount |
	anAccount  netTransfer 
	
	]! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/27/2023 16:13:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/27/2023 16:13:35'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:13:38'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:13:38'!
ERROR!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:13:38'!
ERROR!

!testRun: #AccountTest #test19PortfolioWithMultipleAccountsShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:13:38'!
ERROR!

!testRun: #AccountTest #test20PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:13:38'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'jb 5/27/2023 16:14:11' prior: 50706820 overrides: 50706021!
netTransfer
^accounts inject:  0  into: [:netTransfer :anAccount |
	netTransfer +  anAccount  netTransfer 
	
	]! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultipleAccountsShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test20PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:14:15'!
PASSED!

!testRun: #AccountTest #test20PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultipleAccountsShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:15:26'!
PASSED!

!testRun: #AccountTest #test20PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:15:26'!
PASSED!
!AccountTest methodsFor: 'net transfer test' stamp: 'jb 5/27/2023 16:15:34'!
test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer
|account1 account2   innerPortfolio  portfolio|
account1  := ReceptiveAccount  new.
account2  := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account1.  
Transfer theAmmount:  50  from:  account2 to: ReceptiveAccount  new.
portfolio   := Portfolio  new add: account1 .  
innerPortfolio  :=  Portfolio  new  add: account2 .
portfolio  add: innerPortfolio  .

self assert: 50   equals: portfolio netTransfer
! !

!methodRemoval: AccountTest #test20PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:15:35'!
test20PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer
|account1 account2   innerPortfolio  portfolio|
account1  := ReceptiveAccount  new.
account2  := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account1.  
Transfer theAmmount:  50  from:  account2 to: ReceptiveAccount  new.
portfolio   := Portfolio  new add: account1 .  
innerPortfolio  :=  Portfolio  new  add: account2 .
portfolio  add: innerPortfolio  .

self assert: 50   equals: portfolio netTransfer
!

!methodRemoval: AccountTest #test19PortfolioWithMultipleAccountsShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:15:45'!
test19PortfolioWithMultipleAccountsShouldGiveCorrectNetTransfer
|account1 account2   portfolio|
account1  := ReceptiveAccount  new.
account2  := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account1.  
Transfer theAmmount:  50  from:  account2 to: ReceptiveAccount  new.
portfolio   := Portfolio  new add: account1 .  
portfolio  add: account2 .
self assert: 50   equals: portfolio netTransfer
!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:15:56'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:16:00'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:16:00'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:16:00'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:16:00'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:16:00'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:16:00'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:16:00'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:45:05' prior: 50705848 overrides: 50706021!
netTransfer
^transactions  inject:  0  into: 	[:netTransfer :aTransaction | 
	aTransaction  affectNetTransfer: netTransfer  
	
	]! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:46:04' prior: 50707202 overrides: 50706021!
netTransfer
|netTransfer|
netTransfer  := 0. 
	transactions  do:  [ :aTransaction | 
		(aTransaction  isKindOf:  DepositLeg ) ifTrue:  [
			netTransfer  := netTransfer  + aTransaction  value. 
		] .
		(aTransaction  isKindOf:  ExtractionLeg  ) ifTrue:  [
			netTransfer  := netTransfer  - aTransaction  value. 
		] .
		(aTransaction  isKindOf: Deposit ) ifTrue: [
			netTransfer  := netTransfer
			].
		(aTransaction  isKindOf: Withdraw ) ifTrue: [
			netTransfer  := netTransfer
			].	
	]. 
	^netTransfer  
		! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 15:45:05' prior: 50707210 overrides: 50706021!
netTransfer
^transactions  inject:  0  into: 	[:netTransfer :aTransaction | 
	aTransaction  affectNetTransfer: netTransfer  
	
	]! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:36:01'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:36:01'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:36:01'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:36:01'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:36:01'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:36:01'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:36:01'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:36:01'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:36:01'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:36:01'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:36:02'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:36:02'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:36:02'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:36:02'!
FAILURE!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:36:02'!
ERROR!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:36:02'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:36:02'!
ERROR!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:36:02'!
ERROR!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:36:02'!
ERROR!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:36:04'!
FAILURE!
!DepositLeg methodsFor: 'reports aux' stamp: 'jb 5/27/2023 16:37:19' prior: 50705534!
affectNetTransfer: netTransfer 
	^netTransfer  + self value ! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:37:23'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:37:24'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:37:24'!
ERROR!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:37:24'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:37:24'!
ERROR!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:37:24'!
ERROR!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:37:24'!
ERROR!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:37:26'!
ERROR!
!ExtractionLeg methodsFor: 'as yet unclassified' stamp: 'jb 5/27/2023 16:37:36'!
affectNetTransfer: netTransfer 
	self shouldBeImplemented.! !
!ExtractionLeg methodsFor: 'as yet unclassified' stamp: 'jb 5/27/2023 16:37:51' prior: 50707387!
affectNetTransfer: netTransfer 
	^netTransfer  - self value .! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:37:54'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:38:07'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:38:08'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:38:08'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:38:08'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:38:08'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:38:08'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:38:08'!
PASSED!
!AccountTest methodsFor: 'net transfer test' stamp: 'jb 5/27/2023 16:39:00' prior: 50707112!
test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer
|account1 account2   innerPortfolio  portfolio|
account1  := ReceptiveAccount  new.
account2  := ReceptiveAccount  new. 
Deposit register: 25    on: account1 .

Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account1.  
Transfer theAmmount:  50  from:  account2 to: ReceptiveAccount  new.
portfolio   := Portfolio  new add: account1 .  
innerPortfolio  :=  Portfolio  new  add: account2 .
portfolio  add: innerPortfolio  .

self assert: 75   equals: portfolio netTransfer
! !

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:39:12'!
ERROR!
!Deposit methodsFor: 'net transfer' stamp: 'jb 5/27/2023 16:39:59'!
affectNetTransfer: netTransfer 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'net transfer' stamp: 'jb 5/27/2023 16:40:08' prior: 50707560!
affectNetTransfer: netTransfer 
	^netTransfer ! !

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:40:14'!
FAILURE!
!AccountTest methodsFor: 'net transfer test' stamp: 'jb 5/27/2023 16:40:23' prior: 50707535!
test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer
|account1 account2   innerPortfolio  portfolio|
account1  := ReceptiveAccount  new.
account2  := ReceptiveAccount  new. 
Deposit register: 25    on: account1 .

Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account1.  
Transfer theAmmount:  50  from:  account2 to: ReceptiveAccount  new.
portfolio   := Portfolio  new add: account1 .  
innerPortfolio  :=  Portfolio  new  add: account2 .
portfolio  add: innerPortfolio  .

self assert: 50   equals: portfolio netTransfer
! !

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:40:24'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:40:24'!
PASSED!
!AccountTest methodsFor: 'net transfer test' stamp: 'jb 5/27/2023 16:40:37' prior: 50707574!
test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer
|account1 account2   innerPortfolio  portfolio|
account1  := ReceptiveAccount  new.
account2  := ReceptiveAccount  new. 
Deposit register: 25    on: account1 .
Withdraw  register:  25  on: account1 . 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account1.  
Transfer theAmmount:  50  from:  account2 to: ReceptiveAccount  new.
portfolio   := Portfolio  new add: account1 .  
innerPortfolio  :=  Portfolio  new  add: account2 .
portfolio  add: innerPortfolio  .

self assert: 50   equals: portfolio netTransfer
! !

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:40:38'!
ERROR!
!Withdraw methodsFor: 'net transfer' stamp: 'jb 5/27/2023 16:40:52'!
affectNetTransfer: netTransfer 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'net transfer' stamp: 'jb 5/27/2023 16:41:11' prior: 50707694!
affectNetTransfer: netTransfer 
	^netTransfer ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'jb 5/27/2023 16:44:27' prior: 50704991!
calculateAccountSummary
	^transactions  inject:  ''  into: [:anAccountSummary :aTransaction | 
		aTransaction affectAccountSummary: anAccountSummary
		
		]! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:44:42'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:44:42'!
ERROR!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:44:42'!
ERROR!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:44:42'!
ERROR!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:44:42'!
ERROR!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:44:42'!
ERROR!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:44:42'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:44:42'!
ERROR!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:44:42'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:44:42'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:44:42'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:44:42'!
ERROR!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:44:42'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:44:42'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:44:42'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:44:42'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:44:42'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:44:42'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:44:42'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:44:45'!
ERROR!
!Deposit methodsFor: 'account Summary' stamp: 'jb 5/27/2023 16:44:58'!
affectAccountSummary: anAccountSummary 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'account Summary' stamp: 'jb 5/27/2023 16:45:38' prior: 50707783!
affectAccountSummary: anAccountSummary 
	^anAccountSummary  , 'Deposito por ' ,  self value asString ,'.', String crString! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:46:28'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:46:28'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:46:28'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:46:28'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:46:28'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:46:28'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:46:28'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:46:28'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:46:28'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:46:29'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:46:29'!
ERROR!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:46:29'!
ERROR!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:46:29'!
ERROR!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:46:29'!
ERROR!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:46:29'!
ERROR!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:46:29'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:46:29'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:46:29'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:46:29'!
ERROR!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:46:34'!
ERROR!
!Withdraw methodsFor: 'account summary' stamp: 'jb 5/27/2023 16:46:45'!
affectAccountSummary: anAccountSummary 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'account summary' stamp: 'jb 5/27/2023 16:47:14' prior: 50707866!
affectAccountSummary: anAccountSummary 
	^  anAccountSummary , 'Extraccion por ' , (self) value asString ,'.', String crString! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:48:13'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:48:13'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:48:13'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:48:13'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:48:13'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:48:13'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:48:13'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:48:13'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:48:13'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:48:13'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:48:13'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:48:14'!
ERROR!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:48:14'!
ERROR!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:48:14'!
ERROR!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:48:14'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:48:14'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:48:14'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:48:14'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:48:14'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:48:16'!
ERROR!
!ExtractionLeg methodsFor: 'account summary' stamp: 'jb 5/27/2023 16:48:28'!
affectAccountSummary: anAccountSummary 
	self shouldBeImplemented.! !
!ExtractionLeg methodsFor: 'account summary' stamp: 'jb 5/27/2023 16:49:01' prior: 50707950!
affectAccountSummary: anAccountSummary 
	^anAccountSummary , 'Salida por Transferencia de ' ,self  value asString ,'.', String crString! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:49:05'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:49:06'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:49:07'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:49:07'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:49:07'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:49:07'!
ERROR!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:49:07'!
ERROR!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:49:09'!
ERROR!
!DepositLeg methodsFor: 'account summary' stamp: 'jb 5/27/2023 16:49:19'!
affectAccountSummary: anAccountSummary 
	self shouldBeImplemented.! !
!DepositLeg methodsFor: 'account summary' stamp: 'jb 5/27/2023 16:49:51' prior: 50708035!
affectAccountSummary: anAccountSummary 
	^anAccountSummary , 'Entrada por Transferencia de ' ,  self value  asString ,'.', String crString! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/27/2023 16:49:54'!
PASSED!

TestCase subclass: #PortfolioReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioReport category: 'Portfolio-Solucion' stamp: 'jb 5/27/2023 16:58:44'!
TestCase subclass: #PortfolioReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #PortfolioReport as: #PortfolioReportTest stamp: 'jb 5/27/2023 16:58:56'!
Smalltalk renameClassNamed: #PortfolioReport as: #PortfolioReportTest!

----SNAPSHOT----(27 May 2023 17:11:01) CuisUniversity-5706.image priorSource: 11949853!

----SNAPSHOT----(27 May 2023 17:11:28) CuisUniversity-5706.image priorSource: 12047424!

----STARTUP---- (28 May 2023 10:32:02) as /home/juan/Escritorio/facultad/1C23/IS1/linux64 (otra copia)/CuisUniversity-5706.image!

!PortfolioReportTest methodsFor: 'no messages' stamp: 'jb 5/28/2023 10:40:15'!
test01EmptyPortfolioShouldNotPrintAnything
	
	self assert: ' '  equals: Portfolio  new showTree! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 10:40:17'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'jb 5/28/2023 10:40:24'!
showTree
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reports' stamp: 'jb 5/28/2023 10:40:37' prior: 50708152!
showTree
	^''! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 10:40:39'!
FAILURE!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 10:40:46' prior: 50708143!
test01EmptyPortfolioShouldNotPrintAnything
	
	self assert: ''  equals: Portfolio  new showTree! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 10:40:47'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 10:40:47'!
PASSED!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 10:43:11'!
test02PortfolioNamedShouldTellItsName
	|account |
	account := ReceptiveAccount  new. 
	Deposit  register:  100 on: account.
	self assert: ''  equals: Portfolio  new showTree! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 10:44:03' prior: 50708178!
test02PortfolioNamedShouldTellItsName
	
	self assert: 'Portfolio de la familia'  equals:( Portfolio  named: 'Portfolio de la familia')! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 10:44:06'!
ERROR!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'jb 5/28/2023 10:54:15'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 10:54:06' prior: 50708187!
test02PortfolioNamedShouldTellItsName
	|portfolio|
	portfolio  :=PortfolioTreeReport named: 'Portfolio de la familia'.   
	self assert: 'Portfolio de la familia'  equals: portfolio  report! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 10:54:18'!
ERROR!
!PortfolioTreeReport class methodsFor: 'instance creation' stamp: 'jb 5/28/2023 10:54:33'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!PortfolioTreeReport class methodsFor: 'instance creation' stamp: 'jb 5/28/2023 10:55:05' prior: 50708219!
named: aNameForThePortfolio
	^self new initializeNamed: aNameForThePortfolio ! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 10:55:07'!
ERROR!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'jb 5/28/2023 10:55:21'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: 'nameForThePortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTreeReport methodsFor: 'initializing' stamp: 'jb 5/28/2023 10:55:21'!
initializeNamed: aNameForThePortfolio 
	self shouldBeImplemented.
	nameForThePortfolio := aNameForThePortfolio.! !
!PortfolioTreeReport methodsFor: 'initializing' stamp: 'jb 5/28/2023 10:55:27' prior: 50708245!
initializeNamed: aNameForThePortfolio 
	nameForThePortfolio := aNameForThePortfolio.! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 10:55:29'!
ERROR!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 10:55:38'!
report
	self shouldBeImplemented.! !
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 10:55:52' prior: 50708261!
report
	^nameForThePortfolio ! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 10:55:54'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 10:55:54'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 10:55:54'!
PASSED!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 10:56:50'!
test03PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio|
	portfolio  :=PortfolioTreeReport named: 'Portfolio de la familia'.   
	self assert: 'Portfolio de la familia'  equals: portfolio  report! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 10:59:11' prior: 50708280!
test03PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: (PortfolioTreeReport named:  'Portfolio de los hijos') .   
	self assert: 
	'Portfolio de la familia
	    Portfolio de los hijos	'  equals: portfolio  report! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 10:59:14'!
ERROR!
!PortfolioTreeReport methodsFor: 'adding' stamp: 'jb 5/28/2023 10:59:50'!
with: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'jb 5/28/2023 11:02:46'!
Object subclass: #PortfolioTreeReport
	instanceVariableNames: 'nameForThePortfolio portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTreeReport methodsFor: 'adding' stamp: 'jb 5/28/2023 11:02:44' prior: 50708306!
with: aPortfolioReport
	portfolio add: aPortfolioReport ! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 11:02:54'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 11:02:54'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 11:02:54'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 11:02:54'!
ERROR!
!PortfolioTreeReport methodsFor: 'initializing' stamp: 'jb 5/28/2023 11:03:23' prior: 50708252!
initializeNamed: aNameForThePortfolio 
	portfolio := Portfolio  new. 
	nameForThePortfolio := aNameForThePortfolio.! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 11:03:24'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 11:03:24'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 11:03:24'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 11:03:24'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 11:10:26'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 11:10:26'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 11:10:26'!
ERROR!
!PortfolioTreeReport methodsFor: 'adding' stamp: 'jb 5/28/2023 11:10:33'!
addedTo: aPortfolio 
	self shouldBeImplemented.! !
!PortfolioTreeReport methodsFor: 'adding' stamp: 'jb 5/28/2023 11:10:46' prior: 50708372!
addedTo: aPortfolio 
	portfolio  addedTo:  aPortfolio ! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 11:10:51'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 11:10:51'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 11:10:51'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 11:10:51'!
FAILURE!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 11:11:31' prior: 50708265!
report
	|string|
	
	string := nameForThePortfolio. 
	 ! !
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 11:11:38' prior: 50708397!
report
	|string|
	
	string := nameForThePortfolio. 
	^string ! !
!Portfolio methodsFor: 'reports' stamp: 'jb 5/28/2023 11:14:39' prior: 50703530!
calculateAccountSummary
	^accounts inject:  '' into: [:anAccountSummary :anAccount |
		anAccountSummary  , anAccount  calculateAccountSummary 
		
		]  ! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/28/2023 11:14:45'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/28/2023 12:22:12'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/28/2023 12:22:13'!
PASSED!

'aa'+'aa'!

'aa','aa'  !
!Portfolio methodsFor: 'reports' stamp: 'jb 5/28/2023 12:27:07' prior: 50704055 overrides: 50704542!
accountSummary
|accountSummary|
	accountSummary  := self calculateAccountSummary .
	^ accountSummary , 'balance = ', self balance asString! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/28/2023 12:27:09'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/28/2023 12:27:12'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/28/2023 12:27:28'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/28/2023 12:27:28'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/28/2023 12:27:28'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/28/2023 12:27:28'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/28/2023 12:27:28'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/28/2023 12:27:28'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/28/2023 12:27:28'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/28/2023 12:27:28'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/28/2023 12:27:28'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/28/2023 12:27:29'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/28/2023 12:27:29'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/28/2023 12:27:29'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/28/2023 12:27:29'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/28/2023 12:27:29'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/28/2023 12:27:29'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/28/2023 12:27:29'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/28/2023 12:27:29'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/28/2023 12:27:29'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/28/2023 12:27:29'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/28/2023 12:27:32'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/28/2023 12:27:32'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/28/2023 12:27:32'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/28/2023 12:27:32'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/28/2023 12:27:32'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'jb 5/28/2023 12:27:32'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/28/2023 12:27:32'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/28/2023 12:27:32'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/28/2023 12:27:32'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/28/2023 12:27:32'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/28/2023 12:27:32'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/28/2023 12:27:32'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 12:30:30'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:30:30'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:30:30'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:30:30'!
FAILURE!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 12:34:53' prior: 50708402!
report
	|string|
	
	string := nameForThePortfolio, String crString.  
	
	
	^string, portfolio  report:[:anAccumulator :anAccount |
		anAccumulator , anAccount  report
		
		]! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 12:35:06'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:35:06'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:35:06'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:35:09'!
ERROR!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 12:36:02' prior: 50708812!
report
	|string|
	
	string := nameForThePortfolio, String crString.  
	
	
	^string, (portfolio  report:[:anAccumulator :anAccount |
		anAccumulator , anAccount  report
		])! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:36:03'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'jb 5/28/2023 12:36:12'!
report: aRenameMe1 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reports' stamp: 'jb 5/28/2023 12:37:16' prior: 50708846!
report: aBlockWithAccountAndAccumulator 
	^accounts inject:  '' into: [:anAccountSummary :anAccount |
		anAccountSummary  , anAccount  calculateAccountSummary 
		
		]  ! !
!Portfolio methodsFor: 'reports' stamp: 'jb 5/28/2023 12:39:06'!
accumulate: anAccumulator andReport: aBlockWithAnAccumulatorAndAAccount  
	^accounts inject:  anAccumulator into: [:anAcc :anAccount |
		aBlockWithAnAccumulatorAndAAccount  value:  anAcc  value:  anAccount 
		]  ! !
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 12:39:44' prior: 50708835!
report
	|string|
	
	string := nameForThePortfolio, String crString.  
	
	
	^ portfolio  accumulate:  string  andReport:  [:anAccumulator :anAccount |
		anAccumulator , anAccount  report
		]! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 12:39:45'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:39:45'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:39:45'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:39:51'!
FAILURE!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 12:40:28' prior: 50708869!
report
	|string|
	
	string := nameForThePortfolio.  
	
	
	^ portfolio  accumulate:  string  andReport:  [:anAccumulator :anAccount |
		anAccumulator , String crString  , anAccount  report
		]! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 12:40:29'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:40:29'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:40:29'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:40:29'!
FAILURE!

 portfolio  report!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 12:41:21' prior: 50708893!
report
	|string|
	
	string := nameForThePortfolio.  
	
	
	^ portfolio  accumulate:  string  andReport:  [:anAccumulator :anAccount |
		anAccumulator , String crString  , '    ',anAccount  report
		]! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 12:41:22'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:41:22'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:41:22'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:41:22'!
FAILURE!

portfolio  report!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 12:42:07' prior: 50708290!
test03PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: (PortfolioTreeReport named:  'Portfolio de los hijos') .   
	self assert: 
	'Portfolio de la familia',String crString, 
	'    Portfolio de los hijos	'  equals: portfolio  report! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:42:09'!
FAILURE!

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 12:42:16'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:42:16'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:42:16'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:42:16'!
FAILURE!

portfolio  report!

'Portfolio de la familia',String crString, 
	'    Portfolio de los hijos	'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 12:43:48' prior: 50708944!
test03PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: (PortfolioTreeReport named:  'Portfolio de los hijos') .   
	self assert: 
	'Portfolio de la familia',String crString,'    ',
	'Portfolio de los hijos	'  equals: portfolio  report! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:43:49'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:43:54'!
FAILURE!

portfolio  report!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 12:46:16' prior: 50708918!
report
	|string|
	
	string := nameForThePortfolio.  
	
	
	^ portfolio  accumulate:  string  andReport:  [:anAccumulator :anAccount |
		anAccumulator , String crString  ,String  tab ,anAccount  report
		]! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 12:46:34' prior: 50708980!
test03PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: (PortfolioTreeReport named:  'Portfolio de los hijos') .   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Portfolio de los hijos	'  equals: portfolio  report! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:46:35'!
FAILURE!

'Portfolio de la familia',String crString,String tab,
	'Portfolio de los hijos	'!

 portfolio  report!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 12:47:24' prior: 50709012!
test03PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: (PortfolioTreeReport named:  'Portfolio de los hijos') .   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Portfolio de los hijos'  equals: portfolio  report! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:47:25'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 12:47:25'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:47:25'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:47:25'!
PASSED!

!classDefinition: #ReceptiveAccountTreeReport category: 'Portfolio-Solucion' stamp: 'jb 5/28/2023 12:48:46'!
Object subclass: #ReceptiveAccountTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 12:48:35'!
test04PortfolioWithAnAccountShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: (ReceptiveAccountTreeReport  named:  'Portfolio de los hijos') .   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Portfolio de los hijos'  equals: portfolio  report! !

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'jb 5/28/2023 12:51:49'!
Account subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #PortfolioTreeReport
	instanceVariableNames: 'nameForThePortfolio portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'jb 5/28/2023 12:51:49'!
Report subclass: #PortfolioTreeReport
	instanceVariableNames: 'nameForThePortfolio portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #ReceptiveAccountTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTreeReport category: 'Portfolio-Solucion' stamp: 'jb 5/28/2023 12:52:03'!
Report subclass: #ReceptiveAccountTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 12:53:39' prior: 50709070!
test04PortfolioWithAnAccountShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: (ReceptiveAccountTreeReport  named:  'Cuenta de Angeles') .   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Cuenta de Angeles'  equals: portfolio  report! !

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:53:42'!
ERROR!
!ReceptiveAccountTreeReport class methodsFor: 'instance creation' stamp: 'jb 5/28/2023 12:53:51'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!ReceptiveAccountTreeReport class methodsFor: 'instance creation' stamp: 'jb 5/28/2023 12:54:11' prior: 50709136!
named: aNameforTheAccount 
	^self new initializeNamed: aNameforTheAccount ! !

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:54:14'!
ERROR!

!classDefinition: #ReceptiveAccountTreeReport category: 'Portfolio-Solucion' stamp: 'jb 5/28/2023 12:54:31'!
Report subclass: #ReceptiveAccountTreeReport
	instanceVariableNames: 'nameforTheAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTreeReport methodsFor: 'initializing' stamp: 'jb 5/28/2023 12:54:31'!
initializeNamed: aNameforTheAccount 
	self shouldBeImplemented.
	nameforTheAccount := aNameforTheAccount.! !
!ReceptiveAccountTreeReport methodsFor: 'initializing' stamp: 'jb 5/28/2023 12:54:35' prior: 50709163!
initializeNamed: aNameforTheAccount 
	nameforTheAccount := aNameforTheAccount.! !

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:54:37'!
ERROR!

!classDefinition: #ReceptiveAccountTreeReport category: 'Portfolio-Solucion' stamp: 'jb 5/28/2023 12:55:53'!
Report subclass: #ReceptiveAccountTreeReport
	instanceVariableNames: 'nameforTheAccount account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTreeReport methodsFor: 'initializing' stamp: 'jb 5/28/2023 12:55:51' prior: 50709170!
initializeNamed: aNameforTheAccount 
	account := ReceptiveAccount  new. 
	nameforTheAccount := aNameforTheAccount.! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 12:56:03'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:56:03'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:56:03'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:56:03'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:56:03'!
ERROR!
!ReceptiveAccountTreeReport methodsFor: 'adding' stamp: 'jb 5/28/2023 12:56:32' overrides: 50699060!
addedTo: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccountTreeReport methodsFor: 'adding' stamp: 'jb 5/28/2023 12:56:42' prior: 50709215 overrides: 50699060!
addedTo: aPortfolio 
	account  addedTo:  aPortfolio ! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 12:56:48'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:56:48'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:56:48'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:56:48'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:56:48'!
ERROR!
!ReceptiveAccountTreeReport methodsFor: 'report' stamp: 'jb 5/28/2023 12:57:02'!
report
	self shouldBeImplemented.! !
!ReceptiveAccountTreeReport methodsFor: 'report' stamp: 'jb 5/28/2023 12:57:32' prior: 50709245!
report
	^nameforTheAccount ! !

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:57:34'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 12:57:37'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 12:57:37'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:57:37'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:57:37'!
PASSED!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 12:59:08'!
test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: (ReceptiveAccountTreeReport  named:  'Cuenta de Angeles') with: (PortfolioTreeReport  named:  'Portfolio de los hijos').   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Cuenta de Angeles',String crString,String tab,
	'Portfolio de los hijos'
	   equals: portfolio  report! !

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 12:59:10'!
ERROR!
!PortfolioTreeReport methodsFor: 'initializing' stamp: 'jb 5/28/2023 12:59:25'!
with: aRenameMe1 with: aRenameMe2 
	self shouldBeImplemented.! !
!PortfolioTreeReport methodsFor: 'initializing' stamp: 'jb 5/28/2023 13:02:48' prior: 50709295!
with: anAccount1 with: anAccount2 
	 portfolio  add: anAccount1. 
	portfolio  add: anAccount2 .! !

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 13:02:51'!
ERROR!
!ReceptiveAccountTreeReport methodsFor: 'adding' stamp: 'jb 5/28/2023 13:03:24' overrides: 50699043!
isComposedBy: anAccount 
	self shouldBeImplemented.! !
!ReceptiveAccountTreeReport methodsFor: 'adding' stamp: 'jb 5/28/2023 13:03:33' prior: 50709312 overrides: 50699043!
isComposedBy: anAccount 
	account  isComposedBy:  anAccount ! !

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 13:03:35'!
ERROR!
!ReceptiveAccountTreeReport methodsFor: 'adding' stamp: 'jb 5/28/2023 13:04:58' prior: 50709318 overrides: 50699043!
isComposedBy: anAccount 
	^account  isComposedBy:  anAccount ! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 13:04:59'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 13:04:59'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 13:04:59'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 13:04:59'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 13:04:59'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 13:04:59'!
ERROR!
!PortfolioTreeReport methodsFor: 'adding' stamp: 'jb 5/28/2023 13:05:17' overrides: 50699043!
isComposedBy: composedAccount 
	self shouldBeImplemented.! !
!PortfolioTreeReport methodsFor: 'adding' stamp: 'jb 5/28/2023 13:05:29' prior: 50709358 overrides: 50699043!
isComposedBy: composedAccount 
	^portfolio  isComposedBy:  composedAccount ! !

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 13:05:30'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 13:05:34'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 13:05:34'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 13:05:34'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 13:05:34'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 13:05:34'!
PASSED!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 13:07:47'!
test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport
	|portfolio|
	"
	johnsAccount := ReceptiveAccount named: ’Cuenta de Juan’.
angiesAccount := ReceptiveAccount named: ’Cuenta de Angeles’.
childrenPort- folio := Portfolio named: ’Portfolio de hijos’ with:
johnsAccount with: angiesAccount.
myAccount := ReceptiveAccount named: ’Cuenta mia’.
familyPortfolio := Portfolio named:
	"
	
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: (ReceptiveAccountTreeReport  named:  'Cuenta de Angeles') with: (PortfolioTreeReport  named:  'Portfolio de los hijos').   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Cuenta de Angeles',String crString,String tab,
	'Portfolio de los hijos'
	   equals: portfolio  report! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 13:56:24' prior: 50709394!
test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport
	|portfolio johnsAccount|
	"
	johnsAccount := ReceptiveAccount named: ’Cuenta de Juan’.
angiesAccount := ReceptiveAccount named: ’Cuenta de Angeles’.
childrenPort- folio := Portfolio named: ’Portfolio de hijos’ with:
johnsAccount with: angiesAccount.
myAccount := ReceptiveAccount named: ’Cuenta mia’.
familyPortfolio := Portfolio named:
	"
	johnsAccount := ReceptiveAccountTreeReport  named: 'Cuenta de Juan'. 
	! !

!classDefinition: #PortfolioReportTest category: 'Portfolio-Solucion' stamp: 'jb 5/28/2023 13:59:28'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: 'familyPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 13:59:14' prior: 50709423!
test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount |
	"
	johnsAccount := ReceptiveAccount named: ’Cuenta de Juan’.
angiesAccount := ReceptiveAccount named: ’Cuenta de Angeles’.
childrenPort- folio := Portfolio named: ’Portfolio de hijos’ with:
johnsAccount with: angiesAccount.
myAccount := ReceptiveAccount named: ’Cuenta mia’.
familyPortfolio := Portfolio named:
	"
	johnsAccount := ReceptiveAccountTreeReport  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := PortfolioTreeReport  named:'Portfolio de hijos' with:
johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccountTreeReport named: 'Cuenta mia'.
	familyPortfolio := PortfolioTreeReport  named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
! !

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioReportTest category: 'Portfolio-Solucion' stamp: 'jb 5/28/2023 13:59:44'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 14:00:15' prior: 50709451!
test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio |
	"
	johnsAccount := ReceptiveAccount named: ’Cuenta de Juan’.
angiesAccount := ReceptiveAccount named: ’Cuenta de Angeles’.
childrenPort- folio := Portfolio named: ’Portfolio de hijos’ with:
johnsAccount with: angiesAccount.
myAccount := ReceptiveAccount named: ’Cuenta mia’.
familyPortfolio := Portfolio named:
	"
	johnsAccount := ReceptiveAccountTreeReport  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := (PortfolioTreeReport  named:'Portfolio de hijos' )with:
johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccountTreeReport named: 'Cuenta mia'.
	familyPortfolio := (PortfolioTreeReport  named: 'Portfolio de la familia') with: myAccount with: childrenPortfolio.
! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 14:04:40' prior: 50709495!
test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio |
	
	johnsAccount := ReceptiveAccountTreeReport  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := (PortfolioTreeReport  named:'Portfolio de hijos' )with:
johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccountTreeReport named: 'Cuenta mia'.
	familyPortfolio := (PortfolioTreeReport  named: 'Portfolio de la familia') with: myAccount with: childrenPortfolio.
	
	self  assert: 'Portfolio de la familia', String  crString , String  tab, 
	'Cuenta mia', 	String  crString, String  tab, 
	'Portfolio de hijos', String  crString , String  tab, String  tab, 
	'Cuenta de Juan' , String  crString , String  tab, String  tab, 
	'Cuenta de Angeles'
	 equals: familyPortfolio report. 
! !

!testRun: #PortfolioReportTest #test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:04:42'!
ERROR!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 14:04:55' prior: 50709527!
test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio |
	
	johnsAccount := ReceptiveAccountTreeReport  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccountTreeReport named: 'Cuenta de Angeles'.
	childrenPortfolio := (PortfolioTreeReport  named:'Portfolio de hijos' )with:
johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccountTreeReport named: 'Cuenta mia'.
	familyPortfolio := (PortfolioTreeReport  named: 'Portfolio de la familia') with: myAccount with: childrenPortfolio.
	
	self  assert: 'Portfolio de la familia', String  crString , String  tab, 
	'Cuenta mia', 	String  crString, String  tab, 
	'Portfolio de hijos', String  crString , String  tab, String  tab, 
	'Cuenta de Juan' , String  crString , String  tab, String  tab, 
	'Cuenta de Angeles'
	 equals: familyPortfolio report. 
! !

!testRun: #PortfolioReportTest #test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:04:57'!
FAILURE!

familyPortfolio report!

familyPortfolio  report !

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:17:57'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:17:57'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:17:57'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:17:57'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:17:57'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:17:57'!
FAILURE!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 14:19:53'!
_test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio |
	
	johnsAccount := ReceptiveAccountTreeReport  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccountTreeReport named: 'Cuenta de Angeles'.
	childrenPortfolio := (PortfolioTreeReport  named:'Portfolio de hijos' )with:
johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccountTreeReport named: 'Cuenta mia'.
	familyPortfolio := (PortfolioTreeReport  named: 'Portfolio de la familia') with: myAccount with: childrenPortfolio.
	
	self  assert: 'Portfolio de la familia', String  crString , String  tab, 
	'Cuenta mia', 	String  crString, String  tab, 
	'Portfolio de hijos', String  crString , String  tab, String  tab, 
	'Cuenta de Juan' , String  crString , String  tab, String  tab, 
	'Cuenta de Angeles'
	 equals: familyPortfolio report. 
! !

!methodRemoval: PortfolioReportTest #test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:19:59'!
test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio |
	
	johnsAccount := ReceptiveAccountTreeReport  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccountTreeReport named: 'Cuenta de Angeles'.
	childrenPortfolio := (PortfolioTreeReport  named:'Portfolio de hijos' )with:
johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccountTreeReport named: 'Cuenta mia'.
	familyPortfolio := (PortfolioTreeReport  named: 'Portfolio de la familia') with: myAccount with: childrenPortfolio.
	
	self  assert: 'Portfolio de la familia', String  crString , String  tab, 
	'Cuenta mia', 	String  crString, String  tab, 
	'Portfolio de hijos', String  crString , String  tab, String  tab, 
	'Cuenta de Juan' , String  crString , String  tab, String  tab, 
	'Cuenta de Angeles'
	 equals: familyPortfolio report. 
!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 14:20:29'!
test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: (ReceptiveAccountTreeReport  named:  'Cuenta de Angeles') with: (PortfolioTreeReport  named:  'Portfolio de los hijos').   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Cuenta de Angeles',String crString,String tab,
	'Portfolio de los hijos'
	   equals: portfolio  report! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 14:22:38' prior: 50709690!
test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: ((PortfolioTreeReport  named:  'Portfolio de los hijos') with: (ReceptiveAccountTreeReport named: 'Cuenta de Angeles')).   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Portfolio de los hijos' String crString,String tab,String tab,
	'Cuenta de Angeles'
	   equals: portfolio  report! !

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:22:40'!
ERROR!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 14:22:48' prior: 50709708!
test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: ((PortfolioTreeReport  named:  'Portfolio de los hijos') with: (ReceptiveAccountTreeReport named: 'Cuenta de Angeles')).   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Portfolio de los hijos' ,String crString,String tab,String tab,
	'Cuenta de Angeles'
	   equals: portfolio  report! !

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:22:49'!
FAILURE!

portfolio  report!

portfolio  report!

portfolio  report  !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/28/2023 14:23:32' prior: 50709731!
test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (PortfolioTreeReport named: 'Portfolio de la familia') with: ((PortfolioTreeReport  named:  'Portfolio de los hijos') with: (ReceptiveAccountTreeReport named: 'Cuenta de Angeles')).   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Portfolio de los hijos' ,String crString,String tab,String tab,
	'Cuenta de Angeles'
	   equals: portfolio  report ! !
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 14:28:38' prior: 50709002!
report
	|string|
	
	string := nameForThePortfolio.  
	
	
	^portfolio  accumulate:  string  andReport:  [:anAccumulator :anAccount |
		String tab,anAccumulator , String crString  ,String  tab ,anAccount  report
		]! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 14:28:39'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:28:39'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:28:39'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:28:39'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:28:39'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:28:39'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:28:47'!
FAILURE!

portfolio  report !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 14:29:40'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:29:40'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:29:40'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:29:40'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:29:40'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:29:40'!
FAILURE!

----SNAPSHOT----(28 May 2023 14:30:06) CuisUniversity-5706.image priorSource: 12047513!
!ReceptiveAccountTreeReport methodsFor: 'report' stamp: 'jb 5/28/2023 14:30:21' prior: 50709250!
report
	^String tab,nameforTheAccount ! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 14:30:23'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:30:23'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:30:23'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:30:23'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:30:23'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:30:23'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:30:26'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:30:35'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:30:35'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:30:35'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:30:35'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:30:35'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:30:39'!
FAILURE!

portfolio  report !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:31:36'!
FAILURE!

portfolio  report!

	'Portfolio de la familia',String crString,String tab,
	'Portfolio de los hijos'!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 14:33:20' prior: 50709774!
report
	|string|
	
	string := nameForThePortfolio.  
	
	
	^portfolio  accumulate:  string  andReport:  [:anAccumulator :anAccount |
		anAccumulator , String crString  ,String  tab ,anAccount  report
		]! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 14:33:21'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:33:21'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:33:21'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:33:21'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:33:21'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:33:21'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:33:28'!
FAILURE!

portfolio  report!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 14:34:09' prior: 50709905!
report
	|string|
	
	string := nameForThePortfolio.  
	
	
	^portfolio  accumulate:  string  andReport:  [:anAccumulator :anAccount |
		String tab,anAccumulator , String crString  ,anAccount  report
		]! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 14:34:13'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:34:13'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:34:13'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:34:13'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:34:13'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:34:13'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:34:18'!
FAILURE!

portfolio  report!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 14:34:45' prior: 50709943!
report
	|string|
	
	string := nameForThePortfolio.  
	
	
	^portfolio  accumulate:  string  andReport:  [:anAccumulator :anAccount |
		String tab,anAccumulator , String crString  ,anAccount  report, String tab
		]! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 14:34:51'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:34:51'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:34:51'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:34:51'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:34:51'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:34:51'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:34:55'!
FAILURE!

portfolio  report!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 14:35:47' prior: 50709981!
report
	|string|
	
	string := nameForThePortfolio.  
	
	
	^portfolio  accumulate:  string  andReport:  [:anAccumulator :anAccount |
		anAccumulator , String crString, String tab,anAccount  report
		]! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 14:35:48'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:35:48'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:35:48'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:35:48'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:35:48'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:35:48'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:35:54'!
FAILURE!

 portfolio  report!
!ReceptiveAccountTreeReport methodsFor: 'report' stamp: 'jb 5/28/2023 14:36:44' prior: 50709840!
report
	^nameforTheAccount ! !

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:36:50'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:36:50'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:36:50'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:36:50'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:36:50'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:36:50'!
FAILURE!

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 14:37:10'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:37:10'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:37:10'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:37:10'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:37:10'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:37:10'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:37:10'!
FAILURE!

portfolio  report !
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 14:39:19' prior: 50710020!
report
	|string|
	
	string := nameForThePortfolio.  
	
	
	^string , portfolio  accumulate:  ''  andReport:  [:anAccumulator :anAccount |
		String tab, anAccumulator , String crString, String tab, anAccount  report 
		]! !
!ReceptiveAccountTreeReport methodsFor: 'report' stamp: 'jb 5/28/2023 14:39:29' prior: 50710059!
report
	^String tab, nameforTheAccount ! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 14:39:34'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:39:34'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:39:34'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:39:34'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:39:34'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:39:34'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:39:37'!
ERROR!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 14:40:01' prior: 50710117!
report
	|string|
	
	string := nameForThePortfolio.  
	
	
	^string , (portfolio  accumulate:  ''  andReport:  [:anAccumulator :anAccount |
		String tab, anAccumulator , String crString, String tab, anAccount  report 
		])! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:40:02'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 14:40:03'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:40:03'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:40:04'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:40:04'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:40:04'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:40:04'!
FAILURE!

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 14:40:06'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:40:06'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:40:06'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:40:06'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:40:06'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:40:06'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:40:08'!
FAILURE!

portfolio  report!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:40:48'!
FAILURE!

portfolio  report!
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 14:41:32' prior: 50710159!
report
	|string|
	
	string := nameForThePortfolio.  
	
	
	^string , (portfolio  accumulate:  ''  andReport:  [:anAccumulator :anAccount |
		String tab, anAccumulator , String crString, anAccount  report 
		])! !
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 14:33:20' prior: 50710230!
report
	|string|
	
	string := nameForThePortfolio.  
	
	
	^portfolio  accumulate:  string  andReport:  [:anAccumulator :anAccount |
		anAccumulator , String crString  ,String  tab ,anAccount  report
		]! !
!PortfolioTreeReport methodsFor: 'reports' stamp: 'jb 5/28/2023 14:42:16' prior: 50710240!
report
	
	
	^portfolio  accumulate:  nameForThePortfolio  andReport:  [:anAccumulator :anAccount |
		anAccumulator , String crString  ,String  tab ,anAccount  report
		]! !
!ReceptiveAccountTreeReport methodsFor: 'report' stamp: 'jb 5/28/2023 14:42:25' prior: 50710127!
report
	^nameforTheAccount ! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/28/2023 14:42:27'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/28/2023 14:42:27'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:42:27'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:42:27'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:42:27'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:42:27'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/28/2023 14:42:27'!
FAILURE!

----SNAPSHOT----(28 May 2023 20:44:45) CuisUniversity-5706.image priorSource: 12101943!

----QUIT----(28 May 2023 20:44:53) CuisUniversity-5706.image priorSource: 12116486!

----STARTUP---- (29 May 2023 11:36:48) as C:\Users\RYZEN\Desktop\isw1\portfolioImage\windows64\CuisUniversity-5706.image!


Object subclass: #TransferLegs
	instanceVariableNames: 'transferHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLegs category: 'Portfolio-Solucion' stamp: 'lp 5/29/2023 11:37:28'!
Object subclass: #TransferLegs
	instanceVariableNames: 'transferHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/29/2023 11:37:31'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/29/2023 11:37:31'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/29/2023 11:37:31'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/29/2023 11:38:36' prior: 50700827!
test02chekingLegs

| transaction accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transaction := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted hasRegistered: transaction extractedLeg).
self assert: (accountDeposit  hasRegistered: transaction  depositLeg).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/29/2023 11:38:45' prior: 50700882!
test03transferAreInTransaction

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted transactions includes: transfer extractedLeg).
self assert: (accountDeposit transactions includes: transfer).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/29/2023 11:38:48' prior: 50710338!
test03transferAreInTransaction

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted transactions includes: transfer extractedLeg).
self assert: (accountDeposit transactions includes: transfer depositLeg).
! !

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/29/2023 11:38:50'!
FAILURE!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/29/2023 11:38:50'!
FAILURE!
!TransferLegs methodsFor: 'equal' stamp: 'lp 5/29/2023 11:39:52' prior: 50700673 overrides: 16901772!
= aTransaction
	self == aTransaction .! !

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/29/2023 11:39:56'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/29/2023 11:39:59'!
PASSED!

!methodRemoval: TransferLegs #isEqualToATransferLeg: stamp: 'lp 5/29/2023 11:40:29'!
isEqualToATransferLeg: aTransferLeg
	^transferHead = aTransferLeg transferHead!

!methodRemoval: TransferHead #isEqualToATransferLeg: stamp: 'lp 5/29/2023 11:40:48'!
isEqualToATransferLeg: aTransactionLeg
	^ aTransactionLeg headIsEqualTo: self!

!methodRemoval: TransferLegs #headIsEqualTo: stamp: 'lp 5/29/2023 11:40:52'!
headIsEqualTo: aTransferHead
	^ transferHead = aTransferHead!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/29/2023 11:41:27'!
test04navLegs

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( accountExtracted transactions includes: transfer extractedLeg).
self assert: (accountDeposit transactions includes: transfer depositLeg).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/29/2023 11:42:22' prior: 50710401!
test04navLegs

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navivate) equals: transfer depositLeg .
self assert: (accountDeposit transactions includes: transfer depositLeg).
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/29/2023 11:42:48' prior: 50710417!
test04navLegs

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/29/2023 11:42:53'!
ERROR!
!TransferLegs methodsFor: 'navigate' stamp: 'lp 5/29/2023 11:43:13'!
navigate
	self shouldBeImplemented.! !
!TransferLegs methodsFor: 'navigate' stamp: 'lp 5/29/2023 11:43:18' prior: 50710449!
navigate
	self subclassResponsibility .! !

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/29/2023 11:43:20'!
ERROR!
!ExtractionLeg methodsFor: 'navigate' stamp: 'lp 5/29/2023 11:43:33' overrides: 50710453!
navigate
	self shouldBeImplemented.! !
!ExtractionLeg methodsFor: 'navigate' stamp: 'lp 5/29/2023 11:43:50' prior: 50710460 overrides: 50710453!
navigate
	^transferHead depositLeg ! !

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/29/2023 11:43:52'!
ERROR!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/29/2023 11:44:09'!
ERROR!
!DepositLeg methodsFor: 'navigate' stamp: 'lp 5/29/2023 11:45:10' overrides: 50710453!
navigate
	^ transferHead extractedLeg ! !

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/29/2023 11:45:14'!
ERROR!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/29/2023 11:45:14'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/29/2023 11:45:16'!
PASSED!

AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'transferHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferLegs category: 'Portfolio-Solucion' stamp: 'lp 5/29/2023 11:45:32'!
AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'transferHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/29/2023 11:45:34'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/29/2023 11:45:34'!
ERROR!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/29/2023 11:45:34'!
ERROR!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/29/2023 11:45:34'!
ERROR!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/29/2023 11:45:41'!
ERROR!

 transactions includes: aTransaction !

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/29/2023 11:46:19'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/29/2023 11:46:24'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/29/2023 11:46:24'!
ERROR!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/29/2023 11:46:24'!
ERROR!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/29/2023 11:46:24'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/29/2023 11:46:28'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/29/2023 11:46:30'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/29/2023 11:46:31'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/29/2023 11:46:31'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/29/2023 11:46:31'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/29/2023 11:46:31'!
PASSED!

----SNAPSHOT----(29 May 2023 11:46:36) CuisUniversity-5706.image priorSource: 12116575!
!TransferHead class methodsFor: 'initialization' stamp: 'lp 5/29/2023 11:47:16' overrides: 50700198!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := TransferHead withValue: anAmmount .
	accountExtracted register: aTransfer extractedLeg.
	accountDeposit register: aTransfer depositLeg.
	^ aTransfer.! !
!TransferHead class methodsFor: 'initialization' stamp: 'lp 5/29/2023 11:47:22' prior: 50710547 overrides: 50700198!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := self withValue: anAmmount .
	accountExtracted register: aTransfer extractedLeg.
	accountDeposit register: aTransfer depositLeg.
	^ aTransfer.! !

Object subclass: #Transfer
	instanceVariableNames: 'ammount extractionLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #TransferHead
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferHead category: 'Portfolio-Solucion' stamp: 'lp 5/29/2023 11:48:14'!
Transfer subclass: #TransferHead
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transfer
	instanceVariableNames: 'ammount extractionLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'lp 5/29/2023 11:48:19'!
Object subclass: #Transfer
	instanceVariableNames: 'ammount extractionLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'initialization' stamp: 'lp 5/29/2023 11:48:32'!
depositLeg
	depositLeg ifNil:[depositLeg:= DepositLeg of: self].
	^depositLeg! !

!methodRemoval: TransferHead #depositLeg stamp: 'lp 5/29/2023 11:48:33'!
depositLeg
	depositLeg ifNil:[depositLeg:= DepositLeg of: self].
	^depositLeg!
!Transfer methodsFor: 'initialization' stamp: 'lp 5/29/2023 11:48:38'!
extractedLeg
	extractionLeg ifNil:[extractionLeg := ExtractionLeg of: self].
	^extractionLeg! !

!methodRemoval: TransferHead #extractedLeg stamp: 'lp 5/29/2023 11:48:38'!
extractedLeg
	extractionLeg ifNil:[extractionLeg := ExtractionLeg of: self].
	^extractionLeg!
!Transfer methodsFor: 'initialization' stamp: 'lp 5/29/2023 11:48:41'!
initializeWith: anAmmount 
	
	ammount := anAmmount.
	! !

!methodRemoval: TransferHead #initializeWith: stamp: 'lp 5/29/2023 11:48:42'!
initializeWith: anAmmount 
	
	ammount := anAmmount.
	!
!Transfer methodsFor: 'initialization' stamp: 'lp 5/29/2023 11:48:49' prior: 50705023 overrides: 16902254!
value
	^ ammount ! !

!methodRemoval: TransferHead #value stamp: 'lp 5/29/2023 11:48:49'!
value
	^ ammount !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/29/2023 11:49:27' prior: 50700198!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	aTransfer := self new initializeWith: anAmmount .
	accountExtracted register: aTransfer extractedLeg.
	accountDeposit register: aTransfer depositLeg.
	^ aTransfer.! !

!classRemoval: #TransferHead stamp: 'lp 5/29/2023 11:49:49'!
Transfer subclass: #TransferHead
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/29/2023 11:49:52'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/29/2023 11:49:52'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/29/2023 11:49:52'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/29/2023 11:49:52'!
PASSED!
!Portfolio methodsFor: 'reports' stamp: 'lp 5/29/2023 11:51:24' prior: 50708553 overrides: 50704542!
accountSummary
|accountSummary|
accountSummary := OrderedCollection new.
	accountSummary  := self calculateAccountSummary .
	^ accountSummary , 'balance = ', self balance asString! !
!Portfolio methodsFor: 'reports' stamp: 'lp 5/29/2023 11:51:31' prior: 50710665 overrides: 50704542!
accountSummary
|accountSummary|
accountSummary := OrderedCollection new.
	accountSummary  := self calculateAccountSummary .
	^ accountSummary add: 'balance = ', self balance asString! !
!Portfolio methodsFor: 'reports' stamp: 'lp 5/29/2023 11:51:48' prior: 50710674 overrides: 50704542!
accountSummary
|accountSummary|
accountSummary := OrderedCollection new.
	accountSummary  addAll: self calculateAccountSummary .
	^ accountSummary add: 'balance = ', self balance asString! !
!Portfolio methodsFor: 'reports' stamp: 'lp 5/29/2023 11:52:01' prior: 50708407!
calculateAccountSummary
	^accounts inject:  OrderedCollection new into: [:anAccountSummary :anAccount |
		anAccountSummary  , anAccount  calculateAccountSummary 
		
		]  ! !
!Portfolio methodsFor: 'reports' stamp: 'lp 5/29/2023 11:52:12' prior: 50710692!
calculateAccountSummary
	^accounts inject:  OrderedCollection new into: [:anAccountSummary :anAccount |
		anAccountSummary  add:  anAccount  calculateAccountSummary 
		
		]  ! !
!Portfolio methodsFor: 'reports' stamp: 'jb 5/28/2023 12:27:07' prior: 50710683 overrides: 50704542!
accountSummary
|accountSummary|
	accountSummary  := self calculateAccountSummary .
	^ accountSummary , 'balance = ', self balance asString! !
!Portfolio methodsFor: 'reports' stamp: 'lp 5/29/2023 11:53:07' prior: 50710700!
calculateAccountSummary
	^accounts inject:  '' into: [:anAccountSummary :anAccount |
		anAccountSummary  add:  anAccount  calculateAccountSummary 
		
		]  ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 11:53:38' prior: 50703085 overrides: 50704542!
accountSummary
	|response|
	response := OrderedCollection new.
	^ self calculateAccountSummary ,'balance = ',  self balance asString ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 11:54:08' prior: 50710725 overrides: 50704542!
accountSummary
	|response|
	response := OrderedCollection new.
	response addAll: self calculateAccountSummary .
	response add:'balance = ',  self balance asString 
	^response! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 11:54:17' prior: 50707704!
calculateAccountSummary
	^transactions  inject:  OrderedCollection new into: [:anAccountSummary :aTransaction | 
		aTransaction affectAccountSummary: anAccountSummary
		
		]! !
!Deposit methodsFor: 'account Summary' stamp: 'lp 5/29/2023 11:54:53' prior: 50707788!
affectAccountSummary: anAccountSummary 
	^anAccountSummary  add: 'Deposito por ' ,  self value asString ,'.', String crString! !
!DepositLeg methodsFor: 'account summary' stamp: 'lp 5/29/2023 11:55:00' prior: 50708040!
affectAccountSummary: anAccountSummary 
	^anAccountSummary add: 'Entrada por Transferencia de ' ,  self value  asString ,'.', String crString! !
!ExtractionLeg methodsFor: 'account summary' stamp: 'lp 5/29/2023 11:55:06' prior: 50707956!
affectAccountSummary: anAccountSummary 
	^anAccountSummary add: 'Salida por Transferencia de ' ,self  value asString ,'.', String crString! !
!Withdraw methodsFor: 'account summary' stamp: 'lp 5/29/2023 11:55:14' prior: 50707871!
affectAccountSummary: anAccountSummary 
	^  anAccountSummary add: 'Extraccion por ' , (self) value asString ,'.', String crString! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 11:56:13' prior: 50701017!
test01empyAccountSummaryReportGivesOnlyTheBalance


self assert: (OrderedCollection with: 'balance = 0') equals: (ReceptiveAccount new) accountSummary
! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/29/2023 11:56:16'!
ERROR!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/29/2023 11:56:16'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 11:56:22' prior: 50710733 overrides: 50704542!
accountSummary
	|response|
	response := OrderedCollection new.
	response addAll: self calculateAccountSummary .
	response add:'balance = ',  self balance asString .
	^response! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/29/2023 11:56:23'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/29/2023 11:56:25'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/29/2023 11:56:25'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/29/2023 11:56:25'!
FAILURE!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/29/2023 11:56:25'!
FAILURE!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/29/2023 11:56:25'!
FAILURE!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/29/2023 11:56:25'!
FAILURE!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/29/2023 11:56:25'!
ERROR!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/29/2023 11:56:25'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/29/2023 11:56:25'!
ERROR!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/29/2023 11:56:25'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/29/2023 11:56:25'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/29/2023 11:56:25'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/29/2023 11:56:25'!
ERROR!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/29/2023 11:56:26'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/29/2023 11:56:26'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/29/2023 11:56:26'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/29/2023 11:56:26'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/29/2023 11:56:26'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/29/2023 11:56:26'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/29/2023 11:56:26'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 11:57:36' prior: 50701671!
test02AccountSummaryGivesADeposit
|account response|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .
response := OrderedCollection with: 'Deposito por 100.',String crString with:'balance = 100'.


self assert: response
	equals: account accountSummary
! !

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/29/2023 11:57:38'!
FAILURE!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/29/2023 11:57:38'!
FAILURE!
!Deposit methodsFor: 'account Summary' stamp: 'lp 5/29/2023 12:00:19' prior: 50710751!
affectAccountSummary: anAccountSummary 
	anAccountSummary  add: 'Deposito por ' ,  self value asString ,'.', String crString! !

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/29/2023 12:00:27'!
ERROR!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/29/2023 12:00:27'!
ERROR!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/29/2023 12:00:35'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:01:59' prior: 50710742!
calculateAccountSummary
	^transactions  inject:  OrderedCollection new into: [:anAccountSummary :aTransaction | 
		aTransaction affectAccountSummary: anAccountSummary
		]! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:02:33' prior: 50710917!
calculateAccountSummary
	|response|
	response := OrderedCollection new
	^transactions  inject:  OrderedCollection new into: [:anAccountSummary :aTransaction | 
		aTransaction affectAccountSummary: anAccountSummary
		]! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:02:50' prior: 50710926!
calculateAccountSummary
	|response|
	response := OrderedCollection new
	transactions  inject:  response new into: [:anAccountSummary :aTransaction | 
		aTransaction affectAccountSummary: anAccountSummary
		].
	^response! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/29/2023 12:03:04'!
ERROR!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/29/2023 12:03:04'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:03:17' prior: 50710936!
calculateAccountSummary
	|response|
	response := OrderedCollection new.
	transactions  inject:  response new into: [:anAccountSummary :aTransaction | 
		aTransaction affectAccountSummary: anAccountSummary
		].
	^response! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/29/2023 12:03:18'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:03:25' prior: 50710953!
calculateAccountSummary
	|response|
	response := OrderedCollection new.
	transactions  inject:  response  into: [:anAccountSummary :aTransaction | 
		aTransaction affectAccountSummary: anAccountSummary
		].
	^response! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/29/2023 12:03:27'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/29/2023 12:03:29'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/29/2023 12:03:32'!
FAILURE!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/29/2023 12:03:32'!
FAILURE!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:04:04' prior: 50701708!
test03AccountSummaryGivesAWithdraw
|account response |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .
response := OrderedCollection with: 'Extraccion por 100.',String crString with:'balance = 100'.


self assert: response
	equals: account accountSummary
! !

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/29/2023 12:04:13'!
FAILURE!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:04:27' prior: 50710990!
test03AccountSummaryGivesAWithdraw
|account response |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .
response := OrderedCollection with: 'Extraccion por 100.',String crString with:'balance = -100'.


self assert: response
	equals: account accountSummary
! !

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/29/2023 12:04:29'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:04:48' prior: 50702066!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Deposito por 100.',String crString with:'balance = 100'.


self assert: response
	equals: accountExtracted accountSummary

! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:05:20' prior: 50711020!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Salida por E.',String crString with:'balance = 100'.


self assert: response
	equals: accountExtracted accountSummary

! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:05:35' prior: 50711036!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Salida por Transferencia.',String crString with:'balance = 100'.


self assert: response
	equals: accountExtracted accountSummary

! !

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/29/2023 12:05:44'!
FAILURE!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/29/2023 12:05:44'!
FAILURE!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:05:54' prior: 50711052!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Salida por Transferencia.',String crString with:'balance = -100'.


self assert: response
	equals: accountExtracted accountSummary

! !

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/29/2023 12:05:54'!
FAILURE!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:06:09' prior: 50711075!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Salida por Transferencia de 100.',String crString with:'balance = -100'.


self assert: response
	equals: accountExtracted accountSummary

! !

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/29/2023 12:06:11'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:06:28' prior: 50702359!
test05AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Salida por Transferencia de 100.',String crString with:'balance = -100'.


self assert: response
	equals: accountDeposit accountSummary
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:06:36' prior: 50711115!
test05AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Entrada por Transferencia de 100.',String crString with:'balance = -100'.


self assert: response
	equals: accountDeposit accountSummary
! !

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/29/2023 12:06:37'!
FAILURE!

----SNAPSHOT----(29 May 2023 12:06:47) CuisUniversity-5706.image priorSource: 12124549!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:06:53' prior: 50711131!
test05AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Entrada por Transferencia de 100.',String crString with:'balance = 100'.


self assert: response
	equals: accountDeposit accountSummary
! !

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/29/2023 12:06:53'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/29/2023 12:06:53'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/29/2023 12:06:53'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/29/2023 12:06:53'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/29/2023 12:06:54'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/29/2023 12:06:54'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/29/2023 12:06:54'!
ERROR!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/29/2023 12:06:54'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/29/2023 12:06:54'!
ERROR!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/29/2023 12:06:54'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/29/2023 12:06:54'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/29/2023 12:06:54'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/29/2023 12:06:54'!
ERROR!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/29/2023 12:06:54'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/29/2023 12:06:54'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/29/2023 12:06:54'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/29/2023 12:06:54'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/29/2023 12:06:54'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/29/2023 12:06:54'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/29/2023 12:06:54'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:07:23' prior: 50702563!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit response |
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .

response := OrderedCollection with: 'Entrada por Transferencia de 100.',String crString with:'balance = 100'.


self assert: response
	equals: account accountSummary

! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:08:59' prior: 50711241!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit response |
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .

response := OrderedCollection with:'Deposito por 100.',String crString with:'Extraccion por 50.',String crString with:'Salida por Transferencia de 20.',String crString with: 'Entrada por Transferencia de 100.',String crString with:'balance = 60'.


self assert: response
	equals: account accountSummary

! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/29/2023 12:09:26' prior: 50711262!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit response |
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .

response := OrderedCollection with:'Deposito por 100.',String crString with:'Extraccion por 50.',String crString with:'Salida por Transferencia de 20.',String crString with: 'Entrada por Transferencia de 30.',String crString with:'balance = 60'.


self assert: response
	equals: account accountSummary

! !

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/29/2023 12:09:29'!
ERROR!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/29/2023 12:10:10'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:11:19' prior: 50710967!
calculateAccountSummary
	|response|
	response := OrderedCollection new.
	transactions  do: [:aTransaction | 
		aTransaction affectAccountSummary: response
		].
	^response! !

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/29/2023 12:11:21'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/29/2023 12:11:23'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:12:17' prior: 50711319!
calculateAccountSummary
	|response|
	response := OrderedCollection new.
	transactions  do: [:aTransaction | 
		(aTransaction isKindOf:Deposit) ifTrue:[ aTransaction affectAccountSummary: response].
		].
	^response! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:12:52' prior: 50711334!
calculateAccountSummary
	|response|
	response := OrderedCollection new.
	transactions  do: [:aTransaction | 
		(aTransaction isKindOf:Deposit) ifTrue:[ aTransaction affectAccountSummary: response].
		(aTransaction isKindOf:Withdraw ) ifTrue:[ aTransaction affectAccountSummary: response].
		(aTransaction isKindOf:DepositLeg ) ifTrue:[ aTransaction affectAccountSummary: response].
		(aTransaction isKindOf:ExtractionLeg ) ifTrue:[ aTransaction affectAccountSummary: response].
		].
	^response! !

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/29/2023 12:13:12'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:14:45' prior: 50711344!
calculateAccountSummary
	|response|
	response := OrderedCollection new.
	transactions  do: [:aTransaction | 
		(aTransaction isKindOf:Deposit) ifTrue:[response  add: 'Deposito por ' ,  self value asString ,'.', String crString].
		(aTransaction isKindOf:Withdraw ) ifTrue:[ aTransaction affectAccountSummary: response].
		(aTransaction isKindOf:DepositLeg ) ifTrue:[ aTransaction affectAccountSummary: response].
		(aTransaction isKindOf:ExtractionLeg ) ifTrue:[ aTransaction affectAccountSummary: response].
		].
	^response! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/29/2023 12:14:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/29/2023 12:14:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/29/2023 12:14:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/29/2023 12:14:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/29/2023 12:14:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/29/2023 12:14:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/29/2023 12:14:46'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:15:49' prior: 50711366!
calculateAccountSummary
	|response|
	response := OrderedCollection new.
	transactions  do: [:aTransaction | 
		(aTransaction isKindOf:Deposit) ifTrue:[response  add: 'Deposito por ' ,  self value asString ,'.', String crString].
		(aTransaction isKindOf:Withdraw ) ifTrue:[ response  add: 'Extraccion por ' ,  self value asString ,'.', String crString].
		(aTransaction isKindOf:DepositLeg ) ifTrue:[ response  add: 'Entrada por Transferencia de ' ,  self value asString ,'.', String crString].
		(aTransaction isKindOf:ExtractionLeg ) ifTrue:[ response  add: 'Salida por Transferencia de ',  self value asString ,'.', String crString].
		].
	^response! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'lp 5/29/2023 12:15:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'lp 5/29/2023 12:15:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'lp 5/29/2023 12:15:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'lp 5/29/2023 12:15:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'lp 5/29/2023 12:15:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'lp 5/29/2023 12:15:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'lp 5/29/2023 12:15:51'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/29/2023 12:15:55'!
FAILURE!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/29/2023 12:15:55'!
FAILURE!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/29/2023 12:15:59'!
FAILURE!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/29/2023 12:15:59'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:16:32' prior: 50711412!
calculateAccountSummary
	|response|
	response := OrderedCollection new.
	transactions  do: [:aTransaction | 
		(aTransaction isKindOf:Deposit) ifTrue:[response  add: 'Deposito por ' ,  aTransaction value asString ,'.', String crString].
		(aTransaction isKindOf:Withdraw ) ifTrue:[ response  add: 'Extraccion por ' ,  self value asString ,'.', String crString].
		(aTransaction isKindOf:DepositLeg ) ifTrue:[ response  add: 'Entrada por Transferencia de ' ,  self value asString ,'.', String crString].
		(aTransaction isKindOf:ExtractionLeg ) ifTrue:[ response  add: 'Salida por Transferencia de ',  self value asString ,'.', String crString].
		].
	^response! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:16:46' prior: 50711474!
calculateAccountSummary
	|response|
	response := OrderedCollection new.
	transactions  do: [:aTransaction | 
		(aTransaction isKindOf:Deposit) ifTrue:[response  add: 'Deposito por ' ,  aTransaction value asString ,'.', String crString].
		(aTransaction isKindOf:Withdraw ) ifTrue:[ response  add: 'Extraccion por ' ,  aTransaction value asString ,'.', String crString].
		(aTransaction isKindOf:DepositLeg ) ifTrue:[ response  add: 'Entrada por Transferencia de ' ,  aTransaction value asString ,'.', String crString].
		(aTransaction isKindOf:ExtractionLeg ) ifTrue:[ response  add: 'Salida por Transferencia de ',  aTransaction value asString ,'.', String crString].
		].
	^response! !

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/29/2023 12:17:00'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:18:57' prior: 50707230 overrides: 50706021!
netTransfer
|response|
response := 0
^transactions  do: 	[ :aTransaction | 
	(aTransaction isKindOf:Deposit) ifTrue:[].
		(aTransaction isKindOf:Withdraw ) ifTrue:[].
		(aTransaction isKindOf:DepositLeg ) ifTrue:[ response := response + aTransaction value].
		(aTransaction isKindOf:ExtractionLeg ) ifTrue:[response := response + aTransaction value].
	]! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:19:04' prior: 50711526 overrides: 50706021!
netTransfer
|response|
response := 0.
^transactions  do: 	[ :aTransaction | 
	(aTransaction isKindOf:Deposit) ifTrue:[].
		(aTransaction isKindOf:Withdraw ) ifTrue:[].
		(aTransaction isKindOf:DepositLeg ) ifTrue:[ response := response + aTransaction value].
		(aTransaction isKindOf:ExtractionLeg ) ifTrue:[response := response + aTransaction value].
	]! !

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/29/2023 12:19:37'!
FAILURE!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/29/2023 12:19:37'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:20:14' prior: 50711541 overrides: 50706021!
netTransfer
|response|
response := 0.
transactions  do: 	[ :aTransaction | 
	(aTransaction isKindOf:Deposit) ifTrue:[].
		(aTransaction isKindOf:Withdraw ) ifTrue:[].
		(aTransaction isKindOf:DepositLeg ) ifTrue:[ response := response + aTransaction value].
		(aTransaction isKindOf:ExtractionLeg ) ifTrue:[response := response + aTransaction value].
	].
^response! !

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/29/2023 12:20:18'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/29/2023 12:20:20'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/29/2023 12:20:23'!
FAILURE!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/29/2023 12:20:23'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/29/2023 12:20:40' prior: 50711563 overrides: 50706021!
netTransfer
|response|
response := 0.
transactions  do: 	[ :aTransaction | 
	(aTransaction isKindOf:Deposit) ifTrue:[].
		(aTransaction isKindOf:Withdraw ) ifTrue:[].
		(aTransaction isKindOf:DepositLeg ) ifTrue:[ response := response + aTransaction value].
		(aTransaction isKindOf:ExtractionLeg ) ifTrue:[response := response - aTransaction value].
	].
^response! !

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/29/2023 12:20:41'!
PASSED!

----SNAPSHOT----(29 May 2023 12:20:54) CuisUniversity-5706.image priorSource: 12143971!

----QUIT----(29 May 2023 12:24:09) CuisUniversity-5706.image priorSource: 12158724!

----STARTUP---- (30 May 2023 10:09:54) as C:\Users\RYZEN\Desktop\isw1\portfolioImage\windows64\CuisUniversity-5706.image!

!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:13:13'!
test05MustBePoositive

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:13:39' prior: 50711620!
test05MustBePoositive

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
Withdraw register: -50 on:accountExtracted .


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:13:45'!
ERROR!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:14:37'!
ERROR!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:15:15'!
ERROR!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:15:15'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:15:18'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:15:22'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:15:26'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:15:29'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:15:31'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:15:31'!
ERROR!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:15:31'!
ERROR!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:15:31'!
ERROR!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:15:31'!
ERROR!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:15:46'!
ERROR!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:15:46'!
ERROR!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:16:07'!
ERROR!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:17:56'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:17:56'!
ERROR!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:17:56'!
ERROR!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:17:56'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:17:56'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:17:59'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:17:59'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:17:59'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:17:59'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:17:59'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:18:02'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:18:02'!
ERROR!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:18:02'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:18:02'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:18:02'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:18:02'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:18:05'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:18:05'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:18:05'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:18:05'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:18:05'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:18:08'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:18:08'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:18:08'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:18:08'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:18:08'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:18:11'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:18:11'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:18:11'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:18:11'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:18:11'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:18:13'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:18:13'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:18:13'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:18:13'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:18:13'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:18:15'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:18:17'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:18:18'!
ERROR!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:18:18'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:18:20'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:18:22'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:18:25'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:18:25'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:18:25'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:18:25'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:18:25'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:18:47' prior: 50711636!
test05MustBePoositive

| transfer accountExtracted accountDeposit aPositiveAmmount |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
aPositiveAmmount := 100.

transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:19:50' prior: 50711822!
test05MustBePoositive

| transfer accountExtracted accountDeposit aPositiveAmmount |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
aPositiveAmmount := 100.

transfer := Transfer theAmmount: aPositiveAmmount from: accountExtracted  to: accountDeposit .

self assert: accountExtracted balance equals: aPositiveAmmount negated .! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:20:03' prior: 50711839!
test05MustBePoositive

| accountExtracted accountDeposit aPositiveAmmount |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
aPositiveAmmount := 100.

Transfer theAmmount: aPositiveAmmount from: accountExtracted  to: accountDeposit .

self assert: accountExtracted balance equals: aPositiveAmmount negated .! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:21:11' prior: 50711854!
test05MustBePoositive

| transfer accountExtracted accountDeposit aPositiveAmmount |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
aPositiveAmmount := 100.

transfer :=Transfer theAmmount: aPositiveAmmount from: accountExtracted  to: accountDeposit .

self assert: transfer value balance equals: aPositiveAmmount ! !

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:21:13'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:21:23' prior: 50711868!
test05MustBePoositive

| transfer accountExtracted accountDeposit aPositiveAmmount |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
aPositiveAmmount := 100.

transfer :=Transfer theAmmount: aPositiveAmmount from: accountExtracted  to: accountDeposit .

self assert: transfer value equals: aPositiveAmmount ! !

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:21:24'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:21:24'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:21:24'!
ERROR!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:21:24'!
PASSED!

!testRun: #TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:21:24'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:21:24'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:21:24'!
PASSED!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:21:26'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:27:24' prior: 50711885!
test05MustBePoositive

| accountExtracted accountDeposit aPositiveAmmount |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
aPositiveAmmount := -100.

self should: [Transfer theAmmount: aPositiveAmmount from:accountExtracted  to:accountDeposit ] raise:Error  withExceptionDo:[]. 
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:30:04' prior: 50711921!
test05MustBePoositive

| accountExtracted accountDeposit aPositiveAmmount |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
aPositiveAmmount := -100.

self should: [Transfer theAmmount: aPositiveAmmount from:accountExtracted  to:accountDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self assert: (accountExtracted transactions size = 0 ).
		self assert: (accountDeposit transactions size = 0 ).]. 
! !

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:30:08'!
FAILURE!
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/30/2023 10:32:27' prior: 50710637!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	anAmmount >= 0 ifTrue: [self error: self class ].
	aTransfer := self new initializeWith: anAmmount .
	accountExtracted register: aTransfer extractedLeg.
	accountDeposit register: aTransfer depositLeg.
	^ aTransfer.! !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/30/2023 10:32:40' prior: 50711956!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	anAmmount >= 0 ifTrue: [self error: self class notPositiveAmmountProvided].
	aTransfer := self new initializeWith: anAmmount .
	accountExtracted register: aTransfer extractedLeg.
	accountDeposit register: aTransfer depositLeg.
	^ aTransfer.! !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/30/2023 10:32:48'!
notPositiveAmmountProvided
	! !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/30/2023 10:33:23' prior: 50711982!
notPositiveAmmountProvided
	'cannot procced with a transfer with ammount not positive'! !
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/30/2023 10:33:51' prior: 50711986!
notPositiveAmmountProvided
	'cannot procced with a transfer that has an not positive ammount '! !

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:33:55'!
FAILURE!

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:33:55'!
FAILURE!
!Transfer class methodsFor: 'initialization' stamp: 'lp 5/30/2023 10:35:06' prior: 50711969!
theAmmount: anAmmount from: accountExtracted to: accountDeposit 
	|aTransfer|
	anAmmount >= 0 ifFalse: [self error: self class notPositiveAmmountProvided].
	aTransfer := self new initializeWith: anAmmount .
	accountExtracted register: aTransfer extractedLeg.
	accountDeposit register: aTransfer depositLeg.
	^ aTransfer.! !

!testRun: #TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:35:10'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:35:28'!
test06MustBePoositive

| accountExtracted accountDeposit aPositiveAmmount |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
aPositiveAmmount := -100.

self should: [Transfer theAmmount: aPositiveAmmount from:accountExtracted  to:accountDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self assert: (accountExtracted transactions size = 0 ).
		self assert: (accountDeposit transactions size = 0 ).]. 
! !

!methodRemoval: TransferTest #test05MustBePoositive stamp: 'lp 5/30/2023 10:35:28'!
test05MustBePoositive

| accountExtracted accountDeposit aPositiveAmmount |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
aPositiveAmmount := -100.

self should: [Transfer theAmmount: aPositiveAmmount from:accountExtracted  to:accountDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self assert: (accountExtracted transactions size = 0 ).
		self assert: (accountDeposit transactions size = 0 ).]. 
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:35:35'!
test05navLegs

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:35:45'!
test04navExtractedLeg

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:35:56'!
test04navDepositLeg

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !

!methodRemoval: TransferTest #test04navLegs stamp: 'lp 5/30/2023 10:35:56'!
test04navLegs

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
!

!methodRemoval: TransferTest #test05navLegs stamp: 'lp 5/30/2023 10:36:00'!
test05navLegs

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:36:04'!
test05navExtractedLeg

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !

!methodRemoval: TransferTest #test04navExtractedLeg stamp: 'lp 5/30/2023 10:36:04'!
test04navExtractedLeg

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:36:15' prior: 50712087!
test04navDepositLeg

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:36:20' prior: 50712131!
test05navExtractedLeg

| transfer accountExtracted accountDeposit |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.


transfer := Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:36:23'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:36:23'!
ERROR!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:36:23'!
ERROR!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:36:23'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:36:23'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:36:23'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:36:26'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:36:26'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:36:26'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:36:26'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:36:26'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:36:26'!
PASSED!

----SNAPSHOT----(30 May 2023 10:37:30) CuisUniversity-5706.image priorSource: 12158813!

!methodRemoval: TransferLegs #= stamp: 'lp 5/30/2023 10:37:46'!
= aTransaction
	self == aTransaction .!

!methodRemoval: TransferLegs #hash stamp: 'lp 5/30/2023 10:37:52'!
hash
	^ super hash!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:37:57'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:37:57'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:37:57'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:37:57'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:37:57'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:37:57'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:38:00'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:38:02'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:38:04'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:38:05'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:38:07'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:38:08'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:38:11'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:38:11'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:38:11'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:38:11'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:38:11'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:38:11'!
PASSED!

----SNAPSHOT----(30 May 2023 10:41:37) CuisUniversity-5706.image priorSource: 12178307!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:41:40'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:41:40'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:41:40'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:41:40'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:41:40'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:41:40'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 10:45:34' prior: 50712020!
test06MustBePoositive

| accountExtracted accountDeposit aNotPositiveAmmount |

accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount  new.
aNotPositiveAmmount := -100.

self should: [Transfer theAmmount: aNotPositiveAmmount from:accountExtracted  to:accountDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self assert: (accountExtracted transactions size = 0 ).
		self assert: (accountDeposit transactions size = 0 ).]. 
! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:46:07' overrides: 16961394!
setUp
! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'lp 5/30/2023 10:47:06'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'accountForExtraction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:47:05' prior: 50712320 overrides: 16961394!
setUp
accountForExtraction:= ReceptiveAccount new.! !

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'lp 5/30/2023 10:47:27'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'accountForExtraction accountForDeposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:47:25' prior: 50712332 overrides: 16961394!
setUp
accountForExtraction:= ReceptiveAccount new.
accountForDeposit:=ReceptiveAccount  new.! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:47:31' prior: 50712346 overrides: 16961394!
setUp
accountForExtraction:= ReceptiveAccount new.
accountForDeposit:=ReceptiveAccount  new.
! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:47:43' prior: 50699610!
test01NewTransfer


Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert: accountForExtraction balance equals: -100.
self assert: accountForDeposit  balance equals: 100.! !

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:47:56'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:47:56'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:47:56'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:47:56'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:47:56'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:47:56'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:47:56'!
PASSED!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:48:00' prior: 50712359!
test01NewTransfer

Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert: accountForExtraction balance equals: -100.
self assert: accountForDeposit  balance equals: 100.! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:48:39' prior: 50710322!
test02chekingLegs


| transaction |
transaction := Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert:( accountForExtraction hasRegistered: transaction extractedLeg).
self assert: (accountForDeposit  hasRegistered: transaction  depositLeg).
! !

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:48:53'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:48:53'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:48:53'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:48:53'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:48:53'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:48:53'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:48:53'!
PASSED!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:49:15' prior: 50710354!
test03transferAreInTransaction

| transfer |

transfer := Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert:( accountForExtraction transactions includes: transfer extractedLeg).
self assert: (accountForDeposit transactions includes: transfer depositLeg).
! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:49:38' prior: 50712162!
test04navDepositLeg

| transfer |


transfer := Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:49:43'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:49:43'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:49:43'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:49:43'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:49:43'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:49:43'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:49:43'!
PASSED!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:49:56' prior: 50712175!
test05navExtractedLeg

| transfer |



transfer := Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:50:05' prior: 50712470!
test05navExtractedLeg

| transfer |



transfer := Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:50:08' prior: 50712482!
test05navExtractedLeg

| transfer |

transfer := Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
self assert:( transfer depositLeg navigate) equals: transfer extractedLeg .
! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:50:30' prior: 50712301!
test06MustBePoositive

|aNotPositiveAmmount |

aNotPositiveAmmount := -100.

self should: [Transfer theAmmount: aNotPositiveAmmount from:accountForExtraction  to:accountForDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self assert: (accountForExtraction transactions size = 0 ).
		self assert: (accountForDeposit transactions size = 0 ).]. 
! !

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:50:39'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:50:39'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:50:39'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:50:39'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:50:39'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:50:39'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:50:39'!
PASSED!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:51:00' prior: 50712388!
test01NewTransfer
|transfer |

transfer := Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert: accountForExtraction balance equals: -100.
self assert: accountForDeposit  balance equals: 100.! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:52:03' prior: 50712494!
test05navExtractedLeg

| transfer |

transfer := Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert:( transfer extractedLeg navigate) equals: transfer depositLeg .
! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:52:52'!
forTransactionAssert: aBlock

| transaction |
transaction := Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

aBlock value:transaction .! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:53:22' prior: 50712398!
test02chekingLegs

self forTransactionAssert: [:aTransaction |
self assert:( accountForExtraction hasRegistered: aTransaction extractedLeg).
self assert: (accountForDeposit  hasRegistered: aTransaction  depositLeg).]
! !

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:53:28'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:53:28'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:53:28'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:53:28'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:53:28'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:53:28'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:53:28'!
PASSED!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:53:59' prior: 50712429!
test03transferAreInTransaction
self forTransactionAssert: [:aTransaction |

	self assert:( accountForExtraction transactions includes: aTransaction extractedLeg).
	self assert: (accountForDeposit transactions includes: aTransaction depositLeg).
]! !

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:54:00'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:54:00'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:54:00'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:54:00'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:54:00'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:54:00'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:54:00'!
PASSED!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:54:48' prior: 50712441!
test04navDepositLeg

self forTransactionAssert: [:aTransaction |
	self assert:( aTransaction depositLeg navigate) equals: aTransaction extractedLeg .
]! !

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:54:49'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:54:49'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:54:49'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:54:49'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:54:49'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:54:49'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:54:49'!
PASSED!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:55:16' prior: 50712551!
test05navExtractedLeg
self forTransactionAssert: [:aTransaction |
self assert:( aTransaction extractedLeg navigate) equals: aTransaction depositLeg .]
! !

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:55:17'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 10:55:17'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 10:55:17'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 10:55:17'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 10:55:17'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 10:55:17'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:55:17'!
PASSED!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:56:15' prior: 50712541!
test01NewTransfer
self forTransactionAssert: [
self assert: accountForExtraction balance equals: -100.
self assert: accountForDeposit  balance equals: 100.]! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:56:20' prior: 50712681!
test01NewTransfer
|transfer |

transfer := Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert: accountForExtraction balance equals: -100.
self assert: accountForDeposit  balance equals: 100.! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:56:30' prior: 50712689!
test01NewTransfer


Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert: accountForExtraction balance equals: -100.
self assert: accountForDeposit  balance equals: 100.! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:56:35' prior: 50712699!
test01NewTransfer

Transfer theAmmount: 100 from: accountForExtraction  to: accountForDeposit .

self assert: accountForExtraction balance equals: -100.
self assert: accountForDeposit  balance equals: 100.! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:58:26'!
m1

	self assert: (accountForExtraction transactions size = 0 ).
		self assert: (accountForDeposit transactions size = 0 )! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:58:26' prior: 50712506!
test06MustBePoositive

|aNotPositiveAmmount |

aNotPositiveAmmount := -100.

self should: [Transfer theAmmount: aNotPositiveAmmount from:accountForExtraction  to:accountForDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self m1.]. 
! !

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:58:31'!
PASSED!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:59:20' prior: 50712725!
test06MustBePoositive

|aNotPositiveAmmount |

aNotPositiveAmmount := -100.

Deposit register:10 on: accountForExtraction .
Deposit register: 10 on: accountForDeposit .

self should: [Transfer theAmmount: aNotPositiveAmmount from:accountForExtraction  to:accountForDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self m1.]. 
! !

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:59:23'!
FAILURE!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:59:33' prior: 50712718!
m1

	self assert: (accountForExtraction transactions size = 1 ).
		self assert: (accountForDeposit transactions size = 1 )! !

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 10:59:35'!
PASSED!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:59:42' prior: 50712758!
m1

	self assert: (accountForExtraction transactions size = 0 ).
		self assert: (accountForDeposit transactions size = 0 )! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 10:59:47' prior: 50712740!
test06MustBePoositive

|aNotPositiveAmmount |

aNotPositiveAmmount := -100.


self should: [Transfer theAmmount: aNotPositiveAmmount from:accountForExtraction  to:accountForDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self m1.]. 
! !
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 11:00:23'!
assertTransactionsAreEmpty

	self assert: (accountForExtraction transactions size = 0 ).
		self assert: (accountForDeposit transactions size = 0 )! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 11:00:24' prior: 50712775!
test06MustBePoositive

|aNotPositiveAmmount |

aNotPositiveAmmount := -100.


self should: [Transfer theAmmount: aNotPositiveAmmount from:accountForExtraction  to:accountForDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self assertTransactionsAreEmpty.]. 
! !

!methodRemoval: TransferTest #m1 stamp: 'lp 5/30/2023 11:00:24'!
m1

	self assert: (accountForExtraction transactions size = 0 ).
		self assert: (accountForDeposit transactions size = 0 )!
!TransferTest methodsFor: 'assertions' stamp: 'lp 5/30/2023 11:00:38' prior: 50712787!
assertTransactionsAreEmpty

	self assert: (accountForExtraction transactions size = 0 ).
	self assert: (accountForDeposit transactions size = 0 )! !
!TransferTest methodsFor: 'assertions' stamp: 'lp 5/30/2023 11:01:19'!
assertTransactionsAreEmpty: for

	self assert: (accountForExtraction transactions size = 0 ).
	self assert: (accountForDeposit transactions size = 0 )! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 11:01:19' prior: 50712795!
test06MustBePoositive

|aNotPositiveAmmount |

aNotPositiveAmmount := -100.


self should: [Transfer theAmmount: aNotPositiveAmmount from:accountForExtraction  to:accountForDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self assertTransactionsAreEmpty: self.]. 
! !

!methodRemoval: TransferTest #assertTransactionsAreEmpty stamp: 'lp 5/30/2023 11:01:19'!
assertTransactionsAreEmpty

	self assert: (accountForExtraction transactions size = 0 ).
	self assert: (accountForDeposit transactions size = 0 )!
!TransferTest methodsFor: 'assertions' stamp: 'lp 5/30/2023 11:01:50'!
assertAreEmptyTheTransactions: for

	self assert: (accountForExtraction transactions size = 0 ).
	self assert: (accountForDeposit transactions size = 0 )! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 11:01:50' prior: 50712829!
test06MustBePoositive

|aNotPositiveAmmount |

aNotPositiveAmmount := -100.


self should: [Transfer theAmmount: aNotPositiveAmmount from:accountForExtraction  to:accountForDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self assertAreEmptyTheTransactions: self.]. 
! !

!methodRemoval: TransferTest #assertTransactionsAreEmpty: stamp: 'lp 5/30/2023 11:01:51'!
assertTransactionsAreEmpty: for

	self assert: (accountForExtraction transactions size = 0 ).
	self assert: (accountForDeposit transactions size = 0 )!
!TransferTest methodsFor: 'assertions' stamp: 'lp 5/30/2023 11:02:09' prior: 50712850!
assertAreEmptyTheTransactions: anCollectionOfAccounts

	self assert: (accountForExtraction transactions size = 0 ).
	self assert: (accountForDeposit transactions size = 0 )! !
!TransferTest methodsFor: 'assertions' stamp: 'lp 5/30/2023 11:02:42'!
assertAreEmptyTheTransactionsOfTheAccounts: anCollectionOfAccounts

	self assert: (accountForExtraction transactions size = 0 ).
	self assert: (accountForDeposit transactions size = 0 )! !

!methodRemoval: TransferTest #assertAreEmptyTheTransactionsOfTheAccounts: stamp: 'lp 5/30/2023 11:02:57'!
assertAreEmptyTheTransactionsOfTheAccounts: anCollectionOfAccounts

	self assert: (accountForExtraction transactions size = 0 ).
	self assert: (accountForDeposit transactions size = 0 )!
!TransferTest methodsFor: 'assertions' stamp: 'lp 5/30/2023 11:03:06'!
assertAreEmptyTheTransactionsOfTheAccounts: anCollectionOfAccounts

	self assert: (accountForExtraction transactions size = 0 ).
	self assert: (accountForDeposit transactions size = 0 )! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 11:03:06' prior: 50712858!
test06MustBePoositive

|aNotPositiveAmmount |

aNotPositiveAmmount := -100.


self should: [Transfer theAmmount: aNotPositiveAmmount from:accountForExtraction  to:accountForDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self assertAreEmptyTheTransactionsOfTheAccounts: self.]. 
! !

!methodRemoval: TransferTest #assertAreEmptyTheTransactions: stamp: 'lp 5/30/2023 11:03:06'!
assertAreEmptyTheTransactions: anCollectionOfAccounts

	self assert: (accountForExtraction transactions size = 0 ).
	self assert: (accountForDeposit transactions size = 0 )!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 11:03:36' prior: 50712914!
test06MustBePoositive

|aNotPositiveAmmount |

aNotPositiveAmmount := -100.


self should: [Transfer theAmmount: aNotPositiveAmmount from:accountForExtraction  to:accountForDeposit ] 
	raise:Error 
	withExceptionDo:[:anError|
		anError messageText = Transfer notPositiveAmmountProvided.
		self assertAreEmptyTheTransactionsOfTheAccounts: (OrderedCollection with:accountForExtraction with:accountForDeposit)]. 
! !

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 11:03:37'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'lp 5/30/2023 11:03:37'!
PASSED!

!testRun: #TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 11:03:37'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'lp 5/30/2023 11:03:37'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'lp 5/30/2023 11:03:37'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'lp 5/30/2023 11:03:37'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 11:03:37'!
PASSED!
!TransferTest methodsFor: 'assertions' stamp: 'lp 5/30/2023 11:04:20' prior: 50712905!
assertAreEmptyTheTransactionsOfTheAccounts: anCollectionOfAccounts

	anCollectionOfAccounts  do:[: account |
		self assert: (account transactions size = 0 ).	]! !

!testRun: #TransferTest #test06MustBePoositive stamp: 'lp 5/30/2023 11:04:24'!
PASSED!
!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 11:04:57' prior: 50712568!
test02chekingLegs

self forTransactionAssert: [:aTransaction |
	self assert:( accountForExtraction hasRegistered: aTransaction extractedLeg).
	self assert: (accountForDeposit  hasRegistered: aTransaction  depositLeg).
]
! !

----SNAPSHOT----(30 May 2023 11:06:21) CuisUniversity-5706.image priorSource: 12180170!

----SNAPSHOT----(30 May 2023 11:41:52) CuisUniversity-5706.image priorSource: 12202911!

----STARTUP---- (30 May 2023 15:40:10) as C:\Users\RYZEN\Desktop\isw1\portfolioImage\windows64\CuisUniversity-5706.image!

!TransferTest methodsFor: 'testing' stamp: 'lp 5/30/2023 15:41:25'!
test02hasRegiteredTheTransactionLeg

self forTransactionAssert: [:aTransaction |
	self assert:( accountForExtraction hasRegistered: aTransaction extractedLeg).
	self assert: (accountForDeposit  hasRegistered: aTransaction  depositLeg).
]
! !

!methodRemoval: TransferTest #test02chekingLegs stamp: 'lp 5/30/2023 15:41:26'!
test02chekingLegs

self forTransactionAssert: [:aTransaction |
	self assert:( accountForExtraction hasRegistered: aTransaction extractedLeg).
	self assert: (accountForDeposit  hasRegistered: aTransaction  depositLeg).
]
!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/30/2023 15:45:34' prior: 50711498!
calculateAccountSummary
	|response|
	response := OrderedCollection new.
	transactions  do: [:aTransaction | 
		aTransaction reportAccountSummary: response.
		].
	^response! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 15:45:47'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 15:45:55'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 15:46:00'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 15:46:00'!
ERROR!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 15:46:00'!
ERROR!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 15:46:00'!
ERROR!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 15:46:00'!
ERROR!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 15:46:00'!
ERROR!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 15:46:00'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 15:46:00'!
ERROR!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 15:46:00'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 15:46:00'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 15:46:00'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 15:46:00'!
ERROR!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 15:46:00'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 15:46:00'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:46:00'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 15:46:00'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:46:00'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:46:00'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:46:00'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 15:46:04'!
ERROR!
!Deposit methodsFor: 'account Summary' stamp: 'lp 5/30/2023 15:46:17'!
reportAccountSummary: response 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'account Summary' stamp: 'lp 5/30/2023 15:47:11' prior: 50713108!
reportAccountSummary: response 
	response  add: 'Deposito por ' , self  value asString ,'.'.! !

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 15:47:35'!
FAILURE!

account accountSummary!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 15:49:19' prior: 50710883!
test02AccountSummaryGivesADeposit
|account response|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .
response := OrderedCollection with: 'Deposito por 100.' with:'balance = 100'.


self assert: response
	equals: account accountSummary 
! !

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 15:49:20'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 15:49:20'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 15:49:20'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 15:49:20'!
ERROR!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 15:49:20'!
ERROR!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 15:49:20'!
ERROR!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 15:49:20'!
ERROR!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 15:49:20'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 15:49:20'!
ERROR!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 15:49:20'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 15:49:20'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 15:49:20'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 15:49:20'!
ERROR!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 15:49:20'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 15:49:20'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:49:20'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 15:49:20'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:49:20'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:49:20'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:49:20'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 15:49:57'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 15:50:25' prior: 50711005!
test03AccountSummaryGivesAWithdraw
|account response |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .
response := OrderedCollection with: 'Extraccion por 100.' with:'balance = -100'.


self assert: response
	equals: account accountSummary
! !

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 15:50:29'!
ERROR!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 15:50:29'!
ERROR!
!Withdraw methodsFor: 'account summary' stamp: 'lp 5/30/2023 15:50:37'!
reportAccountSummary: response 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'account summary' stamp: 'lp 5/30/2023 15:51:06' prior: 50713226!
reportAccountSummary: response 
	response  add: 'Deposito por ' , self  value asString ,'.'.! !
!Withdraw methodsFor: 'account summary' stamp: 'lp 5/30/2023 15:51:11' prior: 50713231!
reportAccountSummary: response 
	response  add: 'Extraccion por ' , self  value asString ,'.'.! !

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 15:51:13'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 15:51:23' prior: 50711095!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Salida por Transferencia de 100.'with:'balance = -100'.


self assert: response
	equals: accountExtracted accountSummary

! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 15:51:24' prior: 50713247!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Salida por Transferencia de 100.' with:'balance = -100'.


self assert: response
	equals: accountExtracted accountSummary

! !

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 15:51:26'!
ERROR!
!ExtractionLeg methodsFor: 'account summary' stamp: 'lp 5/30/2023 15:51:32'!
reportAccountSummary: response 
	self shouldBeImplemented.! !
!ExtractionLeg methodsFor: 'account summary' stamp: 'lp 5/30/2023 15:51:48' prior: 50713282!
reportAccountSummary: response 
	response  add: 'Salida por Transferencia de ' , self  value asString ,'.'.! !

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 15:51:49'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 15:51:49'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 15:51:49'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 15:51:49'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 15:51:49'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 15:51:49'!
ERROR!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 15:51:49'!
ERROR!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 15:51:49'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 15:51:50'!
ERROR!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 15:51:50'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 15:51:50'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 15:51:50'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 15:51:50'!
ERROR!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 15:51:50'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 15:51:50'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:51:50'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 15:51:50'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:51:50'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:51:50'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:51:50'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 15:51:54'!
ERROR!
!DepositLeg methodsFor: 'account summary' stamp: 'lp 5/30/2023 15:51:58'!
reportAccountSummary: response 
	self shouldBeImplemented.! !
!DepositLeg methodsFor: 'account summary' stamp: 'lp 5/30/2023 15:52:19' prior: 50713368!
reportAccountSummary: response 
	response  add: 'Entrada por Transferencia de ' , self  value asString ,'.'.! !

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 15:52:21'!
FAILURE!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 15:53:06' prior: 50711153!
test05AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Entrada por Transferencia de 100.'with:'balance = 100'.


self assert: response
	equals: accountDeposit accountSummary
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 15:53:26' prior: 50711288!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit response |
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .

response := OrderedCollection with:'Deposito por 100.' with:'Extraccion por 50.' with:'Salida por Transferencia de 20.' with: 'Entrada por Transferencia de 30.' with:'balance = 60'.


self assert: response
	equals: account accountSummary

! !

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 15:53:31'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 15:54:14'!
ERROR!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 15:54:14'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 15:54:14'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 15:54:14'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 15:54:14'!
ERROR!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:54:14'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 15:54:29'!
PASSED!
!Portfolio methodsFor: 'reports' stamp: 'lp 5/30/2023 15:55:07' prior: 50710709 overrides: 50704542!
accountSummary
|accountSummary|
	accountSummary := OrderedCollection new.
	accountSummary addAll: self calculateAccountSummary .
	^ accountSummary add: 'balance = ', self balance asString! !
!Portfolio methodsFor: 'reports' stamp: 'lp 5/30/2023 15:55:34' prior: 50710716!
calculateAccountSummary
	|report|

	report := OrderedCollection new.
	^accounts inject:  '' into: [:anAccountSummary :anAccount |
		anAccountSummary  add:  anAccount  calculateAccountSummary 
		
		]  ! !
!Portfolio methodsFor: 'reports' stamp: 'lp 5/30/2023 15:55:49' prior: 50713507!
calculateAccountSummary
	|report|

	report := OrderedCollection new.
	accounts inject:  report into: [:anAccountSummary :anAccount |
		anAccountSummary  add:  anAccount  calculateAccountSummary 
		
		] .
	^ report.! !
!Portfolio methodsFor: 'reports' stamp: 'lp 5/30/2023 15:56:08' prior: 50713516!
calculateAccountSummary
	|report|

	report := OrderedCollection new.
	accounts do: [ :anAccount |
		report  add:  anAccount  calculateAccountSummary 
		
		] .
	^ report.! !
!Portfolio methodsFor: 'reports' stamp: 'lp 5/30/2023 15:56:11' prior: 50713526!
calculateAccountSummary
	|report|

	report := OrderedCollection new.
	accounts do: [ :anAccount |
		report  addAll:  anAccount  calculateAccountSummary 
		
		] .
	^ report.! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 15:56:46' prior: 50703148!
test07emptyPortfolioAccountSumaryGivesBalance0
|portfolio report|

portfolio := Portfolio new.
report := OrderedCollection new with:'balance = 0'.

self assert: report
	equals: portfolio accountSummary
! !

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 15:56:48'!
ERROR!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 15:56:48'!
ERROR!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 15:56:59' prior: 50713543!
test07emptyPortfolioAccountSumaryGivesBalance0
|portfolio report|

portfolio := Portfolio new.
report := OrderedCollection  with:'balance = 0'.

self assert: report
	equals: portfolio accountSummary
! !

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 15:57:00'!
FAILURE!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 15:57:00'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'lp 5/30/2023 15:57:34' prior: 50713498 overrides: 50704542!
accountSummary
|accountSummary|
	accountSummary := OrderedCollection new.
	accountSummary addAll: self calculateAccountSummary .
	accountSummary add: 'balance = ', self balance asString.
	^accountSummary ! !

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 15:57:39'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 15:58:14' prior: 50703492!
test08PortfolioWithAnAccountAccountSumary
| portfolio account report|
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolio add: account .

report := OrderedCollection with:'Extraccion por 100.' with:
'balance = -100'.
self assert: report

	equals: portfolio accountSummary
! !

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 15:58:16'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 15:59:53' prior: 50703461!
test09PortfolioWithAnotherPortfolioAccountSumary
|portfolioToAdd portfolio account report |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolioToAdd := Portfolio new.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .

report:= OrderedCollection with:'Extraccion por 100.' with:'balance = -100'.


self assert: report
	equals: portfolio accountSummary
! !

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 15:59:56'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 15:59:56'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 15:59:56'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 15:59:56'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 15:59:57'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 15:59:57'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 15:59:57'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 15:59:57'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 15:59:58'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 15:59:58'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 15:59:58'!
FAILURE!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 15:59:58'!
FAILURE!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 15:59:58'!
FAILURE!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 15:59:59'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 15:59:59'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 15:59:59'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 15:59:59'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:00:00'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:00:00'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:00:00'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 16:00:05'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:00:20' prior: 50703773!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

report:= OrderedCollection with:'Extraccion por 100.' with:'balance = -100'.

self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:00:48' prior: 50713700!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10' with:'balance = -90'.

self assert: 
report
	equals: portfolio accountSummary
! !

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:00:50'!
FAILURE!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:00:50'!
FAILURE!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:02:08' prior: 50713722!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self assert: 
report
	equals: portfolio accountSummary
! !

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:02:09'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:02:09'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:02:09'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:02:10'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 16:02:10'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 16:02:10'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 16:02:10'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 16:02:11'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 16:02:11'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 16:02:11'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:02:11'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:02:11'!
FAILURE!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 16:02:12'!
FAILURE!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:02:12'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:02:12'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:02:12'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:02:13'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:02:13'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:02:13'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:02:13'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:02:26' prior: 50703975!
test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

portfolioChild add: portfolioGrandson .
portfolio add: portfolioChild .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self assert: 
'Extraccion por 100.',String crString ,
'Deposito por 10.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:02:35'!
FAILURE!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:02:35'!
FAILURE!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:02:45' prior: 50713841!
test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

portfolioChild add: portfolioGrandson .
portfolio add: portfolioChild .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self assert: 
report
	equals: portfolio accountSummary
! !

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:02:46'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:02:46'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:02:46'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:02:47'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 16:02:47'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 16:02:47'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 16:02:47'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 16:02:48'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 16:02:48'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 16:02:48'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:02:48'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:02:48'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 16:02:49'!
FAILURE!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:02:49'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:02:49'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:02:49'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:02:50'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:02:50'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:02:50'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:02:50'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 16:02:51'!
FAILURE!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:03:06' prior: 50713878!
test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

portfolioChild add: portfolioGrandson .
portfolio add: portfolioChild .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self assert: report
	equals: portfolio accountSummary
! !

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:04:22'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:04:34' prior: 50704276!
test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary
| portfolio portfolioChild accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.
portfolio := Portfolio new.

portfolioChild add: accountWithDraw .
portfolio add: accountDeposit .


portfolio add: portfolioChild .
report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self assert: 
'Deposito por 10.',String crString ,
'Extraccion por 100.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:05:02' prior: 50714011!
test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary
| portfolio portfolioChild accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.
portfolio := Portfolio new.

portfolioChild add: accountWithDraw .
portfolio add: accountDeposit .


portfolio add: portfolioChild .
report:= OrderedCollection with:'Deposito por 10.' with:'Extraccion por 100.' with:'balance = -90'.

self assert: 
'Deposito por 10.',String crString ,
'Extraccion por 100.',String crString ,
'balance = -90'
	equals: portfolio accountSummary
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:05:08' prior: 50714037!
test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary
| portfolio portfolioChild accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.
portfolio := Portfolio new.

portfolioChild add: accountWithDraw .
portfolio add: accountDeposit .


portfolio add: portfolioChild .
report:= OrderedCollection with:'Deposito por 10.' with:'Extraccion por 100.' with:'balance = -90'.

self assert: 
report
	equals: portfolio accountSummary
! !

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 16:05:10'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/30/2023 16:06:11' prior: 50711593 overrides: 50706021!
netTransfer
|response|
response := 0.
transactions  do: 	[ :aTransaction | 
	aTransaction reportNetTransfer: response.
	].
^response! !

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:06:16'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:06:18'!
ERROR!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:06:18'!
ERROR!
!DepositLeg methodsFor: 'netTransfer' stamp: 'lp 5/30/2023 16:06:33'!
reportNetTransfer: response 
	self shouldBeImplemented.! !
!DepositLeg methodsFor: 'netTransfer' stamp: 'lp 5/30/2023 16:08:03' prior: 50714109!
reportNetTransfer: response 
	^response + transferHead value! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/30/2023 16:08:54' prior: 50714091 overrides: 50706021!
netTransfer

^transactions  inject:0 into: 	[:response :aTransaction | 
	aTransaction reportNetTransfer: response.
	].! !

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:08:58'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:09:00'!
ERROR!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:09:00'!
ERROR!
!ExtractionLeg methodsFor: 'net Transfer' stamp: 'lp 5/30/2023 16:09:10'!
reportNetTransfer: response 
	self shouldBeImplemented.! !
!ExtractionLeg methodsFor: 'net Transfer' stamp: 'lp 5/30/2023 16:09:26' prior: 50714138!
reportNetTransfer: response 
	^ response + transferHead value.! !

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:09:28'!
FAILURE!
!ExtractionLeg methodsFor: 'net Transfer' stamp: 'lp 5/30/2023 16:09:48' prior: 50714143!
reportNetTransfer: response 
	^ response - transferHead value.! !

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:09:51'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:09:57'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:09:59'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:10:01'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:10:02'!
ERROR!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:10:02'!
ERROR!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:10:20'!
ERROR!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:10:20'!
ERROR!
!Deposit methodsFor: 'net Transfer' stamp: 'lp 5/30/2023 16:10:31'!
reportNetTransfer: response 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'net Transfer' stamp: 'lp 5/30/2023 16:10:40' prior: 50714190!
reportNetTransfer: response 
	^0! !

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:10:52'!
ERROR!
!Withdraw methodsFor: 'net transfer' stamp: 'lp 5/30/2023 16:10:58'!
reportNetTransfer: response 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'net transfer' stamp: 'lp 5/30/2023 16:11:05' prior: 50714203!
reportNetTransfer: response 
	^0! !

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:11:07'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:11:23'!
PASSED!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'lp 5/30/2023 16:12:20'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'lp 5/30/2023 16:12:43'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:13:08'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:13:08'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:14:06' prior: 50710782!
test01empyAccountSummaryReportGivesOnlyTheBalance


self assert: (OrderedCollection with: 'balance = 0') equals: (AccountSummary for: ReceptiveAccount new) accountSummary
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:14:10' prior: 50714377!
test01empyAccountSummaryReportGivesOnlyTheBalance


self assert: (OrderedCollection with: 'balance = 0') equals: (AccountSummary for: ReceptiveAccount new) report
! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:15:07'!
ERROR!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:15:07'!
ERROR!
!AccountSummary class methodsFor: 'instance creation' stamp: 'lp 5/30/2023 16:15:13'!
for: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount ! !
!AccountSummary class methodsFor: 'instance creation' stamp: 'lp 5/30/2023 16:15:27' prior: 50714402!
for: aReceptiveAccount 
	^self new initializeFor: aReceptiveAccount ! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:15:28'!
ERROR!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'lp 5/30/2023 16:15:43'!
Report subclass: #AccountSummary
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'initialization' stamp: 'lp 5/30/2023 16:15:43'!
initializeFor: aReceptiveAccount 
	self shouldBeImplemented.
	receptiveAccount := aReceptiveAccount.! !
!AccountSummary methodsFor: 'initialization' stamp: 'lp 5/30/2023 16:15:49' prior: 50714428!
initializeFor: aReceptiveAccount 
	receptiveAccount := aReceptiveAccount.! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:15:51'!
ERROR!
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:16:05'!
report
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:17:13' prior: 50714444!
report
	^ OrderedCollection with: 'balance = ' , receptiveAccount balance! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:17:15'!
ERROR!
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:17:26' prior: 50714448!
report
	^ OrderedCollection with: 'balance = ' , receptiveAccount balance asString ! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:17:27'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:25:43'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:26:07' prior: 50713123!
test02AccountSummaryGivesADeposit
|account response|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .
response := OrderedCollection with: 'Deposito por 100.' with:'balance = 100'.


self assert: response equals: account accountSummary 
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:26:51' prior: 50714470!
test02AccountSummaryGivesADeposit
|account response|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .
response := OrderedCollection with: 'Deposito por 100.' with:'balance = 100'.


self assert: response equals:  (AccountSummary for: account ) report
! !

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:26:54'!
FAILURE!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:26:54'!
FAILURE!
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:29:14' prior: 50714457!
report
	^ receptiveAccount calculateAccountSummary add:( OrderedCollection with: 'balance = ' , receptiveAccount balance asString )! !
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:29:25' prior: 50714500!
report
	^ receptiveAccount calculateAccountSummary add: 'balance = ' , receptiveAccount balance asString ! !

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:29:32'!
FAILURE!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:29:32'!
FAILURE!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:30:14'!
FAILURE!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:30:14'!
FAILURE!

receptiveAccount calculateAccountSummary!

receptiveAccount calculateAccountSummary add: 'balance = ' , receptiveAccount balance asString !
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:31:02' prior: 50714507!
report
	^ receptiveAccount calculateAccountSummary add:( 'balance = ' , receptiveAccount balance asString )! !

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:31:03'!
FAILURE!
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:32:15' prior: 50714530!
report
|response|
	response := OrderedCollection new.
	response addAll: receptiveAccount calculateAccountSummary .
	response add:'balance = ',  receptiveAccount balance asString .
	^response
	! !

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:32:20'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:35:05' prior: 50714540!
report
|response|
	response := OrderedCollection new.
	response addAll: (receptiveAccount calculateAccountSummaryFor:self ).
	response add:'balance = ',  receptiveAccount balance asString .
	^response
	! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:35:15'!
ERROR!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:35:15'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/30/2023 16:35:25'!
calculateAccountSummaryFor: anAccountSummary 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/30/2023 16:37:52' prior: 50714568!
calculateAccountSummaryFor: anAccountSummary 
	^ self calculateAccountSummary ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/30/2023 16:38:00' prior: 50714574!
calculateAccountSummaryFor: anAccountSummary 
	^ self calculateAccountSummary.! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:38:02'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:38:05'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:38:10'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:38:10'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/30/2023 16:40:24' prior: 50714580!
calculateAccountSummaryFor: anAccountSummary 
	|response|
	response := OrderedCollection new.
	transactions  do: [:aTransaction | 
		aTransaction reportAccountSummary: response.
		].
	^response! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/30/2023 16:41:42' prior: 50714662!
calculateAccountSummaryFor: anAccountSummary 

	transactions  do: [:aTransaction | 
		aTransaction reportToAccountSummary:anAccountSummary .
		].
! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'lp 5/30/2023 16:42:08' prior: 50714671!
calculateAccountSummaryFor: anAccountSummary 
	transactions  do: [:aTransaction | 
		aTransaction reportToAccountSummary:anAccountSummary .
		].
! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'lp 5/30/2023 16:44:59'!
Report subclass: #AccountSummary
	instanceVariableNames: 'receptiveAccount report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:44:57' prior: 50714552!
report

	report := OrderedCollection new.
	report add:'balance = ',  receptiveAccount balance asString .
	^report
	! !
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:45:08' prior: 50714695!
report

	report := OrderedCollection new.
	receptiveAccount calculateAccountSummaryFor: self.
	report add:'balance = ',  receptiveAccount balance asString .
	^report
	! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:45:20'!
ERROR!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:45:20'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:45:20'!
ERROR!
!Deposit methodsFor: 'report' stamp: 'lp 5/30/2023 16:45:38'!
reportToAccountSummary: anAccountSummary 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'report' stamp: 'lp 5/30/2023 16:46:34' prior: 50714781!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportThisDepositWith:value.! !

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:46:38'!
ERROR!
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:46:44'!
reportThisDepositWith: aValue 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:47:25' prior: 50714795!
reportThisDepositWith: aValue 
	report add: 'Deposito por ', aValue asString.! !

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:47:32'!
FAILURE!
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:47:52' prior: 50714800!
reportThisDepositWith: aValue 
	report add: 'Deposito por ', aValue asString,'.'.! !

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:47:59'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:48:16'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:48:31'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:48:32'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:48:32'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:48:32'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:48:32'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:48:32'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:48:32'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:50:34' prior: 50713209!
test03AccountSummaryGivesAWithdraw
|account response |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .
response := OrderedCollection with: 'Extraccion por 100.' with:'balance = -100'.


self assert: response equals:  (AccountSummary for: account ) report! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:50:47' prior: 50713263!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Salida por Transferencia de 100.' with:'balance = -100'.

self assert: response equals:  (AccountSummary for: accountExtracted ) report
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:50:52' prior: 50713383!
test05AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Entrada por Transferencia de 100.'with:'balance = 100'.


self assert: response equals:  (AccountSummary for: accountDeposit ) report! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:52:03'!
assertIfTheAccountSummaryOf: response isEqualTo: accountDeposit

	^ self assert: response equals:  (AccountSummary for: accountDeposit ) report! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:52:03' prior: 50714918!
test05AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Entrada por Transferencia de 100.'with:'balance = 100'.


self assertIfTheAccountSummaryOf: response isEqualTo: accountDeposit! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:52:17' prior: 50714902!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Salida por Transferencia de 100.' with:'balance = -100'.


self assertIfTheAccountSummaryOf: response isEqualTo: accountExtracted 
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:52:26' prior: 50714890!
test03AccountSummaryGivesAWithdraw
|account response |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .
response := OrderedCollection with: 'Extraccion por 100.' with:'balance = -100'.


self assertIfTheAccountSummaryOf: response isEqualTo: account ! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 16:52:31' prior: 50714482!
test02AccountSummaryGivesADeposit
|account response|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .
response := OrderedCollection with: 'Deposito por 100.' with:'balance = 100'.


self assertIfTheAccountSummaryOf: response isEqualTo: account ! !

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:52:44'!
ERROR!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:52:44'!
ERROR!
!Withdraw methodsFor: 'report' stamp: 'lp 5/30/2023 16:53:04'!
reportToAccountSummary: anAccountSummary 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'report' stamp: 'lp 5/30/2023 16:53:35' prior: 50715003!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportThisWithdrawWith: value.! !

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:54:54'!
ERROR!
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:55:00'!
reportThisWithdrawWith: aValue 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:55:22' prior: 50715017!
reportThisWithdrawWith: aValue 
	report add: 'Extraccion por ', aValue asString,'.'.! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:55:25'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:55:25'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:55:25'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 16:55:25'!
ERROR!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 16:55:25'!
ERROR!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:55:26'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 16:55:29'!
ERROR!
!ExtractionLeg methodsFor: 'report' stamp: 'lp 5/30/2023 16:55:39'!
reportToAccountSummary: anAccountSummary 
	self shouldBeImplemented.! !
!ExtractionLeg methodsFor: 'report' stamp: 'lp 5/30/2023 16:56:12' prior: 50715099!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportExitTransferWith: transferHead value.! !

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 16:56:14'!
ERROR!
!Report methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 16:56:23'!
reportExitTransferWith: aRenameMe1 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:57:02' overrides: 50715113!
reportExitTransferWith: aExtracionLegValue 
	self shouldBeImplemented.! !

!methodRemoval: Report #reportExitTransferWith: stamp: 'lp 5/30/2023 16:57:08'!
reportExitTransferWith: aRenameMe1 
	self shouldBeImplemented.!
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:57:40' prior: 50715118!
reportExitTransferWith: aExtracionLegValue 
	report add: 'Salida por Transferencia de ', aExtracionLegValue asString,'.'.! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 16:57:43'!
ERROR!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:57:43'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 16:57:43'!
ERROR!
!DepositLeg methodsFor: 'report' stamp: 'lp 5/30/2023 16:57:51'!
reportToAccountSummary: anAccountSummary 
	self shouldBeImplemented.! !
!DepositLeg methodsFor: 'report' stamp: 'lp 5/30/2023 16:58:09' prior: 50715206!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportDepositLegWith: transferHead value.! !

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 16:58:12'!
ERROR!
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:58:17'!
reportDepositLegWith: aRenameMe1 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:58:40' prior: 50715220!
reportDepositLegWith: aDepositLegValue
	report add: aDepositLegValue .
	! !
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:59:10' prior: 50715225!
reportDepositLegWith: aDepositLegValue
	report add: 'Entrada por Transferencia de ', aDepositLegValue asString,'.'.! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 16:59:14'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 16:59:14'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 16:59:14'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 16:59:14'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 16:59:14'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 16:59:14'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 16:59:14'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 16:59:14'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 16:59:14'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 16:59:15'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 16:59:15'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 16:59:15'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:59:15'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 16:59:15'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:59:15'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 16:59:15'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:59:15'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:59:15'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 16:59:15'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'lp 5/30/2023 16:59:49'!
reportExtractionTransferWith: aExtracionLegValue 
	report add: 'Salida por Transferencia de ', aExtracionLegValue asString,'.'.! !
!ExtractionLeg methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 16:59:49' prior: 50715104!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportExtractionTransferWith: transferHead value.! !

!methodRemoval: AccountSummary #reportExitTransferWith: stamp: 'lp 5/30/2023 16:59:49'!
reportExitTransferWith: aExtracionLegValue 
	report add: 'Salida por Transferencia de ', aExtracionLegValue asString,'.'.!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:03:27' prior: 50713560!
test07emptyPortfolioAccountSumaryGivesBalance0
|portfolio report|

portfolio := Portfolio new.
report := OrderedCollection  with:'balance = 0'.

self assert: report equals: portfolio accountSummary
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:03:33' prior: 50713590!
test08PortfolioWithAnAccountAccountSumary
| portfolio account report|
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolio add: account .

report := OrderedCollection with:'Extraccion por 100.' with:
'balance = -100'.
self assert: report equals: portfolio accountSummary
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:03:40' prior: 50713607!
test09PortfolioWithAnotherPortfolioAccountSumary
|portfolioToAdd portfolio account report |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolioToAdd := Portfolio new.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .

report:= OrderedCollection with:'Extraccion por 100.' with:'balance = -100'.


self assert: report equals: portfolio accountSummary
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:03:48' prior: 50713749!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self assert: report equals: portfolio accountSummary
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:03:55' prior: 50713981!
test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

portfolioChild add: portfolioGrandson .
portfolio add: portfolioChild .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self assert: report equals: portfolio accountSummary
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:04:04' prior: 50714063!
test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary
| portfolio portfolioChild accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.
portfolio := Portfolio new.

portfolioChild add: accountWithDraw .
portfolio add: accountDeposit .


portfolio add: portfolioChild .
report:= OrderedCollection with:'Deposito por 10.' with:'Extraccion por 100.' with:'balance = -90'.

self assert: report equals: portfolio accountSummary
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:04:22'!
m1: portfolio m2: report

	^ self assert: report equals: portfolio accountSummary! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:04:22' prior: 50715352!
test09PortfolioWithAnotherPortfolioAccountSumary
|portfolioToAdd portfolio account report |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolioToAdd := Portfolio new.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .

report:= OrderedCollection with:'Extraccion por 100.' with:'balance = -100'.


self m1: portfolio m2: report
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:04:22' prior: 50715338!
test08PortfolioWithAnAccountAccountSumary
| portfolio account report|
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolio add: account .

report := OrderedCollection with:'Extraccion por 100.' with:
'balance = -100'.
self m1: portfolio m2: report
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:04:23' prior: 50715369!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self m1: portfolio m2: report
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:04:23' prior: 50715415!
test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary
| portfolio portfolioChild accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.
portfolio := Portfolio new.

portfolioChild add: accountWithDraw .
portfolio add: accountDeposit .


portfolio add: portfolioChild .
report:= OrderedCollection with:'Deposito por 10.' with:'Extraccion por 100.' with:'balance = -90'.

self m1: portfolio m2: report
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:04:23' prior: 50715328!
test07emptyPortfolioAccountSumaryGivesBalance0
|portfolio report|

portfolio := Portfolio new.
report := OrderedCollection  with:'balance = 0'.

self m1: portfolio m2: report
! !
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:04:23' prior: 50715389!
test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

portfolioChild add: portfolioGrandson .
portfolio add: portfolioChild .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self m1: portfolio m2: report
! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:04:53'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:04:53'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:04:53'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:04:54'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:04:54'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:04:54'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:04:54'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:04:55'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:04:55'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:04:55'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:04:55'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:04:56'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:04:56'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:04:56'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:04:56'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:04:57'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:04:57'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:04:57'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:04:57'!
PASSED!

!methodRemoval: AccountTest #m1:m2: stamp: 'lp 5/30/2023 17:05:54'!
m1: portfolio m2: report

	^ self assert: report equals: portfolio accountSummary!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:06:22'!
m1: response m2: accountDeposit

	^ self assert: response equals:  (AccountSummary for: accountDeposit ) report! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:06:22' prior: 50714942!
test05AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Entrada por Transferencia de 100.'with:'balance = 100'.


self m1: response m2: accountDeposit! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:06:22' prior: 50714974!
test03AccountSummaryGivesAWithdraw
|account response |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .
response := OrderedCollection with: 'Extraccion por 100.' with:'balance = -100'.


self m1: response m2: account ! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:06:22' prior: 50714958!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Salida por Transferencia de 100.' with:'balance = -100'.


self m1: response m2: accountExtracted 
! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:06:22' prior: 50714986!
test02AccountSummaryGivesADeposit
|account response|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .
response := OrderedCollection with: 'Deposito por 100.' with:'balance = 100'.


self m1: response m2: account ! !

!methodRemoval: AccountTest #assertIfTheAccountSummaryOf:isEqualTo: stamp: 'lp 5/30/2023 17:06:22'!
assertIfTheAccountSummaryOf: response isEqualTo: accountDeposit

	^ self assert: response equals:  (AccountSummary for: accountDeposit ) report!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:07:18'!
assertIfThisReport: response isTheAccountSummaryOf: accountDeposit

	^ self assert: response equals:  (AccountSummary for: accountDeposit ) report! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:07:18' prior: 50715473!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self assertIfThisReport: portfolio isTheAccountSummaryOf: report
! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:07:18' prior: 50715492!
test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary
| portfolio portfolioChild accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.
portfolio := Portfolio new.

portfolioChild add: accountWithDraw .
portfolio add: accountDeposit .


portfolio add: portfolioChild .
report:= OrderedCollection with:'Deposito por 10.' with:'Extraccion por 100.' with:'balance = -90'.

self assertIfThisReport: portfolio isTheAccountSummaryOf: report
! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:07:18' prior: 50715460!
test08PortfolioWithAnAccountAccountSumary
| portfolio account report|
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolio add: account .

report := OrderedCollection with:'Extraccion por 100.' with:
'balance = -100'.
self assertIfThisReport: portfolio isTheAccountSummaryOf: report
! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:07:18' prior: 50715523!
test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

portfolioChild add: portfolioGrandson .
portfolio add: portfolioChild .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self assertIfThisReport: portfolio isTheAccountSummaryOf: report
! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:07:19' prior: 50715628!
test05AccountSummaryGivesAInTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Entrada por Transferencia de 100.'with:'balance = 100'.


self assertIfThisReport: response isTheAccountSummaryOf: accountDeposit! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:07:19' prior: 50715643!
test03AccountSummaryGivesAWithdraw
|account response |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .
response := OrderedCollection with: 'Extraccion por 100.' with:'balance = -100'.


self assertIfThisReport: response isTheAccountSummaryOf: account ! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:07:19' prior: 50715444!
test09PortfolioWithAnotherPortfolioAccountSumary
|portfolioToAdd portfolio account report |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolioToAdd := Portfolio new.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .

report:= OrderedCollection with:'Extraccion por 100.' with:'balance = -100'.


self assertIfThisReport: portfolio isTheAccountSummaryOf: report
! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:07:19' prior: 50715514!
test07emptyPortfolioAccountSumaryGivesBalance0
|portfolio report|

portfolio := Portfolio new.
report := OrderedCollection  with:'balance = 0'.

self assertIfThisReport: portfolio isTheAccountSummaryOf: report
! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:07:20' prior: 50715654!
test04AccountSummaryGivesAExitTransfer
|accountExtracted accountDeposit response |
accountExtracted := ReceptiveAccount  new.
accountDeposit := ReceptiveAccount new.

Transfer theAmmount: 100 from: accountExtracted  to: accountDeposit .

response := OrderedCollection with: 'Salida por Transferencia de 100.' with:'balance = -100'.


self assertIfThisReport: response isTheAccountSummaryOf: accountExtracted 
! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:07:20' prior: 50715669!
test02AccountSummaryGivesADeposit
|account response|
account := ReceptiveAccount  new.
Deposit register: 100 on: account .
response := OrderedCollection with: 'Deposito por 100.' with:'balance = 100'.


self assertIfThisReport: response isTheAccountSummaryOf: account ! !

!methodRemoval: AccountTest #m1:m2: stamp: 'lp 5/30/2023 17:07:20'!
m1: response m2: accountDeposit

	^ self assert: response equals:  (AccountSummary for: accountDeposit ) report!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:07:23'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:07:23'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:07:24'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:07:24'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:07:24'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:07:24'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:07:24'!
ERROR!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:07:24'!
ERROR!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:07:24'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:07:24'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:07:24'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:07:24'!
ERROR!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:07:24'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:07:24'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:07:24'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:07:24'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:07:24'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:07:24'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:07:24'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:08:03'!
ERROR!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:08:42' prior: 50715823!
test07emptyPortfolioAccountSumaryGivesBalance0
|portfolio report|

portfolio := Portfolio new.
report := OrderedCollection  with:'balance = 0'.

self assertIfThisReport: report isTheAccountSummaryOf: portfolio 
! !

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:08:44'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'lp 5/30/2023 17:09:04'!
calculateAccountSummaryFor: anAccountSummary 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'report' stamp: 'lp 5/30/2023 17:10:06' prior: 50715952!
calculateAccountSummaryFor: anAccountSummary 
	accounts do: [ :anAccount |
		  anAccount  calculateAccountSummary 
		
		] .! !

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:10:08'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:10:12'!
ERROR!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:10:12'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:10:12'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:10:12'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:10:12'!
ERROR!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:12'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:27'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:10:27'!
ERROR!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:10:27'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:10:27'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:10:27'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:10:27'!
ERROR!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:10:33' prior: 50715738!
test08PortfolioWithAnAccountAccountSumary
| portfolio account report|
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolio add: account .

report := OrderedCollection with:'Extraccion por 100.' with:
'balance = -100'.
self assertIfThisReport: report isTheAccountSummaryOf: portfolio
! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:10:34'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:10:34'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:10:34'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:10:34'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:10:34'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:10:34'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:10:35'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:10:35'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:35'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:35'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:10:36'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:36'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:36'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:10:36'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:10:37'!
FAILURE!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:10:37'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:10:37'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:10:37'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:10:37'!
ERROR!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:10:44'!
FAILURE!

----SNAPSHOT----(30 May 2023 17:10:49) CuisUniversity-5706.image priorSource: 12203000!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:11:11'!
FAILURE!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:11:32'!
PASSED!

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:11:47'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:11:47'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:11:47'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:11:47'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:11:47'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:11:48'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:11:48'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:11:48'!
FAILURE!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:11:48'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:11:48'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:11:49'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:11:49'!
ERROR!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:11:49'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:11:49'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:11:49'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:11:49'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:11:49'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:11:49'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:11:49'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:11:57'!
FAILURE!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:12:33'!
FAILURE!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:12:33'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'lp 5/30/2023 17:13:17' prior: 50715957!
calculateAccountSummaryFor: anAccountSummary 
	accounts do: [ :anAccount |
		  anAccount  calculateAccountSummaryFor:anAccountSummary 
		
		] .! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:13:20'!
ERROR!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:13:20'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:13:20'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:13:20'!
ERROR!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:20'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:21'!
PASSED!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:13:31' prior: 50715806!
test09PortfolioWithAnotherPortfolioAccountSumary
|portfolioToAdd portfolio account report |
account := ReceptiveAccount  new.
Withdraw register: 100 on: account .

portfolio := Portfolio new.
portfolioToAdd := Portfolio new.
portfolioToAdd  add: account .
portfolio add: portfolioToAdd .

report:= OrderedCollection with:'Extraccion por 100.' with:'balance = -100'.


self assertIfThisReport: report isTheAccountSummaryOf: portfolio
! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:13:32'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:13:32'!
ERROR!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:13:32'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:13:32'!
ERROR!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:13:40' prior: 50715695!
test10PortfolioWithTwoAccountsAccountSumary
| portfolio accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self assertIfThisReport: report isTheAccountSummaryOf: portfolio
! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:13:41'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:13:41'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:13:41'!
ERROR!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:13:51' prior: 50715752!
test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary
| portfolio portfolioChild portfolioGrandson accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.

portfolioGrandson := Portfolio new.

portfolio := Portfolio new.
portfolio add: accountWithDraw .
portfolio add: accountDeposit .

portfolioChild add: portfolioGrandson .
portfolio add: portfolioChild .

report:= OrderedCollection with:'Extraccion por 100.' with:'Deposito por 10.' with:'balance = -90'.

self assertIfThisReport: report isTheAccountSummaryOf: portfolio
! !

!testRun: #AccountTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:13:52'!
PASSED!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:13:52'!
ERROR!

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:13:52'!
ERROR!
!AccountTest methodsFor: 'account summary test' stamp: 'lp 5/30/2023 17:14:04' prior: 50715715!
test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary
| portfolio portfolioChild accountDeposit accountWithDraw report |
accountWithDraw := ReceptiveAccount  new.
Withdraw register: 100 on: accountWithDraw .

accountDeposit := ReceptiveAccount  new.
Deposit register: 10 on: accountDeposit .

portfolioChild:=Portfolio new.
portfolio := Portfolio new.

portfolioChild add: accountWithDraw .
portfolio add: accountDeposit .


portfolio add: portfolioChild .
report:= OrderedCollection with:'Deposito por 10.' with:'Extraccion por 100.' with:'balance = -90'.

self assertIfThisReport: report isTheAccountSummaryOf: portfolio
! !

!testRun: #AccountTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:14:06'!
PASSED!

----SNAPSHOT----(30 May 2023 17:14:09) CuisUniversity-5706.image priorSource: 12305266!
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:15:41' prior: 50704472!
test13emptyAccountShouldGive0NetTransfer
self assert: 0 equals:  ReceptiveAccount  new netTransfer
! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:16:18'!
m1: account

	^ self assert: 100 equals: account netTransfer! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:16:18' prior: 50704600!
test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer
|account transfer|
account := ReceptiveAccount  new. 
transfer:= Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
self m1: account
! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:16:25' prior: 50716671!
test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer
|account transfer|
account := ReceptiveAccount  new. 
transfer:= Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
self assert: 100 equals: account netTransfer

! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:17:56'!
assertTheNetTransferOf: portfolio isEqualTo: account

	^ self assert: account  netTransfer  equals: portfolio netTransfer! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:17:56' prior: 50706228!
test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer
|account innerPortfolio  portfolio|
account := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
Transfer theAmmount:  50  from:  account to: ReceptiveAccount  new.
innerPortfolio  := Portfolio  new add: account .  
portfolio  := Portfolio  new add: innerPortfolio . 
self assertTheNetTransferOf: portfolio isEqualTo: account
! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:17:56' prior: 50706002!
test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer
|account portfolio |
account := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
Transfer theAmmount:  50  from:  account to: ReceptiveAccount  new.
portfolio := Portfolio  new add: account .  

self assertTheNetTransferOf: portfolio isEqualTo: account
! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:18:32' prior: 50716699!
test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer
|account innerPortfolio  portfolio|
account := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
Transfer theAmmount:  50  from:  account to: ReceptiveAccount  new.
innerPortfolio  := Portfolio  new add: account .  
portfolio  := Portfolio  new add: innerPortfolio . 
self assertTheNetTransferOf: portfolio isEqualTo: account 
! !

!classDefinition: #NetTransfer category: 'Portfolio-Solucion' stamp: 'lp 5/30/2023 17:19:48'!
Object subclass: #NetTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:19:43' prior: 50716660!
test13emptyAccountShouldGive0NetTransfer
self assertTheNetTransferOf: (NetTransfer for: AccountTransaction new)isEqualTo: 0.
! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:20:39'!
assertTheNetTransferOf: portfolio isEqualToTheNetTransferOf: account

	^ self assert: account  netTransfer  equals: portfolio netTransfer! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:20:39' prior: 50716717!
test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer
|account portfolio |
account := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
Transfer theAmmount:  50  from:  account to: ReceptiveAccount  new.
portfolio := Portfolio  new add: account .  

self assertTheNetTransferOf: portfolio isEqualToTheNetTransferOf: account
! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:20:39' prior: 50716757!
test13emptyAccountShouldGive0NetTransfer
self assertTheNetTransferOf: (NetTransfer for: AccountTransaction new)isEqualToTheNetTransferOf: 0.
! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:20:39' prior: 50716732!
test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer
|account innerPortfolio  portfolio|
account := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
Transfer theAmmount:  50  from:  account to: ReceptiveAccount  new.
innerPortfolio  := Portfolio  new add: account .  
portfolio  := Portfolio  new add: innerPortfolio . 
self assertTheNetTransferOf: portfolio isEqualToTheNetTransferOf: account 
! !

!methodRemoval: AccountTest #assertTheNetTransferOf:isEqualTo: stamp: 'lp 5/30/2023 17:20:39'!
assertTheNetTransferOf: portfolio isEqualTo: account

	^ self assert: account  netTransfer  equals: portfolio netTransfer!
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:21:07'!
assertTheNetTransferOf: portfolio isEqualTo:aNetTransferValue

	^ self assert: aNetTransferValue  netTransfer  equals: portfolio netTransfer! !

!methodRemoval: AccountTest #m1: stamp: 'lp 5/30/2023 17:21:11'!
m1: account

	^ self assert: 100 equals: account netTransfer!
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:21:21' prior: 50716788!
test13emptyAccountShouldGive0NetTransfer
self assertTheNetTransferOf: (NetTransfer for: AccountTransaction new)isEqualTo: 0.
! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:21:46' prior: 50716832!
test13emptyAccountShouldGive0NetTransfer
self assertTheNetTransferOf: ( ReceptiveAccount new)isEqualTo: 0.
! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:21:49' prior: 50716839!
test13emptyAccountShouldGive0NetTransfer
self assertTheNetTransferOf: ( ReceptiveAccount new) isEqualTo: 0.
! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:22:02' prior: 50716820!
assertTheNetTransferOf: anAccount isEqualTo:aNetTransferValue

	^ self assert: aNetTransferValue  netTransfer  equals: anAccount netTransfer! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:22:21' prior: 50716853!
assertTheNetTransferOf: anAccount isEqualTo:aNetTransferValue

	^ self assert: aNetTransferValue  netTransfer  equals: (NetTransfer  for: anAccount )netTransfer! !
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:22:25' prior: 50716861!
assertTheNetTransferOf: anAccount isEqualTo:aNetTransferValue

	^ self assert: aNetTransferValue  netTransfer  equals: (NetTransfer  for: anAccount ) netTransfer! !

Report subclass: #NetTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #NetTransfer category: 'Portfolio-Solucion' stamp: 'lp 5/30/2023 17:22:59'!
Report subclass: #NetTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:23:32' prior: 50716870!
assertTheNetTransferOf: anAccount isEqualTo:aNetTransferValue

	^ self assert: aNetTransferValue  report  equals: (NetTransfer  for: anAccount ) report! !

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:24:12'!
ERROR!

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:24:12'!
ERROR!
!AccountTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:24:24' prior: 50716890!
assertTheNetTransferOf: anAccount isEqualTo:aNetTransferValue

	^ self assert: aNetTransferValue   equals: (NetTransfer  for: anAccount ) report! !

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:24:26'!
ERROR!
!NetTransfer class methodsFor: 'instance creation' stamp: 'lp 5/30/2023 17:24:35'!
for: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount ! !
!NetTransfer class methodsFor: 'instance creation' stamp: 'lp 5/30/2023 17:24:40' prior: 50716916!
for: aReceptiveAccount 
	^self new initializeFor: aReceptiveAccount ! !

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:24:41'!
ERROR!

!classDefinition: #NetTransfer category: 'Portfolio-Solucion' stamp: 'lp 5/30/2023 17:24:50'!
Report subclass: #NetTransfer
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!NetTransfer methodsFor: 'initialization' stamp: 'lp 5/30/2023 17:24:50'!
initializeFor: aReceptiveAccount 
	self shouldBeImplemented.
	receptiveAccount := aReceptiveAccount.! !
!NetTransfer methodsFor: 'initialization' stamp: 'lp 5/30/2023 17:24:57' prior: 50716941!
initializeFor: aReceptiveAccount 
	receptiveAccount := aReceptiveAccount.! !

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:25:01'!
ERROR!
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:25:08'!
report
	self shouldBeImplemented.! !
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:25:21' prior: 50716956!
report
	^0! !

!testRun: #AccountTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:25:27'!
PASSED!
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:25:47' prior: 50716960!
report
	^ receptiveAccount netTransfer ! !

!classRenamed: #AccountTest as: #ReportTest stamp: 'lp 5/30/2023 17:26:18'!
Smalltalk renameClassNamed: #AccountTest as: #ReportTest!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:26:23'!
PASSED!

----SNAPSHOT----(30 May 2023 17:26:35) CuisUniversity-5706.image priorSource: 12320193!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:26:59'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:27:03'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:27:03'!
PASSED!
!ReportTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:27:48' prior: 50716681!
test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer
|account transfer|
account := ReceptiveAccount  new. 
transfer:= Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
self assertTheNetTransferOf: account isEqualTo:100 

! !
!ReportTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:27:57' prior: 50717118!
test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer
|account transfer|
account := ReceptiveAccount  new. 
transfer:= Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
self assertTheNetTransferOf: account isEqualTo:100. 

! !
!ReportTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:28:06' prior: 50717129!
test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer
|account |
account := ReceptiveAccount  new. 
 Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
self assertTheNetTransferOf: account isEqualTo:100. 

! !
!ReportTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:28:12' prior: 50717140!
test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer
|account |
account := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
self assertTheNetTransferOf: account isEqualTo:100. 

! !

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:28:13'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:28:13'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:28:13'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:28:13'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:28:13'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:28:13'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:28:14'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:28:14'!
PASSED!
!ReportTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:28:38' prior: 50705135!
test15AccountWithTwoTransfersGiveCorrectNetTransfer
|account |
account := ReceptiveAccount  new. 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account.  
Transfer theAmmount:  50  from:  account to: ReceptiveAccount  new.  
self assertTheNetTransferOf: account isEqualTo: 50. 
! !

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:28:39'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:28:40'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:28:40'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:28:40'!
PASSED!
!ReportTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:29:08' prior: 50705931!
test16emptyPortfolioShouldGive0NetTransfer
self assertTheNetTransferOf: Portfolio new isEqualTo: 0
! !

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:29:08'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:29:08'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:29:08'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:29:08'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:29:08'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:29:08'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:29:08'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:29:08'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:29:08'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:29:08'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:29:09'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:29:09'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:29:09'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:29:09'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:29:09'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:29:09'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:29:09'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:29:09'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:29:09'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:29:09'!
PASSED!
!ReportTest methodsFor: 'net transfer test' stamp: 'lp 5/30/2023 17:29:35' prior: 50707668!
test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer
|account1 account2   innerPortfolio  portfolio|
account1  := ReceptiveAccount  new.
account2  := ReceptiveAccount  new. 
Deposit register: 25    on: account1 .
Withdraw  register:  25  on: account1 . 
Transfer theAmmount:  100  from:  ReceptiveAccount  new  to: account1.  
Transfer theAmmount:  50  from:  account2 to: ReceptiveAccount  new.
portfolio   := Portfolio  new add: account1 .  
innerPortfolio  :=  Portfolio  new  add: account2 .
portfolio  add: innerPortfolio  .
self assertTheNetTransferOf: portfolio isEqualTo: 50 
! !

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:29:36'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:29:36'!
PASSED!
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:30:15' prior: 50716967!
report
	^ receptiveAccount netTransferFor: self.! !

!classDefinition: #NetTransfer category: 'Portfolio-Solucion' stamp: 'lp 5/30/2023 17:30:27'!
Report subclass: #NetTransfer
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:30:27' prior: 50717490!
report
	^ account netTransferFor: self.! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'lp 5/30/2023 17:30:27' prior: 50716948!
initializeFor: aReceptiveAccount 
	account := aReceptiveAccount.! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:30:39'!
ERROR!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:30:39'!
ERROR!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:30:39'!
ERROR!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:30:39'!
ERROR!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:30:39'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:30:39'!
ERROR!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:30:44'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'lp 5/30/2023 17:30:56'!
netTransferFor: aNetTransfer 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'lp 5/30/2023 17:31:36' prior: 50717584!
netTransferFor: aNetTransfer 
	
^transactions  inject:0 into: 	[:response :aTransaction | 
	aTransaction reportNetTransfer: response.
	].! !

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:31:38'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'lp 5/30/2023 17:33:17' prior: 50717589!
netTransferFor: aNetTransfer 
	
^transactions do: 	[ :aTransaction | 
	aTransaction reportNetTransfer: aNetTransfer .
	].! !
!ReceptiveAccount methodsFor: 'report' stamp: 'lp 5/30/2023 17:33:41' prior: 50717600!
netTransferFor: aNetTransfer 
	
^transactions do: 	[ :aTransaction | 
	aTransaction reportToNetTransfer: aNetTransfer .
	].! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:33:49'!
FAILURE!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:33:49'!
ERROR!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:33:49'!
ERROR!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:33:49'!
ERROR!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:33:49'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:33:49'!
ERROR!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:33:51'!
FAILURE!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:34:19'!
ERROR!
!DepositLeg methodsFor: 'report' stamp: 'lp 5/30/2023 17:34:33'!
reportToNetTransfer: aNetTransfer 
	self shouldBeImplemented.! !
!DepositLeg methodsFor: 'report' stamp: 'lp 5/30/2023 17:35:15' prior: 50717688!
reportToNetTransfer: aNetTransfer 
	aNetTransfer reportDepositLegWith: transferHead value! !

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:35:25'!
ERROR!
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:35:33'!
reportDepositLegWith: aRenameMe1 
	self shouldBeImplemented.! !
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:35:51' prior: 50717702!
reportDepositLegWith: aNetTransferValue 
	self shouldBeImplemented.! !

!classDefinition: #NetTransfer category: 'Portfolio-Solucion' stamp: 'lp 5/30/2023 17:36:28'!
Report subclass: #NetTransfer
	instanceVariableNames: 'account response'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:36:25' prior: 50717707!
reportDepositLegWith: aNetTransferValue 
	response := response + aNetTransferValue .! !

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:36:36'!
ERROR!
!NetTransfer methodsFor: 'initialization' stamp: 'lp 5/30/2023 17:37:18' prior: 50717508!
initializeFor: aReceptiveAccount 
	account := aReceptiveAccount.
	response := 0.! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:37:31'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:37:31'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:37:31'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:37:31'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:37:31'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:37:31'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:37:31'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:37:31'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:37:32'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:37:32'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:37:32'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:37:32'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:37:32'!
FAILURE!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:37:32'!
FAILURE!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:37:32'!
ERROR!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:37:32'!
ERROR!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:37:32'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:37:32'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:37:32'!
ERROR!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:37:45'!
FAILURE!
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:38:21' prior: 50717503!
report
	 account netTransferFor: self.
	^response ! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:38:24'!
ERROR!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:38:24'!
ERROR!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:38:24'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:38:24'!
ERROR!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:38:30'!
ERROR!
!ExtractionLeg methodsFor: 'report' stamp: 'lp 5/30/2023 17:38:37'!
reportToNetTransfer: aNetTransfer 
	self shouldBeImplemented.! !
!ExtractionLeg methodsFor: 'report' stamp: 'lp 5/30/2023 17:39:04' prior: 50717883!
reportToNetTransfer: aNetTransfer 
	aNetTransfer reportExtractionLegWith: transferHead value.! !

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:39:07'!
ERROR!
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:39:13'!
reportExtractionLegWith: aRenameMe1 
	self shouldBeImplemented.! !
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:39:31' prior: 50717897!
reportExtractionLegWith: aNetTransferValue 
	response := response  - aNetTransferValue ! !

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:39:33'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:39:34'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:39:35'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:39:35'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:39:35'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:39:35'!
ERROR!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:39:35'!
ERROR!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:39:36'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:39:36'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:39:36'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:39:36'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:39:36'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:39:36'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:39:36'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:39:36'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:39:36'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:39:36'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:39:36'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:39:36'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:39:37'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:39:37'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:39:37'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:39:37'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:39:37'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:39:37'!
ERROR!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:39:37'!
ERROR!

----SNAPSHOT----(30 May 2023 17:39:43) CuisUniversity-5706.image priorSource: 12332560!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:39:50'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'lp 5/30/2023 17:40:00'!
netTransferFor: aNetTransfer 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'report' stamp: 'lp 5/30/2023 17:41:17' prior: 50718053!
netTransferFor: aNetTransfer 
	accounts do: [ :anAccount |
		  anAccount  netTransferFor: aNetTransfer 
		
		] .! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:41:24'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:41:24'!
ERROR!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:41:24'!
ERROR!
!Deposit methodsFor: 'report' stamp: 'lp 5/30/2023 17:42:29'!
reportToNetTransfer: aNetTransfer 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'report' stamp: 'lp 5/30/2023 17:43:26' prior: 50718136!
reportToNetTransfer: aNetTransfer 
	aNetTransfer reportDeposit: self.! !

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:43:29'!
ERROR!
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:44:03'!
reportDeposit: aDeposit 
	self shouldBeImplemented.! !
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:44:12' prior: 50718150!
reportDeposit: aDeposit 
	! !

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:44:15'!
ERROR!
!Withdraw methodsFor: 'report' stamp: 'lp 5/30/2023 17:44:24'!
reportToNetTransfer: aNetTransfer 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'report' stamp: 'lp 5/30/2023 17:44:36' prior: 50718163!
reportToNetTransfer: aNetTransfer 
	aNetTransfer reportWithdraw: self! !

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:44:43'!
ERROR!
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:44:49'!
reportWithdraw: aWithdraw 
	self shouldBeImplemented.! !
!NetTransfer methodsFor: 'report' stamp: 'lp 5/30/2023 17:44:55' prior: 50718177!
reportWithdraw: aWithdraw 
	! !

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:44:56'!
PASSED!

----SNAPSHOT----(30 May 2023 17:45:03) CuisUniversity-5706.image priorSource: 12364680!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'lp 5/30/2023 17:45:17'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'lp 5/30/2023 17:45:17'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'lp 5/30/2023 17:45:17'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'lp 5/30/2023 17:45:17'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'lp 5/30/2023 17:45:17'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'lp 5/30/2023 17:45:17'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'lp 5/30/2023 17:45:18'!
PASSED!

----SNAPSHOT----(30 May 2023 17:45:58) CuisUniversity-5706.image priorSource: 12369260!

----SNAPSHOT----(30 May 2023 17:47:25) CuisUniversity-5706.image priorSource: 12371524!

----STARTUP---- (30 May 2023 19:46:07) as /home/juan/Escritorio/facultad/1C23/IS1/linux64 (copia)/CuisUniversity-5706.image!

!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 19:47:04' prior: 50714702!
report

	
	receptiveAccount calculateAccountSummaryFor: self.
	report add:'balance = ',  receptiveAccount balance asString .
	^report
	! !
!AccountSummary methodsFor: 'initialization' stamp: 'jb 5/30/2023 19:47:09' prior: 50714435!
initializeFor: aReceptiveAccount 
	receptiveAccount := aReceptiveAccount.
	report := OrderedCollection new.! !
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 19:47:51' prior: 50718271!
report
	report  ifNotNil: [
		receptiveAccount calculateAccountSummaryFor: self.
		].
	
	report add:'balance = ',  receptiveAccount balance asString .
	^report
	! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:47:53'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:47:56'!
PASSED!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'jb 5/30/2023 19:48:16'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'jb 5/30/2023 19:48:16' prior: 50718286!
report
	report  ifNotNil: [
		account calculateAccountSummaryFor: self.
		].
	
	report add:'balance = ',  account balance asString .
	^report
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'jb 5/30/2023 19:48:16' prior: 50718279!
initializeFor: aReceptiveAccount 
	account := aReceptiveAccount.
	report := OrderedCollection new.! !

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'jb 5/30/2023 19:49:09'!
Object subclass: #Report
	instanceVariableNames: 'account_'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'nil' stamp: 'jb 5/30/2023 19:49:16'!
initializeFor: anAccount
	account_  := anAccount ! !
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 19:49:34' prior: 50718438!
report
	report  ifNotNil: [
		account_ calculateAccountSummaryFor: self.
		].
	
	report add:'balance = ',  account balance asString .
	^report
	! !
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 19:49:38' prior: 50718464!
report
	report  ifNotNil: [
		account_ calculateAccountSummaryFor: self.
		].
	
	report add:'balance = ',  account_ balance asString .
	^report
	! !
!AccountSummary methodsFor: 'initialization' stamp: 'jb 5/30/2023 19:49:56' prior: 50718446 overrides: 50718459!
initializeFor: aReceptiveAccount 
	super initializeFor:  aReceptiveAccount  . 
	report := OrderedCollection new.! !
!NetTransfer methodsFor: 'report' stamp: 'jb 5/30/2023 19:50:05' prior: 50717807!
report
	 account_ netTransferFor: self.
	^response ! !
!NetTransfer methodsFor: 'initialization' stamp: 'jb 5/30/2023 19:50:18' prior: 50717730 overrides: 50718459!
initializeFor: aReceptiveAccount 
	super  initializeFor:  aReceptiveAccount .
	response := 0.! !

!classDefinition: #NetTransfer category: 'Portfolio-Solucion' stamp: 'jb 5/30/2023 19:50:35'!
Report subclass: #NetTransfer
	instanceVariableNames: 'response'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'jb 5/30/2023 19:50:41'!
Report subclass: #AccountSummary
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:50:47'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:50:47'!
PASSED!
!Report methodsFor: 'initializing' stamp: 'jb 5/30/2023 19:51:13'!
report
	self subclassResponsibility ! !

!classDefinition: #ReceptiveAccountTreeReport category: 'Portfolio-Solucion' stamp: 'jb 5/30/2023 19:51:59'!
Report subclass: #ReceptiveAccountTreeReport
	instanceVariableNames: 'nameforTheAccount accountF'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/30/2023 19:51:59' prior: 50709329!
isComposedBy: anAccount 
	^accountF  isComposedBy:  anAccount ! !
!ReceptiveAccountTreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/30/2023 19:51:59' prior: 50709221!
addedTo: aPortfolio 
	accountF  addedTo:  aPortfolio ! !
!ReceptiveAccountTreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/30/2023 19:51:59' prior: 50709189!
initializeNamed: aNameforTheAccount 
	accountF := ReceptiveAccount  new. 
	nameforTheAccount := aNameforTheAccount.! !

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'jb 5/30/2023 19:52:05'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'as yet unclassified' stamp: 'jb 5/30/2023 19:52:05' prior: 50718459!
initializeFor: anAccount
	account  := anAccount ! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'jb 5/30/2023 19:52:05' prior: 50718488 overrides: 50718583!
report
	 account netTransferFor: self.
	^response ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'jb 5/30/2023 19:52:05' prior: 50718472 overrides: 50718583!
report
	report  ifNotNil: [
		account calculateAccountSummaryFor: self.
		].
	
	report add:'balance = ',  account balance asString .
	^report
	! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 19:52:08'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:52:09'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 19:52:09'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:52:09'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:52:09'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:52:09'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 19:52:49'!
reportDepositLe: aDepositLeg
	report add: 'Entrada por Transferencia de ', aDepositLeg  value asString,'.'.! !
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 19:53:35'!
reportDepositLeg: aDepositLeg
	report add: 'Entrada por Transferencia de ', aDepositLeg  value asString,'.'.! !

!methodRemoval: AccountSummary #reportDepositLe: stamp: 'jb 5/30/2023 19:53:35'!
reportDepositLe: aDepositLeg
	report add: 'Entrada por Transferencia de ', aDepositLeg  value asString,'.'.!
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 19:53:58'!
reportExtractionTransfer: aExtracionLeg 
	report add: 'Salida por Transferencia de ', aExtracionLeg  value asString,'.'.! !
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 19:54:40'!
reportWithdraw: aWithdraw 
	report add: 'Extraccion por ', aWithdraw  value asString,'.'.! !
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 19:55:08'!
reportDeposit:aDeposit 
	report add: 'Deposito por ', aDeposit  value asString,'.'.! !
!AccountSummary methodsFor: 'report a transaction' stamp: 'jb 5/30/2023 19:56:49'!
reportDepositTransfer: aDepositLeg
	report add: 'Entrada por Transferencia de ', aDepositLeg  value asString,'.'.! !

!methodRemoval: AccountSummary #reportDepositLeg: stamp: 'jb 5/30/2023 19:56:49'!
reportDepositLeg: aDepositLeg
	report add: 'Entrada por Transferencia de ', aDepositLeg  value asString,'.'.!
!DepositLeg methodsFor: 'report' stamp: 'jb 5/30/2023 19:57:25' prior: 50715211!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportDeposit:  self.! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 19:57:30'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:57:30'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 19:57:30'!
FAILURE!

response!

 (AccountSummary for: accountDeposit ) report!
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 19:58:30' prior: 50718635 overrides: 50718583!
report
	report  ifNill: [
		account calculateAccountSummaryFor: self.
		].
	
	report add:'balance = ',  account balance asString .
	^report
	! !

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 19:58:40'!
ERROR!
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 19:59:07' prior: 50718839 overrides: 50718583!
report
	report  ifNil: [
		account calculateAccountSummaryFor: self.
		].
	
	report add:'balance = ',  account balance asString .
	^report
	! !

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 19:59:09'!
FAILURE!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 19:59:21'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 19:59:21'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 19:59:21'!
FAILURE!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 19:59:21'!
FAILURE!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 19:59:21'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 19:59:21'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 19:59:21'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 19:59:21'!
FAILURE!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 19:59:21'!
FAILURE!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 19:59:21'!
FAILURE!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 19:59:21'!
FAILURE!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 19:59:21'!
FAILURE!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 19:59:21'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 19:59:21'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:59:21'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 19:59:22'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:59:22'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:59:22'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 19:59:22'!
PASSED!

response!

 (AccountSummary for: accountDeposit ) report!
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 20:00:06' prior: 50718850 overrides: 50718583!
report
	report  ifEmpty: [
		account calculateAccountSummaryFor: self.
		].
	
	report add:'balance = ',  account balance asString .
	^report
	! !

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:00:09'!
FAILURE!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:00:13'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:00:13'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:00:13'!
FAILURE!

(AccountSummary for: accountDeposit ) report!

response!
!Deposit methodsFor: 'report' stamp: 'jb 5/30/2023 20:01:05' prior: 50718141!
reportToNetTransfer: aNetTransfer 
	aNetTransfer reportDepositTransfer: self.! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:01:12'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:01:12'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:01:12'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:01:17'!
FAILURE!

response!

 (AccountSummary for: accountDeposit ) report!
!Deposit methodsFor: 'report' stamp: 'lp 5/30/2023 17:43:26' prior: 50719016!
reportToNetTransfer: aNetTransfer 
	aNetTransfer reportDeposit: self.! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:02:27'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:02:27'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:02:27'!
FAILURE!
!DepositLeg methodsFor: 'report' stamp: 'jb 5/30/2023 20:02:58' prior: 50718760!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportDepositTransfer:  self.! !

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:03:00'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:01'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:01'!
PASSED!
!ExtractionLeg methodsFor: 'report' stamp: 'jb 5/30/2023 20:03:28' prior: 50715314!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportExtractionTransfer: self.! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:32'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:32'!
PASSED!
!Deposit methodsFor: 'report' stamp: 'jb 5/30/2023 20:03:48' prior: 50714786!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportDeposit:  self .! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:52'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:56'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:03:56'!
PASSED!
!Withdraw methodsFor: 'report' stamp: 'jb 5/30/2023 20:04:13' prior: 50715008!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportWithdraw: self.! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:04:16'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:04:16'!
PASSED!
!NetTransfer methodsFor: 'report a transaction vaue' stamp: 'jb 5/30/2023 20:06:10'!
reportDepositTransfer: aDepositTransfer 
	response := response + aDepositTransfer  value.! !
!NetTransfer methodsFor: 'report a transaction vaue' stamp: 'jb 5/30/2023 20:06:45'!
reportExtractionTransfer:anExtractionTransfer 
	response := response  - anExtractionTransfer  value! !
!DepositLeg methodsFor: 'report' stamp: 'jb 5/30/2023 20:07:33' prior: 50717693!
reportToNetTransfer: aNetTransfer 
	aNetTransfer reportDepositTransfer: self! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:07:38'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:07:39'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:07:39'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:07:39'!
PASSED!
!ExtractionLeg methodsFor: 'report' stamp: 'jb 5/30/2023 20:08:15' prior: 50717888!
reportToNetTransfer: aNetTransfer 
	aNetTransfer reportExtractionTransfer: self.! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:08:20'!
PASSED!

!methodRemoval: NetTransfer #reportDepositLegWith: stamp: 'jb 5/30/2023 20:08:51'!
reportDepositLegWith: aNetTransferValue 
	response := response + aNetTransferValue .!

!methodRemoval: NetTransfer #reportExtractionLegWith: stamp: 'jb 5/30/2023 20:08:51'!
reportExtractionLegWith: aNetTransferValue 
	response := response  - aNetTransferValue !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:08:58'!
PASSED!

!methodRemoval: AccountSummary #reportDepositLegWith: stamp: 'jb 5/30/2023 20:09:04'!
reportDepositLegWith: aDepositLegValue
	report add: 'Entrada por Transferencia de ', aDepositLegValue asString,'.'.!

!methodRemoval: AccountSummary #reportExtractionTransferWith: stamp: 'jb 5/30/2023 20:09:04'!
reportExtractionTransferWith: aExtracionLegValue 
	report add: 'Salida por Transferencia de ', aExtracionLegValue asString,'.'.!

!methodRemoval: AccountSummary #reportThisDepositWith: stamp: 'jb 5/30/2023 20:09:04'!
reportThisDepositWith: aValue 
	report add: 'Deposito por ', aValue asString,'.'.!

!methodRemoval: AccountSummary #reportThisWithdrawWith: stamp: 'jb 5/30/2023 20:09:04'!
reportThisWithdrawWith: aValue 
	report add: 'Extraccion por ', aValue asString,'.'.!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:09:07'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:09:07'!
PASSED!
!Report methodsFor: 'report' stamp: 'jb 5/30/2023 20:09:51'!
reportDeposit: aDeposit
	self subclassResponsibility ! !
!Report methodsFor: 'report' stamp: 'jb 5/30/2023 20:10:12'!
reportWithdraw: aWithdraw
	self subclassResponsibility ! !
!Report methodsFor: 'report' stamp: 'jb 5/30/2023 20:10:24'!
reportExtractionTransfer: aWithdraw
	self subclassResponsibility ! !
!Report methodsFor: 'report' stamp: 'jb 5/30/2023 20:10:36' prior: 50719875!
reportExtractionTransfer: aExtractionTransfer
	self subclassResponsibility ! !
!Report methodsFor: 'report' stamp: 'jb 5/30/2023 20:10:52'!
reportDepositTransfer: aDepositTransfer
	self subclassResponsibility ! !
!Report class methodsFor: 'no messages' stamp: 'jb 5/30/2023 20:12:37'!
for: anAccount 
	^self new initializeFor: anAccount 
	! !

!methodRemoval: AccountSummary class #for: stamp: 'jb 5/30/2023 20:12:57'!
for: aReceptiveAccount 
	^self new initializeFor: aReceptiveAccount !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:03'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:06'!
PASSED!

!methodRemoval: NetTransfer class #for: stamp: 'jb 5/30/2023 20:13:10'!
for: aReceptiveAccount 
	^self new initializeFor: aReceptiveAccount !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:14'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:17'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:13:17'!
PASSED!
!ReportTest methodsFor: 'net transfer test' stamp: 'jb 5/30/2023 20:19:01' prior: 50716764!
assertTheNetTransferOf: portfolio isEqualToTheNetTransferOf: account

	^ self assert: (NetTransfer  for: account)  netTransfer  equals: (NetTransfer  for: portfolio) netTransfer! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:19:02'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:19:03'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:19:03'!
ERROR!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:19:03'!
ERROR!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:19:03'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:19:09'!
ERROR!
!ReportTest methodsFor: 'net transfer test' stamp: 'jb 5/30/2023 20:19:24' prior: 50720176!
assertTheNetTransferOf: portfolio isEqualToTheNetTransferOf: account

	^ self assert: (NetTransfer  for: account)  report  equals: (NetTransfer  for: portfolio) report! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:19:26'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:19:26'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 20:21:37' prior: 50718932 overrides: 50718583!
report
	report  ifEmpty: [
		account reportTo: self.
		].
	
	report add:'balance = ',  account balance asString .
	^report
	! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:21:39'!
ERROR!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:21:39'!
ERROR!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:21:39'!
ERROR!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:21:39'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:21:39'!
ERROR!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:21:39'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:21:39'!
ERROR!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:21:39'!
ERROR!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:21:39'!
ERROR!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:21:39'!
ERROR!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:21:39'!
ERROR!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:21:39'!
ERROR!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:21:39'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:21:39'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:21:39'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:21:39'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:21:39'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:21:39'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:21:39'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:21:41'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'jb 5/30/2023 20:21:50'!
reportTo: anAccountSummary 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jb 5/30/2023 20:22:44' prior: 50720412!
reportTo: anAccountSummary 
	transactions  do: [:aTransaction | 
		aTransaction reportToAccountSummary:anAccountSummary .
		].
! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:22:45'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:22:47'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:22:47'!
ERROR!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:22:47'!
ERROR!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:22:47'!
ERROR!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:22:47'!
ERROR!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:22:47'!
ERROR!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:22:47'!
ERROR!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:22:49'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:22:49'!
ERROR!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:22:49'!
ERROR!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:22:49'!
ERROR!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:22:49'!
ERROR!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:22:49'!
ERROR!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:22:49'!
ERROR!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:22:51'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'jb 5/30/2023 20:22:56'!
reportTo: anAccountSummary 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'report' stamp: 'jb 5/30/2023 20:23:28' prior: 50720566!
reportTo: anAccountSummary 
	accounts do: [ :anAccount |
		  anAccount  calculateAccountSummaryFor:anAccountSummary 
		
		] .! !

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:23:30'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:23:34'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:23:35'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'jb 5/30/2023 20:24:06' prior: 50720417!
reportTo: anAccountSummary 
	transactions  do: [:aTransaction | 
		aTransaction reportTo: anAccountSummary .
		].
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/30/2023 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/30/2023 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/30/2023 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/30/2023 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/30/2023 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/30/2023 20:24:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/30/2023 20:24:09'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:24:24'!
ERROR!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:24:24'!
ERROR!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:24:24'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:24:24'!
ERROR!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:24:24'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:24:28'!
ERROR!
!Deposit methodsFor: 'report' stamp: 'jb 5/30/2023 20:24:35'!
reportTo: anAccountSummary 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'report' stamp: 'jb 5/30/2023 20:25:13' prior: 50720753!
reportTo: anAccountSummary 
	anAccountSummary reportDepositTransfer:  self.! !

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:25:14'!
FAILURE!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:25:21'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:25:21'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:25:21'!
ERROR!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:25:21'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:25:21'!
ERROR!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:25:25'!
FAILURE!

response!

(AccountSummary for: accountDeposit ) report!
!Deposit methodsFor: 'report' stamp: 'jb 5/30/2023 20:26:11' prior: 50720758!
reportTo: anAccountSummary 
	anAccountSummary reportDeposit:   self.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:26:12'!
ERROR!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:26:12'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:26:12'!
ERROR!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/30/2023 20:26:12'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:26:22'!
ERROR!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jb 5/30/2023 20:26:29'!
reportTo: anAccountSummary 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jb 5/30/2023 20:26:44' prior: 50720999!
reportTo: anAccountSummary 
	anAccountSummary  reportWithdraw:  self ! !

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:26:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:26:46'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:26:46'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:26:46'!
ERROR!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:26:49'!
ERROR!
!ExtractionLeg methodsFor: 'report' stamp: 'jb 5/30/2023 20:26:55'!
reportTo: anAccountSummary 
	self shouldBeImplemented.! !
!ExtractionLeg methodsFor: 'report' stamp: 'jb 5/30/2023 20:27:10' prior: 50721167!
reportTo: anAccountSummary 
	anAccountSummary  reportExtractionTransfer:  self! !

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:27:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:27:13'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:27:13'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:27:13'!
ERROR!
!DepositLeg methodsFor: 'report' stamp: 'jb 5/30/2023 20:27:23'!
reportTo: anAccountSummary 
	self shouldBeImplemented.! !
!DepositLeg methodsFor: 'report' stamp: 'jb 5/30/2023 20:27:36' prior: 50721335!
reportTo: anAccountSummary 
	anAccountSummary  reportDepositTransfer:  self! !

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:27:39'!
PASSED!
!Portfolio methodsFor: 'report' stamp: 'jb 5/30/2023 20:28:05' prior: 50720571!
reportTo: anAccountSummary 
	accounts do: [ :anAccount |
		  anAccount  reportTo: anAccountSummary 
		
		] .! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/30/2023 20:28:13'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/30/2023 20:28:18'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:28:22'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:28:22'!
PASSED!
!NetTransfer methodsFor: 'report' stamp: 'jb 5/30/2023 20:29:32' prior: 50718629 overrides: 50718583!
report
	 account reportTo: self.
	^response ! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:29:33'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:29:33'!
PASSED!
!Report methodsFor: 'report' stamp: 'jb 5/30/2023 20:29:58' prior: 50718583!
report
	account  reportTo: self! !
!NetTransfer methodsFor: 'report' stamp: 'jb 5/30/2023 20:30:12' prior: 50721633 overrides: 50721705!
report
	 super report .
	^response ! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:30:13'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:30:13'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 20:30:26' prior: 50720334 overrides: 50721705!
report
	report  ifEmpty: [
		super  report 
		].
	
	report add:'balance = ',  account balance asString .
	^report
	! !
!AccountSummary methodsFor: 'report' stamp: 'jb 5/30/2023 20:30:28' prior: 50721783 overrides: 50721705!
report
	report  ifEmpty: [
		super  report .
		].
	
	report add:'balance = ',  account balance asString .
	^report
	! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:30:29'!
PASSED!

!methodRemoval: Deposit #reportToNetTransfer: stamp: 'jb 5/30/2023 20:31:02'!
reportToNetTransfer: aNetTransfer 
	aNetTransfer reportDeposit: self.!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:31:18'!
PASSED!

!methodRemoval: Deposit #reportToAccountSummary: stamp: 'jb 5/30/2023 20:31:37'!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportDeposit:  self .!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:31:42'!
PASSED!

!methodRemoval: DepositLeg #reportToAccountSummary: stamp: 'jb 5/30/2023 20:31:50'!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportDepositTransfer:  self.!

!methodRemoval: DepositLeg #reportToNetTransfer: stamp: 'jb 5/30/2023 20:31:52'!
reportToNetTransfer: aNetTransfer 
	aNetTransfer reportDepositTransfer: self!

!methodRemoval: ExtractionLeg #reportToNetTransfer: stamp: 'jb 5/30/2023 20:31:56'!
reportToNetTransfer: aNetTransfer 
	aNetTransfer reportExtractionTransfer: self.!

!methodRemoval: ExtractionLeg #reportToAccountSummary: stamp: 'jb 5/30/2023 20:31:57'!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportExtractionTransfer: self.!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:00'!
PASSED!

!methodRemoval: Withdraw #reportToAccountSummary: stamp: 'jb 5/30/2023 20:32:06'!
reportToAccountSummary: anAccountSummary 
	anAccountSummary reportWithdraw: self.!

!methodRemoval: Withdraw #reportToNetTransfer: stamp: 'jb 5/30/2023 20:32:08'!
reportToNetTransfer: aNetTransfer 
	aNetTransfer reportWithdraw: self!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:32:12'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:32:12'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:13'!
PASSED!

!methodRemoval: Withdraw #affectAccountSummary: stamp: 'jb 5/30/2023 20:32:21'!
affectAccountSummary: anAccountSummary 
	^  anAccountSummary add: 'Extraccion por ' , (self) value asString ,'.', String crString!

!methodRemoval: Withdraw #reportAccountSummary: stamp: 'jb 5/30/2023 20:32:21'!
reportAccountSummary: response 
	response  add: 'Extraccion por ' , self  value asString ,'.'.!

!methodRemoval: Withdraw #affectNetTransfer: stamp: 'jb 5/30/2023 20:32:35'!
affectNetTransfer: netTransfer 
	^netTransfer !

!methodRemoval: Withdraw #reportNetTransfer: stamp: 'jb 5/30/2023 20:32:35'!
reportNetTransfer: response 
	^0!

!methodRemoval: Deposit #affectAccountSummary: stamp: 'jb 5/30/2023 20:32:40'!
affectAccountSummary: anAccountSummary 
	anAccountSummary  add: 'Deposito por ' ,  self value asString ,'.', String crString!

!methodRemoval: Deposit #reportAccountSummary: stamp: 'jb 5/30/2023 20:32:40'!
reportAccountSummary: response 
	response  add: 'Deposito por ' , self  value asString ,'.'.!

!methodRemoval: Deposit #affectNetTransfer: stamp: 'jb 5/30/2023 20:32:43'!
affectNetTransfer: netTransfer 
	^netTransfer !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:32:46'!
ERROR!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:32:46'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:32:46'!
ERROR!
!ReportTest methodsFor: 'account summary test' stamp: 'jb 5/30/2023 20:34:11' prior: 50713399!
test06AccountSummaryGivesMany
|account accountToExtract accountToDeposit response |
account := ReceptiveAccount  new.
accountToExtract := ReceptiveAccount new.
accountToDeposit := ReceptiveAccount new.

Deposit register: 100 on: account. 
Withdraw register: 50 on:account .

Transfer theAmmount: 20 from: account  to: accountToDeposit .
Transfer theAmmount: 30 from: accountToExtract  to: account .

response := OrderedCollection with:'Deposito por 100.' with:'Extraccion por 50.' with:'Salida por Transferencia de 20.' with: 'Entrada por Transferencia de 30.' with:'balance = 60'.


self assert: response
	equals: (AccountSummary  for: account  ) report 

! !

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:34:13'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:34:17'!
PASSED!

!methodRemoval: Deposit #reportNetTransfer: stamp: 'jb 5/30/2023 20:34:23'!
reportNetTransfer: response 
	^0!

!methodRemoval: DepositLeg #affectAccountSummary: stamp: 'jb 5/30/2023 20:34:35'!
affectAccountSummary: anAccountSummary 
	^anAccountSummary add: 'Entrada por Transferencia de ' ,  self value  asString ,'.', String crString!

!methodRemoval: DepositLeg #reportAccountSummary: stamp: 'jb 5/30/2023 20:34:35'!
reportAccountSummary: response 
	response  add: 'Entrada por Transferencia de ' , self  value asString ,'.'.!

!methodRemoval: DepositLeg #reportNetTransfer: stamp: 'jb 5/30/2023 20:34:37'!
reportNetTransfer: response 
	^response + transferHead value!

!methodRemoval: ExtractionLeg #affectAccountSummary: stamp: 'jb 5/30/2023 20:34:41'!
affectAccountSummary: anAccountSummary 
	^anAccountSummary add: 'Salida por Transferencia de ' ,self  value asString ,'.', String crString!

!methodRemoval: ExtractionLeg #reportAccountSummary: stamp: 'jb 5/30/2023 20:34:41'!
reportAccountSummary: response 
	response  add: 'Salida por Transferencia de ' , self  value asString ,'.'.!

!methodRemoval: ExtractionLeg #reportNetTransfer: stamp: 'jb 5/30/2023 20:34:43'!
reportNetTransfer: response 
	^ response - transferHead value.!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:34:46'!
PASSED!

!methodRemoval: Portfolio #accountSummary stamp: 'jb 5/30/2023 20:35:01'!
accountSummary
|accountSummary|
	accountSummary := OrderedCollection new.
	accountSummary addAll: self calculateAccountSummary .
	accountSummary add: 'balance = ', self balance asString.
	^accountSummary !

!methodRemoval: Portfolio #accumulate:andReport: stamp: 'jb 5/30/2023 20:35:21'!
accumulate: anAccumulator andReport: aBlockWithAnAccumulatorAndAAccount  
	^accounts inject:  anAccumulator into: [:anAcc :anAccount |
		aBlockWithAnAccumulatorAndAAccount  value:  anAcc  value:  anAccount 
		]  !

!methodRemoval: Portfolio #calculateAccountSummary stamp: 'jb 5/30/2023 20:35:52'!
calculateAccountSummary
	|report|

	report := OrderedCollection new.
	accounts do: [ :anAccount |
		report  addAll:  anAccount  calculateAccountSummary 
		
		] .
	^ report.!

!methodRemoval: Portfolio #netTransfer stamp: 'jb 5/30/2023 20:36:02'!
netTransfer
^accounts inject:  0  into: [:netTransfer :anAccount |
	netTransfer +  anAccount  netTransfer 
	
	]!

!methodRemoval: Portfolio #report: stamp: 'jb 5/30/2023 20:36:02'!
report: aBlockWithAccountAndAccumulator 
	^accounts inject:  '' into: [:anAccountSummary :anAccount |
		anAccountSummary  , anAccount  calculateAccountSummary 
		
		]  !

!methodRemoval: Portfolio #showTree stamp: 'jb 5/30/2023 20:36:02'!
showTree
	^''!

!methodRemoval: Portfolio #calculateAccountSummaryFor: stamp: 'jb 5/30/2023 20:36:07'!
calculateAccountSummaryFor: anAccountSummary 
	accounts do: [ :anAccount |
		  anAccount  calculateAccountSummaryFor:anAccountSummary 
		
		] .!

!methodRemoval: Portfolio #netTransferFor: stamp: 'jb 5/30/2023 20:36:09'!
netTransferFor: aNetTransfer 
	accounts do: [ :anAccount |
		  anAccount  netTransferFor: aNetTransfer 
		
		] .!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:36:12'!
PASSED!

!methodRemoval: ReceptiveAccount #netTransferFor: stamp: 'jb 5/30/2023 20:36:20'!
netTransferFor: aNetTransfer 
	
^transactions do: 	[ :aTransaction | 
	aTransaction reportToNetTransfer: aNetTransfer .
	].!

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'jb 5/30/2023 20:36:27'!
accountSummary
	|response|
	response := OrderedCollection new.
	response addAll: self calculateAccountSummary .
	response add:'balance = ',  self balance asString .
	^response!

!methodRemoval: ReceptiveAccount #calculateAccountSummary stamp: 'jb 5/30/2023 20:36:27'!
calculateAccountSummary
	|response|
	response := OrderedCollection new.
	transactions  do: [:aTransaction | 
		aTransaction reportAccountSummary: response.
		].
	^response!

!methodRemoval: ReceptiveAccount #calculateAccountSummaryFor: stamp: 'jb 5/30/2023 20:36:27'!
calculateAccountSummaryFor: anAccountSummary 
	transactions  do: [:aTransaction | 
		aTransaction reportToAccountSummary:anAccountSummary .
		].
!

!methodRemoval: ReceptiveAccount #netTransfer stamp: 'jb 5/30/2023 20:36:27'!
netTransfer

^transactions  inject:0 into: 	[:response :aTransaction | 
	aTransaction reportNetTransfer: response.
	].!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/30/2023 20:36:30'!
PASSED!

----SNAPSHOT----(30 May 2023 20:36:42) CuisUniversity-5706.image priorSource: 12371613!
!Portfolio methodsFor: 'report' stamp: 'jb 5/30/2023 20:37:00' prior: 50721349!
reportTo: aReport 
	accounts do: [ :anAccount |
		  anAccount  reportTo: aReport 
		
		] .! !
!TransferLegs methodsFor: 'as yet unclassified' stamp: 'jb 5/30/2023 20:38:45'!
reportTo: aReport
	self subclassResponsibility ! !

!methodRemoval: TransferLegs #reportTo: stamp: 'jb 5/30/2023 20:38:57'!
reportTo: aReport
	self subclassResponsibility !
!AccountTransaction methodsFor: 'value' stamp: 'jb 5/30/2023 20:39:16'!
reportTo: aReport
	self subclassResponsibility ! !

!methodRemoval: DepositLeg #affectNetTransfer: stamp: 'jb 5/30/2023 20:40:06'!
affectNetTransfer: netTransfer 
	^netTransfer  + self value !

!methodRemoval: ExtractionLeg #affectBalance: stamp: 'jb 5/30/2023 20:40:13'!
affectBalance: aBalanceAmmount
	^ aBalanceAmmount - transferHead value.!

!methodRemoval: ExtractionLeg #affectNetTransfer: stamp: 'jb 5/30/2023 20:40:13'!
affectNetTransfer: netTransfer 
	^netTransfer  - self value .!

!methodRemoval: DepositLeg #affectBalance: stamp: 'jb 5/30/2023 20:40:18'!
affectBalance: aBalanceAmmount
	^ aBalanceAmmount +  transferHead value.!

!methodRemoval: TransferLegs #transferHead stamp: 'jb 5/30/2023 20:40:39'!
transferHead
	^ transferHead !

!methodRemoval: TransferLegs #affectBalance: stamp: 'jb 5/30/2023 20:40:46'!
affectBalance: aBalance
	self subclassResponsibility !

----SNAPSHOT----(30 May 2023 20:42:53) CuisUniversity-5706.image priorSource: 12513983!

----QUIT----(30 May 2023 20:51:46) CuisUniversity-5706.image priorSource: 12515504!

----STARTUP---- (31 May 2023 14:26:52) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64\CuisUniversity-5706.image!


!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 14:27:05'!
ERROR!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 14:27:29'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 14:27:29'!
ERROR!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 14:27:29'!
ERROR!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 14:27:29'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 14:27:37'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 14:28:03'!
ERROR!

----End fileIn of C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64\07-Portfolio2\07-Portfolio2\Portfolio-Solucion.st----!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 14:28:31'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 14:28:31'!
ERROR!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 14:28:31'!
ERROR!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 14:28:31'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 14:28:39'!
ERROR!

!testRun: #TransferTest #test01NewTransfer stamp: 'jb 5/31/2023 14:29:17'!
ERROR!

!testRun: #TransferTest #test02hasRegiteredTheTransactionLeg stamp: 'jb 5/31/2023 14:29:17'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'jb 5/31/2023 14:29:17'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'jb 5/31/2023 14:29:17'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'jb 5/31/2023 14:29:17'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'jb 5/31/2023 14:29:17'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'jb 5/31/2023 14:29:17'!
ERROR!
!DepositLeg methodsFor: 'report' stamp: 'jb 5/31/2023 14:30:04' overrides: 50724091!
affectBalance: aBalance

	^aBalance + self value ! !
!ExtractionLeg methodsFor: 'report' stamp: 'jb 5/31/2023 14:30:33' overrides: 50724091!
affectBalance: aBalance

	^aBalance - self  value ! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 14:31:00'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'jb 5/31/2023 14:31:05'!
PASSED!

!testRun: #TransferTest #test02hasRegiteredTheTransactionLeg stamp: 'jb 5/31/2023 14:31:05'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'jb 5/31/2023 14:31:05'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'jb 5/31/2023 14:31:05'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'jb 5/31/2023 14:31:05'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'jb 5/31/2023 14:31:05'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/31/2023 14:31:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/31/2023 14:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/31/2023 14:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/31/2023 14:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/31/2023 14:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/31/2023 14:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/31/2023 14:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/31/2023 14:31:14'!
PASSED!

!classDefinition: #TreeReport category: 'Portfolio-Solucion' stamp: 'jb 5/31/2023 14:35:08'!
Report subclass: #TreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 14:34:59' prior: 50722868!
test02PortfolioNamedShouldTellItsName
	|portfolio|
	portfolio  :=Portfolio named: 'Portfolio de la familia'.   
	self assert: 'Portfolio de la familia'  equals: (TreeReport for: portfolio )  report! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 14:35:15'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'jb 5/31/2023 14:35:29'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'jb 5/31/2023 14:35:39' prior: 50724935!
named: aString 
	^self new initializeNamed: aString ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'jb 5/31/2023 14:35:53' prior: 50724943!
named: aNameForThePortfolio 
	^self new initializeNamed: aNameForThePortfolio ! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 14:35:56'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'jb 5/31/2023 14:36:06'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents nameForThePortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'jb 5/31/2023 14:36:06'!
initializeNamed: aNameForThePortfolio 
	self shouldBeImplemented.
	nameForThePortfolio := aNameForThePortfolio.! !
!Portfolio methodsFor: 'initialization' stamp: 'jb 5/31/2023 14:36:10' prior: 50724965!
initializeNamed: aNameForThePortfolio 
	
	nameForThePortfolio := aNameForThePortfolio.! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 14:36:12'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 14:36:54'!
FAILURE!
!TreeReport methodsFor: 'nil' stamp: 'jb 5/31/2023 14:38:01' overrides: 50724335!
report
	^account  name! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/31/2023 14:38:03'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 14:38:03'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:38:03'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:38:03'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:38:03'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:38:03'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 14:38:12'!
FAILURE!

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/31/2023 14:38:34'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 14:38:34'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:38:34'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:38:34'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:38:34'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:38:34'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 14:38:41'!
FAILURE!

account  name!
!Portfolio methodsFor: 'report' stamp: 'jb 5/31/2023 14:39:36' overrides: 16903442!
name 
	^ nameForThePortfolio ! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/31/2023 14:39:43'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 14:39:43'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:39:43'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:39:43'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:39:43'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:39:43'!
ERROR!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 14:40:49' prior: 50722878!
test03PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := (Portfolio named: 'Portfolio de la familia') with: (Portfolio named:  'Portfolio de los hijos') .   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Portfolio de los hijos'  equals: (TreeReport  for:  portfolio  ) report! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:40:55'!
ERROR!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 14:41:29' prior: 50725072!
test03PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio|
	portfolio  :=  Portfolio named: 'Portfolio de la familia' with: (Portfolio named:  'Portfolio de los hijos') .   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Portfolio de los hijos'  equals: (TreeReport  for:  portfolio  ) report! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:41:32'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'jb 5/31/2023 14:41:39'!
named: aString with: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString with: aPortfolio ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'jb 5/31/2023 14:42:18' prior: 50725107!
named: aNameForThePortfolio with: anAccount 
	
	^(self new initializeNamed: aNameForThePortfolio  )  add: anAccount ! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:42:20'!
FAILURE!
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 14:43:41' prior: 50724985 overrides: 50724335!
report
	  account  reportTo:  self. 
	^account  name! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:43:42'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:43:42'!
PASSED!
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 14:44:58' prior: 50725128 overrides: 50724335!
report
	  super report. 
	^account  name! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/31/2023 14:45:13'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 14:45:13'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:45:13'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:45:13'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:45:13'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:45:13'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:45:19'!
FAILURE!

self name !
!Portfolio methodsFor: 'report' stamp: 'jb 5/31/2023 14:47:48' prior: 50723971!
reportTo: aReport 	aReport  reportAccount: self. 
	accounts do: [ :anAccount |
		  anAccount  reportTo: aReport 
		
		] .! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:47:57'!
ERROR!
!Report methodsFor: 'report' stamp: 'jb 5/31/2023 14:48:16'!
reportAccount: aPortfolio 
	self shouldBeImplemented.! !
!Report methodsFor: 'report' stamp: 'jb 5/31/2023 14:48:42'!
reportAPortfolio: aPortfolio 
	self shouldBeImplemented.! !

!methodRemoval: Report #reportAccount: stamp: 'jb 5/31/2023 14:48:42'!
reportAccount: aPortfolio 
	self shouldBeImplemented.!
!Report methodsFor: 'nil' stamp: 'jb 5/31/2023 14:48:51'!
reportAccount: aPortfolio 
	! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 14:48:56'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 14:49:43'!
reportPortfolio: aPortfolio 
	! !

!methodRemoval: Report #reportAccount: stamp: 'jb 5/31/2023 14:49:43'!
reportAccount: aPortfolio 
	!
!Report methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 14:50:08'!
reportReceptiveAccount: anReceptiveAccount 
	! !

!methodRemoval: PortfolioReportTest #test01EmptyPortfolioShouldNotPrintAnything stamp: 'jb 5/31/2023 15:07:08'!
test01EmptyPortfolioShouldNotPrintAnything
	
	self assert: ''  equals: Portfolio  new showTree!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:09:41'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:09:51'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:09:51'!
ERROR!
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:10:21' prior: 50725142 overrides: 50724335!
report
	
	^account  name! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:10:30'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:10:31'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:10:31'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:10:31'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:10:31'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:10:48'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:10:48'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:10:48'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:10:48'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:10:48'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:15:53'!
FAILURE!
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 14:44:58' prior: 50725234 overrides: 50724335!
report
	  super report. 
	^account  name! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:17:01'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:17:01'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:17:01'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:17:01'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:17:01'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:17:07'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:17:21'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:17:32'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'jb 5/31/2023 15:20:13' prior: 50725175!
reportTo: aReport 	aReport  reportPortfolio: self. 
	! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:20:15'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:20:46'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:20:46'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:20:46'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:20:46'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:20:46'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:20:48'!
FAILURE!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'jb 5/31/2023 15:22:50'!
Object subclass: #Report
	instanceVariableNames: 'account nameHirarchy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'report an account' stamp: 'jb 5/31/2023 15:22:47' prior: 50725205!
reportPortfolio: aPortfolio 
	nameHirarchy add: aPortfolio  name. 
	aPortfolio  reportAllAccountsTo:self. ! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:22:55'!
ERROR!
!Report methodsFor: 'report an account' stamp: 'jb 5/31/2023 15:23:21' prior: 50725358!
reportPortfolio: aPortfolio 
	nameHirarchy  := OrderedCollection  new. 
	nameHirarchy add: aPortfolio  name. 
	aPortfolio  reportAllAccountsTo:self. ! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:23:24'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'jb 5/31/2023 15:23:48'!
reportAllAccountsTo: aTreeReport 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'report' stamp: 'jb 5/31/2023 15:24:20' prior: 50725380!
reportAllAccountsTo: aReport 
	accounts do: [ :anAccount |
		  anAccount  reportTo: aReport 
		
		] .! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:24:32'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:24:47'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:24:47'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:24:47'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:24:47'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:24:47'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:25:16'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:25:16'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:25:16'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:25:16'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:25:16'!
ERROR!
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:26:49' prior: 50725283 overrides: 50724335!
report
	  super report. 
	^nameHirarchy  print! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:26:52'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:26:52'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:26:52'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:26:52'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:26:52'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:26:54'!
FAILURE!

 (TreeReport for: portfolio )  report!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:31:10' prior: 50724922!
test02PortfolioNamedShouldTellItsName
	|portfolio|
	portfolio  :=Portfolio named: 'Portfolio de la familia'.   
	self assert: (OrderedCollection  with: 'Portfolio de la familia')  equals: (TreeReport for: portfolio )  report! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:31:14'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:31:15'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:31:15'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:31:15'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:31:15'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:31:15'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:31:20'!
FAILURE!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:33:11' prior: 50725090!
test03PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio reportCollection |
	portfolio  :=  Portfolio named: 'Portfolio de la familia' with: (Portfolio named:  'Portfolio de los hijos') .   	reportCollection  := OrderedCollection  with:  'Portfolio de la familia' with: String tab, 'Portfolio de los hijos'. 

	self assert: reportCollection  equals: (TreeReport  for:  portfolio  ) report! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:33:14'!
FAILURE!
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:33:31' prior: 50725437 overrides: 50724335!
report
	  super report. 
	^nameHirarchy  ! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:33:32'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:33:43'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:33:43'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:33:43'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:33:43'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:33:43'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:33:46'!
FAILURE!
!Report methodsFor: 'report an account' stamp: 'jb 5/31/2023 15:34:26' prior: 50725369!
reportPortfolio: aPortfolio 
	nameHirarchy  ifNil:  [
		nameHirarchy  := OrderedCollection  new]. 
	nameHirarchy add: aPortfolio  name. 
	aPortfolio  reportAllAccountsTo:self. ! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:34:31'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:35:55'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:35:55'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:35:55'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:35:55'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:35:55'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:36:05'!
FAILURE!

!methodRemoval: Report #reportPortfolio: stamp: 'jb 5/31/2023 15:37:14'!
reportPortfolio: aPortfolio 
	nameHirarchy  ifNil:  [
		nameHirarchy  := OrderedCollection  new]. 
	nameHirarchy add: aPortfolio  name. 
	aPortfolio  reportAllAccountsTo:self. !
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:37:21'!
reportPortfolio: aPortfolio 
	nameHirarchy  ifNil:  [
		nameHirarchy  := OrderedCollection  new]. 
	nameHirarchy add: aPortfolio  name. 
	aPortfolio  reportAllAccountsTo:self. ! !
!Report methodsFor: 'report' stamp: 'jb 5/31/2023 15:37:45'!
reportPortfolio: aPortfolio 
	self shouldBeImplemented.! !

!methodRemoval: Report #reportAPortfolio: stamp: 'jb 5/31/2023 15:37:45'!
reportAPortfolio: aPortfolio 
	self shouldBeImplemented.!
!Report methodsFor: 'report an account' stamp: 'jb 5/31/2023 15:37:59' prior: 50725613!
reportPortfolio: aPortfolio 
	! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:38:07'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:38:07'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:38:07'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:38:07'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:38:07'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:38:10'!
FAILURE!

(TreeReport  for:  portfolio  ) report!

reportCollection!
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:40:24' prior: 50725605 overrides: 50725622!
reportPortfolio: aPortfolio 
	nameHirarchy  ifNil:  [
		nameHirarchy  := OrderedCollection  new.
		nameHirarchy add: aPortfolio  name. 	
		]. 
	nameHirarchy add: String tab,aPortfolio  name. 
	aPortfolio  reportAllAccountsTo:self. ! !

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:40:28'!
FAILURE!
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:43:09' prior: 50725653 overrides: 50725622!
reportPortfolio: aPortfolio 
	(nameHirarchy  size = 0 )ifTrue:  [
		nameHirarchy add: aPortfolio  name. 	
		] ifFalse:  [
			nameHirarchy add: String tab,aPortfolio  name. 
			].
	aPortfolio  reportAllAccountsTo:self. ! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:43:11'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:43:11'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:43:12'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:43:12'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:43:12'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:43:14'!
ERROR!
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:44:09' overrides: 50724308!
initializeFor: anAccount
		nameHirarchy  := OrderedCollection  new.
	super  initializeFor:  anAccount . 
! !
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:44:13' prior: 50725702 overrides: 50724308!
initializeFor: anAccount
	nameHirarchy  := OrderedCollection  new.
	super  initializeFor:  anAccount . 
! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:44:26'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:44:26'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:44:26'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:44:26'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:44:26'!
ERROR!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:44:53' prior: 50722892!
test04PortfolioWithAnAccountShouldMakeTheCorrectReport
	|portfolio|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount named:  'Cuenta de Angeles') .   
	self assert: 
	'Portfolio de la familia',String crString,String tab,
	'Cuenta de Angeles'  equals: portfolio  report! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:44:57'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:44:57'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:44:57'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:44:57'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:44:57'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:44:59'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'jb 5/31/2023 15:45:10'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'jb 5/31/2023 15:45:31' prior: 50725773!
named: aNameForTheReceptiveAccount 

	^self new initializeNamed: aNameForTheReceptiveAccount ! !

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:45:32'!
ERROR!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'jb 5/31/2023 15:45:39'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions nameForTheReceptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'jb 5/31/2023 15:45:39'!
initializeNamed: aNameForTheReceptiveAccount 
	self shouldBeImplemented.
	nameForTheReceptiveAccount := aNameForTheReceptiveAccount.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'jb 5/31/2023 15:45:43' prior: 50725800!
initializeNamed: aNameForTheReceptiveAccount 
	nameForTheReceptiveAccount := aNameForTheReceptiveAccount.! !

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:45:45'!
ERROR!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:47:36' prior: 50725736!
test04PortfolioWithAnAccountShouldMakeTheCorrectReport
	|portfolio 	reportCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount named:  'Cuenta de Angeles' ) .   	reportCollection := OrderedCollection with:  'Portfolio de la familia'  with: String tab, 'Cuenta de Angeles'. 


	self assert:  reportCollection equals:  (TreeReport for:  portfolio)  report! !

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:47:38'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'jb 5/31/2023 15:48:48' prior: 50724066!
reportTo: aReport 	aReport reportReceptiveAccount:  self. 

! !

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:48:51'!
FAILURE!
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:50:58' overrides: 50725212!
reportReceptiveAccount:  aReceptiveAccount 
		nameHirarchy add: String tab,aReceptiveAccount  name. 
			! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:51:04'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:51:04'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:51:04'!
FAILURE!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:51:05'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:51:05'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:51:07'!
FAILURE!
!ReceptiveAccount methodsFor: 'report' stamp: 'jb 5/31/2023 15:52:10' overrides: 16903442!
name 
	^nameForTheReceptiveAccount ! !

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:52:17'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:52:17'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:52:17'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:52:17'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:52:17'!
ERROR!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 15:52:22'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 15:52:22'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 15:52:22'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:52:22'!
FAILURE!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 15:52:23'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:52:23'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:52:23'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:52:23'!
FAILURE!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 15:52:43'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 15:52:43'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 15:52:43'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 15:52:43'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:52:43'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:52:43'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:52:43'!
FAILURE!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 15:52:47'!
FAILURE!
!Report methodsFor: 'report an account' stamp: 'jb 5/31/2023 15:53:39' prior: 50725212!
reportReceptiveAccount: anReceptiveAccount 
	anReceptiveAccount  reportAllAccountsTo:  self.! !

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 15:53:41'!
ERROR!
!Report methodsFor: 'report an account' stamp: 'jb 5/31/2023 15:54:39' prior: 50726044!
reportReceptiveAccount: anReceptiveAccount 
	anReceptiveAccount reportAllTransactionsTo: self! !

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 15:54:42'!
ERROR!
!ReceptiveAccount methodsFor: 'report' stamp: 'jb 5/31/2023 15:54:49'!
reportAllTransactionsTo: anAccountSummary 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'jb 5/31/2023 15:55:27' prior: 50726062!
reportAllTransactionsTo: anAccountSummary 
	transactions  do:[:aTransaction|
		aTransaction  reportTo:  anAccountSummary 
		]! !

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 15:55:30'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 15:55:31'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 15:55:31'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 15:55:31'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 15:55:31'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:55:31'!
FAILURE!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:55:31'!
FAILURE!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 15:55:31'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 15:55:31'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 15:55:31'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 15:55:31'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 15:55:31'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 15:55:32'!
FAILURE!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 15:55:32'!
FAILURE!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 15:55:32'!
FAILURE!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 15:55:32'!
FAILURE!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 15:55:32'!
FAILURE!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 15:55:32'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:55:32'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:55:32'!
FAILURE!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 15:55:34'!
FAILURE!
!Report methodsFor: 'report an account' stamp: 'jb 5/31/2023 15:56:02' prior: 50725622!
reportPortfolio: aPortfolio 
	aPortfolio  reportAllAccountsTo:  self ! !

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 15:56:03'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 15:56:04'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 15:56:04'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 15:56:04'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 15:56:04'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 15:56:04'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 15:56:04'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 15:56:04'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 15:56:05'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 15:56:05'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 15:56:05'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:56:05'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 15:56:05'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:56:05'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:56:05'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 15:56:05'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 15:56:05'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 15:56:05'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 15:56:05'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:56:05'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 15:56:32'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 15:56:36'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:56:36'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:56:36'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:56:36'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:56:36'!
ERROR!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 15:59:51' prior: 50722906!
test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport
	|portfolio responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount  named:  'Cuenta de Angeles') with: (Portfolio  named:  'Portfolio de los hijos' ).   	responseCollection  := OrderedCollection  with: 'Portfolio de la familia' with: String tab, 'Cuenta de Angeles'  with: String tab,'Portfolio de los hijos'   .

	self assert: 	responseCollection    equals:  ( TreeReport  for:portfolio  ) report! !

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 15:59:54'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'jb 5/31/2023 16:00:00'!
named: aString with: aReceptiveAccount with: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString with: aReceptiveAccount with: aPortfolio ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'jb 5/31/2023 16:01:59' prior: 50726338!
named: aNameForThePortfolio with: anAccount with: anotherAccount 
	^ (self named:  aNameForThePortfolio  with: anAccount ) add:anotherAccount

	! !

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:02:01'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 16:02:03'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:02:03'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:02:03'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:02:03'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:02:03'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:02:03'!
ERROR!

----SNAPSHOT----(31 May 2023 16:03:46) CuisUniversity-5706.image priorSource: 12515593!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:05:35' prior: 50722924!
test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport
	|portfolio  responseCollection|
	portfolio  := (Portfolio named: 'Portfolio de la familia') with: ((Portfolio  named:  'Portfolio de los hijos') with: (ReceptiveAccount  named: 'Cuenta de Angeles')).   	responseCollection  := OrderedCollection  with:'Portfolio de la familia'  with: String tab, 'Portfolio de los hijos'   with: 'Cuenta de Angeles' .


	self assert: responseCollection   equals: (TreeReport  for: portfolio ) report ! !

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:05:38'!
ERROR!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:05:53' prior: 50726389!
test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport
	|portfolio  responseCollection|
	portfolio  := (Portfolio named: 'Portfolio de la familia') with: (Portfolio  named:  'Portfolio de los hijos' with: (ReceptiveAccount  named: 'Cuenta de Angeles')).   	responseCollection  := OrderedCollection  with:'Portfolio de la familia'  with: String tab, 'Portfolio de los hijos'   with: 'Cuenta de Angeles' .


	self assert: responseCollection   equals: (TreeReport  for: portfolio ) report ! !

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:05:55'!
ERROR!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:06:07' prior: 50726413!
test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport
	|portfolio  responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (Portfolio  named:  'Portfolio de los hijos' with: (ReceptiveAccount  named: 'Cuenta de Angeles')).   	responseCollection  := OrderedCollection  with:'Portfolio de la familia'  with: String tab, 'Portfolio de los hijos'   with: 'Cuenta de Angeles' .


	self assert: responseCollection   equals: (TreeReport  for: portfolio ) report ! !

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:06:13'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 16:06:41'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:06:41'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:06:41'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:06:41'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:06:41'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:06:41'!
FAILURE!

!classDefinition: #TreeReport category: 'Portfolio-Solucion' stamp: 'jb 5/31/2023 16:09:12'!
Report subclass: #TreeReport
	instanceVariableNames: 'tabCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:09:10' prior: 50725668 overrides: 50726149!
reportPortfolio: aPortfolio 
	(nameHirarchy  size = 0 )ifTrue:  [
		nameHirarchy add: aPortfolio  name. 	
		tabCounter := 1 . 
		] ifFalse:  [
			nameHirarchy add: String tab,aPortfolio  name. 
			tabCounter := tabCounter + 1. 
			].
	aPortfolio  reportAllAccountsTo:self. ! !
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:10:01' prior: 50726493 overrides: 50726149!
reportPortfolio: aPortfolio 
	(nameHirarchy  size = 0 )ifTrue:  [
		nameHirarchy add: aPortfolio  name. 	
		tabCounter := 1 . 
		] ifFalse:  [
			nameHirarchy add:  self addTabs,aPortfolio  name. 
			tabCounter := tabCounter + 1. 
			].
	aPortfolio  reportAllAccountsTo:self. ! !

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:10:07'!
ERROR!
!TreeReport methodsFor: 'tabular' stamp: 'jb 5/31/2023 16:10:19'!
addTabs
	self shouldBeImplemented.! !
!TreeReport methodsFor: 'tabular' stamp: 'jb 5/31/2023 16:13:30' prior: 50726522!
addTabs
	|tabString|
	tabString := ''.  
	  0  to:  tabCounter do: [
		tabString  := tabString,String tab.
		]! !
!TreeReport methodsFor: 'tabular' stamp: 'jb 5/31/2023 16:13:47' prior: 50726526!
addTabs
	|tabString|
	tabString := ''.  
	  0  to:  tabCounter do: [
		tabString  := tabString,String tab.
		].
	^tabString 
	! !

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:13:50'!
ERROR!
!TreeReport methodsFor: 'tabular' stamp: 'jb 5/31/2023 16:15:10' prior: 50726533!
addTabs
	|tabString|
	tabString := ''.  
	  0  to:  tabCounter do: [:iter|
		tabString  := tabString,String tab.
		].
	^tabString 
	! !

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:15:12'!
FAILURE!

 (TreeReport  for: portfolio ) report !
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:17:09' prior: 50725849 overrides: 50726053!
reportReceptiveAccount:  aReceptiveAccount 
		nameHirarchy add: self addTabs ,aReceptiveAccount  name. 
			! !

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:17:10'!
FAILURE!

(TreeReport  for: portfolio ) report !

Portfolio!

self addTabs!

self addTabs !

tabString!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:20:11'!
FAILURE!

self addTabs,aPortfolio  name!

aPortfolio  name!

self addTabs,aPortfolio  name!
!TreeReport methodsFor: 'tabular' stamp: 'jb 5/31/2023 16:21:38' prior: 50726544!
addTabs
	|tabString|
	tabString := ''.  
	  1  to:  tabCounter do: [:iter|
		tabString  := tabString,String tab.
		].
	^tabString 
	! !

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:21:39'!
FAILURE!

(TreeReport  for: portfolio ) report!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:22:30' prior: 50726437!
test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport
	|portfolio  responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (Portfolio  named:  'Portfolio de los hijos' with: (ReceptiveAccount  named: 'Cuenta de Angeles')).   	responseCollection  := OrderedCollection  with:'Portfolio de la familia'  with: String tab, 'Portfolio de los hijos'   with: String tab, String tab,'Cuenta de Angeles' .


	self assert: responseCollection   equals: (TreeReport  for: portfolio ) report ! !

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:22:32'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 16:22:37'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:22:37'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:22:37'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:22:37'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:22:37'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 16:22:41'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:22:41'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:22:41'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:22:41'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:22:41'!
PASSED!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:25:40'!
test07PortfolioWithManyAccountsShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio |
	
	johnsAccount := ReceptiveAccountTreeReport  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccountTreeReport named: 'Cuenta de Angeles'.
	childrenPortfolio := (PortfolioTreeReport  named:'Portfolio de hijos' )with:
johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccountTreeReport named: 'Cuenta mia'.
	familyPortfolio := (PortfolioTreeReport  named: 'Portfolio de la familia') with: myAccount with: childrenPortfolio.
	
	self  assert: 'Portfolio de la familia', String  crString , String  tab, 
	'Cuenta mia', 	String  crString, String  tab, 
	'Portfolio de hijos', String  crString , String  tab, String  tab, 
	'Cuenta de Juan' , String  crString , String  tab, String  tab, 
	'Cuenta de Angeles'
	 equals: familyPortfolio report. 
! !

!methodRemoval: PortfolioReportTest #_test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:25:40'!
_test06PortfolioWithManyAccountsAndPortfoliosShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio |
	
	johnsAccount := ReceptiveAccountTreeReport  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccountTreeReport named: 'Cuenta de Angeles'.
	childrenPortfolio := (PortfolioTreeReport  named:'Portfolio de hijos' )with:
johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccountTreeReport named: 'Cuenta mia'.
	familyPortfolio := (PortfolioTreeReport  named: 'Portfolio de la familia') with: myAccount with: childrenPortfolio.
	
	self  assert: 'Portfolio de la familia', String  crString , String  tab, 
	'Cuenta mia', 	String  crString, String  tab, 
	'Portfolio de hijos', String  crString , String  tab, String  tab, 
	'Cuenta de Juan' , String  crString , String  tab, String  tab, 
	'Cuenta de Angeles'
	 equals: familyPortfolio report. 
!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:31:03' prior: 50726657!
test07PortfolioWithManyAccountsShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio responseCollection |
	
	johnsAccount := ReceptiveAccount  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio  named:'Portfolio de hijos'  with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := PortfolioTreeReport  named: 'Portfolio de la familia' with: childrenPortfolio  with:  myAccount .
	responseCollection := OrderedCollection with: 'Portfolio de la familia'
	 with:  String  tab, 'Portfolio de hijos'
	  with: String  tab, String  tab,  'Cuenta de Juan'
	 with:  String  tab, String  tab,  'Cuenta de Angeles'
	 with:  String  tab, 	'Cuenta mia'.

	
	self  assert: responseCollection  
	 equals:  (TreeReport  for: familyPortfolio ) report. 
! !

!testRun: #PortfolioReportTest #test07PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:31:11'!
ERROR!

!testRun: #PortfolioReportTest #test07PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:31:11'!
ERROR!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:31:23' prior: 50726722!
test07PortfolioWithManyAccountsShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio responseCollection |
	
	johnsAccount := ReceptiveAccount  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio  named:'Portfolio de hijos'  with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio  named: 'Portfolio de la familia' with: childrenPortfolio  with:  myAccount .
	responseCollection := OrderedCollection with: 'Portfolio de la familia'
	 with:  String  tab, 'Portfolio de hijos'
	  with: String  tab, String  tab,  'Cuenta de Juan'
	 with:  String  tab, String  tab,  'Cuenta de Angeles'
	 with:  String  tab, 	'Cuenta mia'.

	
	self  assert: responseCollection  
	 equals:  (TreeReport  for: familyPortfolio ) report. 
! !

!testRun: #PortfolioReportTest #test07PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:31:24'!
FAILURE!
!TreeReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:32:12' prior: 50726506 overrides: 50726149!
reportPortfolio: aPortfolio 
	(nameHirarchy  size = 0 )ifTrue:  [
		nameHirarchy add: aPortfolio  name. 	
		tabCounter := 1 . 
		] ifFalse:  [
			nameHirarchy add:  self addTabs,aPortfolio  name. 
			tabCounter := tabCounter + 1. 
			].
	aPortfolio  reportAllAccountsTo:self. 
	tabCounter  :=  tabCounter  - 1. ! !

!testRun: #PortfolioReportTest #test07PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:32:21'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 16:32:26'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:32:26'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:32:26'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:32:26'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:32:26'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:32:26'!
PASSED!

!classRemoval: #ReceptiveAccountTreeReport stamp: 'jb 5/31/2023 16:32:42'!
Report subclass: #ReceptiveAccountTreeReport
	instanceVariableNames: 'nameforTheAccount accountF'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTreeReport stamp: 'jb 5/31/2023 16:32:45'!
Report subclass: #PortfolioTreeReport
	instanceVariableNames: 'nameForThePortfolio portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:37:32'!
test01PortfoilioWithoutANameShouldMakeException
! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:37:43' prior: 50726857!
test01PortfoilioWithoutANameShouldMakeException

! !

ReportTest subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioReportTest category: 'Portfolio-Solucion' stamp: 'jb 5/31/2023 16:40:14'!
ReportTest subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:40:41'!
test20PortfoilioWithoutANameShouldMakeException

! !

!methodRemoval: PortfolioReportTest #test01PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 16:40:41'!
test01PortfoilioWithoutANameShouldMakeException

!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:40:51'!
test21PortfolioNamedShouldTellItsName
	|portfolio|
	portfolio  :=Portfolio named: 'Portfolio de la familia'.   
	self assert: (OrderedCollection  with: 'Portfolio de la familia')  equals: (TreeReport for: portfolio )  report! !

!methodRemoval: PortfolioReportTest #test02PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 16:40:51'!
test02PortfolioNamedShouldTellItsName
	|portfolio|
	portfolio  :=Portfolio named: 'Portfolio de la familia'.   
	self assert: (OrderedCollection  with: 'Portfolio de la familia')  equals: (TreeReport for: portfolio )  report!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:41:00'!
test22PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio reportCollection |
	portfolio  :=  Portfolio named: 'Portfolio de la familia' with: (Portfolio named:  'Portfolio de los hijos') .   	reportCollection  := OrderedCollection  with:  'Portfolio de la familia' with: String tab, 'Portfolio de los hijos'. 

	self assert: reportCollection  equals: (TreeReport  for:  portfolio  ) report! !

!methodRemoval: PortfolioReportTest #test03PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:41:00'!
test03PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio reportCollection |
	portfolio  :=  Portfolio named: 'Portfolio de la familia' with: (Portfolio named:  'Portfolio de los hijos') .   	reportCollection  := OrderedCollection  with:  'Portfolio de la familia' with: String tab, 'Portfolio de los hijos'. 

	self assert: reportCollection  equals: (TreeReport  for:  portfolio  ) report!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:41:09'!
test23PortfolioWithAnAccountShouldMakeTheCorrectReport
	|portfolio 	reportCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount named:  'Cuenta de Angeles' ) .   	reportCollection := OrderedCollection with:  'Portfolio de la familia'  with: String tab, 'Cuenta de Angeles'. 


	self assert:  reportCollection equals:  (TreeReport for:  portfolio)  report! !

!methodRemoval: PortfolioReportTest #test04PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:41:09'!
test04PortfolioWithAnAccountShouldMakeTheCorrectReport
	|portfolio 	reportCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount named:  'Cuenta de Angeles' ) .   	reportCollection := OrderedCollection with:  'Portfolio de la familia'  with: String tab, 'Cuenta de Angeles'. 


	self assert:  reportCollection equals:  (TreeReport for:  portfolio)  report!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:41:18'!
test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport
	|portfolio responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount  named:  'Cuenta de Angeles') with: (Portfolio  named:  'Portfolio de los hijos' ).   	responseCollection  := OrderedCollection  with: 'Portfolio de la familia' with: String tab, 'Cuenta de Angeles'  with: String tab,'Portfolio de los hijos'   .

	self assert: 	responseCollection    equals:  ( TreeReport  for:portfolio  ) report! !

!methodRemoval: PortfolioReportTest #test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:41:18'!
test05PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport
	|portfolio responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount  named:  'Cuenta de Angeles') with: (Portfolio  named:  'Portfolio de los hijos' ).   	responseCollection  := OrderedCollection  with: 'Portfolio de la familia' with: String tab, 'Cuenta de Angeles'  with: String tab,'Portfolio de los hijos'   .

	self assert: 	responseCollection    equals:  ( TreeReport  for:portfolio  ) report!
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:41:26'!
test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport
	|portfolio  responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (Portfolio  named:  'Portfolio de los hijos' with: (ReceptiveAccount  named: 'Cuenta de Angeles')).   	responseCollection  := OrderedCollection  with:'Portfolio de la familia'  with: String tab, 'Portfolio de los hijos'   with: String tab, String tab,'Cuenta de Angeles' .


	self assert: responseCollection   equals: (TreeReport  for: portfolio ) report ! !

!methodRemoval: PortfolioReportTest #test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:41:26'!
test06PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport
	|portfolio  responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (Portfolio  named:  'Portfolio de los hijos' with: (ReceptiveAccount  named: 'Cuenta de Angeles')).   	responseCollection  := OrderedCollection  with:'Portfolio de la familia'  with: String tab, 'Portfolio de los hijos'   with: String tab, String tab,'Cuenta de Angeles' .


	self assert: responseCollection   equals: (TreeReport  for: portfolio ) report !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:41:34'!
test26PortfolioWithManyAccountsShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio responseCollection |
	
	johnsAccount := ReceptiveAccount  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio  named:'Portfolio de hijos'  with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio  named: 'Portfolio de la familia' with: childrenPortfolio  with:  myAccount .
	responseCollection := OrderedCollection with: 'Portfolio de la familia'
	 with:  String  tab, 'Portfolio de hijos'
	  with: String  tab, String  tab,  'Cuenta de Juan'
	 with:  String  tab, String  tab,  'Cuenta de Angeles'
	 with:  String  tab, 	'Cuenta mia'.

	
	self  assert: responseCollection  
	 equals:  (TreeReport  for: familyPortfolio ) report. 
! !

!methodRemoval: PortfolioReportTest #test07PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:41:34'!
test07PortfolioWithManyAccountsShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio responseCollection |
	
	johnsAccount := ReceptiveAccount  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio  named:'Portfolio de hijos'  with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio  named: 'Portfolio de la familia' with: childrenPortfolio  with:  myAccount .
	responseCollection := OrderedCollection with: 'Portfolio de la familia'
	 with:  String  tab, 'Portfolio de hijos'
	  with: String  tab, String  tab,  'Cuenta de Juan'
	 with:  String  tab, String  tab,  'Cuenta de Angeles'
	 with:  String  tab, 	'Cuenta mia'.

	
	self  assert: responseCollection  
	 equals:  (TreeReport  for: familyPortfolio ) report. 
!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:41:41'!
test20PortfoilioWithoutANameShouldMakeException

! !

!methodRemoval: PortfolioReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 16:41:42'!
test20PortfoilioWithoutANameShouldMakeException

!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:41:47'!
test21PortfolioNamedShouldTellItsName
	|portfolio|
	portfolio  :=Portfolio named: 'Portfolio de la familia'.   
	self assert: (OrderedCollection  with: 'Portfolio de la familia')  equals: (TreeReport for: portfolio )  report! !

!methodRemoval: PortfolioReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 16:41:47'!
test21PortfolioNamedShouldTellItsName
	|portfolio|
	portfolio  :=Portfolio named: 'Portfolio de la familia'.   
	self assert: (OrderedCollection  with: 'Portfolio de la familia')  equals: (TreeReport for: portfolio )  report!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:41:54'!
test22PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio reportCollection |
	portfolio  :=  Portfolio named: 'Portfolio de la familia' with: (Portfolio named:  'Portfolio de los hijos') .   	reportCollection  := OrderedCollection  with:  'Portfolio de la familia' with: String tab, 'Portfolio de los hijos'. 

	self assert: reportCollection  equals: (TreeReport  for:  portfolio  ) report! !

!methodRemoval: PortfolioReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:41:54'!
test22PortfolioWithPortfolioShouldMakeTheCorrectReport
	|portfolio reportCollection |
	portfolio  :=  Portfolio named: 'Portfolio de la familia' with: (Portfolio named:  'Portfolio de los hijos') .   	reportCollection  := OrderedCollection  with:  'Portfolio de la familia' with: String tab, 'Portfolio de los hijos'. 

	self assert: reportCollection  equals: (TreeReport  for:  portfolio  ) report!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:41:57'!
test23PortfolioWithAnAccountShouldMakeTheCorrectReport
	|portfolio 	reportCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount named:  'Cuenta de Angeles' ) .   	reportCollection := OrderedCollection with:  'Portfolio de la familia'  with: String tab, 'Cuenta de Angeles'. 


	self assert:  reportCollection equals:  (TreeReport for:  portfolio)  report! !

!methodRemoval: PortfolioReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:41:58'!
test23PortfolioWithAnAccountShouldMakeTheCorrectReport
	|portfolio 	reportCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount named:  'Cuenta de Angeles' ) .   	reportCollection := OrderedCollection with:  'Portfolio de la familia'  with: String tab, 'Cuenta de Angeles'. 


	self assert:  reportCollection equals:  (TreeReport for:  portfolio)  report!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:42:00'!
test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport
	|portfolio responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount  named:  'Cuenta de Angeles') with: (Portfolio  named:  'Portfolio de los hijos' ).   	responseCollection  := OrderedCollection  with: 'Portfolio de la familia' with: String tab, 'Cuenta de Angeles'  with: String tab,'Portfolio de los hijos'   .

	self assert: 	responseCollection    equals:  ( TreeReport  for:portfolio  ) report! !

!methodRemoval: PortfolioReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:42:01'!
test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport
	|portfolio responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount  named:  'Cuenta de Angeles') with: (Portfolio  named:  'Portfolio de los hijos' ).   	responseCollection  := OrderedCollection  with: 'Portfolio de la familia' with: String tab, 'Cuenta de Angeles'  with: String tab,'Portfolio de los hijos'   .

	self assert: 	responseCollection    equals:  ( TreeReport  for:portfolio  ) report!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:42:04'!
test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport
	|portfolio  responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (Portfolio  named:  'Portfolio de los hijos' with: (ReceptiveAccount  named: 'Cuenta de Angeles')).   	responseCollection  := OrderedCollection  with:'Portfolio de la familia'  with: String tab, 'Portfolio de los hijos'   with: String tab, String tab,'Cuenta de Angeles' .


	self assert: responseCollection   equals: (TreeReport  for: portfolio ) report ! !

!methodRemoval: PortfolioReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:42:04'!
test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport
	|portfolio  responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (Portfolio  named:  'Portfolio de los hijos' with: (ReceptiveAccount  named: 'Cuenta de Angeles')).   	responseCollection  := OrderedCollection  with:'Portfolio de la familia'  with: String tab, 'Portfolio de los hijos'   with: String tab, String tab,'Cuenta de Angeles' .


	self assert: responseCollection   equals: (TreeReport  for: portfolio ) report !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 16:42:08'!
test26PortfolioWithManyAccountsShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio responseCollection |
	
	johnsAccount := ReceptiveAccount  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio  named:'Portfolio de hijos'  with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio  named: 'Portfolio de la familia' with: childrenPortfolio  with:  myAccount .
	responseCollection := OrderedCollection with: 'Portfolio de la familia'
	 with:  String  tab, 'Portfolio de hijos'
	  with: String  tab, String  tab,  'Cuenta de Juan'
	 with:  String  tab, String  tab,  'Cuenta de Angeles'
	 with:  String  tab, 	'Cuenta mia'.

	
	self  assert: responseCollection  
	 equals:  (TreeReport  for: familyPortfolio ) report. 
! !

!methodRemoval: PortfolioReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:42:08'!
test26PortfolioWithManyAccountsShouldMakeTheCorrectReport
	|johnsAccount angiesAccount childrenPortfolio myAccount familyPortfolio responseCollection |
	
	johnsAccount := ReceptiveAccount  named: 'Cuenta de Juan'. 
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio  named:'Portfolio de hijos'  with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio  named: 'Portfolio de la familia' with: childrenPortfolio  with:  myAccount .
	responseCollection := OrderedCollection with: 'Portfolio de la familia'
	 with:  String  tab, 'Portfolio de hijos'
	  with: String  tab, String  tab,  'Cuenta de Juan'
	 with:  String  tab, String  tab,  'Cuenta de Angeles'
	 with:  String  tab, 	'Cuenta mia'.

	
	self  assert: responseCollection  
	 equals:  (TreeReport  for: familyPortfolio ) report. 
!

!testRun: #PortfolioReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!testRun: #PortfolioReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 16:42:11'!
PASSED!

!classRemoval: #PortfolioReportTest stamp: 'jb 5/31/2023 16:42:17'!
ReportTest subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #EspecialReport category: 'Portfolio-Solucion' stamp: 'jb 5/31/2023 17:04:24'!
Report subclass: #EspecialReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'tree report test' stamp: 'jb 5/31/2023 17:04:11'!
test27PortfolioWithANameShouldReportItsNameAndItsBalance
	|portfolio|
	portfolio  :=Portfolio named: 'Portfolio de la familia'.   
	self assert: (OrderedCollection  with: 'Portfolio de la familia' with: 'Balance = 0' )  equals: (EspecialReport for: portfolio )  report! !

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:04:26'!
FAILURE!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:05:42'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:05:42'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:05:42'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:05:42'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:05:42'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:05:42'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:05:42'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:05:42'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:05:42'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:05:42'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:05:42'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:05:42'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:05:43'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:05:43'!
FAILURE!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:05:43'!
FAILURE!

!classDefinition: #EspecialReport category: 'Portfolio-Solucion' stamp: 'jb 5/31/2023 17:08:53'!
Report subclass: #EspecialReport
	instanceVariableNames: 'responseCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!EspecialReport methodsFor: 'nil' stamp: 'jb 5/31/2023 17:08:51' overrides: 50726149!
reportPortfolio:aPortfolio
	responseCollection add: aPortfolio  name. ! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:09:23' overrides: 50724308!
initializeFor: anAccount
	super initializeFor:  anAccount .
	responseCollection  := OrderedCollection  new. ! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:10:55' overrides: 50724335!
report
	super report . 
	^responseCollection! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:12:22' prior: 50727597 overrides: 50726149!
reportPortfolio:aPortfolio
	responseCollection add: aPortfolio  name. 
	responseCollection  add: 'Balance =', aPortfolio  balance  asString .! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:12:25'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:12:26'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:12:26'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:12:26'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:12:26'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:12:26'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:12:26'!
FAILURE!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:12:26'!
FAILURE!
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:12:52' prior: 50727616 overrides: 50726149!
reportPortfolio:aPortfolio
	responseCollection add: aPortfolio  name. 
	responseCollection  add: 'Balance = ', aPortfolio  balance  asString .! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:12:54'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:12:54'!
PASSED!
!ReportTest methodsFor: 'tree report test' stamp: 'jb 5/31/2023 17:18:54'!
test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances
	|portfolio 	reportCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount named:  'Cuenta de Angeles' ) .   	reportCollection := OrderedCollection with:  'Portfolio de la familia'  with: String tab, 'Cuenta de Angeles' with: String tab,String tab,'Balance = 0' with: String tab, 'Balance = 0'
	
	. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !
!ReportTest methodsFor: 'tree report test' stamp: 'jb 5/31/2023 17:19:04' prior: 50727472!
test27PortfolioWithANameShouldReportItsNameAndItsBalance
	|portfolio|
	portfolio  :=Portfolio named: 'Portfolio de la familia'.   
	self assert: (OrderedCollection  with: 'Portfolio de la familia' with: String tab,'Balance = 0' )  equals: (EspecialReport for: portfolio )  report! !

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:19:30'!
FAILURE!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:19:35'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:19:36'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:19:36'!
FAILURE!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:19:36'!
FAILURE!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:19:39'!
FAILURE!
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:20:03' prior: 50727726 overrides: 50726149!
reportPortfolio:aPortfolio
	responseCollection add: aPortfolio  name. 
	responseCollection  add: 'Balance = ', String tab, aPortfolio  balance  asString .! !

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:20:04'!
FAILURE!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:20:08'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:20:08'!
FAILURE!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:20:08'!
FAILURE!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:20:10'!
FAILURE!
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:20:34' prior: 50727976 overrides: 50726149!
reportPortfolio:aPortfolio
	responseCollection add: aPortfolio  name. 
	responseCollection  add:  String tab, 'Balance = ',  aPortfolio  balance  asString .! !

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:20:36'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:20:38'!
FAILURE!
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:25:33' prior: 50728095 overrides: 50726149!
reportPortfolio:aPortfolio

	responseCollection add: aPortfolio  name.
	aPortfolio  reportAllAccountsTo:  self. 
	responseCollection  add:  String tab, 'Balance = ',  aPortfolio  balance  asString .! !

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:25:36'!
FAILURE!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:25:40'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:25:45'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:25:45'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:25:45'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:25:45'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:25:46'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:25:46'!
FAILURE!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:25:46'!
FAILURE!
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 17:26:39' overrides: 50726053!
reportReceptiveAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 17:28:20' prior: 50728239 overrides: 50726053!
reportReceptiveAccount: aReceptiveAccount 
	responseCollection  add: String  tab, aReceptiveAccount  name. 
	responseCollection  add:String tab,  String tab,   'Balance = ', aReceptiveAccount  balance  asString ! !

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:28:22'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:28:25'!
PASSED!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 17:32:57'!
test28PortfolioWithAccountWithDepositShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   
	Deposit  register:  100  on: angelsAccount.  	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Deposito por 100'  
			with: String tab,String tab,'Balance = 0'
		 with: String tab, 'Balance = 0'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 17:33:10' prior: 50728263!
test28PortfolioWithAccountWithDepositShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   
	Deposit  register:  100  on: angelsAccount.  	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Depósito por 100'  
			with: String tab,String tab,'Balance = 0'
		 with: String tab, 'Balance = 0'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 17:33:31' prior: 50728287!
test28PortfolioWithAccountWithDepositShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   
	Deposit  register:  100  on: angelsAccount.  	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Depósito por 100'  
			with: String tab,String tab,'Balance = 100'
		 with: String tab, 'Balance = 100'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:33:35'!
FAILURE!
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 17:34:36' prior: 50728245 overrides: 50726053!
reportReceptiveAccount: aReceptiveAccount 
	responseCollection  add: String  tab, aReceptiveAccount  name. 
	aReceptiveAccount  reportAllTransactionsTo:  self.
	responseCollection  add:String tab,  String tab,   'Balance = ', aReceptiveAccount  balance  asString ! !

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:34:38'!
ERROR!
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:35:52' overrides: 50724313!
reportDeposit: aDeposit 
	self shouldBeImplemented.! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:36:50' prior: 50728355 overrides: 50724313!
reportDeposit: aDeposit 
	responseCollection  add: String  tab, String tab, 'Depósito por ',aDeposit  value  asString ! !

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:36:52'!
PASSED!

!classDefinition: #EspecialReport category: 'Portfolio-Solucion' stamp: 'jb 5/31/2023 17:37:33'!
Report subclass: #EspecialReport
	instanceVariableNames: 'responseCollection tabCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 17:37:31'!
addTabs
	|tabString|
	tabString := ''.  
	  1  to:  tabCounter do: [:iter|
		tabString  := tabString,String tab.
		].
	^tabString 
	! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:37:45' prior: 50727603 overrides: 50724308!
initializeFor: anAccount
	super initializeFor:  anAccount .
	tabCounter  := 0. 
	responseCollection  := OrderedCollection  new. ! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:38:44' prior: 50728112 overrides: 50726149!
reportPortfolio:aPortfolio

	responseCollection add: aPortfolio  name.
	tabCounter  := tabCounter  + 1. 
	aPortfolio  reportAllAccountsTo:  self. 
	responseCollection  add:  self addTabs, 'Balance = ',  aPortfolio  balance  asString .! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:39:17' prior: 50728502 overrides: 50726149!
reportPortfolio:aPortfolio

	responseCollection add:  self addTabs, aPortfolio  name.
	tabCounter  := tabCounter  + 1. 
	aPortfolio  reportAllAccountsTo:  self. 
	responseCollection  add:  self addTabs,  'Balance = ',  aPortfolio  balance  asString .
	! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:39:58'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:40:01'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:40:02'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:03'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:03'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:03'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:03'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:03'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:40:03'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:40:03'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:40:03'!
PASSED!
!TreeReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 17:40:54' prior: 50726800 overrides: 50726149!
reportPortfolio: aPortfolio 
	nameHirarchy add:  self addTabs,aPortfolio  name. 
	tabCounter := tabCounter + 1. 
	aPortfolio  reportAllAccountsTo:self. 
	tabCounter  :=  tabCounter  - 1. ! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:40:56'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:40:57'!
ERROR!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:57'!
ERROR!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:57'!
ERROR!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:57'!
ERROR!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:57'!
ERROR!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:40:57'!
ERROR!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:40:57'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:40:57'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:40:57'!
PASSED!
!TreeReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 17:41:35' prior: 50728843 overrides: 50726149!
reportPortfolio: aPortfolio 
	(nameHirarchy  size = 0 )ifTrue:  [
		nameHirarchy add: aPortfolio  name. 	
		tabCounter := 1 . 
		] ifFalse:  [
			nameHirarchy add:  self addTabs,aPortfolio  name. 
			tabCounter := tabCounter + 1. 
			].
	aPortfolio  reportAllAccountsTo:self. 
	tabCounter  :=  tabCounter  - 1. ! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:41:37'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:41:37'!
PASSED!
!TreeReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 17:42:12' prior: 50728958 overrides: 50726149!
reportPortfolio: aPortfolio 
	"(nameHirarchy  size = 0 )ifTrue:  [
		nameHirarchy add: aPortfolio  name. 	
		tabCounter := 1 . 
		] ifFalse:  [
			nameHirarchy add:  self addTabs,aPortfolio  name. 
			tabCounter := tabCounter + 1. 
			]."
	nameHirarchy add:  self addTabs,aPortfolio  name. 
	tabCounter := tabCounter + 1. 
	aPortfolio  reportAllAccountsTo:self. 
	tabCounter  :=  tabCounter  - 1. ! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:42:26'!
ERROR!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:42:26'!
ERROR!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:42:26'!
ERROR!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:42:26'!
ERROR!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:42:26'!
ERROR!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:42:26'!
ERROR!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:42:26'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:42:28'!
ERROR!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:43:35'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:43:38'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:43:40'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:43:43'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:43:45'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:43:48'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:43:50'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:43:55'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:43:55'!
ERROR!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:43:55'!
ERROR!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:43:55'!
ERROR!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:43:55'!
ERROR!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:43:55'!
ERROR!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:43:55'!
ERROR!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:43:57'!
ERROR!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:44:27'!
ERROR!
!TreeReport methodsFor: 'initializing' stamp: 'jb 5/31/2023 17:45:43' prior: 50725709 overrides: 50724308!
initializeFor: anAccount
	nameHirarchy  := OrderedCollection  new.
	tabCounter  :=0.
	super  initializeFor:  anAccount . 
! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:45:45'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 17:55:33'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 17:55:33'!
PASSED!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 17:57:11'!
test29PortfolioWithAccountWithWithdrawShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   
	Withdraw  register:  100  on: angelsAccount.  	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Extracción por 100'  
			with: String tab,String tab,'Balance = -100'
		 with: String tab, 'Balance = -100'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 17:57:15'!
ERROR!
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:57:28' overrides: 50724330!
reportWithdraw: aWithdraw 
	self shouldBeImplemented.! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:58:18' prior: 50729507 overrides: 50724330!
reportWithdraw: aWithdraw 
	responseCollection  add: self addTabs ,  'Extracción por ' ,aWithdraw value   ! !

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 17:58:20'!
ERROR!
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 17:58:33' prior: 50729513 overrides: 50724330!
reportWithdraw: aWithdraw 
	responseCollection  add: self addTabs ,  'Extracción por ' ,aWithdraw value   asString ! !

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 17:58:36'!
FAILURE!

(EspecialReport  for:  portfolio)  report!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:01:28'!
FAILURE!

reportCollection!

(EspecialReport  for:  portfolio)  report!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:02:37'!
FAILURE!
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 18:04:48' prior: 50728339 overrides: 50726053!
reportReceptiveAccount: aReceptiveAccount 
	responseCollection  add: self addTabs , aReceptiveAccount  name. 
	tabCounter  := tabCounter  + 1.
	aReceptiveAccount  reportAllTransactionsTo:  self.
	responseCollection add:  self addTabs ,   'Balance = ', aReceptiveAccount  balance  asString.
	 tabCounter  := tabCounter  - 1! !

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:04:50'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:04:50'!
PASSED!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 18:06:07'!
test30PortfolioWithAccountWithExitTransferShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   
	Transfer  	theAmmount: 100  from: angelsAccount  to: ReceptiveAccount  new.	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Salida por extracción por 100'  
			with: String tab,String tab,'Balance = -100'
		 with: String tab, 'Balance = -100'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 18:06:17' prior: 50729674!
test30PortfolioWithAccountWithExitTransferShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   
	Transfer  	theAmmount: 100  from: angelsAccount  to: ReceptiveAccount  new.	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Salida por extracción de 100'  
			with: String tab,String tab,'Balance = -100'
		 with: String tab, 'Balance = -100'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:06:21'!
ERROR!
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 18:06:32' overrides: 50724324!
reportExtractionTransfer: anExtractionLeg 
	self shouldBeImplemented.! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 18:07:28' prior: 50729729 overrides: 50724324!
reportExtractionTransfer: anExtractionLeg 
	responseCollection  add: self addTabs , 'Salida por extracción de ', anExtractionLeg  value asString ! !

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:07:31'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:07:31'!
PASSED!
!EspecialReport methodsFor: 'report a transaction' stamp: 'jb 5/31/2023 18:08:21' prior: 50728361 overrides: 50724313!
reportDeposit: aDeposit 
	responseCollection  add: self addTabs , 'Depósito por ',aDeposit  value  asString ! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:08:22'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:08:22'!
PASSED!
!EspecialReport methodsFor: 'report a transaction' stamp: 'jb 5/31/2023 18:09:43' prior: 50729861 overrides: 50724313!
reportDeposit: aDeposit 
	|aString|
	aString := 'Depósito por '.
	responseCollection  add: self addTabs , aString ,aDeposit  value  asString ! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:09:45'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:09:45'!
PASSED!
!EspecialReport methodsFor: 'report a transaction' stamp: 'jb 5/31/2023 18:10:18'!
reportTheMessage: aString withTheAmmount: aDeposit

	^ responseCollection  add: self addTabs , aString ,aDeposit  value  asString! !
!EspecialReport methodsFor: 'report a transaction' stamp: 'jb 5/31/2023 18:10:18' prior: 50729982 overrides: 50724313!
reportDeposit: aDeposit 
	|aString|
	aString := 'Depósito por '.
	self reportTheMessage: aString withTheAmmount: aDeposit ! !
!EspecialReport methodsFor: 'report a transaction' stamp: 'jb 5/31/2023 18:10:34' prior: 50730111 overrides: 50724313!
reportDeposit: aDeposit 
	self reportTheMessage: 'Depósito por ' withTheAmmount: aDeposit ! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:10:37'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:10:37'!
PASSED!
!EspecialReport methodsFor: 'report a transaction' stamp: 'jb 5/31/2023 18:11:29' prior: 50729735 overrides: 50724324!
reportExtractionTransfer: anExtractionLeg 
	self reportTheMessage:   'Salida por extracción de ' withTheAmmount: anExtractionLeg! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:11:31'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:11:31'!
PASSED!
!EspecialReport methodsFor: 'report a transaction' stamp: 'jb 5/31/2023 18:11:57' prior: 50729524 overrides: 50724330!
reportWithdraw: aWithdraw 
self reportTheMessage:  'Extracción por '  withTheAmmount: aWithdraw 
! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:11:59'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:11:59'!
PASSED!
!EspecialReport methodsFor: 'report a transaction' stamp: 'jb 5/31/2023 18:12:04' prior: 50730362 overrides: 50724330!
reportWithdraw: aWithdraw 
	self reportTheMessage:  'Extracción por '  withTheAmmount: aWithdraw 
! !
!EspecialReport methodsFor: 'report a transaction' stamp: 'jb 5/31/2023 18:12:22'!
reportTheMessage: aString withTheAmmountOf: aDeposit

	^ responseCollection  add: self addTabs , aString ,aDeposit  value  asString! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 18:12:22' prior: 50730483 overrides: 50724330!
reportWithdraw: aWithdraw 
	self reportTheMessage:  'Extracción por '  withTheAmmountOf: aWithdraw 
! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 18:12:22' prior: 50730240 overrides: 50724324!
reportExtractionTransfer: anExtractionLeg 
	self reportTheMessage:   'Salida por extracción de ' withTheAmmountOf: anExtractionLeg! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 18:12:22' prior: 50730119 overrides: 50724313!
reportDeposit: aDeposit 
	self reportTheMessage: 'Depósito por ' withTheAmmountOf: aDeposit ! !

!methodRemoval: EspecialReport #reportTheMessage:withTheAmmount: stamp: 'jb 5/31/2023 18:12:22'!
reportTheMessage: aString withTheAmmount: aDeposit

	^ responseCollection  add: self addTabs , aString ,aDeposit  value  asString!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 18:13:30' prior: 50729699!
test30PortfolioWithAccountWithExitTransferShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   
	Transfer  	theAmmount: 100  from:   ReceptiveAccount  new to: angelsAccount.	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Entrada por Depósito de 100'  
			with: String tab,String tab,'Balance = -100'
		 with: String tab, 'Balance = -100'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 18:13:36' prior: 50730526!
test30PortfolioWithAccountWithExitTransferShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   
	Transfer  	theAmmount: 100  from:   ReceptiveAccount  new to: angelsAccount.	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Entrada por Depósito de 100'  
			with: String tab,String tab,'Balance = 100'
		 with: String tab, 'Balance = 100'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:13:37'!
ERROR!
!EspecialReport methodsFor: 'report a transaction' stamp: 'jb 5/31/2023 18:14:08' overrides: 50724318!
reportDepositTransfer: aDepositLeg 
	self shouldBeImplemented.! !
!EspecialReport methodsFor: 'report a transaction' stamp: 'jb 5/31/2023 18:15:36' prior: 50730580 overrides: 50724318!
reportDepositTransfer: aDepositLeg 
	self reportTheMessage:  'Entrada por depósito de ' withTheAmmountOf: aDepositLeg! !

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:15:38'!
FAILURE!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 18:15:54' prior: 50730551!
test30PortfolioWithAccountWithExitTransferShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   
	Transfer  	theAmmount: 100  from:   ReceptiveAccount  new to: angelsAccount.	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Entrada por depósito de 100'  
			with: String tab,String tab,'Balance = 100'
		 with: String tab, 'Balance = 100'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:15:56'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:15:56'!
PASSED!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 18:16:38'!
test31PortfolioWithAccountWithInTransferShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   
	Transfer  	theAmmount: 100  from:   ReceptiveAccount  new to: angelsAccount.	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Entrada por depósito de 100'  
			with: String tab,String tab,'Balance = 100'
		 with: String tab, 'Balance = 100'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 18:17:22' prior: 50730597!
test30PortfolioWithAccountWithExitTransferShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   
	Transfer  	theAmmount: 100  from:    angelsAccount to: angelsAccount.	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Salida por extracción de 100'  
			with: String tab,String tab,'Balance = -100'
		 with: String tab, 'Balance = -100'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:17:23'!
FAILURE!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 18:17:51' prior: 50730764!
test30PortfolioWithAccountWithExitTransferShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   
	Transfer  	theAmmount: 100  from:   angelsAccount to: ReceptiveAccount  new.	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Salida por extracción de 100'  
			with: String tab,String tab,'Balance = -100'
		 with: String tab, 'Balance = -100'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:17:54'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:17:55'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:17:55'!
PASSED!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 18:21:08'!
test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   

	Deposit register:   100 on: angelsAccount .  
	Transfer  	theAmmount: 100  from:   ReceptiveAccount  new to: angelsAccount.	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Depósito de 100'  
			with: String tab,String tab,'Entrada por depósito de 100'  
			with: String tab,String tab,'Balance = 200'
		 with: String tab, 'Balance = 200'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 18:21:09'!
FAILURE!

(EspecialReport  for:  portfolio)  report!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 18:21:42' prior: 50730939!
test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   

	Deposit register:   100 on: angelsAccount .  
	Transfer  	theAmmount: 100  from:   ReceptiveAccount  new to: angelsAccount.	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Depósito de 100'  
			with: String tab,String tab,'Entrada por depósito por 100'  
			with: String tab,String tab,'Balance = 200'
		 with: String tab, 'Balance = 200'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 18:21:50'!
FAILURE!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 18:22:01' prior: 50730973!
test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly
	|portfolio 	reportCollection angelsAccount |	
	angelsAccount :=  ReceptiveAccount named:  'Cuenta de Angeles'. 
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (angelsAccount) .   

	Deposit register:   100 on: angelsAccount .  
	Transfer  	theAmmount: 100  from:   ReceptiveAccount  new to: angelsAccount.	
	reportCollection := OrderedCollection 
	with:  'Portfolio de la familia'  
		with: String tab, 'Cuenta de Angeles'
			with: String tab,String tab,'Depósito por 100'  
			with: String tab,String tab,'Entrada por depósito de 100'  
			with: String tab,String tab,'Balance = 200'
		 with: String tab, 'Balance = 200'. 


	self assert:  reportCollection equals:  (EspecialReport  for:  portfolio)  report! !

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 18:22:04'!
PASSED!

TreeReport subclass: #EspecialReport
	instanceVariableNames: 'responseCollection tabCounter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #EspecialReport category: 'Portfolio-Solucion' stamp: 'jb 5/31/2023 18:24:35'!
Report subclass: #EspecialReport
	instanceVariableNames: 'responseCollection tabCounter_'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 18:24:35' prior: 50729547 overrides: 50726053!
reportReceptiveAccount: aReceptiveAccount 
	responseCollection  add: self addTabs , aReceptiveAccount  name. 
	tabCounter_  := tabCounter_  + 1.
	aReceptiveAccount  reportAllTransactionsTo:  self.
	responseCollection add:  self addTabs ,   'Balance = ', aReceptiveAccount  balance  asString.
	 tabCounter_  := tabCounter_  - 1! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 18:24:35' prior: 50728494 overrides: 50724308!
initializeFor: anAccount
	super initializeFor:  anAccount .
	tabCounter_  := 0. 
	responseCollection  := OrderedCollection  new. ! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 18:24:35' prior: 50728514 overrides: 50726149!
reportPortfolio:aPortfolio

	responseCollection add:  self addTabs, aPortfolio  name.
	tabCounter_  := tabCounter_  + 1. 
	aPortfolio  reportAllAccountsTo:  self. 
	responseCollection  add:  self addTabs,  'Balance = ',  aPortfolio  balance  asString .
	! !
!EspecialReport methodsFor: 'as yet unclassified' stamp: 'jb 5/31/2023 18:24:35' prior: 50728486!
addTabs
	|tabString|
	tabString := ''.  
	  1  to:  tabCounter_ do: [:iter|
		tabString  := tabString,String tab.
		].
	^tabString 
	! !

TreeReport subclass: #EspecialReport
	instanceVariableNames: 'responseCollection tabCounter_'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #EspecialReport category: 'Portfolio-Solucion' stamp: 'jb 5/31/2023 18:24:44'!
TreeReport subclass: #EspecialReport
	instanceVariableNames: 'responseCollection tabCounter_'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:24:54'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 18:24:54'!
PASSED!
!ReportTest methodsFor: 'tree report test' stamp: 'jb 5/31/2023 18:28:33'!
test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport
	|portfolio responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount  named:  'Cuenta de Angeles') with: (Portfolio  named:  'Portfolio de los hijos' ).   	responseCollection  := OrderedCollection 
	with: 'Portfolio de la familia' 
	with: String tab, 'Cuenta de Angeles'  
		with:  String tab,String tab, 'Balance = 0' 
	with: String tab,'Portfolio de los hijos' . 
	responseCollection  add:  String tab,  String tab, 'Balance = 0' . 
	responseCollection  add: String tab, 'Balance = 0'.  
	
	self assert: 	responseCollection    equals:  ( TreeReport  for:portfolio  ) report! !
!ReportTest methodsFor: 'tree report test' stamp: 'jb 5/31/2023 18:28:43' prior: 50731352!
test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport
	|portfolio responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount  named:  'Cuenta de Angeles') with: (Portfolio  named:  'Portfolio de los hijos' ).   	responseCollection  := OrderedCollection 
	with: 'Portfolio de la familia' 
	with: String tab, 'Cuenta de Angeles'  
		with:  String tab,String tab, 'Balance = 0' 
	with: String tab,'Portfolio de los hijos' . 
	responseCollection  add:  String tab,  String tab, 'Balance = 0' . 
	responseCollection  add: String tab, 'Balance = 0'.  
	
	self assert: 	responseCollection    equals:  ( EspecialReport  for:portfolio  ) report! !
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 18:29:27' prior: 50731377!
test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport
	|portfolio responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount  named:  'Cuenta de Angeles') with: (Portfolio  named:  'Portfolio de los hijos' ).   	responseCollection  := OrderedCollection 
	with: 'Portfolio de la familia' 
		with: String tab, 'Cuenta de Angeles'  
			with:  String tab,String tab, 'Balance = 0' 
		with: String tab,'Portfolio de los hijos' . 
			responseCollection  add:  String tab,  String tab, 'Balance = 0' . 
		responseCollection  add: String tab, 'Balance = 0'.  
	
	self assert: 	responseCollection    equals:  ( EspecialReport  for:portfolio  ) report! !

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 18:29:29'!
FAILURE!

 ( EspecialReport  for:portfolio  ) report!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 18:30:13'!
FAILURE!
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 18:30:56' prior: 50731197 overrides: 50729077!
reportPortfolio:aPortfolio

	responseCollection add:  self addTabs, aPortfolio  name.
	tabCounter_  := tabCounter_  + 1. 
	aPortfolio  reportAllAccountsTo:  self. 
	responseCollection  add:  self addTabs,  'Balance = ',  aPortfolio  balance  asString .
	tabCounter_  := tabCounter_  + 1! !

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 18:30:59'!
FAILURE!

  ( EspecialReport  for:portfolio  ) report!
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 18:32:04' prior: 50731440 overrides: 50729077!
reportPortfolio:aPortfolio

	responseCollection add:  self addTabs, aPortfolio  name.
	tabCounter_  := tabCounter_  + 1. 
	aPortfolio  reportAllAccountsTo:  self. 
	responseCollection  add:  self addTabs,  'Balance = ',  aPortfolio  balance  asString .
	tabCounter_  := tabCounter_  - 1! !

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 18:32:06'!
FAILURE!

( EspecialReport  for:portfolio  ) report!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:33:14'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:33:15'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:33:15'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:33:15'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:33:15'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:33:15'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:33:15'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 18:33:15'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 18:33:15'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 18:33:30'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:33:30'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:33:30'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:33:30'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:33:30'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:33:30'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:33:30'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:33:30'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:33:30'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:33:30'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:33:30'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:33:30'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 18:33:31'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 18:33:31'!
PASSED!
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 18:34:54' prior: 50731209 overrides: 50726579!
addTabs
	|tabString|
	tabString := ''.  
	  1  to:  tabCounter do: [:iter|
		tabString  := tabString,String tab.
		].
	^tabString 
	! !
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 18:35:12' prior: 50731459 overrides: 50729077!
reportPortfolio:aPortfolio

	responseCollection add:  self addTabs, aPortfolio  name.
	tabCounter  := tabCounter  + 1. 
	aPortfolio  reportAllAccountsTo:  self. 
	responseCollection  add:  self addTabs,  'Balance = ',  aPortfolio  balance  asString .
	tabCounter := tabCounter  - 1! !
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 18:35:25' prior: 50731175 overrides: 50726558!
reportReceptiveAccount: aReceptiveAccount 
	responseCollection  add: self addTabs , aReceptiveAccount  name. 
	tabCounter := tabCounter + 1.
	aReceptiveAccount  reportAllTransactionsTo:  self.
	responseCollection add:  self addTabs ,   'Balance = ', aReceptiveAccount  balance  asString.
	 tabCounter  := tabCounter  - 1! !
!EspecialReport methodsFor: 'initializing' stamp: 'jb 5/31/2023 18:35:37' prior: 50731189 overrides: 50729261!
initializeFor: anAccount
	super initializeFor:  anAccount . 
	responseCollection  := OrderedCollection  new. ! !

!classDefinition: #EspecialReport category: 'Portfolio-Solucion' stamp: 'jb 5/31/2023 18:35:52'!
TreeReport subclass: #EspecialReport
	instanceVariableNames: 'responseCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: EspecialReport #addTabs stamp: 'jb 5/31/2023 18:36:03'!
addTabs
	|tabString|
	tabString := ''.  
	  1  to:  tabCounter do: [:iter|
		tabString  := tabString,String tab.
		].
	^tabString 
	!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:36:09'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:36:10'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:36:10'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:36:10'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:36:10'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:36:10'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:36:10'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:36:10'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:36:10'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:36:10'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 18:36:10'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 18:36:10'!
PASSED!
!EspecialReport methodsFor: 'report a transaction private' stamp: 'jb 5/31/2023 18:37:38' prior: 50730489!
reportTheMessage: aString withTheAmmountOf: aDeposit

	^ nameHirarchy  add: self addTabs , aString ,aDeposit  value  asString! !
!EspecialReport methodsFor: 'report' stamp: 'jb 5/31/2023 18:39:50' prior: 50727610 overrides: 50725527!
report
	super report . 
	! !
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 18:40:06' prior: 50731747 overrides: 50729077!
reportPortfolio:aPortfolio

	nameHirarchy add:  self addTabs, aPortfolio  name.
	tabCounter  := tabCounter  + 1. 
	aPortfolio  reportAllAccountsTo:  self. 
	nameHirarchy  add:  self addTabs,  'Balance = ',  aPortfolio  balance  asString .
	tabCounter := tabCounter  - 1! !
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 18:40:16' prior: 50731760 overrides: 50726558!
reportReceptiveAccount: aReceptiveAccount 
	nameHirarchy  add: self addTabs , aReceptiveAccount  name. 
	tabCounter := tabCounter + 1.
	aReceptiveAccount  reportAllTransactionsTo:  self.
	nameHirarchy add:  self addTabs ,   'Balance = ', aReceptiveAccount  balance  asString.
	 tabCounter  := tabCounter  - 1! !

!methodRemoval: EspecialReport #report stamp: 'jb 5/31/2023 18:40:36'!
report
	super report . 
	!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:40:40'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:40:40'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:40:40'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:40:40'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:40:40'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:40:40'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:40:40'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 18:40:41'!
PASSED!

!methodRemoval: EspecialReport #initializeFor: stamp: 'jb 5/31/2023 18:41:02'!
initializeFor: anAccount
	super initializeFor:  anAccount . 
	responseCollection  := OrderedCollection  new. !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 18:41:07'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 18:41:07'!
PASSED!
!TreeReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 18:43:46' prior: 50729077 overrides: 50726149!
reportPortfolio: aPortfolio 
	nameHirarchy add:  self addTabs,aPortfolio  name. 
	tabCounter := tabCounter + 1. 
	aPortfolio  reportAllAccountsTo:self. 
	tabCounter  :=  tabCounter  - 1. ! !

----SNAPSHOT----(31 May 2023 18:43:50) CuisUniversity-5706.image priorSource: 12631504!

----QUIT----(31 May 2023 19:00:18) CuisUniversity-5706.image priorSource: 12818590!

----STARTUP---- (31 May 2023 22:26:54) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64\CuisUniversity-5706.image!


!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 22:26:59'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 22:26:59'!
PASSED!
!TreeReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 22:32:44'!
reportTheNameOfTheAccount: anAccount andIndentTheFolowingBLock: aBlockToIndent 
	nameHirarchy add:  self addTabs, anAccount  name. 
	tabCounter := tabCounter + 1. 
	aBlockToIndent value. 
	tabCounter  :=  tabCounter  - 1. ! !
!TreeReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 22:33:29' prior: 50732223 overrides: 50726149!
reportPortfolio: aPortfolio 
	self reportTheNameOfTheAccount: aPortfolio 
	 andIndentTheFolowingBLock: 	[aPortfolio  reportAllAccountsTo:self]. 
	! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 22:33:30'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 22:33:31'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 22:33:31'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 22:33:31'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 22:33:31'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 22:33:31'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 22:33:31'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 22:33:31'!
PASSED!
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 22:34:14' prior: 50731935 overrides: 50732378!
reportPortfolio:aPortfolio
	self reportTheNameOfTheAccount:  aPortfolio 
	 	andIndentTheFolowingBLock: 
	[aPortfolio  reportAllAccountsTo:  self. 
	nameHirarchy  add:  self addTabs,  'Balance = ',  aPortfolio  balance  asString ].
! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:34:15'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:34:16'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:34:16'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:34:16'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 22:34:16'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 22:34:16'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 22:34:16'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 22:34:16'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 22:34:16'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 22:34:16'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 22:34:16'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 22:34:16'!
PASSED!
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 22:35:00' prior: 50731948 overrides: 50726558!
reportReceptiveAccount: aReceptiveAccount 
	self reportTheNameOfTheAccount:  aReceptiveAccount  
	 andIndentTheFolowingBLock: [
		aReceptiveAccount  reportAllTransactionsTo:  self.
		nameHirarchy add:  self addTabs ,   'Balance = ', aReceptiveAccount  balance  asString.

		]
! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 22:35:02'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 22:35:02'!
PASSED!
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 22:35:33'!
reportTheBalanceOf: aReceptiveAccount

	^ nameHirarchy add:  self addTabs ,   'Balance = ', aReceptiveAccount  balance  asString! !
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 22:35:33' prior: 50732650 overrides: 50726558!
reportReceptiveAccount: aReceptiveAccount 
	self reportTheNameOfTheAccount:  aReceptiveAccount  
	 andIndentTheFolowingBLock: [
		aReceptiveAccount  reportAllTransactionsTo:  self.
		self reportTheBalanceOf: aReceptiveAccount.

		]
! !
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 22:36:03' prior: 50732513 overrides: 50732378!
reportPortfolio:aPortfolio
	self reportTheNameOfTheAccount:  aPortfolio 
	 	andIndentTheFolowingBLock: 
	[aPortfolio  reportAllAccountsTo:  self. 
	self reportTheBalanceOf:  aPortfolio ].
! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 22:36:04'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 22:36:05'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 22:36:05'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 22:36:05'!
PASSED!
!EspecialReport methodsFor: 'report an account' stamp: 'jb 5/31/2023 22:36:22' prior: 50732807 overrides: 50732378!
reportPortfolio:aPortfolio
	self reportTheNameOfTheAccount:  aPortfolio 
	 	andIndentTheFolowingBLock: 
		[aPortfolio  reportAllAccountsTo:  self. 
		self reportTheBalanceOf:  aPortfolio ].
! !

----SNAPSHOT----(31 May 2023 22:38:36) CuisUniversity-5706.image priorSource: 12818679!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 22:39:32'!
test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport
	|portfolio responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount  named:  'Cuenta de Angeles') with: (Portfolio  named:  'Portfolio de los hijos' ).   	responseCollection  := OrderedCollection 
	with: 'Portfolio de la familia' 
		with: String tab, 'Cuenta de Angeles'  
			with:  String tab,String tab, 'Balance = 0' 
		with: String tab,'Portfolio de los hijos' . 
			responseCollection  add:  String tab,  String tab, 'Balance = 0' . 
		responseCollection  add: String tab, 'Balance = 0'.  
	
	self assert: 	responseCollection    equals:  ( EspecialReport  for:portfolio  ) report! !
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 22:44:43' prior: 50732955!
test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport
	
	|johnsAccount childrenPortfolio myAccount familyPortfolio responseCollection |
	
	johnsAccount := ReceptiveAccount  named: 'Cuenta de Juan'. 
	Deposit register:  100  on:  johnsAccount . 
	childrenPortfolio := Portfolio  named:'Portfolio de hijos'  with: johnsAccount with: ReceptiveAccount  new.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit  register:  100 on:  myAccount .
	familyPortfolio := Portfolio  named: 'Portfolio de la familia' with: childrenPortfolio  with:  myAccount .
	responseCollection := OrderedCollection with: 'Portfolio de la familia'
	 with:  String  tab, 'Portfolio de hijos'
	  with: String  tab, String  tab,  'Cuenta de Juan'
	 with:  String  tab, String  tab,  String tab, 'Depósito por 100'  
	 with:  String  tab, String  tab,  String tab, 'Balance = 100'.
	responseCollection  add: String tab, String tab, 'Balance  = 100'. 
	responseCollection  add: String tab, 'Cuenta mia'.
	responseCollection  add: String tab, String  tab, 'Depósito por 100'.  
	responseCollection  add: String tab, String  tab, 'Balance = 100'.
	 responseCollection  add: String tab, 'Balance = 200'.
	
	self assert:  responseCollection  equals:  (EspecialReport  for: familyPortfolio  ) report

	! !

!testRun: #ReportTest #test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 22:44:47'!
ERROR!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 22:45:13' prior: 50732982!
test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport
	
	|johnsAccount childrenPortfolio myAccount familyPortfolio responseCollection |
	
	johnsAccount := ReceptiveAccount  named: 'Cuenta de Juan'. 
	Deposit register:  100  on:  johnsAccount . 
	childrenPortfolio := Portfolio  named:'Portfolio de hijos'  with: johnsAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit  register:  100 on:  myAccount .
	familyPortfolio := Portfolio  named: 'Portfolio de la familia' with: childrenPortfolio  with:  myAccount .
	responseCollection := OrderedCollection with: 'Portfolio de la familia'
	 with:  String  tab, 'Portfolio de hijos'
	  with: String  tab, String  tab,  'Cuenta de Juan'
	 with:  String  tab, String  tab,  String tab, 'Depósito por 100'  
	 with:  String  tab, String  tab,  String tab, 'Balance = 100'.
	responseCollection  add: String tab, String tab, 'Balance  = 100'. 
	responseCollection  add: String tab, 'Cuenta mia'.
	responseCollection  add: String tab, String  tab, 'Depósito por 100'.  
	responseCollection  add: String tab, String  tab, 'Balance = 100'.
	 responseCollection  add: String tab, 'Balance = 200'.
	
	self assert:  responseCollection  equals:  (EspecialReport  for: familyPortfolio  ) report

	! !

!testRun: #ReportTest #test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 22:45:14'!
FAILURE!

responseCollection!

(EspecialReport  for: familyPortfolio  ) report!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 22:57:53' prior: 50733033!
test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport
	|portfolio responseCollection childrensPortfolio  johnsAccount|
	johnsAccount  := ReceptiveAccount  named:  'Cuenta de Juan'. 
	Deposit  register:  100 on:  johnsAccount .
	childrensPortfolio  := Portfolio named:  'Portfolio de los hijos' with:  johnsAccount . 
	
	portfolio  := Portfolio named: 'Portfolio de la familia' with: childrensPortfolio .   
	
	responseCollection  := OrderedCollection 
	with: 'Portfolio de la familia' 
		with: String tab,'Portfolio de los hijos' 
			with: String tab, String tab, 'Cuenta de Juan'
				 with: String tab, String tab,String tab, 'Depóstio por 100'
			with: String tab,  String tab, 'Balance = 100'.
	 		Portfolio  add: String tab,  String tab, 'Balance = 100'.
  		Portfolio  add: String tab,  'Balance = 100'.
	
	self assert: 
	responseCollection    equals:  ( EspecialReport  for:portfolio  ) report
	! !

!testRun: #ReportTest #test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 22:57:55'!
ERROR!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 22:58:09' prior: 50733086!
test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport
	|portfolio responseCollection childrensPortfolio  johnsAccount|
	johnsAccount  := ReceptiveAccount  named:  'Cuenta de Juan'. 
	Deposit  register:  100 on:  johnsAccount .
	childrensPortfolio  := Portfolio named:  'Portfolio de los hijos' with:  johnsAccount . 
	
	portfolio  := Portfolio named: 'Portfolio de la familia' with: childrensPortfolio .   
	
	responseCollection  := OrderedCollection 
	with: 'Portfolio de la familia' 
		with: String tab,'Portfolio de los hijos' 
			with: String tab, String tab, 'Cuenta de Juan'
				 with: String tab, String tab,String tab, 'Depóstio por 100'
			with: String tab,  String tab, 'Balance = 100'.
	 		responseCollection  add: String tab,  String tab, 'Balance = 100'.
  		responseCollection   add: String tab,  'Balance = 100'.
	
	self assert: 
	responseCollection    equals:  ( EspecialReport  for:portfolio  ) report
	! !

!testRun: #ReportTest #test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 22:58:10'!
FAILURE!

responseCollection!

 ( EspecialReport  for:portfolio  ) report!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 22:59:20' prior: 50733126!
test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport
	|portfolio responseCollection childrensPortfolio  johnsAccount|
	johnsAccount  := ReceptiveAccount  named:  'Cuenta de Juan'. 
	Deposit  register:  100 on:  johnsAccount .
	childrensPortfolio  := Portfolio named:  'Portfolio de los hijos' with:  johnsAccount . 
	
	portfolio  := Portfolio named: 'Portfolio de la familia' with: childrensPortfolio .   
	
	responseCollection  := OrderedCollection 
	with: 'Portfolio de la familia' 
		with: String tab,'Portfolio de los hijos' 
			with: String tab, String tab, 'Cuenta de Juan'
				 with: String tab, String tab,String tab, 'Depósitio por 100'
			with: String tab,  String tab, 'Balance = 100'.
	 		responseCollection  add: String tab,  String tab, 'Balance = 100'.
  		responseCollection   add: String tab,  'Balance = 100'.
	
	self assert: 
	responseCollection    equals:  ( EspecialReport  for:portfolio  ) report
	! !

!testRun: #ReportTest #test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 22:59:21'!
FAILURE!

!testRun: #ReportTest #test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 22:59:25'!
FAILURE!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 5/31/2023 22:59:32' prior: 50733168!
test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport
	|portfolio responseCollection childrensPortfolio  johnsAccount|
	johnsAccount  := ReceptiveAccount  named:  'Cuenta de Juan'. 
	Deposit  register:  100 on:  johnsAccount .
	childrensPortfolio  := Portfolio named:  'Portfolio de los hijos' with:  johnsAccount . 
	
	portfolio  := Portfolio named: 'Portfolio de la familia' with: childrensPortfolio .   
	
	responseCollection  := OrderedCollection 
	with: 'Portfolio de la familia' 
		with: String tab,'Portfolio de los hijos' 
			with: String tab, String tab, 'Cuenta de Juan'
				 with: String tab, String tab,String tab, 'Depósito por 100'
			with: String tab,  String tab, 'Balance = 100'.
	 		responseCollection  add: String tab,  String tab, 'Balance = 100'.
  		responseCollection   add: String tab,  'Balance = 100'.
	
	self assert: 
	responseCollection    equals:  ( EspecialReport  for:portfolio  ) report
	! !

!testRun: #ReportTest #test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 22:59:34'!
FAILURE!

responseCollection!

( EspecialReport  for:portfolio  ) report!

'	Portfolio de los hijos' ='	Portfolio de los hijos'!

!methodRemoval: ReportTest #test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 23:03:37'!
test34PortfolioWithAnAccountWithManyTransactionAndAPortfolioWithAccountWithTransactionsShouldMakeTheCorrectEspecialReport
	|portfolio responseCollection childrensPortfolio  johnsAccount|
	johnsAccount  := ReceptiveAccount  named:  'Cuenta de Juan'. 
	Deposit  register:  100 on:  johnsAccount .
	childrensPortfolio  := Portfolio named:  'Portfolio de los hijos' with:  johnsAccount . 
	
	portfolio  := Portfolio named: 'Portfolio de la familia' with: childrensPortfolio .   
	
	responseCollection  := OrderedCollection 
	with: 'Portfolio de la familia' 
		with: String tab,'Portfolio de los hijos' 
			with: String tab, String tab, 'Cuenta de Juan'
				 with: String tab, String tab,String tab, 'Depósito por 100'
			with: String tab,  String tab, 'Balance = 100'.
	 		responseCollection  add: String tab,  String tab, 'Balance = 100'.
  		responseCollection   add: String tab,  'Balance = 100'.
	
	self assert: 
	responseCollection    equals:  ( EspecialReport  for:portfolio  ) report
	!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 5/31/2023 23:03:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 5/31/2023 23:03:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 5/31/2023 23:03:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 5/31/2023 23:03:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 5/31/2023 23:03:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 5/31/2023 23:03:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 5/31/2023 23:03:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 5/31/2023 23:03:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 5/31/2023 23:03:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 5/31/2023 23:03:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 5/31/2023 23:03:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 5/31/2023 23:03:46'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 5/31/2023 23:03:46'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 5/31/2023 23:03:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 5/31/2023 23:03:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 5/31/2023 23:03:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 5/31/2023 23:03:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 5/31/2023 23:03:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 5/31/2023 23:03:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 5/31/2023 23:03:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 23:03:48'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #TransferTest #test02hasRegiteredTheTransactionLeg stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'jb 5/31/2023 23:03:49'!
PASSED!

----QUIT----(31 May 2023 23:04:09) CuisUniversity-5706.image priorSource: 12841633!

----STARTUP---- (1 June 2023 11:02:10) as /home/juan/Escritorio/facultad/1C23/IS1/linux64/CuisUniversity-5706.image!


!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #TransferTest #test02hasRegiteredTheTransactionLeg stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'jb 6/1/2023 11:02:20'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'jb 6/1/2023 11:02:20'!
PASSED!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 6/1/2023 11:03:55'!
test34
	|portfolio responseCollection|
	portfolio  := Portfolio named: 'Portfolio de la familia' with: (ReceptiveAccount  named:  'Cuenta de Angeles') with: (Portfolio  named:  'Portfolio de los hijos' ).   	responseCollection  := OrderedCollection 
	with: 'Portfolio de la familia' 
		with: String tab, 'Cuenta de Angeles'  
			with:  String tab,String tab, 'Balance = 0' 
		with: String tab,'Portfolio de los hijos' . 
			responseCollection  add:  String tab,  String tab, 'Balance = 0' . 
		responseCollection  add: String tab, 'Balance = 0'.  
	
	self assert: 	responseCollection    equals:  ( EspecialReport  for:portfolio  ) report! !
!ReportTest methodsFor: 'especial report test' stamp: 'jb 6/1/2023 11:08:37' prior: 50733752!
test34
	|johnsAccount childrenPortfolio myAccount familyPortfolio responseCollection |
	
	johnsAccount := ReceptiveAccount  named: 'Cuenta de Juan'. 	Deposit  register:  100 on: johnsAccount . 

	childrenPortfolio := Portfolio  named:'Portfolio de hijos'  with: johnsAccount .
	myAccount := ReceptiveAccount named: 'Cuenta mia'.	Deposit  register:  100 on:  myAccount .

	familyPortfolio := Portfolio  named: 'Portfolio de la familia' with: childrenPortfolio  with:  myAccount .
	responseCollection := OrderedCollection with: 'Portfolio de la familia'
	 with:  String  tab, 'Portfolio de hijos'
	  with: String  tab, String  tab,  'Cuenta de Juan'
	 with:  String  tab, String  tab,String  tab,  'Depósito por 100'
	with: String  tab, String  tab, String  tab,'Balance = 100'.
	
	responseCollection  add:  String  tab,  'Cuenta mia'.
	responseCollection   add: String  tab,String  tab,  'Depósito por 100'.
	responseCollection  add:  String  tab, String  tab,'Balance = 100'.
	responseCollection  add:  String  tab,  'Balance = 200'.
	
	self  assert: responseCollection  
	 equals:  (TreeReport  for: familyPortfolio ) report. ! !
!ReportTest methodsFor: 'especial report test' stamp: 'jb 6/1/2023 11:10:36' prior: 50733776!
test34
	|johnsAccount childrenPortfolio myAccount familyPortfolio responseCollection |
	
	johnsAccount := ReceptiveAccount  named: 'Cuenta de Juan'. 	Deposit  register:  100 on: johnsAccount . 

	childrenPortfolio := Portfolio  named:'Portfolio de hijos'  with: johnsAccount .
	myAccount := ReceptiveAccount named: 'Cuenta mia'.	Deposit  register:  100 on:  myAccount .

	familyPortfolio := Portfolio  named: 'Portfolio de la familia' with: childrenPortfolio  with:  myAccount .
	responseCollection := OrderedCollection
	 with: 'Portfolio de la familia'
		 with:  String  tab, 'Portfolio de hijos'
	 		with: String  tab, String  tab,  'Cuenta de Juan'
				with:  String  tab, String  tab,String  tab,  'Depósito por 100'
				with: String  tab, String  tab, String  tab,'Balance = 100'.
	 		responseCollection  add: String  tab, String  tab,  'Balance = 100'.
	
		responseCollection  add:  String  tab,  'Cuenta mia'.
			responseCollection   add: String  tab,String  tab,  'Depósito por 100'.
			responseCollection  add:  String  tab, String  tab,'Balance = 100'.
		responseCollection  add:  String  tab,  'Balance = 200'.
	
	self  assert: responseCollection  
	 equals:  (EspecialReport  for: familyPortfolio ) report. ! !

!testRun: #ReportTest #test34 stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 6/1/2023 11:10:38'!
PASSED!

!testRun: #ReportTest #test34 stamp: 'jb 6/1/2023 11:10:38'!
PASSED!
!ReportTest methodsFor: 'especial report test' stamp: 'jb 6/1/2023 11:11:48'!
test34PortfolioWithAccountsWithTransactionShouldReportCorrectly
	|johnsAccount childrenPortfolio myAccount familyPortfolio responseCollection |
	
	johnsAccount := ReceptiveAccount  named: 'Cuenta de Juan'. 	Deposit  register:  100 on: johnsAccount . 

	childrenPortfolio := Portfolio  named:'Portfolio de hijos'  with: johnsAccount .
	myAccount := ReceptiveAccount named: 'Cuenta mia'.	Deposit  register:  100 on:  myAccount .

	familyPortfolio := Portfolio  named: 'Portfolio de la familia' with: childrenPortfolio  with:  myAccount .
	responseCollection := OrderedCollection
	 with: 'Portfolio de la familia'
		 with:  String  tab, 'Portfolio de hijos'
	 		with: String  tab, String  tab,  'Cuenta de Juan'
				with:  String  tab, String  tab,String  tab,  'Depósito por 100'
				with: String  tab, String  tab, String  tab,'Balance = 100'.
	 		responseCollection  add: String  tab, String  tab,  'Balance = 100'.
	
		responseCollection  add:  String  tab,  'Cuenta mia'.
			responseCollection   add: String  tab,String  tab,  'Depósito por 100'.
			responseCollection  add:  String  tab, String  tab,'Balance = 100'.
		responseCollection  add:  String  tab,  'Balance = 200'.
	
	self  assert: responseCollection  
	 equals:  (EspecialReport  for: familyPortfolio ) report. ! !

!methodRemoval: ReportTest #test34 stamp: 'jb 6/1/2023 11:11:48'!
test34
	|johnsAccount childrenPortfolio myAccount familyPortfolio responseCollection |
	
	johnsAccount := ReceptiveAccount  named: 'Cuenta de Juan'. 	Deposit  register:  100 on: johnsAccount . 

	childrenPortfolio := Portfolio  named:'Portfolio de hijos'  with: johnsAccount .
	myAccount := ReceptiveAccount named: 'Cuenta mia'.	Deposit  register:  100 on:  myAccount .

	familyPortfolio := Portfolio  named: 'Portfolio de la familia' with: childrenPortfolio  with:  myAccount .
	responseCollection := OrderedCollection
	 with: 'Portfolio de la familia'
		 with:  String  tab, 'Portfolio de hijos'
	 		with: String  tab, String  tab,  'Cuenta de Juan'
				with:  String  tab, String  tab,String  tab,  'Depósito por 100'
				with: String  tab, String  tab, String  tab,'Balance = 100'.
	 		responseCollection  add: String  tab, String  tab,  'Balance = 100'.
	
		responseCollection  add:  String  tab,  'Cuenta mia'.
			responseCollection   add: String  tab,String  tab,  'Depósito por 100'.
			responseCollection  add:  String  tab, String  tab,'Balance = 100'.
		responseCollection  add:  String  tab,  'Balance = 200'.
	
	self  assert: responseCollection  
	 equals:  (EspecialReport  for: familyPortfolio ) report. !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #ReportTest #test34PortfolioWithAccountsWithTransactionShouldReportCorrectly stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #TransferTest #test01NewTransfer stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #TransferTest #test02hasRegiteredTheTransactionLeg stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #TransferTest #test03transferAreInTransaction stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #TransferTest #test04navDepositLeg stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #TransferTest #test05navExtractedLeg stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

!testRun: #TransferTest #test06MustBePoositive stamp: 'jb 6/1/2023 11:11:56'!
PASSED!

----SNAPSHOT----(1 June 2023 11:13:58) CuisUniversity-5706.image priorSource: 12859837!
!Report methodsFor: 'report an account' stamp: 'jb 6/1/2023 11:14:22' prior: 50726149!
reportPortfolio: aPortfolio 
	self subclassResponsibility ! !
!Report methodsFor: 'report an account' stamp: 'jb 6/1/2023 11:14:30' prior: 50726053!
reportReceptiveAccount: anReceptiveAccount 
	self subclassResponsibility ! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:14:34'!
ERROR!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test34PortfolioWithAccountsWithTransactionShouldReportCorrectly stamp: 'jb 6/1/2023 11:14:34'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:14:36'!
ERROR!
!AccountSummary methodsFor: 'report an account' stamp: 'jb 6/1/2023 11:14:56' overrides: 50734307!
reportReceptiveAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'report an account' stamp: 'jb 6/1/2023 11:15:08' prior: 50734445 overrides: 50734307!
reportReceptiveAccount: aReceptiveAccount 
	aReceptiveAccount  reportAllTransactionsTo:  self! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:15:09'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test34PortfolioWithAccountsWithTransactionShouldReportCorrectly stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 6/1/2023 11:15:10'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:15:10'!
ERROR!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:15:13'!
ERROR!
!AccountSummary methodsFor: 'report an account' stamp: 'jb 6/1/2023 11:15:24' overrides: 50734302!
reportPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'report an account' stamp: 'jb 6/1/2023 11:15:37' prior: 50734593 overrides: 50734302!
reportPortfolio: aPortfolio 
	aPortfolio  reportAllAccountsTo:  self! !

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:15:40'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test34PortfolioWithAccountsWithTransactionShouldReportCorrectly stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 6/1/2023 11:15:41'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:15:41'!
ERROR!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 6/1/2023 11:15:41'!
ERROR!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:15:41'!
ERROR!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:15:41'!
ERROR!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:15:41'!
ERROR!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:15:41'!
ERROR!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:15:41'!
ERROR!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:15:42'!
ERROR!
!NetTransfer methodsFor: 'report an account' stamp: 'jb 6/1/2023 11:15:51' overrides: 50734307!
reportReceptiveAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!NetTransfer methodsFor: 'report an account' stamp: 'jb 6/1/2023 11:16:02' prior: 50734740 overrides: 50734307!
reportReceptiveAccount: aReceptiveAccount 
	aReceptiveAccount  reportAllTransactionsTo:  self! !

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:16:03'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test34PortfolioWithAccountsWithTransactionShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:04'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:16:04'!
ERROR!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:04'!
ERROR!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:04'!
ERROR!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:04'!
ERROR!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:16:06'!
ERROR!
!NetTransfer methodsFor: 'report an account' stamp: 'jb 6/1/2023 11:16:18' overrides: 50734302!
reportPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!NetTransfer methodsFor: 'report an account' stamp: 'jb 6/1/2023 11:16:29' prior: 50734888 overrides: 50734302!
reportPortfolio: aPortfolio 
	aPortfolio  reportAllAccountsTo:  self! !

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:16:31'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test34PortfolioWithAccountsWithTransactionShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:32'!
PASSED!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 6/1/2023 11:16:39'!
PASSED!

!testRun: #ReportTest #test34PortfolioWithAccountsWithTransactionShouldReportCorrectly stamp: 'jb 6/1/2023 11:16:39'!
PASSED!
!EspecialReport methodsFor: 'report an account private' stamp: 'jb 6/1/2023 11:19:21' prior: 50732788!
reportTheBalanceOf: aReceptiveAccount

	^ nameHirarchy add:  self addTabs ,  (AccountSummary  for: aReceptiveAccount  ) report! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:19:23'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:19:23'!
ERROR!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 6/1/2023 11:19:23'!
ERROR!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 6/1/2023 11:19:23'!
ERROR!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 6/1/2023 11:19:23'!
ERROR!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:19:23'!
ERROR!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:19:23'!
ERROR!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 6/1/2023 11:19:23'!
ERROR!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 6/1/2023 11:19:23'!
ERROR!

!testRun: #ReportTest #test34PortfolioWithAccountsWithTransactionShouldReportCorrectly stamp: 'jb 6/1/2023 11:19:23'!
ERROR!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:19:29'!
ERROR!
!EspecialReport methodsFor: 'report an account private' stamp: 'jb 6/1/2023 11:19:43' prior: 50735161!
reportTheBalanceOf: aReceptiveAccount

	^ nameHirarchy add:  self addTabs ,  ((AccountSummary  for: aReceptiveAccount  ) report)! !

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:19:44'!
ERROR!

(AccountSummary  for: aReceptiveAccount  ) report!
!EspecialReport methodsFor: 'report an account private' stamp: 'jb 6/1/2023 11:19:21' prior: 50735301!
reportTheBalanceOf: aReceptiveAccount

	^ nameHirarchy add:  self addTabs ,  (AccountSummary  for: aReceptiveAccount  ) report! !

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:20:15'!
ERROR!

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 6/1/2023 11:20:24'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:20:25'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:20:25'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:20:25'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:20:25'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:20:25'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:20:25'!
ERROR!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 6/1/2023 11:20:25'!
ERROR!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 6/1/2023 11:20:25'!
ERROR!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 6/1/2023 11:20:25'!
ERROR!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:20:25'!
ERROR!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:20:25'!
ERROR!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 6/1/2023 11:20:25'!
ERROR!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 6/1/2023 11:20:25'!
ERROR!

!testRun: #ReportTest #test34PortfolioWithAccountsWithTransactionShouldReportCorrectly stamp: 'jb 6/1/2023 11:20:25'!
ERROR!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:20:27'!
ERROR!
!EspecialReport methodsFor: 'report an account private' stamp: 'jb 5/31/2023 22:35:33' prior: 50735314!
reportTheBalanceOf: aReceptiveAccount

	^ nameHirarchy add:  self addTabs ,   'Balance = ', aReceptiveAccount  balance  asString! !

!testRun: #ReportTest #test01empyAccountSummaryReportGivesOnlyTheBalance stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryGivesADeposit stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryGivesAWithdraw stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryGivesAExitTransfer stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test05AccountSummaryGivesAInTransfer stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test06AccountSummaryGivesMany stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test07emptyPortfolioAccountSumaryGivesBalance0 stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test08PortfolioWithAnAccountAccountSumary stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test09PortfolioWithAnotherPortfolioAccountSumary stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test10PortfolioWithTwoAccountsAccountSumary stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test11PortfolioWithaPortfolioWithAnotherPortfolioInsideAccountSumary stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test12PortfolioWithPortfolioAndAnAccountGiveCorrectAccountSummary stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test13emptyAccountShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test14anAccountWithAnOnlyTransferGivesCorrectNetTransfer stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test15AccountWithTwoTransfersGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test16emptyPortfolioShouldGive0NetTransfer stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test17PortfolioWithAnAccountWithTransfersShoulGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test18PortfolioWithAnInnerPortfolioWithOneAccountShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test19PortfolioWithMultiplesAccountAndPortfoliosShouldGiveCorrectNetTransfer stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test20PortfoilioWithoutANameShouldMakeException stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test21PortfolioNamedShouldTellItsName stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test22PortfolioWithPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test23PortfolioWithAnAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test24PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test25PortfolioWithPortfolioWithAccountShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test26PortfolioWithManyAccountsShouldMakeTheCorrectReport stamp: 'jb 6/1/2023 11:20:51'!
PASSED!

!testRun: #ReportTest #test27PortfolioWithANameShouldReportItsNameAndItsBalance stamp: 'jb 6/1/2023 11:20:52'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountShouldGiveBothOfItsNamesAndBalances stamp: 'jb 6/1/2023 11:20:52'!
PASSED!

!testRun: #ReportTest #test28PortfolioWithAccountWithDepositShouldReportCorrectly stamp: 'jb 6/1/2023 11:20:52'!
PASSED!

!testRun: #ReportTest #test29PortfolioWithAccountWithWithdrawShouldReportCorrectly stamp: 'jb 6/1/2023 11:20:52'!
PASSED!

!testRun: #ReportTest #test30PortfolioWithAccountWithExitTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:20:52'!
PASSED!

!testRun: #ReportTest #test31PortfolioWithAccountWithInTransferShouldReportCorrectly stamp: 'jb 6/1/2023 11:20:52'!
PASSED!

!testRun: #ReportTest #test32PortfolioWithAnAccountWithManyTransactionsShouldReportCorrectly stamp: 'jb 6/1/2023 11:20:52'!
PASSED!

!testRun: #ReportTest #test33PortfolioWithAnAccountAndAPortfolioShouldMakeTheCorrectEspecialReport stamp: 'jb 6/1/2023 11:20:52'!
PASSED!

!testRun: #ReportTest #test34PortfolioWithAccountsWithTransactionShouldReportCorrectly stamp: 'jb 6/1/2023 11:20:52'!
PASSED!

----SNAPSHOT----(1 June 2023 11:22:23) CuisUniversity-5706.image priorSource: 12884724!