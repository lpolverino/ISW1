

----QUIT----(12 May 2023 17:49:00) CuisUniversity-5799.image priorSource: 4801971!

----STARTUP---- (12 May 2023 17:49:01) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5799.image!


----QUIT----(12 May 2023 17:49:01) CuisUniversity-5799.image priorSource: 9222569!

----STARTUP---- (22 May 2023 21:14:11) as /home/clinux01/Descargas/linux64/CuisUniversity-5799.image!


----End fileIn of /home/clinux01/Descargas/06-Portfolio1/Portfolio-Solucion.st----!

AccountTransaction subclass: #Transference
	instanceVariableNames: 'origenAccount destinationAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'TI 5/22/2023 21:19:42'!
AccountTransaction subclass: #Transference
	instanceVariableNames: 'origenAccount destinationAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TI 5/22/2023 21:23:13'!
test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly

	| account1 account2 deposit1 |
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	account2 := ReceptiveAccount new.

	account1 transfer: 50 to: account2.
	
	self assert: account1 balance equals: 50.
	self assert: account2 balance equals: 50.
! !

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/22/2023 21:23:21'!
ERROR!
!ReceptiveAccount methodsFor: 'transfers' stamp: 'TI 5/22/2023 21:23:36'!
transfer: aRenameMe1 to: account2 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transfers' stamp: 'TI 5/22/2023 21:30:06' prior: 50620621!
transfer: value to: anAccount 
	
	| transference |
	transference := Transference send: value from: anAccount to: self.
	transactions register: transference.
	! !

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/22/2023 21:30:11'!
ERROR!
!Transference class methodsFor: 'initialization' stamp: 'TI 5/22/2023 21:30:30'!
send: value from: anAccount to: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: 'Transference class' category: 'Portfolio-Solucion' stamp: 'TI 5/22/2023 21:31:45'!
Transference class
	instanceVariableNames: 'originAccount'!

!classDefinition: 'Transference class' category: 'Portfolio-Solucion' stamp: 'TI 5/22/2023 21:31:46'!
Transference class
	instanceVariableNames: 'originAccount destinationAccount'!

!classDefinition: 'Transference class' category: 'Portfolio-Solucion' stamp: 'TI 5/22/2023 21:32:35'!
Transference class
	instanceVariableNames: 'destinationAccount originAccount value1'!
!Transference class methodsFor: 'initialization' stamp: 'TI 5/22/2023 21:32:34' prior: 50620639!
send: aValue from: anAccount to: aReceptiveAccount 
	
	originAccount := anAccount.
	destinationAccount := aReceptiveAccount.
	value1 := aValue.! !

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/22/2023 21:32:37'!
ERROR!
!ReceptiveAccount methodsFor: 'transfers' stamp: 'TI 5/22/2023 21:32:58' prior: 50620626!
transfer: value to: anAccount 
	
	| transference |
	transference := Transference send: value from: anAccount to: self.
	self register: transference.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/22/2023 21:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/22/2023 21:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/22/2023 21:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/22/2023 21:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/22/2023 21:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/22/2023 21:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/22/2023 21:33:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/22/2023 21:33:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/22/2023 21:33:00'!
ERROR!
!Transference class methodsFor: 'Balance' stamp: 'TI 5/22/2023 21:33:24'!
affectBalance: currentBalance 
	self shouldBeImplemented.! !
!Transference class methodsFor: 'Balance' stamp: 'TI 5/22/2023 21:38:56' prior: 50620718!
affectBalance: currentBalance 
	
	! !

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/22/2023 21:38:59'!
FAILURE!

!classRenamed: #Transference as: #Transfer stamp: 'TI 5/22/2023 21:41:00'!
Smalltalk renameClassNamed: #Transference as: #Transfer!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TI 5/22/2023 21:41:00' prior: 50620675!
transfer: value to: anAccount 
	
	| transference |
	transference := Transfer send: value from: anAccount to: self.
	self register: transference.
	! !

Object subclass: #Transfer
	instanceVariableNames: 'origenAccount destinationAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'TI 5/22/2023 21:41:57'!
Object subclass: #Transfer
	instanceVariableNames: 'origenAccount destinationAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transfer
	instanceVariableNames: 'origenAccount destinationAccount value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'TI 5/22/2023 21:42:04'!
Object subclass: #Transfer
	instanceVariableNames: 'origenAccount destinationAccount value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/22/2023 21:42:21'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TI 5/22/2023 21:42:58' prior: 50620602!
test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly

	| account1 account2 deposit1 |
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	account2 := ReceptiveAccount new.

	Transfer send: 50 from: account1 to: account2.
	
	self assert: account1 balance equals: 50.
	self assert: account2 balance equals: 50.
! !

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/22/2023 21:43:02'!
FAILURE!

!methodRemoval: Transfer class #affectBalance: stamp: 'TI 5/22/2023 21:43:47'!
affectBalance: currentBalance 
	
	!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/22/2023 21:44:18'!
FAILURE!
!Transfer class methodsFor: 'initialization' stamp: 'TI 5/22/2023 21:49:33' prior: 50620662!
send: aValue from: anAccount to: aReceptiveAccount 
	
	originAccount := anAccount.
	destinationAccount := aReceptiveAccount.
	value1 := aValue.
	Deposit register: aValue on: anAccount.
	Withdraw register: aValue on: anAccount.! !
!Transfer class methodsFor: 'initialization' stamp: 'TI 5/22/2023 21:50:54' prior: 50620804!
send: aValue from: anAccount to: aReceptiveAccount 
	
	originAccount := anAccount.
	destinationAccount := aReceptiveAccount.
	value1 := aValue.
	aReceptiveAccount register: (Deposit initializeFor: aValue).
	anAccount register: (Withdraw initializeFor: aValue).! !

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/22/2023 21:50:59'!
ERROR!
!Transfer class methodsFor: 'initialization' stamp: 'TI 5/22/2023 21:51:58' prior: 50620815!
send: aValue from: anAccount to: aReceptiveAccount 
	
	originAccount := anAccount.
	destinationAccount := aReceptiveAccount.
	value1 := aValue.
	Deposit register: aValue on: aReceptiveAccount.
	Withdraw register: aValue on: anAccount.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/22/2023 21:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/22/2023 21:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/22/2023 21:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/22/2023 21:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/22/2023 21:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/22/2023 21:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/22/2023 21:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/22/2023 21:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/22/2023 21:52:08'!
PASSED!

----SNAPSHOT----(22 May 2023 21:56:16) CuisUniversity-5799.image priorSource: 9222790!

----STARTUP---- (24 May 2023 21:07:00) as /home/tobi/Desktop/linux64/CuisUniversity-5706.image!


!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/24/2023 21:07:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/24/2023 21:07:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/24/2023 21:07:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/24/2023 21:07:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/24/2023 21:07:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/24/2023 21:07:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/24/2023 21:07:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/24/2023 21:07:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/24/2023 21:07:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/24/2023 21:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/24/2023 21:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/24/2023 21:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/24/2023 21:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/24/2023 21:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/24/2023 21:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/24/2023 21:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/24/2023 21:07:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/24/2023 21:07:19'!
PASSED!

----STARTUP---- (26 May 2023 13:31:26) as /home/tobi/Desktop/linux64/CuisUniversity-5706.image!

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TI 5/26/2023 14:08:06'!
test08CanNavigateFromPataExtraccionToPataDepositoOfATransfer

	| account1 account2 deposit1 pataDeposito pataExtraccion transfer1 |
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	account2 := ReceptiveAccount new.

	transfer1 := Transfer send: 50 from: account1 to: account2.
	
	pataExtraccion := transfer1 pataExtraccion.
	
	pataDeposito := (pataExtraccion transfer) pataDeposito	.
	
	self assert: pataDeposito balance equals: account2.
	self assert: pataExtraccion balance equals: account1.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TI 5/26/2023 14:08:39' prior: 50620883!
test08CanNavigateFromPataExtraccionToPataDepositoOfATransfer

	| account1 account2 deposit1 pataDeposito pataExtraccion transfer1 |
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	account2 := ReceptiveAccount new.

	transfer1 := Transfer send: 50 from: account1 to: account2.
	
	pataExtraccion := transfer1 pataExtraccion.
	
	pataDeposito := (pataExtraccion associatedTransfer) pataDeposito	.
	
	self assert: pataDeposito balance equals: account2.
	self assert: pataExtraccion balance equals: account1.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TI 5/26/2023 14:08:57'!
test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer

	| account1 account2 deposit1 pataDeposito pataExtraccion transfer1 |
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	account2 := ReceptiveAccount new.

	transfer1 := Transfer send: 50 from: account1 to: account2.
	
	pataExtraccion := transfer1 pataExtraccion.
	
	pataDeposito := (pataExtraccion associatedTransfer) pataDeposito	.
	
	self assert: pataDeposito balance equals: account2.
	self assert: pataExtraccion balance equals: account1.
! !

!methodRemoval: ReceptiveAccountTest #test08CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:08:57'!
test08CanNavigateFromPataExtraccionToPataDepositoOfATransfer

	| account1 account2 deposit1 pataDeposito pataExtraccion transfer1 |
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	account2 := ReceptiveAccount new.

	transfer1 := Transfer send: 50 from: account1 to: account2.
	
	pataExtraccion := transfer1 pataExtraccion.
	
	pataDeposito := (pataExtraccion associatedTransfer) pataDeposito	.
	
	self assert: pataDeposito balance equals: account2.
	self assert: pataExtraccion balance equals: account1.
!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:09:38'!
ERROR!
!Transfer class methodsFor: 'about' stamp: 'TI 5/26/2023 14:09:53'!
pataExtraccion
	self shouldBeImplemented.! !

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:10:07'!
Transfer class
	instanceVariableNames: 'value1 originAccount destinationAccount pataExtraccion'!
!Transfer class methodsFor: 'about' stamp: 'TI 5/26/2023 14:10:04' prior: 50620968!
pataExtraccion
	^pataExtraccion.! !

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:10:08'!
ERROR!

Object subclass: #Patas
	instanceVariableNames: 'associatedTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Patas category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:10:51'!
Object subclass: #Patas
	instanceVariableNames: 'associatedTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Pata
	instanceVariableNames: 'associatedTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Pata category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:11:01'!
Object subclass: #Pata
	instanceVariableNames: 'associatedTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Patas stamp: 'TI 5/26/2023 14:11:04'!
Object subclass: #Patas
	instanceVariableNames: 'associatedTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Pata subclass: #PataExtraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PataExtraccion category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:11:12'!
Pata subclass: #PataExtraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Pata subclass: #PataDeposito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PataDeposito category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:11:16'!
Pata subclass: #PataDeposito
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Pata methodsFor: 'no messages' stamp: 'TI 5/26/2023 14:26:32'!
associatedTransfer
	^associatedTransfer .! !

Object subclass: #Pata
	instanceVariableNames: 'pataDeposito associatedTransfer pataExtraccion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Pata category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:27:07'!
Object subclass: #Pata
	instanceVariableNames: 'pataDeposito associatedTransfer pataExtraccion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Pata methodsFor: 'as yet unclassified' stamp: 'TI 5/26/2023 14:27:27'!
pataDeposito
	^pataDeposito .! !
!Pata methodsFor: 'as yet unclassified' stamp: 'TI 5/26/2023 14:27:38'!
pataExtraccion
	^pataExtraccion.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:27:59'!
Object subclass: #Transfer
	instanceVariableNames: 'pataExtraccion destinationAccount value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:28:04'!
Object subclass: #Transfer
	instanceVariableNames: 'pataExtraccion pataDeposito value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: Transfer class #pataExtraccion stamp: 'TI 5/26/2023 14:28:36'!
pataExtraccion
	^pataExtraccion.!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:28:59'!
Transfer class
	instanceVariableNames: 'pataExtraccion destinationAccount originAccount value1 pataDeposito'!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:29:03'!
Transfer class
	instanceVariableNames: 'pataDeposito value1 originAccount destinationAccount pataExtraccion value'!
!Transfer class methodsFor: 'initialization' stamp: 'TI 5/26/2023 14:28:58' prior: 50620831!
send: aValue from: anAccount to: aReceptiveAccount 
	
	pataExtraccion := anAccount.
	pataDeposito := aReceptiveAccount.
	value := aValue.
	Deposit register: aValue on: aReceptiveAccount.
	Withdraw register: aValue on: anAccount.! !

Transfer class
	instanceVariableNames: 'pataDeposito originAccount destinationAccount pataExtraccion value'!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:29:11'!
Transfer class
	instanceVariableNames: 'pataDeposito originAccount destinationAccount pataExtraccion value'!

Transfer class
	instanceVariableNames: 'pataDeposito pataExtraccion value'!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:29:20'!
Transfer class
	instanceVariableNames: 'pataDeposito pataExtraccion value'!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:33:32'!
ERROR!
!Transfer methodsFor: 'no messages' stamp: 'TI 5/26/2023 14:33:49'!
pataExtraccion
	^pataExtraccion.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'TI 5/26/2023 14:33:56'!
pataDeposito
	^pataDeposito.! !

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:33:59'!
ERROR!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:33:59'!
ERROR!
!Transfer class methodsFor: 'initialization' stamp: 'TI 5/26/2023 14:35:39' prior: 50621100!
send: aValue from: anAccount to: aReceptiveAccount 
	
	^ self new initializeSend: aValue from: anAccount to: aReceptiveAccount.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'TI 5/26/2023 14:36:33'!
initializeSend: aValue from: anAccount to: aReceptiveAccount	
	pataExtraccion := anAccount.
	pataDeposito := aReceptiveAccount.
	value := aValue.
	Deposit register: aValue on: aReceptiveAccount.
	Withdraw register: aValue on: anAccount.! !

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:36:39'!
ERROR!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:36:39'!
ERROR!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:40:58'!
ERROR!

Object subclass: #Pata
	instanceVariableNames: 'pataDeposito associatedTransfer pataExtraccion account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Pata category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:41:33'!
Object subclass: #Pata
	instanceVariableNames: 'pataDeposito associatedTransfer pataExtraccion account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Pata
	instanceVariableNames: 'associatedTransfer account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Pata category: 'Portfolio-Solucion' stamp: 'TI 5/26/2023 14:46:40'!
Object subclass: #Pata
	instanceVariableNames: 'associatedTransfer account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PataDeposito class methodsFor: 'no messages' stamp: 'TI 5/26/2023 14:49:04'!
associateTo: aTransfer and: anAccount
	^self new initializeWith: aTransfer and: anAccount.
! !
!PataDeposito methodsFor: 'no messages' stamp: 'TI 5/26/2023 14:49:38'!
initializeWith: aTransfer and: anAccount.
	associatedTransfer:= aTransfer. 
	account := anAccount. ! !
!PataExtraccion methodsFor: 'no messages' stamp: 'TI 5/26/2023 14:49:43'!
initializeWith: aTransfer and: anAccount.
	associatedTransfer:= aTransfer. 
	account := anAccount. ! !
!PataExtraccion class methodsFor: 'no messages' stamp: 'TI 5/26/2023 14:49:58'!
associateTo: aTransfer and: anAccount
	^self new initializeWith: aTransfer and: anAccount.
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'TI 5/26/2023 14:50:51' prior: 50621156!
initializeSend: aValue from: anAccount to: aReceptiveAccount	
	pataExtraccion := PataExtraccion associateTo: self and: anAccount.
	pataDeposito := PataDeposito associateTo: self and: aReceptiveAccount.
	value := aValue.
	Deposit register: aValue on: aReceptiveAccount.
	Withdraw register: aValue on: anAccount.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/26/2023 14:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/26/2023 14:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/26/2023 14:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/26/2023 14:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/26/2023 14:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/26/2023 14:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/26/2023 14:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/26/2023 14:50:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:50:52'!
ERROR!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:50:52'!
ERROR!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:51:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:51:03'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TI 5/26/2023 14:51:14' prior: 50620923!
test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer

	| account1 account2 deposit1 pataDeposito pataExtraccion transfer1 |
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	account2 := ReceptiveAccount new.

	transfer1 := Transfer send: 50 from: account1 to: account2.
	
	pataExtraccion := transfer1 pataExtraccion.
	
	pataDeposito := (pataExtraccion associatedTransfer) pataDeposito	.
	
	self assert: pataDeposito equals: account2.
	self assert: pataExtraccion equals: account1.
! !

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:51:16'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TI 5/26/2023 14:51:35' prior: 50621291!
test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer

	| account1 account2 deposit1 pataDeposito pataExtraccion transfer1 |
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	account2 := ReceptiveAccount new.

	transfer1 := Transfer send: 50 from: account1 to: account2.
	
	pataExtraccion := transfer1 pataExtraccion.
	
	pataDeposito := (pataExtraccion associatedTransfer) pataDeposito	.
	
	self assert: pataDeposito equals: account2.
	self assert: pataExtraccion equals: account1.
! !
!PataDeposito methodsFor: 'as yet unclassified' stamp: 'TI 5/26/2023 14:52:02' overrides: 50621040!
associatedTransfer
	^associatedTransfer.! !
!PataDeposito methodsFor: 'as yet unclassified' stamp: 'TI 5/26/2023 14:52:10'!
account
	^account.! !
!PataExtraccion methodsFor: 'as yet unclassified' stamp: 'TI 5/26/2023 14:52:17'!
account
	^account.! !
!PataExtraccion methodsFor: 'as yet unclassified' stamp: 'TI 5/26/2023 14:52:27' overrides: 50621040!
associatedTransfer
	^associatedTransfer.! !
!Pata methodsFor: 'as yet unclassified' stamp: 'TI 5/26/2023 14:52:44'!
account
	^account.! !

!methodRemoval: PataDeposito #account stamp: 'TI 5/26/2023 14:52:44'!
account
	^account.!

!methodRemoval: PataDeposito #associatedTransfer stamp: 'TI 5/26/2023 14:52:47'!
associatedTransfer
	^associatedTransfer.!

!methodRemoval: PataExtraccion #account stamp: 'TI 5/26/2023 14:52:49'!
account
	^account.!

!methodRemoval: PataExtraccion #associatedTransfer stamp: 'TI 5/26/2023 14:52:51'!
associatedTransfer
	^associatedTransfer.!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:52:56'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:52:56'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TI 5/26/2023 14:53:08' prior: 50621315!
test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer

	| account1 account2 deposit1 pataDeposito pataExtraccion transfer1 |
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	account2 := ReceptiveAccount new.

	transfer1 := Transfer send: 50 from: account1 to: account2.
	
	pataExtraccion := transfer1 pataExtraccion.
	
	pataDeposito := (pataExtraccion associatedTransfer) pataDeposito	.
	
	self assert: pataDeposito account equals: account2.
	self assert: pataExtraccion account equals: account1.
! !

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:53:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/26/2023 14:53:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/26/2023 14:53:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/26/2023 14:53:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/26/2023 14:53:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/26/2023 14:53:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/26/2023 14:53:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/26/2023 14:53:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/26/2023 14:53:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:53:10'!
PASSED!

----SNAPSHOT----(26 May 2023 14:53:17) CuisUniversity-5706.image priorSource: 9255232!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'TI 5/26/2023 14:58:48'!
test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer

	| account1 account2 deposit1 pataDeposito pataExtraccion transfer1 |
	
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 100 on: account1.
	account2 := ReceptiveAccount new.

	transfer1 := Transfer send: 50 from: account1 to: account2.
	
	pataDeposito := transfer1 pataDeposito.
	
	pataExtraccion := (pataDeposito associatedTransfer) pataExtraccion	.
	
	self assert: pataDeposito account equals: account2.
	self assert: pataExtraccion account equals: account1.
! !

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/26/2023 14:58:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/26/2023 14:58:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/26/2023 14:58:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/26/2023 14:58:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/26/2023 14:58:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/26/2023 14:58:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/26/2023 14:58:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/26/2023 14:58:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/26/2023 14:58:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/26/2023 14:58:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/26/2023 14:58:50'!
PASSED!

----SNAPSHOT----(26 May 2023 15:30:47) CuisUniversity-5706.image priorSource: 9273133!

----STARTUP---- (27 May 2023 13:17:45) as /home/tobi/Desktop/linux64/CuisUniversity-5706.image!


Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions patas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'TI 5/27/2023 13:27:20'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions patas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'TI 5/27/2023 13:29:24' prior: 50621230!
initializeSend: aValue from: anAccount to: aReceptiveAccount	
	pataExtraccion := PataExtraccion associateTo: self and: anAccount.
	pataDeposito := PataDeposito associateTo: self and: aReceptiveAccount.
	value := aValue.
	anAccount addPataTransfer: pataExtraccion.
	aReceptiveAccount addPataTransfer: pataExtraccion.
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'TI 5/27/2023 13:30:51'!
addPataTransfer: aPata

	patas add: aPata.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/27/2023 13:31:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/27/2023 13:31:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/27/2023 13:31:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/27/2023 13:31:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/27/2023 13:31:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/27/2023 13:31:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/27/2023 13:31:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/27/2023 13:31:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/27/2023 13:31:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/27/2023 13:31:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/27/2023 13:31:24'!
ERROR!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/27/2023 13:31:24'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'TI 5/27/2023 13:31:44' prior: 50620427 overrides: 16920235!
initialize

	super initialize.
	transactions := OrderedCollection new.
	patas := OrderedCollection new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/27/2023 13:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/27/2023 13:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/27/2023 13:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/27/2023 13:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/27/2023 13:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/27/2023 13:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/27/2023 13:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/27/2023 13:31:47'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/27/2023 13:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/27/2023 13:31:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/27/2023 13:31:47'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'TI 5/27/2023 13:34:53' prior: 50620450 overrides: 50620255!
balance
	
	| totalTransactions totalTransfers |
	totalTransactions := transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ].
	totalTransfers := patas 
		inject: 0
		into: [ :currentBalance :pata | pata affectBalance: currentBalance ].
	^totalTransactions + totalTransfers! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'TI 5/27/2023 13:34:57' prior: 50621639 overrides: 50620255!
balance
	
	| totalTransactions totalTransfers |
	
	totalTransactions := transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ].
	totalTransfers := patas 
		inject: 0
		into: [ :currentBalance :pata | pata affectBalance: currentBalance ].
	^totalTransactions + totalTransfers! !
!PataDeposito methodsFor: 'as yet unclassified' stamp: 'TI 5/27/2023 13:35:24'!
affectBalance: aBalance

	^aBalance + associatedTransfer value! !
!PataExtraccion methodsFor: 'as yet unclassified' stamp: 'TI 5/27/2023 13:35:34'!
affectBalance: aBalance

	^aBalance - associatedTransfer value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/27/2023 13:35:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/27/2023 13:35:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/27/2023 13:35:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/27/2023 13:35:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/27/2023 13:35:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/27/2023 13:35:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/27/2023 13:35:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/27/2023 13:35:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/27/2023 13:35:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/27/2023 13:35:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/27/2023 13:35:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/27/2023 13:36:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/27/2023 13:36:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/27/2023 13:36:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/27/2023 13:36:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/27/2023 13:36:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/27/2023 13:36:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/27/2023 13:36:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/27/2023 13:36:17'!
ERROR!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/27/2023 13:36:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/27/2023 13:36:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/27/2023 13:36:17'!
ERROR!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/27/2023 13:36:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/27/2023 13:36:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/27/2023 13:36:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/27/2023 13:37:26'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'TI 5/27/2023 13:37:48' overrides: 16902254!
value
	^value.! !

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/27/2023 13:37:50'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/27/2023 13:37:50'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'TI 5/27/2023 13:39:15' prior: 50621522!
initializeSend: aValue from: anAccount to: aReceptiveAccount	
	pataExtraccion := PataExtraccion associateTo: self and: anAccount.
	pataDeposito := PataDeposito associateTo: self and: aReceptiveAccount.
	value := aValue.
	anAccount addPataTransfer: pataExtraccion.
	aReceptiveAccount addPataTransfer: pataDeposito.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/27/2023 13:39:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/27/2023 13:39:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/27/2023 13:39:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/27/2023 13:39:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/27/2023 13:39:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/27/2023 13:39:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/27/2023 13:39:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/27/2023 13:39:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/27/2023 13:39:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/27/2023 13:39:17'!
PASSED!

----SNAPSHOT----(27 May 2023 13:41:41) CuisUniversity-5706.image priorSource: 9275250!

Object subclass: #Reporte
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reporte category: 'Portfolio-Solucion' stamp: 'TI 5/27/2023 13:44:42'!
Object subclass: #Reporte
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #ReporteTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReporteTest category: 'Portfolio-Solucion' stamp: 'TI 5/27/2023 13:52:09'!
TestCase subclass: #ReporteTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReporteTest methodsFor: 'no messages' stamp: 'TI 5/27/2023 13:52:44'!
test01! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/27/2023 13:53:42'!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions! !

!methodRemoval: ReporteTest #test01 stamp: 'TI 5/27/2023 13:53:42'!
test01!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/27/2023 13:54:03' prior: 50621876!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account |
	account := ReceptiveAccount new.! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/27/2023 13:55:26' prior: 50621885!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account reporte |
	account := ReceptiveAccount new.
	reporte := AccountSumary with: account.
	self assert: reporte equals: 'Balance = 0'.! !

AccountSumary!

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'TI 5/27/2023 13:56:51'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reporte subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'TI 5/27/2023 13:56:57'!
Reporte subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/27/2023 13:57:12'!
ERROR!

----SNAPSHOT----(27 May 2023 13:59:41) CuisUniversity-5706.image priorSource: 9286281!

----SNAPSHOT----(27 May 2023 14:05:02) CuisUniversity-5706.image priorSource: 9288990!

----SNAPSHOT----(27 May 2023 15:14:32) CuisUniversity-5706.image priorSource: 9289078!

----STARTUP---- (29 May 2023 17:12:21) as /home/clinux01/Escritorio/linux64/CuisUniversity-5706.image!


!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:13:45'!
ERROR!
!AccountSummary class methodsFor: 'nil' stamp: 'TI 5/29/2023 17:15:14'!
with: anAccount
	
	^self new initializeWith: anAccount.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'TI 5/29/2023 17:15:51'!
Reporte subclass: #AccountSummary
	instanceVariableNames: 'reporte'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'no messages' stamp: 'TI 5/29/2023 17:15:49'!
with: anAccount
	
	reporte := OrderedCollection new.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:22:20' prior: 50621960!
with: anAccount
	
	reporte := OrderedCollection with: 'Balance = ', anAccount balance.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:22:29'!
ERROR!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:22:36' prior: 50621893!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account reporte |
	account := ReceptiveAccount new.
	reporte := AccountSumary with: account.
	self assert: reporte reporte equals: 'Balance = 0'.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:22:40'!
ERROR!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:22:46' prior: 50621976!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account reporte |
	account := ReceptiveAccount new.
	reporte := AccountSumary with: account.
	self assert: reporte equals: 'Balance = 0'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:23:07'!
initializeWith: anAccount
	
	reporte := OrderedCollection with: 'Balance = ', anAccount balance.! !

!methodRemoval: AccountSummary #with: stamp: 'TI 5/29/2023 17:23:11'!
with: anAccount
	
	reporte := OrderedCollection with: 'Balance = ', anAccount balance.!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:23:17'!
ERROR!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:23:17'!
ERROR!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:23:53' prior: 50621992!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account reporte |
	account := ReceptiveAccount new.
	reporte := AccountSumary with: account.
	self assert: reporte equals: 'Balance = 0'.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:23:55'!
ERROR!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:24:07' prior: 50622023!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account reporte |
	account := ReceptiveAccount new.
	reporte := AccountSummary with: account.
	self assert: reporte equals: 'Balance = 0'.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:24:08'!
ERROR!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:26:09'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:29:38' prior: 50622002!
initializeWith: anAccount
	
	reporte := OrderedCollection with: 'Balance = ', anAccount balance asString.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:29:38'!
FAILURE!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:29:38'!
FAILURE!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:29:49' prior: 50622038!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account reporte |
	account := ReceptiveAccount new.
	reporte := AccountSummary with: account.
	self assert: reporte reporte equals: 'Balance = 0'.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:29:50'!
ERROR!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:30:06' prior: 50622074!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account reporte1 |
	account := ReceptiveAccount new.
	reporte1 := AccountSummary with: account.
	self assert: reporte1 equals: 'Balance = 0'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:30:23'!
reporte
	^reporte.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:30:24'!
FAILURE!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:30:24'!
FAILURE!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:30:33' prior: 50622090!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account reporte1 |
	account := ReceptiveAccount new.
	reporte1 := AccountSummary with: account.
	self assert: reporte1 reporte equals: 'Balance = 0'.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:30:34'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:30:53' prior: 50622058!
initializeWith: anAccount
	
	reporte := 'Balance = ', anAccount balance asString.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/29/2023 17:30:54'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:31:28'!
test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction

	| account reporte1 |
	account := ReceptiveAccount new.
	reporte1 := AccountSummary with: account.
	self assert: reporte1 reporte equals: 'Balance = 0'.! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:32:02' prior: 50622140!
test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction

	| account reporte1 |
	account := ReceptiveAccount new.
	Deposit register: 50 on: account.
	reporte1 := AccountSummary with: account.
	self assert: reporte1 reporte equals: 'Balance = 0'.! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/29/2023 17:35:16' prior: 50622151!
test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction

	| account reporte1 |
	account := ReceptiveAccount new.
	Deposit register: 50 on: account.
	reporte1 := AccountSummary with: account.
	self assert: reporte1 reporte equals: 
	'Depósito por 50.
	Balance = 0'.! !

----SNAPSHOT----(29 May 2023 17:36:03) CuisUniversity-5706.image priorSource: 9289166!

----SNAPSHOT----(29 May 2023 19:47:29) CuisUniversity-5706.image priorSource: 9296773!

----STARTUP---- (30 May 2023 18:41:01) as C:\Users\tobi\Desktop\inge\windows64\CuisUniversity-5706.image!

!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 18:44:06' prior: 50622114!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account |
	account := ReceptiveAccount new.! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 18:44:15' prior: 50622163!
test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction

	
	! !

!classRemoval: #AccountSummary stamp: 'TI 5/30/2023 18:44:22'!
Reporte subclass: #AccountSummary
	instanceVariableNames: 'reporte'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Reporte stamp: 'TI 5/30/2023 18:44:22'!
Object subclass: #Reporte
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transfers' stamp: 'TI 5/30/2023 18:47:37'!
accountSumary

	| reporte |
	reporte := OrderedCollection new.
	transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: 'Deposito por ', transaction value asString, '.' ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	reporte addLast: 'Balance = ', self balance.
	^reporte.! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 18:49:02' prior: 50622185!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account |
	account := ReceptiveAccount new.
	
	self assert: account accountSumary equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 18:49:03'!
ERROR!
!ReceptiveAccount methodsFor: 'transfers' stamp: 'TI 5/30/2023 18:49:18' prior: 50622211!
accountSumary

	| reporte |
	reporte := OrderedCollection new.
	transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: 'Deposito por ', transaction value asString, '.' ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	reporte addLast: 'Balance = ', self balance asString.
	^reporte.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 18:49:56'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 18:52:03' prior: 50622193!
test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction

	| account |
	account := ReceptiveAccount new.
	
	self assert: account accountSumary equals: (OrderedCollection with: 'Balance = 0').! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 18:53:41' prior: 50622262!
test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction

	| account |
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self assert: account accountSumary equals: (OrderedCollection with: 'Deposito por 100'with: 'Balance = 100').! !

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 18:53:44'!
FAILURE!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 18:53:58' prior: 50622272!
test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction

	| account |
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self assert: account accountSumary equals: (OrderedCollection with: 'Deposito por 100.'with: 'Balance = 100').! !

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 18:53:59'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 18:53:59'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 18:53:59'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 18:54:16'!
test02AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account |
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self assert: account accountSumary equals: (OrderedCollection with: 'Deposito por 100.'with: 'Balance = 100').! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 18:55:07' prior: 50622315!
test02AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	self assert: account accountSumary equals: (OrderedCollection with: 'Deposito por 100.'with: 'Balance = 100').! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 18:55:30'!
test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	self assert: account accountSumary equals: (OrderedCollection with: 'Deposito por 100.'with: 'Balance = 100').! !

!methodRemoval: ReporteTest #test02AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 18:55:30'!
test02AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	self assert: account accountSumary equals: (OrderedCollection with: 'Deposito por 100.'with: 'Balance = 100').!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 18:56:25' prior: 50622340!
test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	account transfer: 50 to: account2. 
	self assert: account accountSumary equals: (OrderedCollection with: 'Salida por transferencia de 50.'with: 'Balance = 50').! !

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 18:56:26'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 18:57:15'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 18:57:15'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 18:57:38'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 18:58:15'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 18:58:41'!
ERROR!
!Transfer methodsFor: 'balance' stamp: 'TI 5/30/2023 18:59:02'!
affectBalance: currentBalance 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'balance' stamp: 'TI 5/30/2023 18:59:15' prior: 50622408!
affectBalance: currentBalance 
	self subclassResponsibility.! !

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 18:59:15'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 18:59:19'!
ERROR!
!AccountTransaction methodsFor: 'balance' stamp: 'TI 5/30/2023 18:59:51' prior: 50620489!
affectBalance: aBalance

	^self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'TI 5/30/2023 18:59:53' prior: 50622427!
affectBalance: aBalance

	^self subclassResponsibility.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 18:59:57'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 18:59:57'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 18:59:57'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 18:59:57'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:00:51'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/30/2023 19:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/30/2023 19:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/30/2023 19:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/30/2023 19:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/30/2023 19:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/30/2023 19:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/30/2023 19:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/30/2023 19:01:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:01:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/30/2023 19:01:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:01:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:01:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/30/2023 19:01:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/30/2023 19:01:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/30/2023 19:01:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/30/2023 19:01:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/30/2023 19:01:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/30/2023 19:01:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/30/2023 19:01:29'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:01:38'!
ERROR!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:02:05' prior: 50622368!
test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	"account transfer: 50 to: account2. "
	self assert: account accountSumary equals: (OrderedCollection with: 'Salida por transferencia de 50.'with: 'Balance = 50').! !

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:02:08'!
FAILURE!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:02:19'!
FAILURE!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:02:58' prior: 50622546!
test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	"account transfer: 50 to: account2. "
	self assert: account accountSumary equals: (OrderedCollection with: 'Deposito por 100.' with: 'Salida por transferencia de 50.'with: 'Balance = 50').! !

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:03:00'!
FAILURE!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:03:10' prior: 50622570!
test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	account transfer: 50 to: account2.
	self assert: account accountSumary equals: (OrderedCollection with: 'Deposito por 100.' with: 'Salida por transferencia de 50.'with: 'Balance = 50').! !

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:03:11'!
ERROR!

!methodRemoval: AccountTransaction #affectBalance: stamp: 'TI 5/30/2023 19:03:20'!
affectBalance: aBalance

	^self subclassResponsibility.!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:03:23'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:03:23'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:03:23'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:03:23'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:04:18'!
ERROR!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:05:10' prior: 50622590!
test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer send: 50 from: account to: account2.
	self assert: account accountSumary equals: (OrderedCollection with: 'Deposito por 100.' with: 'Salida por transferencia de 50.'with: 'Balance = 50').! !

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:05:11'!
FAILURE!
!ReceptiveAccount methodsFor: 'transfers' stamp: 'TI 5/30/2023 19:12:16' prior: 50622242!
accountSumary

	| reporte |
	reporte := OrderedCollection new.
	transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: 'Deposito por ', transaction value asString, '.' ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		]
	reporte addLast: 'Balance = ', self balance asString.
	^reporte.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/30/2023 19:12:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:12:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:12:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/30/2023 19:12:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/30/2023 19:12:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/30/2023 19:12:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/30/2023 19:12:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/30/2023 19:12:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/30/2023 19:12:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/30/2023 19:12:42'!
PASSED!
!ReceptiveAccount methodsFor: 'transfers' stamp: 'TI 5/30/2023 19:12:48' prior: 50622657!
accountSumary

	| reporte |
	reporte := OrderedCollection new.
	transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: 'Deposito por ', transaction value asString, '.' ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		].
	reporte addLast: 'Balance = ', self balance asString.
	^reporte.! !

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:12:53'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:12:56'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:12:56'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:12:56'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:14:27' prior: 50622637!
test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer send: 50 from: account to: account2.
	self assert: account2 accountSumary equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').! !

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:14:28'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:14:28'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:14:28'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:14:29'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:14:39'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:14:39'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:14:39'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:14:39'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:14:51'!
test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer send: 50 from: account to: account2.
	self assert: account2 accountSumary equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').! !

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:14:52'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:14:52'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:14:52'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:14:52'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:14:52'!
PASSED!

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'TI 5/30/2023 19:15:42'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'no messages' stamp: 'TI 5/30/2023 19:17:40'!
createAccountSummary: anAccount
	
	^anAccount accountSumary.! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:18:57'!
test05TransferNetOfAnAccountWithoutTransfersReturnsZero
	| account |
	account := ReceptiveAccount new.
	
	self assert: account transferNet equals: 0.! !

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:18:59'!
ERROR!
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:19:05'!
transferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:19:11' prior: 50622880!
transferNet
	0.
	! !

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:19:11'!
FAILURE!
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:19:23' prior: 50622885!
transferNet
	^0.
	! !

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:19:26'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:20:55'!
test03TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	self assert: account2 transferNet equals: 50.! !

!testRun: #ReporteTest #test03TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:20:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:21:12' prior: 50622893!
transferNet
	
	^0.
	! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:23:44' prior: 50622916!
transferNet
	
	^patas inject: 0 into: [ :accumulated :pata |
		(pata isKindOf: PataDeposito) ifTrue:[pata associatedTransfer value].
		(pata isKindOf: PataExtraccion) ifTrue:[pata associatedTransfer value].
		].! !

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:23:57'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:24:04'!
test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	self assert: account2 transferNet equals: 50.! !

!methodRemoval: ReporteTest #test03TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:24:04'!
test03TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	self assert: account2 transferNet equals: 50.!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:24:06'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/30/2023 19:24:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:24:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:24:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/30/2023 19:24:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/30/2023 19:24:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/30/2023 19:24:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/30/2023 19:24:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/30/2023 19:24:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/30/2023 19:24:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/30/2023 19:24:57'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:25:01'!
FAILURE!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:25:01'!
FAILURE!
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:26:27' prior: 50622920!
transferNet
	
	^patas inject: 0 into: [ :accumulated :pata |
		(pata isKindOf: PataDeposito) ifTrue:[accumulated + pata associatedTransfer value].
		(pata isKindOf: PataExtraccion) ifTrue:[accumulated + pata associatedTransfer value].
		].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/30/2023 19:26:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:26:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:26:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/30/2023 19:26:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/30/2023 19:26:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/30/2023 19:26:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/30/2023 19:26:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/30/2023 19:26:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/30/2023 19:26:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/30/2023 19:26:28'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:26:30'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:26:30'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:26:30'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:26:30'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:26:30'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:26:30'!
FAILURE!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:26:30'!
FAILURE!
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:27:59' prior: 50623010!
transferNet
	
	^patas inject: 0 into: [ :accumulated :pata |
		(pata isKindOf: PataDeposito) ifTrue:[pata affectBalance: accumulated].
		(pata isKindOf: PataExtraccion) ifTrue:[pata affectBalance: accumulated].
		].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/30/2023 19:28:00'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:28:03'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:28:03'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:28:03'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:28:03'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:28:03'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:28:03'!
FAILURE!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:28:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:28:16' prior: 50623091!
transferNet
	
	^patas inject: 0 into: [ :accumulated :pata |
		pata affectBalance: accumulated
		].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/30/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/30/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/30/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/30/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/30/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/30/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/30/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/30/2023 19:28:17'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:28:19'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:28:20'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:28:20'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:28:20'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:28:20'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:28:20'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:29:16' prior: 50622764!
test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	self assert: account2 accountSumary equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').! !

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:29:17'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:29:17'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:29:17'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:29:17'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:29:17'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:29:17'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:29:17'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:30:00'!
test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer send: 50 from: account to: account2.
	self assert: account accountSumary equals: (OrderedCollection with: 'Deposito por 100.' with: 'Salida por transferencia de 50.'with: 'Balance = 50').! !

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:30:00'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:30:00'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:30:00'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:30:00'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:30:00'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:30:01'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:30:01'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:30:01'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:30:38'!
test06TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	Transfer send: 50 from: account2 to: account.
	self assert: account2 transferNet equals: 0.! !

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:30:44'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:30:44'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:30:44'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:30:44'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:30:44'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:30:44'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:30:44'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:30:44'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:30:45'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:30:51'!
test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	Transfer send: 50 from: account2 to: account.
	self assert: account2 transferNet equals: 0.! !

!methodRemoval: ReporteTest #test06TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:30:51'!
test06TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	Transfer send: 50 from: account2 to: account.
	self assert: account2 transferNet equals: 0.!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:30:53'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:30:53'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:30:53'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:30:53'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:30:53'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:30:53'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:30:53'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:30:53'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:30:53'!
PASSED!

Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'TI 5/30/2023 19:31:17'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'no messages' stamp: 'TI 5/30/2023 19:31:33'!
createAccountSummary: anAccount
	
	^anAccount transferNet .! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:31:52'!
createTransferNet: anAccount
	
	^anAccount accountSumary.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:31:52'!
createTransferNet: anAccount
	
	^anAccount transferNet .! !

!methodRemoval: AccountSummary #createAccountSummary: stamp: 'TI 5/30/2023 19:31:52'!
createAccountSummary: anAccount
	
	^anAccount accountSumary.!

!methodRemoval: TransferNet #createAccountSummary: stamp: 'TI 5/30/2023 19:31:52'!
createAccountSummary: anAccount
	
	^anAccount transferNet .!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:33:50' prior: 50622227!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account |
	account := ReceptiveAccount new.
	
	self assert: AccountSummary self equals: (OrderedCollection with: 'Balance = 0').! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:34:21'!
createAccountSummary: anAccount
	
	^anAccount accountSumary.! !

!methodRemoval: AccountSummary #createTransferNet: stamp: 'TI 5/30/2023 19:34:22'!
createTransferNet: anAccount
	
	^anAccount accountSumary.!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:34:49' prior: 50623500!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account |
	account := ReceptiveAccount new.
	
	self assert: (AccountSummary createAccountSummary: self) equals: (OrderedCollection with: 'Balance = 0').! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:34:57' prior: 50623520!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account |
	account := ReceptiveAccount new.
	
	self assert: (AccountSummary createAccountSummary: account) equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:34:58'!
ERROR!
!AccountSummary class methodsFor: 'no messages' stamp: 'TI 5/30/2023 19:36:16'!
for: anAccount

	^self new createAccountSummary: anAccount.! !
!TransferNet class methodsFor: 'no messages' stamp: 'TI 5/30/2023 19:36:38'!
for: anAccount

	^self new createTransferNet: anAccount.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:36:45' prior: 50623485!
createTransferNet: anAccount
	
	^anAccount transferNet.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:36:48'!
ERROR!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:36:48'!
ERROR!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:36:56' prior: 50623531!
test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account |
	account := ReceptiveAccount new.
	
	self assert: (AccountSummary for: account) equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:36:57'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:36:57'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:36:57'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:36:57'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:36:57'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:36:57'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:36:57'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:36:57'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:36:57'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:37:07' prior: 50622289!
test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction

	| account |
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self assert: (AccountSummary for: account) equals: (OrderedCollection with: 'Deposito por 100.'with: 'Balance = 100').! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:37:11' prior: 50623243!
test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	self assert: (AccountSummary for: account) equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:37:16' prior: 50623287!
test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer send: 50 from: account to: account2.
	self assert: (AccountSummary for: account) equals: (OrderedCollection with: 'Deposito por 100.' with: 'Salida por transferencia de 50.'with: 'Balance = 50').! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:37:20' prior: 50622815!
test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer send: 50 from: account to: account2.
	self assert: (AccountSummary for: account) equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:37:29' prior: 50622869!
test05TransferNetOfAnAccountWithoutTransfersReturnsZero
	| account |
	account := ReceptiveAccount new.
	
	self assert: (TransferNet for: account) equals: 0.! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:37:36' prior: 50622933!
test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	self assert: (TransferNet for: account) equals: 50.! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:37:42' prior: 50623395!
test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	Transfer send: 50 from: account2 to: account.
	self assert: (TransferNet for: account) equals: 0.! !

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:37:43'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:37:43'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:37:43'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:37:43'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:37:43'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:37:43'!
FAILURE!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:37:43'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:37:43'!
FAILURE!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:37:43'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:37:52'!
FAILURE!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:38:05' prior: 50623636!
test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	self assert: (AccountSummary for: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:38:11' prior: 50623650!
test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer send: 50 from: account to: account2.
	self assert: (AccountSummary for: account) equals: (OrderedCollection with: 'Deposito por 100.' with: 'Salida por transferencia de 50.'with: 'Balance = 50').! !

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:38:12'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:38:12'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:38:12'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:38:12'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:38:12'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:38:12'!
FAILURE!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:38:12'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:38:12'!
FAILURE!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:38:12'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:38:19' prior: 50623667!
test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer send: 50 from: account to: account2.
	self assert: (AccountSummary for: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').! !

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:38:21'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:38:21'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:38:21'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:38:21'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:38:21'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:38:21'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:38:21'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:38:21'!
FAILURE!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:38:21'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:38:21'!
FAILURE!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:38:28' prior: 50623691!
test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	self assert: (TransferNet for: account2) equals: 50.! !

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:38:29'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:38:29'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:38:29'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:38:29'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:38:29'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:38:29'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:38:29'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:38:29'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:38:29'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:44:18' prior: 50623510!
createAccountSummary: anAccount
	
	^anAccount accountSumary.! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:46:18'!
accountSumary: aMethodObject
	
	^aMethodObject transferNetForAccount: aMethodObject.
	"
	| reporte |
	reporte := OrderedCollection new.
	transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: 'Deposito por ', transaction value asString, '.' ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		].
	reporte addLast: 'Balance = ', self balance asString.
	^reporte."! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:46:53'!
transferNetForAccount: anAccount
	
	^anAccount transferNet.! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:47:07' prior: 50623954!
accountSumary: aMethodObject
	
	^aMethodObject accountSummaryForAccount: aMethodObject.
	"
	| reporte |
	reporte := OrderedCollection new.
	transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: 'Deposito por ', transaction value asString, '.' ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		].
	reporte addLast: 'Balance = ', self balance asString.
	^reporte."! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:47:13' prior: 50623986!
accountSumary: aMethodObject
	
	^aMethodObject accountSummaryForAccount: self.
	"
	| reporte |
	reporte := OrderedCollection new.
	transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: 'Deposito por ', transaction value asString, '.' ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		].
	reporte addLast: 'Balance = ', self balance asString.
	^reporte."! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:47:37'!
accountSummaryForAccount: anAccount! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:47:46' prior: 50624013!
accountSumary: aMethodObject
	
	^aMethodObject accountSummaryForAccount: self.
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:48:04' prior: 50624040!
accountSummaryForAccount: anAccount
	
	| reporte |
	reporte := OrderedCollection new.
	anAccount transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: 'Deposito por ', transaction value asString, '.' ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	anAccount patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		].
	reporte addLast: 'Balance = ', self balance asString.
	^reporte.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'TI 5/30/2023 19:48:19'!
patas 

	^ patas copy! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:48:26'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:48:26'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:48:26'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:48:26'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:48:26'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:48:26'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:48:26'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:48:26'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:49:38' prior: 50623949!
createAccountSummary: anAccount
	
	^self accountSummaryForAccount: anAccount .! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:49:39'!
ERROR!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:49:39'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:49:39'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:49:39'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:49:39'!
ERROR!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:49:39'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:49:39'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:49:39'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:49:46'!
ERROR!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:49:46'!
ERROR!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:50:14' prior: 50624050!
accountSummaryForAccount: anAccount
	
	| reporte |
	reporte := OrderedCollection new.
	anAccount transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: 'Deposito por ', transaction value asString, '.' ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	anAccount patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		].
	reporte addLast: 'Balance = ', anAccount balance asString.
	^reporte.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:50:15'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:50:15'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:50:15'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:50:15'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:50:15'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:50:15'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:50:16'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:50:16'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:50:42' prior: 50623556!
createTransferNet: anAccount
	
	^self transferNetForAccount: anAccount.! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:51:03'!
transferNet: aMethodObject
	
	! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:51:21' prior: 50624236!
transferNet: aMethodObject
	
	 ^aMethodObject transferNetForAccount: self.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:52:03' prior: 50623981!
transferNetForAccount: anAccount
	
	^anAccount patas inject: 0 into: [ :accumulated :pata |
		pata affectBalance: accumulated
		].! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:52:04'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:52:04'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:52:04'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:52:04'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:52:04'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:52:04'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:52:04'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:52:04'!
PASSED!

Object subclass: #AbstractReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AbstractReport category: 'Portfolio-Solucion' stamp: 'TI 5/30/2023 19:53:12'!
Object subclass: #AbstractReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AbstractReport subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'TI 5/30/2023 19:53:17'!
AbstractReport subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AbstractReport subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'TI 5/30/2023 19:53:20'!
AbstractReport subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:54:05'!
reporteOnAsset: anAccount
	
	^anAccount patas inject: 0 into: [ :accumulated :pata |
		pata affectBalance: accumulated
		].! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:54:05' prior: 50624231!
createTransferNet: anAccount
	
	^self reporteOnAsset: anAccount.! !

!methodRemoval: TransferNet #transferNetForAccount: stamp: 'TI 5/30/2023 19:54:05'!
transferNetForAccount: anAccount
	
	^anAccount patas inject: 0 into: [ :accumulated :pata |
		pata affectBalance: accumulated
		].!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:54:24'!
reporteOnAsset: anAccount
	
	| reporte |
	reporte := OrderedCollection new.
	anAccount transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: 'Deposito por ', transaction value asString, '.' ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	anAccount patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		].
	reporte addLast: 'Balance = ', anAccount balance asString.
	^reporte.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:54:24' prior: 50624117!
createAccountSummary: anAccount
	
	^self reporteOnAsset: anAccount .! !

!methodRemoval: AccountSummary #accountSummaryForAccount: stamp: 'TI 5/30/2023 19:54:24'!
accountSummaryForAccount: anAccount
	
	| reporte |
	reporte := OrderedCollection new.
	anAccount transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: 'Deposito por ', transaction value asString, '.' ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	anAccount patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		].
	reporte addLast: 'Balance = ', anAccount balance asString.
	^reporte.!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:54:30'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:54:30'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:54:30'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:54:30'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:54:30'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:54:30'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:54:30'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:54:30'!
PASSED!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:55:49'!
startReporteOnAsset: anAccount
	
	^self reporteOnAsset: anAccount.! !
!TransferNet class methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:55:49' prior: 50623551!
for: anAccount

	^self new startReporteOnAsset: anAccount.! !

!methodRemoval: TransferNet #createTransferNet: stamp: 'TI 5/30/2023 19:55:49'!
createTransferNet: anAccount
	
	^self reporteOnAsset: anAccount.!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:56:02'!
startReporteOnAsset: anAccount
	
	^self reporteOnAsset: anAccount .! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 19:56:02' prior: 50623546!
for: anAccount

	^self new startReporteOnAsset: anAccount.! !

!methodRemoval: AccountSummary #createAccountSummary: stamp: 'TI 5/30/2023 19:56:02'!
createAccountSummary: anAccount
	
	^self reporteOnAsset: anAccount .!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:56:05'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:56:05'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:56:05'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:56:05'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:56:05'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:56:05'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:56:05'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:56:05'!
PASSED!

!methodRemoval: ReceptiveAccount #transferNet stamp: 'TI 5/30/2023 19:58:14'!
transferNet
	
	^patas inject: 0 into: [ :accumulated :pata |
		pata affectBalance: accumulated
		].!

!methodRemoval: ReceptiveAccount #accountSumary stamp: 'TI 5/30/2023 19:58:18'!
accountSumary

	| reporte |
	reporte := OrderedCollection new.
	transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: 'Deposito por ', transaction value asString, '.' ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		].
	reporte addLast: 'Balance = ', self balance asString.
	^reporte.!
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:58:32' prior: 50624240!
transferNet: aMethodObject
	
	 ^aMethodObject reporteOnAsset: self.! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/30/2023 19:58:37' prior: 50624044!
accountSumary: aMethodObject
	
	^aMethodObject reporteOnAsset: self.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/30/2023 19:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 19:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/30/2023 19:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/30/2023 19:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/30/2023 19:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/30/2023 19:58:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/30/2023 19:58:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/30/2023 19:58:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/30/2023 19:58:38'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 19:58:40'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 19:58:40'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:58:40'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 19:58:40'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 19:58:40'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 19:58:40'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:58:40'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 19:58:40'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 20:05:25' prior: 50624453!
startReporteOnAsset: anAsset
	
	^self reporteOnAsset: anAsset .! !

!methodRemoval: TransferNet #startReporteOnAsset: stamp: 'TI 5/30/2023 20:05:51'!
startReporteOnAsset: anAccount
	
	^self reporteOnAsset: anAccount.!
!AbstractReport methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 20:06:00'!
startReporteOnAsset: anAsset
	
	^self reporteOnAsset: anAsset .! !

!methodRemoval: AccountSummary #startReporteOnAsset: stamp: 'TI 5/30/2023 20:06:00'!
startReporteOnAsset: anAsset
	
	^self reporteOnAsset: anAsset .!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/30/2023 20:06:07'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/30/2023 20:06:08'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 20:06:08'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/30/2023 20:06:08'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/30/2023 20:06:08'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/30/2023 20:06:08'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 20:06:08'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/30/2023 20:06:08'!
PASSED!
!ReceptiveAccount class methodsFor: 'no messages' stamp: 'TI 5/30/2023 20:21:36'!
named: aName
	^ self new initializeWith: aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'TI 5/30/2023 20:21:53'!
initializeWith: aName

	transactions := OrderedCollection new.
	patas := OrderedCollection new.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'TI 5/30/2023 20:22:02'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions patas name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'TI 5/30/2023 20:22:00' prior: 50624682!
initializeWith: aName

	transactions := OrderedCollection new.
	patas := OrderedCollection new.
	name := aName.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/30/2023 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/30/2023 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/30/2023 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/30/2023 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/30/2023 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/30/2023 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/30/2023 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/30/2023 20:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/30/2023 20:22:06'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 20:22:57'!
test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	Transfer send: 50 from: account2 to: account.
	self assert: (TransferNet for: account) equals: 0.! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 20:23:32' prior: 50624743!
test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio

	| account |
	
	account := ReceptiveAccount named: 'cuenta de tobi'.

	self assert: (TransferNet for: account) equals: 0.! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 5/30/2023 20:24:01' prior: 50624756!
test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio

	| account portfolio |
	
	account := ReceptiveAccount named: 'cuenta de tobi'.
	
	portfolio := Portfolio new.! !

----SNAPSHOT----(30 May 2023 20:57:02) CuisUniversity-5706.image priorSource: 9296861!

----SNAPSHOT----(30 May 2023 20:57:04) CuisUniversity-5706.image priorSource: 9379963!

----SNAPSHOT----(30 May 2023 20:57:06) CuisUniversity-5706.image priorSource: 9380051!

----STARTUP---- (31 May 2023 15:25:47) as C:\Users\tobi\Desktop\inge\windows64\CuisUniversity-5706.image!

!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 15:46:11' prior: 50624344!
reporteOnAsset: anAccount
	
	| reporte |
	reporte := OrderedCollection new.
	anAccount transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: transaction addDepositToAccountSummary ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: 'Retiro por ', transaction value asString, '.' ].
		].
	anAccount patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		].
	reporte addLast: 'Balance = ', anAccount balance asString.
	^reporte.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 15:46:12'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 15:46:12'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 15:46:12'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 15:46:12'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 15:46:12'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 15:46:12'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 15:46:12'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 15:46:12'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 15:46:12'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 15:46:14'!
ERROR!
!Deposit methodsFor: 'reporte' stamp: 'TI 5/31/2023 15:46:25'!
addDepositToAccountSummary
	self shouldBeImplemented.! !
!Deposit methodsFor: 'reporte' stamp: 'TI 5/31/2023 15:46:39' prior: 50624857!
addDepositToAccountSummary
	^'Deposito por ', self value asString, '.'.! !

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 15:46:41'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 15:46:42'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 15:47:28' prior: 50624787!
reporteOnAsset: anAccount
	
	| reporte |
	reporte := OrderedCollection new.
	anAccount transactions do: [ :transaction |
		(transaction isKindOf: Deposit) ifTrue: [reporte addLast: transaction addDepositToAccountSummary ].
		(transaction isKindOf: Withdraw) ifTrue: [reporte addLast: transaction addWithdrawToAccountSummary].
		].
	anAccount patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		].
	reporte addLast: 'Balance = ', anAccount balance asString.
	^reporte.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 15:47:30'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 15:47:30'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 15:47:30'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 15:47:30'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 15:47:30'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 15:47:30'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 15:47:30'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 15:47:30'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 15:47:30'!
PASSED!
!Withdraw methodsFor: 'balance' stamp: 'TI 5/31/2023 15:47:59'!
addWithdrawToAccountSummary

	^'Retiro por ', self value asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 15:48:46' prior: 50624878!
reporteOnAsset: anAccount
	
	| reporte |
	reporte := OrderedCollection new.
	anAccount transactions do: [ :transaction |
		reporte addLast: transaction addTransactionToAccountSummary.
		].
	anAccount patas do: [ :pata |
		(pata isKindOf: PataDeposito) ifTrue:[reporte addLast: 'Entrada por transferencia de ', pata associatedTransfer value asString, '.' ].
		(pata isKindOf: PataExtraccion) ifTrue:[reporte addLast: 'Salida por transferencia de ', pata associatedTransfer value asString, '.' ].
		].
	reporte addLast: 'Balance = ', anAccount balance asString.
	^reporte.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 15:48:48'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 15:48:48'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 15:48:48'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 15:48:48'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 15:48:48'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 15:48:48'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 15:48:48'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 15:48:48'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 15:48:48'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 15:48:50'!
ERROR!
!AccountTransaction methodsFor: 'Reporte' stamp: 'TI 5/31/2023 15:49:01'!
addTransactionToAccountSummary
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'Reporte' stamp: 'TI 5/31/2023 15:49:11' prior: 50625015!
addTransactionToAccountSummary
	self subclassResponsibility.! !

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 15:49:12'!
ERROR!
!Deposit methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 15:49:19' overrides: 50625020!
addTransactionToAccountSummary
	self shouldBeImplemented.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 15:49:51' prior: 50625030 overrides: 50625020!
addTransactionToAccountSummary
	^'Deposito por ', self value asString, '.'.! !
!Withdraw methodsFor: 'balance' stamp: 'TI 5/31/2023 15:50:04' overrides: 50625020!
addTransactionToAccountSummary
	^'Retiro por ', self value asString, '.'.! !

!methodRemoval: Withdraw #addWithdrawToAccountSummary stamp: 'TI 5/31/2023 15:50:09'!
addWithdrawToAccountSummary

	^'Retiro por ', self value asString, '.'.!

!methodRemoval: Deposit #addDepositToAccountSummary stamp: 'TI 5/31/2023 15:50:18'!
addDepositToAccountSummary
	^'Deposito por ', self value asString, '.'.!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 15:50:39'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 15:50:39'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 15:50:39'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 15:50:39'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 15:50:39'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 15:50:39'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 15:50:39'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 15:50:39'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 15:50:39'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 16:09:30' prior: 50624949!
reporteOnAsset: anAccount
	
	| reporte |
	reporte := OrderedCollection new.
	anAccount transactions do: [ :transaction |
		reporte addLast: transaction addTransactionToAccountSummary.
		].
	
	anAccount patas do: [ :pata |
		reporte addLast: pata addPataToAccountSummary.
		].
	reporte addLast: 'Balance = ', anAccount balance asString.
	^reporte.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 16:09:31'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 16:09:31'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 16:09:31'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 16:09:31'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 16:09:31'!
ERROR!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 16:09:31'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 16:09:31'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 16:09:31'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 16:09:31'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 16:09:33'!
ERROR!
!PataDeposito methodsFor: 'Reporte' stamp: 'TI 5/31/2023 16:09:41'!
addPataToAccountSummary
	self shouldBeImplemented.! !
!PataDeposito methodsFor: 'Reporte' stamp: 'TI 5/31/2023 16:11:16' prior: 50625156!
addPataToAccountSummary
	^'Deposito por ', self associatedTransfer value asString, '.'.! !

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 16:11:20'!
FAILURE!
!PataDeposito methodsFor: 'Reporte' stamp: 'TI 5/31/2023 16:11:49' prior: 50625161!
addPataToAccountSummary
	^'Entrada por transferencia ', self associatedTransfer value asString, '.'.! !
!PataDeposito methodsFor: 'Reporte' stamp: 'TI 5/31/2023 16:12:00' prior: 50625171!
addPataToAccountSummary
	^'Entrada por transferencia de ', self associatedTransfer value asString, '.'.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 16:12:04'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 16:12:04'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 16:12:04'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 16:12:04'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 16:12:04'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 16:12:04'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 16:12:04'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 16:12:04'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 16:12:04'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 16:12:04'!
ERROR!
!PataExtraccion methodsFor: 'reporte' stamp: 'TI 5/31/2023 16:12:10'!
addPataToAccountSummary
	self shouldBeImplemented.! !
!PataExtraccion methodsFor: 'reporte' stamp: 'TI 5/31/2023 16:12:24' prior: 50625229!
addPataToAccountSummary
	^'Salida por transferencia de ', self associatedTransfer value asString, '.'.! !

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 16:12:25'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 16:12:28'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 16:12:28'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 16:12:28'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 16:12:28'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 16:12:29'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 16:12:29'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 16:12:29'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 16:12:29'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 16:12:29'!
PASSED!

----SNAPSHOT----(31 May 2023 16:12:32) CuisUniversity-5706.image priorSource: 9380139!
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/31/2023 16:33:57'!
addBalanceToReport

	^2.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 16:34:23' prior: 50625098!
reporteOnAsset: anAccount
	
	| reporte |
	reporte := OrderedCollection new.
	anAccount transactions do: [ :transaction |
		reporte addLast: transaction addTransactionToAccountSummary.
		].
	
	anAccount patas do: [ :pata |
		reporte addLast: pata addPataToAccountSummary.
		].
	reporte addLast: anAccount addBalanceToReport.
	^reporte.! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/31/2023 16:34:34' prior: 50625289!
addBalanceToReport

	^'Balance = ', self balance asString.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/31/2023 16:34:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/31/2023 16:34:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/31/2023 16:34:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/31/2023 16:34:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/31/2023 16:34:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/31/2023 16:34:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/31/2023 16:34:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/31/2023 16:34:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/31/2023 16:34:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/31/2023 16:34:35'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 16:34:48' prior: 50625293!
reporteOnAsset: anAccount
	
	| reporte |
	reporte := OrderedCollection new.
	anAccount transactions do: [ :transaction |
		reporte addLast: transaction addTransactionToAccountSummary.
		].
	
	anAccount patas do: [ :pata |
		reporte addLast: pata addPataToAccountSummary.
		].
	
	reporte addLast: anAccount addBalanceToReport.
	^reporte.! !

----SNAPSHOT----(31 May 2023 17:18:16) CuisUniversity-5706.image priorSource: 9396327!

----STARTUP---- (31 May 2023 22:52:32) as C:\Users\tobi\Desktop\inge\windows64\CuisUniversity-5706.image!

!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:05:08' prior: 50625352!
reporteOnAsset: anAccount
	
	| reporte |
	
	reporte := OrderedCollection new.
	anAccount addTransactionsToReport: self.
	anAccount transactions do: [ :transaction |
		reporte addLast: transaction addTransactionToAccountSummary.
		].
	
	anAccount patas do: [ :pata |
		reporte addLast: pata addPataToAccountSummary.
		].
	
	reporte addLast: anAccount addBalanceToReport.
	^reporte.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:11:37' prior: 50625372!
reporteOnAsset: anAccount
	
	| reporte |
	
	reporte := OrderedCollection new.
	anAccount addTransactionsToReport: reporte with: self.
	"
	anAccount transactions do: [ :transaction |
		reporte addLast: transaction addTransactionToAccountSummary.
		].
	
	anAccount patas do: [ :pata |
		reporte addLast: pata addPataToAccountSummary.
		].
	
	reporte addLast: anAccount addBalanceToReport.
	^reporte."! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:11:40'!
ERROR!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 23:11:40'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:11:40'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 23:11:40'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:11:40'!
ERROR!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:11:40'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:11:40'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:11:40'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 23:11:40'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:11:42'!
ERROR!
!Account methodsFor: 'reporte' stamp: 'TI 5/31/2023 23:12:04'!
addTransactionsToReport: reporte with: anAccountSummary 
	self shouldBeImplemented.! !
!Account methodsFor: 'reporte' stamp: 'TI 5/31/2023 23:14:47' prior: 50625448!
addTransactionsToReport: reporte with: aReporte

	
	self transactions do: [ :transaction |
		reporte addLast: (transaction addToReporte: aReporte).
		].
	^reporte.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:14:49'!
FAILURE!
!Portfolio methodsFor: 'reporte' stamp: 'TI 5/31/2023 23:15:28' overrides: 50625454!
addTransactionsToReport: reporte with: aReporte

	
	self transactions do: [ :transaction |
		reporte addLast: (transaction addToReporte: aReporte).
		].
	^reporte.! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/31/2023 23:15:28' overrides: 50625454!
addTransactionsToReport: reporte with: aReporte

	
	self transactions do: [ :transaction |
		reporte addLast: (transaction addToReporte: aReporte).
		].
	^reporte.! !

!methodRemoval: Account #addTransactionsToReport:with: stamp: 'TI 5/31/2023 23:15:28'!
addTransactionsToReport: reporte with: aReporte

	
	self transactions do: [ :transaction |
		reporte addLast: (transaction addToReporte: aReporte).
		].
	^reporte.!

!methodRemoval: Portfolio #addTransactionsToReport:with: stamp: 'TI 5/31/2023 23:15:32'!
addTransactionsToReport: reporte with: aReporte

	
	self transactions do: [ :transaction |
		reporte addLast: (transaction addToReporte: aReporte).
		].
	^reporte.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/31/2023 23:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/31/2023 23:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/31/2023 23:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/31/2023 23:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/31/2023 23:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/31/2023 23:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/31/2023 23:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/31/2023 23:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/31/2023 23:15:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/31/2023 23:15:42'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:15:47'!
FAILURE!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 23:15:47'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:15:47'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 23:15:47'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:15:47'!
FAILURE!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:15:47'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:15:47'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:15:47'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 23:15:47'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:15:48'!
FAILURE!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:15:57'!
FAILURE!
!AccountTransaction methodsFor: 'Reporte' stamp: 'TI 5/31/2023 23:17:33'!
addToReporte: aReporte
	self subclassResponsibility.! !
!Deposit methodsFor: 'reporte' stamp: 'TI 5/31/2023 23:18:20' overrides: 50625589!
addToReporte: aReporte
	aReporte addDepositToReporte.
	! !
!Deposit methodsFor: 'reporte' stamp: 'TI 5/31/2023 23:19:48' prior: 50625594 overrides: 50625589!
addToReporte: aReporte
	^aReporte addDepositToReporte. 
	! !
!Deposit methodsFor: 'reporte' stamp: 'TI 5/31/2023 23:20:05' prior: 50625599 overrides: 50625589!
addToReporte: aReporte
	^aReporte addDepositToReporte: self value. 
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:20:39'!
addDepositToReporte: aDepositValue
	^2.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:21:02' prior: 50625609!
addDepositToReporte: aDepositValue
	^'Deposito por ', aDepositValue asString, '.'.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:21:03'!
FAILURE!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 23:21:03'!
FAILURE!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:21:03'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 23:21:03'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:21:03'!
FAILURE!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:21:03'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:21:04'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:21:04'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 23:21:04'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:21:24'!
addWithdrawToReporte: aWithdrawValue
	^'Retiro por ', aWithdrawValue asString, '.'.! !
!Withdraw methodsFor: 'nil' stamp: 'TI 5/31/2023 23:21:49' overrides: 50625589!
addToReporte: aReporte
	^aReporte addWithdrawToReporte: self value. ! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:21:57'!
FAILURE!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 23:21:57'!
FAILURE!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:21:57'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 23:21:57'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:21:57'!
FAILURE!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:21:57'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:21:57'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:21:57'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 23:21:57'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:21:58'!
FAILURE!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:22:05'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:22:42' prior: 50625388!
reporteOnAsset: anAccount
	
	| reporte |
	
	reporte := OrderedCollection new.
	anAccount addTransactionsToReport: reporte with: self.
	^reporte.
	"
	anAccount transactions do: [ :transaction |
		reporte addLast: transaction addTransactionToAccountSummary.
		].
	
	anAccount patas do: [ :pata |
		reporte addLast: pata addPataToAccountSummary.
		].
	
	reporte addLast: anAccount addBalanceToReport.
	^reporte."! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:22:44'!
FAILURE!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 23:22:44'!
FAILURE!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:22:44'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 23:22:44'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:22:44'!
FAILURE!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:22:44'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:22:44'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:22:44'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 23:22:44'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:24:17' prior: 50625722!
reporteOnAsset: anAccount
	
	| reporte |
	
	reporte := OrderedCollection new.
	anAccount addTransactionsToReport: reporte with: self.
	reporte addBalanceToReport: reporte with: self." addLast: anAccount addBalanceToReport."
	^reporte.
	"
	anAccount transactions do: [ :transaction |
		reporte addLast: transaction addTransactionToAccountSummary.
		].
	
	anAccount patas do: [ :pata |
		reporte addLast: pata addPataToAccountSummary.
		].
	
	reporte addLast: anAccount addBalanceToReport.
	^reporte."! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:24:29' prior: 50625779!
reporteOnAsset: anAccount
	
	| reporte |
	
	reporte := OrderedCollection new.
	anAccount addTransactionsToReport: reporte with: self.
	reporte  addLast: anAccount addBalanceToReport.
	^reporte.
	"
	anAccount transactions do: [ :transaction |
		reporte addLast: transaction addTransactionToAccountSummary.
		].
	
	anAccount patas do: [ :pata |
		reporte addLast: pata addPataToAccountSummary.
		].
	
	reporte addLast: anAccount addBalanceToReport.
	^reporte."! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:24:31'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 23:24:31'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:24:31'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 23:24:31'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:24:31'!
FAILURE!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:24:31'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:24:31'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:24:31'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 23:24:31'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:24:34'!
FAILURE!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:25:06' prior: 50625798!
reporteOnAsset: anAccount
	
	| reporte |
	
	reporte := OrderedCollection new.
	anAccount addTransactionsToReport: reporte with: self.
	anAccount addTransfersToReport: reporte with: self.
	reporte  addLast: anAccount addBalanceToReport.
	^reporte.
	"
	anAccount transactions do: [ :transaction |
		reporte addLast: transaction addTransactionToAccountSummary.
		].
	
	anAccount patas do: [ :pata |
		reporte addLast: pata addPataToAccountSummary.
		].
	
	reporte addLast: anAccount addBalanceToReport.
	^reporte."! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:25:07'!
ERROR!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 23:25:07'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:25:07'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 23:25:07'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:25:07'!
ERROR!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:25:07'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:25:07'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:25:07'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 23:25:07'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:25:11'!
ERROR!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:25:28'!
ERROR!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 23:25:28'!
ERROR!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:25:28'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 23:25:28'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:25:28'!
ERROR!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:25:28'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:25:28'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:25:28'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 23:25:28'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:25:29'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:25:35'!
addTransfersToReport: reporte with: anAccountSummary 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:25:51' prior: 50625970!
addTransfersToReport: reporte with: anAccountSummary 
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:28:54' prior: 50625976!
addTransfersToReport: reporte with: aReporte 
	
	self patas do: [ :pata |
		reporte addLast: (patas associatedTransfer addToReporte: aReporte).
		].
	^reporte.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:28:56' prior: 50625982!
addTransfersToReport: reporte with: aReporte 
	
	self patas do: [ :pata |
		reporte addLast: (pata associatedTransfer addToReporte: aReporte).
		].
	^reporte.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TI 5/31/2023 23:28:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TI 5/31/2023 23:28:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TI 5/31/2023 23:28:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TI 5/31/2023 23:28:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TI 5/31/2023 23:28:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TI 5/31/2023 23:28:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TI 5/31/2023 23:28:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferFromOneAccountToAnotherIncreaseAndDecreaseBalanceAccordingly stamp: 'TI 5/31/2023 23:28:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test09CanNavigateFromPataExtraccionToPataDepositoOfATransfer stamp: 'TI 5/31/2023 23:28:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNavigateFromPataDepositoToPataExtraccionOfATransfer stamp: 'TI 5/31/2023 23:28:57'!
PASSED!
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 5/31/2023 23:29:43' prior: 50625991!
addTransfersToReport: reporte with: aReporte 
	
	self patas do: [ :pata |
		reporte addLast: (pata addToReporte: aReporte).
		].
	^reporte.! !
!PataDeposito methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:30:28'!
addToReporte: aReporte
	^aReporte addTransferDepositToReporte: associatedTransfer value. ! !
!PataExtraccion methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:30:42'!
addToReporte: aReporte
	^aReporte addTransferExtraccionToReporte: associatedTransfer value. ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:31:28'!
addTransferExtraccionToReporte: aTransferValue
	^'Salida por transferencia de ', aTransferValue asString, '.'.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:31:40'!
addTransferDepositoToReporte: aTransferValue
	^'Entrada por transferencia de ', aTransferValue asString, '.'.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:31:47'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 23:31:47'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:31:47'!
ERROR!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 23:31:47'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:31:47'!
ERROR!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:31:47'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:31:47'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:31:47'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 23:31:47'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:31:49'!
ERROR!
!PataDeposito methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:32:35' prior: 50626046!
addToReporte: aReporte
	^aReporte addTransferDepositoToReporte: associatedTransfer value. ! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:32:38'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 23:32:38'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:32:38'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 23:32:38'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:32:38'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:32:38'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:32:38'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:32:39'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 23:32:39'!
PASSED!

----SNAPSHOT----(31 May 2023 23:32:43) CuisUniversity-5706.image priorSource: 9398867!

----SNAPSHOT----(31 May 2023 23:32:46) CuisUniversity-5706.image priorSource: 9424399!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:53:23' prior: 50624325!
reporteOnAsset: anAccount

	| reporte |

	reporte := OrderedCollection new.
	anAccount addTransfersToReport: reporte with: self.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:53:48'!
addTransferDepositoToReporte: aTransferValue
	^aTransferValue .! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:54:02'!
addTransferExtraccionToReporte: aTransferValue
	^aTransferValue.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:55:43' prior: 50626169!
reporteOnAsset: anAccount

	| reporte |

	reporte := OrderedCollection new.
	anAccount addTransfersToReport: reporte with: self.
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:55:51' prior: 50626187!
reporteOnAsset: anAccount

	| reporte |

	reporte := OrderedCollection new.
	anAccount addTransfersToReport: reporte with: self.
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 5/31/2023 23:56:37' prior: 50626195!
reporteOnAsset: anAccount

	| reporte |

	reporte := OrderedCollection new.
	anAccount addTransfersToReport: reporte with: self.
	^reporte inject: 0 into: [ :accumulated :valor |
		valor
		].! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:56:38'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 23:56:38'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:56:38'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 23:56:38'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:56:38'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:56:38'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:56:38'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:56:38'!
FAILURE!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 23:56:38'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:56:38'!
FAILURE!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 5/31/2023 23:56:51'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 5/31/2023 23:56:51'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:56:51'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 5/31/2023 23:56:51'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 5/31/2023 23:56:51'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:56:51'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:56:51'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:56:51'!
FAILURE!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 5/31/2023 23:56:51'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:56:51'!
FAILURE!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 5/31/2023 23:56:58'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:57:00'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:57:02'!
FAILURE!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:57:02'!
FAILURE!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 5/31/2023 23:58:30'!
FAILURE!
!PataExtraccion methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 00:00:01' prior: 50626052!
addToReporte: aReporte
	^aReporte addTransferExtraccionToReporte: associatedTransfer value * -1. ! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 00:00:05'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 00:00:05'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:00:05'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 00:00:05'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:00:05'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 00:00:05'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:00:05'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:00:05'!
FAILURE!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:00:05'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 00:00:07'!
FAILURE!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:00:54'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:01:09'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 00:02:08'!
FAILURE!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 00:02:08'!
FAILURE!
!PataExtraccion methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 00:02:59' prior: 50626325!
addToReporte: aReporte
	^aReporte addTransferExtraccionToReporte: associatedTransfer value. ! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 00:03:20' prior: 50626181!
addTransferExtraccionToReporte: aTransferValue
	^-1 *aTransferValue.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 00:03:21'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 00:03:21'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:03:21'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 00:03:21'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:03:21'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 00:03:21'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:03:21'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:03:21'!
FAILURE!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:03:21'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:03:21'!
FAILURE!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 00:03:25'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 00:03:26'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:03:26'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 00:03:26'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:03:26'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 00:03:26'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:03:26'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:03:26'!
FAILURE!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:03:26'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:03:26'!
FAILURE!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:03:30'!
FAILURE!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:03:30'!
FAILURE!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 00:04:31' prior: 50626203!
reporteOnAsset: anAccount

	| reporte |

	reporte := OrderedCollection new.
	anAccount addTransfersToReport: reporte with: self.
	^reporte inject: 0 into: [ :accumulated :valor |
		accumulated + valor
		].! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 00:04:33'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 00:04:33'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:04:33'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 00:04:33'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:04:33'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 00:04:33'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:04:33'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:04:33'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:04:33'!
PASSED!

----SNAPSHOT----(1 June 2023 00:04:37) CuisUniversity-5706.image priorSource: 9424487!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 00:09:01'!
named: aName with: anAccount

	^self new 
		add: anAccount;
		yourself! !

----SNAPSHOT----(1 June 2023 00:09:25) CuisUniversity-5706.image priorSource: 9437017!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 00:10:16' prior: 50626561!
named: aName with: anAccount

	^(self new initializeWith: aName)
		add: anAccount;
		yourself! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'TI 6/1/2023 00:10:33'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'TI 6/1/2023 00:10:32'!
initializeWith: aName

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := aName.! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 00:21:08' prior: 50624766!
test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio

	| account portfolio |
	
	account := ReceptiveAccount named: 'cuenta de tobi'.
	
	portfolio := Portfolio new.
	
	self assert: 2 equals: 1.! !

AbstractReport subclass: #PortfolioResumee
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioResumee category: 'Portfolio-Solucion' stamp: 'TI 6/1/2023 00:21:36'!
AbstractReport subclass: #PortfolioResumee
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 00:23:05' prior: 50626590!
test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio

	| account portfolio |
	
	account := ReceptiveAccount named: 'Tobi'.
	
	portfolio := Portfolio new.
	
	self assert: (PortfolioResumee for: account) equals: (OrderedCollection with: ('Portfolio de Tobi')).! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 00:23:19' prior: 50626613!
test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio

	| account portfolio |
	
	account := ReceptiveAccount named: 'Tobi'.
	
	portfolio := Portfolio named: 'Tobi'.
	
	self assert: (PortfolioResumee for: account) equals: (OrderedCollection with: ('Portfolio de Tobi')).! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 00:23:27' prior: 50626625!
test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio

	| portfolio |

	portfolio := Portfolio named: 'Tobi'.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi')).! !

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:23:28'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 00:24:07'!
named: aName

	^self new initializeWith: aName! !

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:24:19'!
ERROR!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:24:19'!
ERROR!
!PortfolioResumee class methodsFor: 'Initialization' stamp: 'TI 6/1/2023 00:24:32'!
for: portfolio 
	self shouldBeImplemented.! !

----SNAPSHOT----(1 June 2023 00:24:39) CuisUniversity-5706.image priorSource: 9437289!
!PortfolioResumee class methodsFor: 'Initialization' stamp: 'TI 6/1/2023 00:25:29' prior: 50626666!
for: aPortfolio

	^self new startReporteOnAsset: aPortfolio.! !

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:25:31'!
ERROR!
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 00:25:41'!
reporteOnAsset: anAsset 
	self shouldBeImplemented.! !
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 00:27:03' prior: 50626683!
reporteOnAsset: anAsset

	| reporte |

	reporte := OrderedCollection new.
	anAsset addChildAssetsToReport: reporte with: self.
	^reporte! !

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:27:06'!
ERROR!
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 00:27:19'!
addChildAssetsToReport: reporte with: aPortfolioResumee 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 00:27:27' prior: 50626699!
addChildAssetsToReport: reporte with: aReporte 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 00:28:45' prior: 50626705!
addChildAssetsToReport: reporte with: aReporte 

	accounts do: [ :account |
		reporte addLast: (account addToReporte: aReporte).
		].
	^reporte.! !

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:28:47'!
FAILURE!
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 00:31:10'!
addToReporte: aReporte 
	
	^aReporte addAccountToReporte: self.
	"accounts do: [ :account |
		reporte addLast: (account addToReporte: aReporte).
		].
	^reporte."! !
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 00:31:48'!
addAccountToReporte: anAccount

	^2.! !
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 00:32:55' prior: 50626729!
addAccountToReporte: anAccount

	^'Cuenta de ', anAccount name.! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'TI 6/1/2023 00:33:13'!
Account subclass: #Portfolio
	instanceVariableNames: 'parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'TI 6/1/2023 00:33:13'!
Object subclass: #Account
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions patas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'TI 6/1/2023 00:33:17'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions patas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'TI 6/1/2023 00:33:23'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Account subclass: #Portfolio
	instanceVariableNames: 'parents accounts name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'TI 6/1/2023 00:33:31'!
Account subclass: #Portfolio
	instanceVariableNames: 'parents accounts name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Account subclass: #Portfolio
	instanceVariableNames: 'parents accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'TI 6/1/2023 00:33:33'!
Account subclass: #Portfolio
	instanceVariableNames: 'parents accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'TI 6/1/2023 00:33:38'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'transactions' stamp: 'TI 6/1/2023 00:34:10' overrides: 16903442!
name

	^name.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 00:34:15'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 00:34:15'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:34:15'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 00:34:15'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:34:15'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 00:34:15'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:34:15'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:34:15'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:34:15'!
FAILURE!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:34:15'!
FAILURE!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 00:34:21'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 00:34:21'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:34:21'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 00:34:21'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:34:21'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 00:34:21'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:34:21'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:34:21'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:34:21'!
FAILURE!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:34:21'!
FAILURE!
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 00:45:04' prior: 50626688!
reporteOnAsset: anAsset

	| reporte |

	reporte := OrderedCollection new.
	reporte addLast: anAsset name.
	anAsset addChildAssetsToReport: reporte with: self.
	^reporte! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 00:45:06'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 00:45:06'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:45:06'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 00:45:06'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:45:06'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 00:45:06'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:45:06'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:45:06'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:45:06'!
FAILURE!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:45:06'!
FAILURE!
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 00:45:30' prior: 50626907!
reporteOnAsset: anAsset

	| reporte |

	reporte := OrderedCollection new.
	reporte addLast: 'Portfolio de ',anAsset name.
	anAsset addChildAssetsToReport: reporte with: self.
	^reporte! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 00:45:31'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 00:45:31'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:45:31'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 00:45:31'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 00:45:31'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 00:45:31'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:45:31'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 00:45:31'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 00:45:31'!
PASSED!

----SNAPSHOT----(1 June 2023 00:45:40) CuisUniversity-5706.image priorSource: 9440621!

----SNAPSHOT----(1 June 2023 00:55:45) CuisUniversity-5706.image priorSource: 9451460!

----STARTUP---- (1 June 2023 12:34:19) as C:\Users\tobi\Desktop\inge\windows64\CuisUniversity-5706.image!

!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:38:38'!
test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount

	| portfolio |

	portfolio := Portfolio named: 'Tobi'.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi')).! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:39:06' prior: 50627018!
test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount

	| portfolio account |
	account := ReceptiveAccount named: 'Tobi'.
	portfolio := Portfolio named: 'Tobi'.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('Cuenta de Tobi')).! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:39:30' prior: 50627030!
test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount

	| portfolio account |
	account := ReceptiveAccount named: 'Tobi'.
	portfolio := Portfolio named: 'Tobi'.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi')).! !

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 12:39:40'!
FAILURE!
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 12:41:01' prior: 50626710!
addChildAssetsToReport: reporte with: aReporte 

	accounts do: [ :account |
		account addToReporte: reporte with: aReporte.
		].
	^reporte.! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 12:41:15'!
addToReporte: reporte with: aReporte 
	
	^aReporte addAccountToReporte: self.
	"accounts do: [ :account |
		reporte addLast: (account addToReporte: aReporte).
		].
	^reporte."! !

!methodRemoval: Portfolio #addToReporte: stamp: 'TI 6/1/2023 12:41:22'!
addToReporte: aReporte 
	
	^aReporte addAccountToReporte: self.
	"accounts do: [ :account |
		reporte addLast: (account addToReporte: aReporte).
		].
	^reporte."!
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 6/1/2023 12:45:16'!
addToReporte: reporte with: aReporte 
	
	^reporte addLast: (aReporte addAccountToReporte: self). ! !
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 12:45:46' prior: 50626733!
addAccountToReporte: anAccount

	^'   Cuenta de ', anAccount name.! !

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 12:45:52'!
FAILURE!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 12:45:52'!
FAILURE!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:47:32' prior: 50627044!
test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount

	| portfolio account |
	account := ReceptiveAccount named: 'Tobi'.
	portfolio := Portfolio named: 'Tobi' with: account.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi')).! !

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 12:47:33'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 12:47:33'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 12:47:33'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 12:47:33'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 12:47:33'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 12:47:33'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 12:47:33'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 12:47:33'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 12:47:33'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 12:47:33'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 12:47:33'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:49:19'!
test09PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts

	| portfolio account |
	account := ReceptiveAccount named: 'Tobi'.
	portfolio := Portfolio named: 'Tobi' with: account.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi')).! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:49:43' prior: 50627172!
test09PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts

	| portfolio account account1 |
	account := ReceptiveAccount named: 'Tobi'.
	account1 := ReceptiveAccount named: 'Marcos'.
	portfolio := Portfolio named: 'Tobi' with: account.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi') with: ('   Cuenta de Marcos')).! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:50:39'!
named: aName with: anAccount with: anotherAccount

	^(self new initializeWith: aName)
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:50:48' prior: 50627204!
named: aName with: anAccount with: anotherAccount

	^(self new initializeWith: aName)
		add: anAccount;
		add: anotherAccount;
		yourself! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:51:01' prior: 50627187!
test09PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts

	| portfolio account account1 |
	account := ReceptiveAccount named: 'Tobi'.
	account1 := ReceptiveAccount named: 'Marcos'.
	portfolio := Portfolio named: 'Tobi' with: account with: account1.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi') with: ('   Cuenta de Marcos')).! !

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 12:51:02'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 12:51:02'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 12:51:02'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 12:51:02'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 12:51:02'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 12:51:02'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 12:51:02'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 12:51:02'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 12:51:02'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 12:51:02'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 12:51:02'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 12:51:02'!
PASSED!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:51:37'!
test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts

	| portfolio account account1 |
	account := ReceptiveAccount named: 'Tobi'.
	account1 := ReceptiveAccount named: 'Marcos'.
	portfolio := Portfolio named: 'Tobi' with: account with: account1.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi') with: ('   Cuenta de Marcos')).! !

!methodRemoval: ReporteTest #test09PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 12:51:37'!
test09PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts

	| portfolio account account1 |
	account := ReceptiveAccount named: 'Tobi'.
	account1 := ReceptiveAccount named: 'Marcos'.
	portfolio := Portfolio named: 'Tobi' with: account with: account1.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi') with: ('   Cuenta de Marcos')).!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:52:15'!
test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated

	| portfolio account account1 |
	account := ReceptiveAccount named: 'Tobi'.
	account1 := ReceptiveAccount named: 'Marcos'.
	portfolio := Portfolio named: 'Tobi' with: account with: account1.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi') with: ('   Cuenta de Marcos')).! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:53:12' prior: 50627329!
test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated

	| portfolio account account1 portfolio1 |
	account := ReceptiveAccount named: 'Tobi'.
	account1 := ReceptiveAccount named: 'Marcos'.
	portfolio1 := Portfolio named: 'Marcos' with: account1.
	portfolio := Portfolio named: 'Tobi' with: account with: portfolio1.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi') with: ('   Cuenta de Marcos')).! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 12:53:43' prior: 50627347!
test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated

	| portfolio account account1 portfolio1 |
	account := ReceptiveAccount named: 'Tobi'.
	account1 := ReceptiveAccount named: 'Marcos'.
	portfolio1 := Portfolio named: 'Marcos' with: account1.
	portfolio := Portfolio named: 'Tobi' with: account with: portfolio1.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi') with: ('   Portfolio de Marcos') with: ('      Cuenta de Marcos')).! !

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 12:53:44'!
FAILURE!

----SNAPSHOT----(1 June 2023 12:54:01) CuisUniversity-5706.image priorSource: 9451548!

AbstractReport subclass: #PortfolioResumee
	instanceVariableNames: 'indentation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioResumee category: 'Portfolio-Solucion' stamp: 'TI 6/1/2023 12:55:12'!
AbstractReport subclass: #PortfolioResumee
	instanceVariableNames: 'indentation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 12:56:24' prior: 50627063!
addChildAssetsToReport: reporte with: aReporte 
	
	reporte addLast: ''.
	accounts do: [ :account |
		account addToReporte: reporte with: aReporte.
		].
	^reporte.! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 12:56:48' prior: 50627409!
addChildAssetsToReport: reporte with: aReporte 
	
	reporte addLast: 'Portfolio de ', name.
	accounts do: [ :account |
		account addToReporte: reporte with: aReporte.
		].
	^reporte.! !
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 12:56:57' prior: 50626960!
reporteOnAsset: anAsset

	| reporte |

	reporte := OrderedCollection new.
	"reporte addLast: 'Portfolio de ',anAsset name."
	anAsset addChildAssetsToReport: reporte with: self.
	^reporte! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 12:57:25' prior: 50627070!
addToReporte: reporte with: aReporte 
	
	^aReporte addPortfolioToReporte: self.
	"accounts do: [ :account |
		reporte addLast: (account addToReporte: aReporte).
		].
	^reporte."! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 13:01:12' prior: 50627435!
addToReporte: reporte with: aReporte 
	
	^aReporte addPortfolio: self ToReporte: reporte.
	"accounts do: [ :account |
		reporte addLast: (account addToReporte: aReporte).
		].
	^reporte."! !
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 13:02:24'!
addPortfolio: aPortfolio ToReporte: reporte

	^aPortfolio addChildAssetsToReport: reporte with: self.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 13:02:25'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 13:02:25'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:02:25'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 13:02:25'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:02:25'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:02:25'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:02:25'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:02:25'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:02:25'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:02:25'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:02:25'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:02:25'!
FAILURE!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:02:25'!
FAILURE!
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 13:06:22' prior: 50627092!
addAccountToReporte: anAccount

	^indentation,'Cuenta de ', anAccount name.! !
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 13:10:09' prior: 50627453!
addPortfolio: aPortfolio ToReporte: reporte

	^aPortfolio addChildAssetsToReport: reporte with: self andIndentation: indentation.! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 13:10:33'!
addChildAssetsToReport: reporte with: aReporte andIndentation: anIndentation
	
	reporte addLast: 'Portfolio de ', name.
	accounts do: [ :account |
		account addToReporte: reporte with: aReporte.
		].
	^reporte.! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 13:10:51' prior: 50627533!
addChildAssetsToReport: reporte with: aReporte andIndentation: anIndentation
	
	reporte addLast: anIndentation,'Portfolio de ', name.
	accounts do: [ :account |
		account addToReporte: reporte with: aReporte.
		].
	^reporte.! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 13:12:35' prior: 50627543!
addChildAssetsToReport: reporte with: aReporte andIndentation: anIndentation
	
	| indentation |
	reporte addLast: anIndentation,'Portfolio de ', name.
	indentation := anIndentation, '   '.
	accounts do: [ :account |
		account addToReporte: reporte with: aReporte andIndentation: anIndentation.
		].
	^reporte.! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 13:12:43' prior: 50627553!
addChildAssetsToReport: reporte with: aReporte andIndentation: anIndentation
	
	| indentation |
	reporte addLast: anIndentation,'Portfolio de ', name.
	indentation := anIndentation, '   '.
	accounts do: [ :account |
		account addToReporte: reporte with: aReporte andIndentation: indentation.
		].
	^reporte.! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 6/1/2023 13:13:08'!
addToReporte: reporte with: aReporte andIndentation: anIndentation
	
	^reporte addLast: (aReporte addAccountToReporte: self). ! !
!ReceptiveAccount methodsFor: 'reporte' stamp: 'TI 6/1/2023 13:15:29' prior: 50627578!
addToReporte: reporte with: aReporte andIndentation: anIndentation
	
	^reporte addLast: (aReporte addAccountToReporte: self withIndentation: anIndentation). ! !
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 13:15:46'!
addAccountToReporte: anAccount withIndentation: anIndentation

	^anIndentation,'Cuenta de ', anAccount name.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 13:15:49'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 13:15:49'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:15:49'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 13:15:49'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:15:49'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:15:49'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:15:49'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:15:49'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:15:49'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:15:49'!
ERROR!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:15:49'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:15:49'!
ERROR!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:15:56'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:15:58'!
ERROR!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:15:58'!
ERROR!
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 13:17:02' prior: 50627426!
reporteOnAsset: anAsset

	| reporte |

	reporte := OrderedCollection new.
	"reporte addLast: 'Portfolio de ',anAsset name."
	anAsset addChildAssetsToReport: reporte with: self andIndentation: ''.
	^reporte! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 13:17:05'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 13:17:05'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:17:05'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 13:17:05'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:17:05'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:17:05'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:17:05'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:17:05'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:17:05'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:17:05'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:17:05'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:17:05'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:17:05'!
ERROR!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 13:17:29'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 13:17:29'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:17:29'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 13:17:29'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:17:29'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:17:29'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:17:29'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:17:29'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:17:29'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:17:29'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:17:29'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:17:29'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:17:29'!
ERROR!
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 13:18:32' prior: 50627669!
reporteOnAsset: anAsset

	| reporte |

	reporte := OrderedCollection new.
	"reporte addLast: 'Portfolio de ',anAsset name."
	anAsset addChildAssetsToReport: reporte with: self andIndentation: ''.
	^reporte! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 13:18:33'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 13:18:33'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:18:33'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 13:18:33'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:18:33'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:18:33'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:18:33'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:18:33'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:18:33'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:18:33'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:18:33'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:18:33'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:18:33'!
ERROR!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:19:57'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 13:19:58'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 13:19:58'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:19:58'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 13:19:58'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:19:58'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:19:58'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:19:58'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:19:58'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:19:58'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:19:58'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:19:58'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:19:58'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:19:58'!
ERROR!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:20:03'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:20:05'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:20:07'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:20:07'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:20:45'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:21:13'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:21:21'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:21:51'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:22:00'!
ERROR!
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 13:24:36'!
addToReporte: reporte with: aReporte andIndentation: anIndentation
	
	^aReporte addPortfolio: self ToReporte: reporte.
	"accounts do: [ :account |
		reporte addLast: (account addToReporte: aReporte).
		].
	^reporte."! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 13:25:01' prior: 50627980!
addToReporte: reporte with: aReporte andIndentation: anIndentation
	
	^aReporte addPortfolio: self ToReporte: reporte withIndentation: anIndentation.
	"accounts do: [ :account |
		reporte addLast: (account addToReporte: aReporte).
		].
	^reporte."! !
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 13:25:14'!
addPortfolio: aPortfolio ToReporte: reporte withIndentation: anIndentation


	^aPortfolio addChildAssetsToReport: reporte with: self andIndentation: indentation.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 13:25:17'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 13:25:17'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:25:17'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 13:25:17'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:25:17'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:25:17'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:25:17'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:25:17'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:25:17'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:25:17'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:25:17'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:25:17'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:25:17'!
ERROR!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 13:25:24'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 13:25:24'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:25:24'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 13:25:24'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:25:24'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:25:24'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:25:24'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:25:24'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:25:24'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:25:24'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:25:24'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:25:24'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:25:24'!
ERROR!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 13:25:34'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 13:25:34'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:25:34'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 13:25:34'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:25:34'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:25:34'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:25:34'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:25:34'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:25:34'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:25:34'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:25:34'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:25:34'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:25:34'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:25:42'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:26:00'!
ERROR!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:26:48'!
ERROR!
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 13:29:02' prior: 50628001!
addPortfolio: aPortfolio ToReporte: reporte withIndentation: anIndentation


	^aPortfolio addChildAssetsToReport: reporte with: self andIndentation: anIndentation.! !

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 13:29:11'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 13:29:11'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:29:11'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 13:29:11'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:29:11'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:29:11'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:29:11'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:29:11'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:29:11'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:29:11'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:29:11'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:29:11'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 13:29:15'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 13:29:15'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:29:15'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 13:29:15'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:29:15'!
PASSED!

!testRun: #ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:29:15'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:29:15'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:29:15'!
PASSED!

!testRun: #ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:29:15'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:29:15'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:29:15'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:29:15'!
PASSED!

----SNAPSHOT----(1 June 2023 13:29:19) CuisUniversity-5706.image priorSource: 9463736!

----SNAPSHOT----(1 June 2023 13:29:32) CuisUniversity-5706.image priorSource: 9493570!

!methodRemoval: PortfolioResumee #addAccountToReporte: stamp: 'TI 6/1/2023 13:30:46'!
addAccountToReporte: anAccount

	^indentation,'Cuenta de ', anAccount name.!

!methodRemoval: ReceptiveAccount #addToReporte:with: stamp: 'TI 6/1/2023 13:31:08'!
addToReporte: reporte with: aReporte 
	
	^reporte addLast: (aReporte addAccountToReporte: self). !

!methodRemoval: Portfolio #addChildAssetsToReport:with: stamp: 'TI 6/1/2023 13:31:17'!
addChildAssetsToReport: reporte with: aReporte 
	
	reporte addLast: 'Portfolio de ', name.
	accounts do: [ :account |
		account addToReporte: reporte with: aReporte.
		].
	^reporte.!

!methodRemoval: Portfolio #addToReporte:with: stamp: 'TI 6/1/2023 13:31:24'!
addToReporte: reporte with: aReporte 
	
	^aReporte addPortfolio: self ToReporte: reporte.
	"accounts do: [ :account |
		reporte addLast: (account addToReporte: aReporte).
		].
	^reporte."!

!methodRemoval: PortfolioResumee #addPortfolio:ToReporte: stamp: 'TI 6/1/2023 13:31:34'!
addPortfolio: aPortfolio ToReporte: reporte

	^aPortfolio addChildAssetsToReport: reporte with: self andIndentation: indentation.!

----SNAPSHOT----(1 June 2023 13:31:43) CuisUniversity-5706.image priorSource: 9493658!
!PortfolioResumee methodsFor: 'Reporte' stamp: 'TI 6/1/2023 13:32:23' prior: 50627800!
reporteOnAsset: anAsset

	| reporte |

	reporte := OrderedCollection new.
	anAsset addChildAssetsToReport: reporte with: self andIndentation: ''.
	^reporte! !

AbstractReport subclass: #PortfolioResumee
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioResumee category: 'Portfolio-Solucion' stamp: 'TI 6/1/2023 13:32:28'!
AbstractReport subclass: #PortfolioResumee
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

accountMaxi := ReceptiveAccount named: 'Maximiliano' .!

    accountJulian := ReceptiveAccount named: 'Julian' .!

    accountCoca := ReceptiveAccount named: 'Coca Sarli' .!

    portfolioHijos := Portfolio named: 'Hijos' with: accountJulian with: accountCoca .!

    portfolioMaxi := Portfolio named: 'Maximiliano' with: accountMaxi with: portfolioHijos .!

    accountFlor := ReceptiveAccount named: 'Flor' .!

    portfolioTobiasIlicic := Portfolio named: 'Tobias Ilicic' with: accountFlor .!

    portfolioHijos add: portfolioTobiasIlicic.!

	portfolioResumee for: portfolioMaxi.!

	PortfolioResumee for: portfolioMaxi.!

----SNAPSHOT----(1 June 2023 13:47:10) CuisUniversity-5706.image priorSource: 9494853!

----SNAPSHOT----(1 June 2023 13:57:50) CuisUniversity-5706.image priorSource: 9496222!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 13:58:35'!
test05AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer send: 50 from: account to: account2.
	self assert: (AccountSummary for: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').! !

!methodRemoval: ReporteTest #test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:58:35'!
test04AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer send: 50 from: account to: account2.
	self assert: (AccountSummary for: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 13:58:48'!
test06TransferNetOfAnAccountWithoutTransfersReturnsZero
	| account |
	account := ReceptiveAccount new.
	
	self assert: (TransferNet for: account) equals: 0.! !

!methodRemoval: ReporteTest #test05TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:58:48'!
test05TransferNetOfAnAccountWithoutTransfersReturnsZero
	| account |
	account := ReceptiveAccount new.
	
	self assert: (TransferNet for: account) equals: 0.!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 13:58:55'!
test07TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	self assert: (TransferNet for: account2) equals: 50.! !

!methodRemoval: ReporteTest #test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:58:55'!
test06TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	self assert: (TransferNet for: account2) equals: 50.!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 13:59:04'!
test08TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	Transfer send: 50 from: account2 to: account.
	self assert: (TransferNet for: account) equals: 0.! !

!methodRemoval: ReporteTest #test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:59:05'!
test07TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	Transfer send: 50 from: account2 to: account.
	self assert: (TransferNet for: account) equals: 0.!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 13:59:14'!
test09PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio

	| portfolio |

	portfolio := Portfolio named: 'Tobi'.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi')).! !

!methodRemoval: ReporteTest #test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:59:14'!
test08PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio

	| portfolio |

	portfolio := Portfolio named: 'Tobi'.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi')).!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 13:59:21'!
test10PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount

	| portfolio account |
	account := ReceptiveAccount named: 'Tobi'.
	portfolio := Portfolio named: 'Tobi' with: account.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi')).! !

!methodRemoval: ReporteTest #test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:59:21'!
test09PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount

	| portfolio account |
	account := ReceptiveAccount named: 'Tobi'.
	portfolio := Portfolio named: 'Tobi' with: account.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi')).!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 13:59:26'!
test11PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts

	| portfolio account account1 |
	account := ReceptiveAccount named: 'Tobi'.
	account1 := ReceptiveAccount named: 'Marcos'.
	portfolio := Portfolio named: 'Tobi' with: account with: account1.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi') with: ('   Cuenta de Marcos')).! !

!methodRemoval: ReporteTest #test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:59:26'!
test10PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts

	| portfolio account account1 |
	account := ReceptiveAccount named: 'Tobi'.
	account1 := ReceptiveAccount named: 'Marcos'.
	portfolio := Portfolio named: 'Tobi' with: account with: account1.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi') with: ('   Cuenta de Marcos')).!
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 13:59:31'!
test12PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated

	| portfolio account account1 portfolio1 |
	account := ReceptiveAccount named: 'Tobi'.
	account1 := ReceptiveAccount named: 'Marcos'.
	portfolio1 := Portfolio named: 'Marcos' with: account1.
	portfolio := Portfolio named: 'Tobi' with: account with: portfolio1.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi') with: ('   Portfolio de Marcos') with: ('      Cuenta de Marcos')).! !

!methodRemoval: ReporteTest #test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:59:31'!
test11PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated

	| portfolio account account1 portfolio1 |
	account := ReceptiveAccount named: 'Tobi'.
	account1 := ReceptiveAccount named: 'Marcos'.
	portfolio1 := Portfolio named: 'Marcos' with: account1.
	portfolio := Portfolio named: 'Tobi' with: account with: portfolio1.
	
	self assert: (PortfolioResumee for: portfolio) equals: (OrderedCollection with: ('Portfolio de Tobi') with: ('   Cuenta de Tobi') with: ('   Portfolio de Marcos') with: ('      Cuenta de Marcos')).!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 13:59:35'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 13:59:35'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:59:36'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 13:59:36'!
PASSED!

!testRun: #ReporteTest #test05AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 13:59:36'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 13:59:36'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:59:36'!
PASSED!

!testRun: #ReporteTest #test08TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 13:59:36'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 13:59:36'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 13:59:36'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 13:59:36'!
PASSED!

!testRun: #ReporteTest #test12PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 13:59:36'!
PASSED!

----SNAPSHOT----(1 June 2023 14:00:34) CuisUniversity-5706.image priorSource: 9496310!

----STARTUP---- (1 June 2023 15:26:23) as C:\Users\tobi\Desktop\inge\windows64\CuisUniversity-5706.image!

!Portfolio methodsFor: 'accounts management' stamp: 'TI 6/1/2023 15:26:50'!
accountSumary: aMethodObject
	
	^aMethodObject reporteOnAsset: self.
	! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 15:27:36' prior: 50627990!
addToReporte: reporte with: aReporte andIndentation: anIndentation
	
	^aReporte addPortfolio: self ToReporte: reporte withIndentation: anIndentation.
	! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 15:27:45'!
addTransactionsToReport: reporte with: aReporte

	
	self transactions do: [ :transaction |
		reporte addLast: (transaction addToReporte: aReporte).
		].
	^reporte.! !
!Portfolio methodsFor: 'transactions' stamp: 'TI 6/1/2023 15:29:06'!
transfers
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !
!Portfolio methodsFor: 'transactions' stamp: 'TI 6/1/2023 15:29:09' prior: 50628727!
transfers
	
	| transfers |
	
	transfers := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transfers ].
	
	^transfers ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'TI 6/1/2023 15:29:40'!
addTransfersTo: aCollectionOfTransfers

	aCollectionOfTransfers addAll: transactions ! !
!Portfolio methodsFor: 'transactions' stamp: 'TI 6/1/2023 15:29:52' prior: 50628735!
transfers
	
	| transfers |
	
	transfers := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransfersTo: transfers ].
	
	^transfers ! !
!ReporteTest methodsFor: 'as yet unclassified' stamp: 'TI 6/1/2023 15:31:08'!
test13AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer send: 50 from: account to: account2.
	self assert: (AccountSummary for: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').! !

!methodRemoval: ReporteTest #test13AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:31:11'!
test13AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer send: 50 from: account to: account2.
	self assert: (AccountSummary for: account2) equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').!
!ReporteTest methodsFor: 'AccountSummary' stamp: 'TI 6/1/2023 15:32:09'!
test01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| account |
	account := Portfolio new.
	
	self assert: (AccountSummary for: account) equals: (OrderedCollection with: 'Balance = 0').! !
!ReporteTest methodsFor: 'AccountSummary' stamp: 'TI 6/1/2023 15:32:15' prior: 50628788!
test01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| portfolio |
	portfolio := Portfolio new.
	
	self assert: (AccountSummary for: portfolio) equals: (OrderedCollection with: 'Balance = 0').! !

!testRun: #ReporteTest #test01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:32:18'!
ERROR!
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 15:32:28'!
addTransfersToReport: reporte with: anAccountSummary 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 15:33:12' prior: 50628812!
addTransfersToReport: reporte with: aReporte 
	
	self transfers do: [ :transfers |
		reporte addLast: (transfers addToReporte: aReporte).
		].
	^reporte.! !

!testRun: #ReporteTest #test01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:33:14'!
ERROR!
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 15:33:20'!
addBalanceToReport
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 15:33:36' prior: 50628830!
addBalanceToReport
	^'Balance = ', self balance asString.! !

!testRun: #ReporteTest #test01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:33:37'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:33:37'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:33:37'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:33:37'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:33:37'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 15:33:37'!
PASSED!

!testRun: #ReporteTest #test05AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:33:37'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 15:33:37'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:33:37'!
PASSED!

!testRun: #ReporteTest #test08TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:33:38'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 15:33:38'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 15:33:38'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 15:33:38'!
PASSED!

!testRun: #ReporteTest #test12PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 15:33:38'!
PASSED!
!ReporteTest methodsFor: 'AccountSummary' stamp: 'TI 6/1/2023 15:34:18'!
test_01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| portfolio |
	portfolio := Portfolio new.
	
	self assert: (AccountSummary for: portfolio) equals: (OrderedCollection with: 'Balance = 0').! !

!methodRemoval: ReporteTest #test01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:34:18'!
test01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions

	| portfolio |
	portfolio := Portfolio new.
	
	self assert: (AccountSummary for: portfolio) equals: (OrderedCollection with: 'Balance = 0').!
!ReporteTest methodsFor: 'AccountSummary' stamp: 'TI 6/1/2023 15:35:09'!
test02AccountSumaryOfAPortfolioWithAnAccountWithATransactionReturnsTheBalanceAndTheTransaction

	| account portfolio |
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	self assert: (AccountSummary for: portfolio) equals: (OrderedCollection with: 'Deposito por 100.'with: 'Balance = 100').! !
!ReporteTest methodsFor: 'AccountSummary' stamp: 'TI 6/1/2023 15:35:19'!
test_02AccountSumaryOfAPortfolioWithAnAccountWithATransactionReturnsTheBalanceAndTheTransaction

	| account portfolio |
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	self assert: (AccountSummary for: portfolio) equals: (OrderedCollection with: 'Deposito por 100.'with: 'Balance = 100').! !

!methodRemoval: ReporteTest #test02AccountSumaryOfAPortfolioWithAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:35:19'!
test02AccountSumaryOfAPortfolioWithAnAccountWithATransactionReturnsTheBalanceAndTheTransaction

	| account portfolio |
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	self assert: (AccountSummary for: portfolio) equals: (OrderedCollection with: 'Deposito por 100.'with: 'Balance = 100').!

!testRun: #ReporteTest #test_02AccountSumaryOfAPortfolioWithAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:35:21'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'TI 6/1/2023 15:37:09' prior: 50628743!
addTransfersTo: aCollectionOfTransfers

	aCollectionOfTransfers addAll: patas ! !

!testRun: #ReporteTest #test_02AccountSumaryOfAPortfolioWithAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test05AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test08TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test12PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test_01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:37:22'!
PASSED!

!testRun: #ReporteTest #test_02AccountSumaryOfAPortfolioWithAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:37:22'!
PASSED!
!ReporteTest methodsFor: 'AccountSummary' stamp: 'TI 6/1/2023 15:37:59'!
test03AccountSumaryOfAPortfolioWithAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 portfolio |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	portfolio := Portfolio with: account2.
	self assert: (AccountSummary for: portfolio) equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').! !

!testRun: #ReporteTest #test03AccountSumaryOfAPortfolioWithAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAPortfolioWithAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test05AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test08TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test12PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test_01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:38:01'!
PASSED!

!testRun: #ReporteTest #test_02AccountSumaryOfAPortfolioWithAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:38:01'!
PASSED!
!ReporteTest methodsFor: 'AccountSummary' stamp: 'TI 6/1/2023 15:38:10'!
test_03AccountSumaryOfAPortfolioWithAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 portfolio |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	portfolio := Portfolio with: account2.
	self assert: (AccountSummary for: portfolio) equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').! !

!methodRemoval: ReporteTest #test03AccountSumaryOfAPortfolioWithAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:38:10'!
test03AccountSumaryOfAPortfolioWithAnAccountWithATransferReturnsTheBalanceAndTheTransfer

	| account account2 portfolio |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	portfolio := Portfolio with: account2.
	self assert: (AccountSummary for: portfolio) equals: (OrderedCollection with: 'Entrada por transferencia de 50.'with: 'Balance = 50').!
!Portfolio methodsFor: 'reporte' stamp: 'TI 6/1/2023 15:38:42'!
transferNet: aMethodObject
	
	 ^aMethodObject reporteOnAsset: self.
	! !
!ReporteTest methodsFor: 'TransferNet' stamp: 'TI 6/1/2023 15:39:48'!
test_06TransferNetOfAPortfolioWithoutTransfersReturnsZero
	| account portfolio |
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	self assert: (TransferNet for: portfolio) equals: 0.! !

!testRun: #ReporteTest #test_06TransferNetOfAPortfolioWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test05AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test08TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test12PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test_01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test_02AccountSumaryOfAPortfolioWithAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test_03AccountSumaryOfAPortfolioWithAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:39:51'!
PASSED!

!testRun: #ReporteTest #test_06TransferNetOfAPortfolioWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 15:39:51'!
PASSED!
!ReporteTest methodsFor: 'TransferNet' stamp: 'TI 6/1/2023 15:40:36'!
test_07TransferNetOfAPortfolioWithAnAccountWithATransferReturnsTheTransferValueAccordingly

	| account account2 portfolio |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	portfolio := Portfolio with: account2.
	self assert: (TransferNet for: portfolio) equals: 50.! !

!testRun: #ReporteTest #test_07TransferNetOfAPortfolioWithAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test05AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test08TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test12PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test_01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test_02AccountSumaryOfAPortfolioWithAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test_03AccountSumaryOfAPortfolioWithAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test_06TransferNetOfAPortfolioWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 15:40:38'!
PASSED!

!testRun: #ReporteTest #test_07TransferNetOfAPortfolioWithAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:40:38'!
PASSED!
!ReporteTest methodsFor: 'TransferNet' stamp: 'TI 6/1/2023 15:41:28'!
test_08TransferNetOfAPortfolioWithAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly

	| account account2 portfolio |
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer send: 50 from: account to: account2.
	Transfer send: 50 from: account2 to: account.
	portfolio := Portfolio with: account.
	self assert: (TransferNet for: portfolio) equals: 0.! !

!testRun: #ReporteTest #test_08TransferNetOfAPortfolioWithAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test05AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test08TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test12PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test_01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test_02AccountSumaryOfAPortfolioWithAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test_03AccountSumaryOfAPortfolioWithAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test_06TransferNetOfAPortfolioWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test_07TransferNetOfAPortfolioWithAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

!testRun: #ReporteTest #test_08TransferNetOfAPortfolioWithAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:41:30'!
PASSED!

----SNAPSHOT----(1 June 2023 15:41:35) CuisUniversity-5706.image priorSource: 9505589!

!testRun: #ReporteTest #test01AccountSumaryOfAnAccountWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test02AccountSumaryOfAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test03AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test04AccountSumaryOfAnAccountWithATransferAndATransactionReturnsTheBalanceAndTheTransferAndTheTransaction stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test05AccountSumaryOfAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test06TransferNetOfAnAccountWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test07TransferNetOfAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test08TransferNetOfAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test09PortfolioResumeeOfAnEmptyPortfolioReturnsTheResumeeWithThePorftolio stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test10PortfolioResumeeOfAPortfolioWithAnAccountReturnsTheResumeeWithThePorftolioAndTheAccount stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test11PortfolioResumeeOfAPortfolioWithTwoAccountsReturnsTheResumeeWithThePorftolioAndTheTwoAccounts stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test12PortfolioResumeeOfAPortfolioWithAPortofolioWithAnAccountReturnsTheResumeeCorrectlyIndentated stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test_01AccountSumaryOfAPortfolioWithoutTransactionsReturnsZeroBalanceAndNoTransactions stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test_02AccountSumaryOfAPortfolioWithAnAccountWithATransactionReturnsTheBalanceAndTheTransaction stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test_03AccountSumaryOfAPortfolioWithAnAccountWithATransferReturnsTheBalanceAndTheTransfer stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test_06TransferNetOfAPortfolioWithoutTransfersReturnsZero stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test_07TransferNetOfAPortfolioWithAnAccountWithATransferReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

!testRun: #ReporteTest #test_08TransferNetOfAPortfolioWithAnAccountWithMultipleTransfersReturnsTheTransferValueAccordingly stamp: 'TI 6/1/2023 15:41:50'!
PASSED!

----STARTUP---- (17 June 2023 11:41:21) as C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\09-TusLibros\iteraction4\TusLibros-Model Ejercicio it4.st----!

----End fileIn of C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\09-TusLibros\iteraction4\TusLibrosREST Ejercicio it4.st----!

----End fileIn of C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\09-TusLibros\iteraction4\TusLibros-Tests Ejercicio it4.st----!

----End fileIn of C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\Packages\System\Collections-CompactArrays.pck.st----!

----End fileIn of C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\Packages\Features\Compression.pck.st----!

----End fileIn of C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\Packages\Features\Sound.pck.st----!

----End fileIn of C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\Packages\Features\Cryptography-DigitalSignatures.pck.st----!

----End fileIn of C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\Packages\Features\Identities-UUID.pck.st----!

----End fileIn of C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\Packages\System\Network-Kernel.pck.st----!

----End fileIn of C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\09-TusLibros\iteraction4\WebClient.pck.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'lp 6/17/2023 11:45:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'lp 6/17/2023 11:45:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'lp 6/17/2023 11:45:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'lp 6/17/2023 11:45:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'lp 6/17/2023 11:45:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'lp 6/17/2023 11:45:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'lp 6/17/2023 11:45:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:45:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:45:10'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:45:12'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:45:18'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 11:49:26' prior: 50630416!
storePerformance

	| totalMoney totalSales performance semaphoreTotalMoney semaphoreTotalSales |
	
	performance := Dictionary new.
	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	[totalSales := self totalSales.] fork.
	[totalMoney := self totalMoneyRaised.] fork.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 11:50:15' prior: 50669267!
storePerformance

	| totalMoney totalSales performance semaphoreTotalMoney semaphoreTotalSales |
	
	performance := Dictionary new.
	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	[totalSales := self totalSales.
		semaphoreTotalSales signal] fork.
	[totalMoney := self totalMoneyRaised.
		semaphoreTotalMoney signal] fork.
	
	semaphoreTotalMoney wait.
	semaphoreTotalSales wait.
	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 11:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 11:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 11:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 11:50:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:50:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:50:20'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:50:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:50:23'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 11:51:35' prior: 50630375!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphoreTotalMoney semaphoreTotalSales |

	bookPerformance := Dictionary new.
	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	[totalSales := self totalSalesOf: anItem .
		semaphoreTotalSales signal] fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
		semaphoreTotalMoney signal] fork.
	
	semaphoreTotalMoney wait.
	semaphoreTotalSales wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:51:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:51:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:51:41'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 11:55:09'!
xxx: aBlockA yyy:aBlockB

	| bookPerformance semaphoreTotalMoney semaphoreTotalSales |

	bookPerformance := Dictionary new.
	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	[aBlockA value.
		semaphoreTotalSales signal] fork.
	[aBlockB value.
		semaphoreTotalMoney signal] fork.
	
	semaphoreTotalMoney wait.
	semaphoreTotalSales wait.
		
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 11:55:26' prior: 50669501!
xxx: aBlockA yyy:aBlockB

	| bookPerformance semaphoreTotalMoney semaphoreTotalSales |

	bookPerformance := Dictionary new.
	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	[aBlockA value.
		semaphoreTotalSales signal] fork.
	[aBlockB value.
		semaphoreTotalMoney signal] fork.
	
	semaphoreTotalMoney wait.
	semaphoreTotalSales wait.
	
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 11:55:36' prior: 50669517!
xxx: aBlockA yyy:aBlockB

	| semaphoreTotalMoney semaphoreTotalSales |
	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	[aBlockA value.
		semaphoreTotalSales signal] fork.
	[aBlockB value.
		semaphoreTotalMoney signal] fork.
	
	semaphoreTotalMoney wait.
	semaphoreTotalSales wait.
	
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 11:56:18' prior: 50669396!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphoreTotalMoney semaphoreTotalSales |

	bookPerformance := Dictionary new.
	"
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	[totalSales := self totalSalesOf: anItem .
		semaphoreTotalSales signal] fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.
		semaphoreTotalMoney signal] fork.
	
	semaphoreTotalMoney wait.
	semaphoreTotalSales wait."
	self xxx: [totalSales := self totalSalesOf:anItem ] yyy: [totalMoney := self totalMoneyRaisedBy: anItem].
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:56:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:56:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:56:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:57:43'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 11:58:36' prior: 50669288!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
"	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	[totalSales := self totalSales.
		semaphoreTotalSales signal] fork.
	[totalMoney := self totalMoneyRaised.
		semaphoreTotalMoney signal] fork.
	
	semaphoreTotalMoney wait.
	semaphoreTotalSales wait."
	self xxx: [totalSales := self totalSales ] yyy: [totalMoney := self totalMoneyRaised].
	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 11:58:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:58:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 11:58:45'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 11:58:52' prior: 50669658!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.

	self xxx: [totalSales := self totalSales ] yyy: [totalMoney := self totalMoneyRaised].
	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 11:58:58' prior: 50669545!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	self xxx: [totalSales := self totalSalesOf:anItem ] yyy: [totalMoney := self totalMoneyRaisedBy: anItem].
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

Object subclass: #PerfomanceMultithread
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #PerfomanceMultithread category: 'TusLibros-Model' stamp: 'lp 6/17/2023 12:00:19'!
Object subclass: #PerfomanceMultithread
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!PerfomanceMultithread methodsFor: 'no messages' stamp: 'lp 6/17/2023 12:00:32'!
xxx: aBlockA yyy:aBlockB

	| semaphoreTotalMoney semaphoreTotalSales |
	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	[aBlockA value.
		semaphoreTotalSales signal] fork.
	[aBlockB value.
		semaphoreTotalMoney signal] fork.
	
	semaphoreTotalMoney wait.
	semaphoreTotalSales wait.
	! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 12:01:54' prior: 50669764!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.

	"self xxx: [totalSales := self totalSales ] yyy: [totalMoney := self totalMoneyRaised]."
	PerfomanceMultithread multithreadProcess:OrderedCollection  with:[totalSales := self totalSales ] with:[totalMoney := self totalMoneyRaised].
	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 12:02:00' prior: 50669826!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.

	"self xxx: [totalSales := self totalSales ] yyy: [totalMoney := self totalMoneyRaised]."
	PerfomanceMultithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSales ] with:[totalMoney := self totalMoneyRaised]).
	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:02:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:02:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:02:07'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:02:07'!
ERROR!
!PerfomanceMultithread class methodsFor: 'instance creation' stamp: 'lp 6/17/2023 12:02:14'!
multithreadProcess: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeMultithreadProcess: anOrderedCollection ! !
!PerfomanceMultithread class methodsFor: 'instance creation' stamp: 'lp 6/17/2023 12:02:33' prior: 50669953!
multithreadProcess: anOrderedCollection 
	^self new initializeMultithreadProcess: anOrderedCollection ! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 12:03:20' prior: 50669848!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.

	"self xxx: [totalSales := self totalSales ] yyy: [totalMoney := self totalMoneyRaised]."
	PerfomanceMultithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSales ] with:[totalMoney := self totalMoneyRaised]) for: self.
	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 12:03:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 12:03:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 12:03:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 12:03:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:03:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:03:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:03:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:03:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:03:26'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:03:26'!
ERROR!
!PerfomanceMultithread class methodsFor: 'instance creation' stamp: 'lp 6/17/2023 12:03:32'!
multithreadProcess: anOrderedCollection for: aTusLibrosSystemFacade 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeMultithreadProcess: anOrderedCollection for: aTusLibrosSystemFacade ! !
!PerfomanceMultithread class methodsFor: 'instance creation' stamp: 'lp 6/17/2023 12:03:37' prior: 50670076!
multithreadProcess: anOrderedCollection for: aTusLibrosSystemFacade 
	
	^self new initializeMultithreadProcess: anOrderedCollection for: aTusLibrosSystemFacade ! !
!PerfomanceMultithread class methodsFor: 'instance creation' stamp: 'lp 6/17/2023 12:03:39' prior: 50670088!
multithreadProcess: anOrderedCollection for: aTusLibrosSystemFacade 
	^self new initializeMultithreadProcess: anOrderedCollection for: aTusLibrosSystemFacade ! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:03:40'!
ERROR!

!classDefinition: #PerfomanceMultithread category: 'TusLibros-Model' stamp: 'lp 6/17/2023 12:03:49'!
Object subclass: #PerfomanceMultithread
	instanceVariableNames: 'orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #PerfomanceMultithread category: 'TusLibros-Model' stamp: 'lp 6/17/2023 12:03:49'!
Object subclass: #PerfomanceMultithread
	instanceVariableNames: 'orderedCollection tusLibrosSystemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!PerfomanceMultithread methodsFor: 'initialization' stamp: 'lp 6/17/2023 12:03:49'!
initializeMultithreadProcess: anOrderedCollection for: aTusLibrosSystemFacade 
	self shouldBeImplemented.
	orderedCollection := anOrderedCollection.
	tusLibrosSystemFacade := aTusLibrosSystemFacade.! !
!PerfomanceMultithread methodsFor: 'initialization' stamp: 'lp 6/17/2023 12:03:56' prior: 50670126!
initializeMultithreadProcess: anOrderedCollection for: aTusLibrosSystemFacade 
	orderedCollection := anOrderedCollection.
	tusLibrosSystemFacade := aTusLibrosSystemFacade.! !
!PerfomanceMultithread methodsFor: 'initialization' stamp: 'lp 6/17/2023 12:04:28' prior: 50670136!
initializeMultithreadProcess: aCollectionOfBlocksToRunInParalel for: aTusLibrosSystemFacade 
	orderedCollection := aCollectionOfBlocksToRunInParalel.
	tusLibrosSystemFacade := aTusLibrosSystemFacade.! !

!classDefinition: #PerfomanceMultithread category: 'TusLibros-Model' stamp: 'lp 6/17/2023 12:05:07'!
Object subclass: #PerfomanceMultithread
	instanceVariableNames: 'colaborationsToRun tusLibrosSystemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:05:07' prior: 50670145!
initializeMultithreadProcess: aCollectionOfBlocksToRunInParalel for: aTusLibrosSystemFacade 
	colaborationsToRun := aCollectionOfBlocksToRunInParalel.
	tusLibrosSystemFacade := aTusLibrosSystemFacade.! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:05:11'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:05:23'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:05:23'!
FAILURE!
!PerfomanceMultithread methodsFor: 'initialization' stamp: 'lp 6/17/2023 12:06:19' prior: 50670164!
initializeMultithreadProcess: aCollectionOfBlocksToRunInParalel for: aTusLibrosSystemFacade 
	colaborationsToRun := aCollectionOfBlocksToRunInParalel.
	tusLibrosSystemFacade := aTusLibrosSystemFacade.
	self run.! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:06:53'!
run
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:07:02' prior: 50670196!
run
	colaborationsToRun
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:07:49' prior: 50670200!
run
	colaborationsToRun do:[:aColaboration|
			self runColaboration: aColaboration .
		]
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:08:15'!
runColaboration: aColaboration
	
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:08:59' prior: 50670211!
runColaboration: aColaboration
	|semaphore|
	semaphore := Semaphore new.
	[aColaboration value.
		semaphore signal] fork.
	! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:09:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:09:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:09:09'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:09:09'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 12:11:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 12:11:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 12:11:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 12:11:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 12:11:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 12:11:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 12:11:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 12:11:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 12:11:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 12:11:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 12:11:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 12:11:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 12:11:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 12:11:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 12:11:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 12:11:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:11:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:11:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:11:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:11:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:11:45'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:11:45'!
FAILURE!
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:14:09' prior: 50670205!
run
	colaborationsToRun do:[:aColaboration|
			self runColaboration: aColaboration.
		]
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:15:13' prior: 50670390!
run
|semaphores|
	colaborationsToRun do:[:aColaboration|
		semaphores add: Semaphore new.
		].
	colaborationsToRun do:[:aColaboration|
			self runColaboration: aColaboration.
		]
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:15:45' prior: 50670397!
run
|semaphores|
	semaphores := OrderedCollection new.
	colaborationsToRun do:[:aColaboration|
		semaphores add: Semaphore new.
		].
	colaborationsToRun do:[:aColaboration|
			self runColaboration: aColaboration.
		]
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:16:00' prior: 50670407!
run
|semaphores|
	semaphores := OrderedCollection new.
	colaborationsToRun do:[:aColaboration|
		semaphores add: Semaphore new.
		].
	colaborationsToRun do:[:aColaboration|
			self runColaboration: aColaboration.
		].
	
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:16:30' prior: 50670418!
run
|semaphores|
	semaphores := OrderedCollection new.
	colaborationsToRun do:[:aColaboration|
		semaphores add: Semaphore new.
		].
	colaborationsToRun do:[:aColaboration|
			self runColaboration: aColaboration.
		].
	semaphores do:[:aSemaphore|
		aSemaphore wait.
		]
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:23:39' prior: 50670429!
run
|semaphores|
	semaphores := OrderedCollection new.
	colaborationsToRun do:[:aColaboration|
		semaphores add: Semaphore new.
		].
	1 to: (semaphores size) do:[:aColaboration|
			self runColaboration: aColaboration.
		].
	semaphores do:[:aSemaphore|
		aSemaphore wait.
		]
	! !

a := OrderedCollection  with:1 with:2 with:3.
!

1 to: (a size) do:[:index|
		a at:index
	]
!

1 to: (a size) do:[:index|
		a at:index
	]
!

 1 !

 1 !

 1 !

 1 !

 1 !

 1 !

 1 !

 1 !

 1 !

 1 !


1 to: (a size) do:[:index|
		a at:index printString
	]
!


1 to: (a size) do:[:index|
		self print :(a at:index) 
	]
!


1 to: (a size) do:[:index|
		self print: (a at:index) 
	]
!


1 to: (a size) do:[:index|
		(a at:index) 
	]
!

 1 !

a := OrderedCollection  with:1 with:2 with:3.
b:= OrderedCollection new.!

1 to: (a size) do:[:index|
		b add :(a at:index) 
	]!

1 to: (a size) do:[:index|
		b add:(a at:index) 
	].
!

b!
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:27:24' prior: 50670441!
run
|semaphores|
	semaphores := OrderedCollection new.
	colaborationsToRun do:[:aColaboration|
		semaphores add: Semaphore new.
		].
	1 to: (semaphores size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) .
		].
	semaphores do:[:aSemaphore|
		aSemaphore wait.
		]
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:28:12' prior: 50670216!
runColaboration: aColaboration
	[ | semaphore |aColaboration value.
		semaphore signal] fork.
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:28:57' prior: 50670473!
run
|semaphores|
	semaphores := OrderedCollection new.
	colaborationsToRun do:[:aColaboration|
		semaphores add: Semaphore new.
		].
	1 to: (semaphores size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (semaphores at:index) .
		].
	semaphores do:[:aSemaphore|
		aSemaphore wait.
		]
	! !

!methodRemoval: PerfomanceMultithread #runColaboration: stamp: 'lp 6/17/2023 12:29:07'!
runColaboration: aColaboration
	[ | semaphore |aColaboration value.
		semaphore signal] fork.
	!
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:29:50'!
runColaboration: aColaboration withSemaphore:aSemaphore
	[aColaboration value.
		aSemaphore signal] fork.! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 12:29:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 12:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:29:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:30:00'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 12:30:40' prior: 50669782!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	"self xxx: [totalSales := self totalSalesOf:anItem ] yyy: [totalMoney := self totalMoneyRaisedBy: anItem]."
	PerfomanceMultithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSales ] with:[totalMoney := self totalMoneyRaised]) for: self.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 12:30:59' prior: 50670598!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	"self xxx: [totalSales := self totalSalesOf:anItem ] yyy: [totalMoney := self totalMoneyRaisedBy: anItem]."
	PerfomanceMultithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSalesOf:anItem] with:[totalMoney := self totalMoneyRaisedBy: anItem]) for: self.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 12:31:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 12:31:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 12:31:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:31:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:31:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:31:04'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 12:32:30' prior: 50670622!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	PerfomanceMultithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSalesOf:anItem] with:[totalMoney := self totalMoneyRaisedBy: anItem]) for: self.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 12:32:36' prior: 50669970!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.

	PerfomanceMultithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSales ] with:[totalMoney := self totalMoneyRaised]) for: self.
	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!methodRemoval: PerfomanceMultithread #xxx:yyy: stamp: 'lp 6/17/2023 12:32:42'!
xxx: aBlockA yyy:aBlockB

	| semaphoreTotalMoney semaphoreTotalSales |
	
	semaphoreTotalSales := Semaphore new.
	semaphoreTotalMoney := Semaphore new.
	[aBlockA value.
		semaphoreTotalSales signal] fork.
	[aBlockB value.
		semaphoreTotalMoney signal] fork.
	
	semaphoreTotalMoney wait.
	semaphoreTotalSales wait.
	!
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:34:34' prior: 50670493!
run
|semaphores|
	semaphores := OrderedCollection new.
	colaborationsToRun inject: OrderedCollection new into:[:semaphoreCollection :aColaboration|
		semaphoreCollection add: Semaphore new.
		].
	1 to: (semaphores size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (semaphores at:index) .
		].
	semaphores do:[:aSemaphore|
		aSemaphore wait.
		]
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:34:46'!
createSemaphores

	^ colaborationsToRun inject: OrderedCollection new into:[:semaphoreCollection :aColaboration|
		semaphoreCollection add: Semaphore new.
		]! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:34:46' prior: 50670779!
run
|semaphores|
	semaphores := OrderedCollection new.
	self createSemaphores.
	1 to: (semaphores size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (semaphores at:index) .
		].
	semaphores do:[:aSemaphore|
		aSemaphore wait.
		]
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:34:58' prior: 50670803!
run
|semaphores|
	semaphores := self createSemaphores.
	1 to: (semaphores size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (semaphores at:index) .
		].
	semaphores do:[:aSemaphore|
		aSemaphore wait.
		]
	! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:35:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:35:07'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:35:07'!
FAILURE!
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:39:06' prior: 50670794!
createSemaphores
	|semaphore|
		semaphore:= OrderedCollection new
	^ colaborationsToRun inject:semaphore into: [:semaphoreCollection :aColaboration|
		semaphoreCollection add: Semaphore new.
		]! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:39:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:39:12'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:39:12'!
ERROR!
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:39:45' prior: 50670906!
createSemaphores
	|semaphore|
		semaphore:= OrderedCollection new.
	 colaborationsToRun do: [:semaphoreCollection :aColaboration|
		semaphoreCollection add: Semaphore new.
		].
	^semaphore.! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:40:32' prior: 50670995!
createSemaphores
	|semaphore|
		semaphore:= OrderedCollection new.
	 colaborationsToRun do: [:aColaboration|
		semaphore add: Semaphore new.
		].
	^semaphore.! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 12:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 12:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 12:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 12:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 12:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 12:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 12:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 12:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 12:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 12:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 12:40:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 12:40:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 12:40:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 12:40:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 12:40:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 12:40:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:40:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:40:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:40:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:40:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:40:37'!
PASSED!
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:42:49'!
multithreadRunningWith: aCollectionOfSemaphores
	1 to: (aCollectionOfSemaphores size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (aCollectionOfSemaphores at:index) .
		].
	
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:43:01'!
multithreadRunningSendingSingnalsTo: aCollectionOfSemaphores
	1 to: (aCollectionOfSemaphores size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (aCollectionOfSemaphores at:index) .
		].
	
	! !

!methodRemoval: PerfomanceMultithread #multithreadRunningWith: stamp: 'lp 6/17/2023 12:43:01'!
multithreadRunningWith: aCollectionOfSemaphores
	1 to: (aCollectionOfSemaphores size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (aCollectionOfSemaphores at:index) .
		].
	
	!
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:43:16' prior: 50670815!
run
|semaphores|
	semaphores := self createSemaphores.
	"1 to: (semaphores size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (semaphores at:index) .
		]."
	self multithreadRunningSendingSingnalsTo: semaphores .
	semaphores do:[:aSemaphore|
		aSemaphore wait.
		]
	! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 12:43:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:43:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 12:43:24'!
PASSED!
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:43:33' prior: 50671124!
run
|semaphores|
	semaphores := self createSemaphores.
	self multithreadRunningSendingSingnalsTo: semaphores .
	semaphores do:[:aSemaphore|
		aSemaphore wait.
		]
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:43:46' prior: 50671217!
run
|semaphores|
	semaphores := self createSemaphores.
	self multithreadRunningSendingSingnalsTo: semaphores .
	semaphores do:[:aSemaphore|aSemaphore wait]
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:43:53'!
waitFor: semaphores

	^ semaphores do:[:aSemaphore|aSemaphore wait]! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 12:43:53' prior: 50671226!
run
|semaphores|
	semaphores := self createSemaphores.
	self multithreadRunningSendingSingnalsTo: semaphores .
	self waitFor: semaphores
	! !
!PerfomanceMultithread methodsFor: 'paralel processing private' stamp: 'lp 6/17/2023 12:45:29' prior: 50671005!
createSemaphores
	|semaphore|
	semaphore:= OrderedCollection new.
	colaborationsToRun do: [:aColaboration| semaphore add: Semaphore new.].
	^semaphore.! !

----SNAPSHOT----(17 June 2023 12:48:42) CuisUniversity-5706.image priorSource: 9530112!

----SNAPSHOT----(17 June 2023 12:52:07) CuisUniversity-5706.image priorSource: 10867354!

----STARTUP---- (17 June 2023 13:06:26) as C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\CuisUniversity-5706.image!

!PerfomanceMultithread methodsFor: 'paralel processing private' stamp: 'lp 6/17/2023 13:13:44' prior: 50671248!
createSemaphores
	|semaphore|
	semaphore:= Dictionary new.
	colaborationsToRun do:[:aColaboration|
		semaphore at:aColaboration  put: Semaphore new
		]
	"semaphore:= OrderedCollection new.
	colaborationsToRun do: [:aColaboration| semaphore add: Semaphore new.]."
	^semaphore.! !
!PerfomanceMultithread methodsFor: 'paralel processing private' stamp: 'lp 6/17/2023 13:14:40' prior: 50671103!
multithreadRunningSendingSingnalsTo: aCollectionOfSemaphores
	"1 to: (aCollectionOfSemaphores size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (aCollectionOfSemaphores at:index) .
		]."
	aCollectionOfSemaphores do:[:aAssociation|
		self runColaboration: aAssociation key withSemaphore: aAssociation value
		]
	
	! !
!PerfomanceMultithread methodsFor: 'paralel processing private' stamp: 'lp 6/17/2023 13:15:53' prior: 50671234!
waitFor: semaphores

	^ semaphores do:[:aSemaphore|aSemaphore value wait]! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 13:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 13:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 13:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 13:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 13:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 13:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 13:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 13:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 13:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 13:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 13:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 13:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 13:15:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 13:15:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 13:15:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 13:15:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:15:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:15:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:15:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:15:56'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:15:56'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:15:58'!
ERROR!
!PerfomanceMultithread methodsFor: 'paralel processing private' stamp: 'lp 6/17/2023 13:16:08' prior: 50671266!
createSemaphores
	|semaphore|
	semaphore:= Dictionary new.
	colaborationsToRun do:[:aColaboration|
		semaphore at:aColaboration  put: Semaphore new
		].
	"semaphore:= OrderedCollection new.
	colaborationsToRun do: [:aColaboration| semaphore add: Semaphore new.]."
	^semaphore.! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:16:09'!
ERROR!
!PerfomanceMultithread methodsFor: 'paralel processing private' stamp: 'lp 6/17/2023 13:18:09' prior: 50671384!
createSemaphores
	|semaphore|
	semaphore:= OrderedCollection new.
	colaborationsToRun do: [:aColaboration| semaphore add: Semaphore new.].
	^semaphore.! !
!PerfomanceMultithread methodsFor: 'paralel processing private' stamp: 'lp 6/17/2023 13:18:19' prior: 50671279!
multithreadRunningSendingSingnalsTo: aCollectionOfSemaphores
	1 to: (aCollectionOfSemaphores size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (aCollectionOfSemaphores at:index) .
		]
	
	! !
!PerfomanceMultithread methodsFor: 'paralel processing private' stamp: 'lp 6/17/2023 13:18:23' prior: 50671294!
waitFor: semaphores

	^ semaphores do:[:aSemaphore|aSemaphore  wait]! !

!classDefinition: #PerfomanceMultithread category: 'TusLibros-Model' stamp: 'lp 6/17/2023 13:19:03'!
Object subclass: #PerfomanceMultithread
	instanceVariableNames: 'colaborationsToRun tusLibrosSystemFacade semaforos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!PerfomanceMultithread methodsFor: 'initialization' stamp: 'lp 6/17/2023 13:19:02' prior: 50670186!
initializeMultithreadProcess: aCollectionOfBlocksToRunInParalel for: aTusLibrosSystemFacade 
	colaborationsToRun := aCollectionOfBlocksToRunInParalel.
	tusLibrosSystemFacade := aTusLibrosSystemFacade.
	semaforos := self createSemaphores .
	self run.! !
!PerfomanceMultithread methodsFor: 'run' stamp: 'lp 6/17/2023 13:19:33' prior: 50671240!
run
	self multithreadRunningSendingSingnalsTo .
	self waitFor
	! !
!PerfomanceMultithread methodsFor: 'paralel processing private' stamp: 'lp 6/17/2023 13:19:51'!
multithreadRunningSendingSingnalsTo
	1 to: (semaforos size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (semaforos at:index) .
		]
	
	! !
!PerfomanceMultithread methodsFor: 'paralel processing private' stamp: 'lp 6/17/2023 13:19:59'!
waitFor

	^ semaforos do:[:aSemaphore|aSemaphore  wait]! !
!PerfomanceMultithread methodsFor: 'initialization' stamp: 'lp 6/17/2023 13:20:12' prior: 50671435!
initializeMultithreadProcess: aCollectionOfBlocksToRunInParalel for: aTusLibrosSystemFacade 
	colaborationsToRun := aCollectionOfBlocksToRunInParalel.
	tusLibrosSystemFacade := aTusLibrosSystemFacade.
	semaforos := self createSemaphores .
	"self run".! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 13:20:33' prior: 50670726!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales multithreading |

	bookPerformance := Dictionary new.
	multithreading := PerfomanceMultithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSalesOf:anItem] with:[totalMoney := self totalMoneyRaisedBy: anItem]) for: self.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 13:20:42' prior: 50671477!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales multithreading |

	bookPerformance := Dictionary new.
	multithreading := PerfomanceMultithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSalesOf:anItem] with:[totalMoney := self totalMoneyRaisedBy: anItem]) for: self.
	multithreading run.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:20:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:20:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:20:45'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:20:45'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 13:21:06' prior: 50670747!
storePerformance

	| totalMoney totalSales performance multithreading |
	
	performance := Dictionary new.

	multithreading := PerfomanceMultithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSales ] with:[totalMoney := self totalMoneyRaised]) for: self.
	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 13:21:15' prior: 50671605!
storePerformance

	| totalMoney totalSales performance multithreading |
	
	performance := Dictionary new.

	multithreading := PerfomanceMultithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSales ] with:[totalMoney := self totalMoneyRaised]) for: self.
	multithreading run.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:21:17'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:21:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:21:19'!
PASSED!
!PerfomanceMultithread methodsFor: 'initialization' stamp: 'lp 6/17/2023 13:21:53' prior: 50671466!
initializeMultithreadProcess: aCollectionOfBlocksToRunInParalel for: aTusLibrosSystemFacade 
	colaborationsToRun := aCollectionOfBlocksToRunInParalel.
	tusLibrosSystemFacade := aTusLibrosSystemFacade.
	semaforos := self createSemaphores .! !
!PerfomanceMultithread methodsFor: 'initialization' stamp: 'lp 6/17/2023 13:22:00' prior: 50671727!
initializeMultithreadProcess: aCollectionOfBlocksToRunInParalel for: aTusLibrosSystemFacade 
	colaborationsToRun := aCollectionOfBlocksToRunInParalel.	semaforos := self createSemaphores .! !
!PerfomanceMultithread methodsFor: 'initialization' stamp: 'lp 6/17/2023 13:22:02' prior: 50671738!
initializeMultithreadProcess: aCollectionOfBlocksToRunInParalel for: aTusLibrosSystemFacade 
	colaborationsToRun := aCollectionOfBlocksToRunInParalel.
		semaforos := self createSemaphores .! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:22:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:22:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:22:07'!
PASSED!
!PerfomanceMultithread methodsFor: 'initialization' stamp: 'lp 6/17/2023 13:22:13' prior: 50671748!
initializeMultithreadProcess: aCollectionOfBlocksToRunInParalel for: aTusLibrosSystemFacade 
	colaborationsToRun := aCollectionOfBlocksToRunInParalel.
	semaforos := self createSemaphores .! !

!methodRemoval: PerfomanceMultithread #waitFor: stamp: 'lp 6/17/2023 13:22:24'!
waitFor: semaphores

	^ semaphores do:[:aSemaphore|aSemaphore  wait]!

!methodRemoval: PerfomanceMultithread #multithreadRunningSendingSingnalsTo: stamp: 'lp 6/17/2023 13:22:29'!
multithreadRunningSendingSingnalsTo: aCollectionOfSemaphores
	1 to: (aCollectionOfSemaphores size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (aCollectionOfSemaphores at:index) .
		]
	
	!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 13:22:46' prior: 50671626!
storePerformance

	| totalMoney totalSales performance multithreading |
	
	performance := Dictionary new.

	multithreading := PerfomanceMultithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSales ] with:[totalMoney := self totalMoneyRaised]).
	multithreading run.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'lp 6/17/2023 13:22:52' prior: 50671499!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales multithreading |

	bookPerformance := Dictionary new.
	multithreading := PerfomanceMultithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSalesOf:anItem] with:[totalMoney := self totalMoneyRaisedBy: anItem]).
	multithreading run.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:22:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:22:57'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:22:57'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:23:00'!
ERROR!
!PerfomanceMultithread methodsFor: 'initialization' stamp: 'lp 6/17/2023 13:23:28'!
initializeMultithreadProcess: aCollectionOfBlocksToRunInParalel 
	colaborationsToRun := aCollectionOfBlocksToRunInParalel.
	semaforos := self createSemaphores .! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:23:39'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:23:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:23:41'!
PASSED!

!methodRemoval: PerfomanceMultithread #initializeMultithreadProcess:for: stamp: 'lp 6/17/2023 13:23:46'!
initializeMultithreadProcess: aCollectionOfBlocksToRunInParalel for: aTusLibrosSystemFacade 
	colaborationsToRun := aCollectionOfBlocksToRunInParalel.
	semaforos := self createSemaphores .!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 13:23:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 13:23:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 13:23:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:23:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:23:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:23:53'!
PASSED!
!PerfomanceMultithread methodsFor: 'run' stamp: 'lp 6/17/2023 13:29:32' prior: 50671446!
run
	[self multithreadRunningSendingSingnalsTo] forkAndWait .
	"self waitFor"
	! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 13:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 13:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 13:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 13:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 13:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 13:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 13:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 13:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 13:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 13:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 13:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 13:29:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 13:29:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 13:29:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 13:29:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 13:29:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:29:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:29:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:29:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:29:59'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:29:59'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:30:01'!
FAILURE!
!PerfomanceMultithread methodsFor: 'run' stamp: 'lp 6/17/2023 13:37:48' prior: 50672165!
run
	self multithreadRunningSendingSingnalsTo.
	self waitFor
	! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 13:37:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 13:37:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 13:37:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 13:37:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:37:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:37:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:37:56'!
PASSED!
!PerfomanceMultithread methodsFor: 'paralel processing private' stamp: 'lp 6/17/2023 13:39:51'!
waitAll

	^ semaforos do:[:aSemaphore|aSemaphore  wait]! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 13:39:52' prior: 50672254!
run
	self multithreadRunningSendingSingnalsTo.
	self waitAll
	! !

!methodRemoval: PerfomanceMultithread #waitFor stamp: 'lp 6/17/2023 13:39:52'!
waitFor

	^ semaforos do:[:aSemaphore|aSemaphore  wait]!
!PerfomanceMultithread methodsFor: 'paralel processing private' stamp: 'lp 6/17/2023 13:40:17'!
multithreadRunning
	1 to: (semaforos size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (semaforos at:index) .
		]
	
	! !
!PerfomanceMultithread methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 13:40:18' prior: 50672345!
run
	self multithreadRunning.
	self waitAll
	! !

!methodRemoval: PerfomanceMultithread #multithreadRunningSendingSingnalsTo stamp: 'lp 6/17/2023 13:40:18'!
multithreadRunningSendingSingnalsTo
	1 to: (semaforos size) do:[:index|
			self runColaboration: (colaborationsToRun at: index) withSemaphore: (semaforos at:index) .
		]
	
	!

!classRenamed: #PerfomanceMultithread as: #Multithread stamp: 'lp 6/17/2023 13:40:39'!
Smalltalk renameClassNamed: #PerfomanceMultithread as: #Multithread!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 13:40:39' prior: 50671862!
storePerformance

	| totalMoney totalSales performance multithreading |
	
	performance := Dictionary new.

	multithreading := Multithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSales ] with:[totalMoney := self totalMoneyRaised]).
	multithreading run.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'lp 6/17/2023 13:40:39' prior: 50671883!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales multithreading |

	bookPerformance := Dictionary new.
	multithreading := Multithread multithreadProcess:(OrderedCollection  with:[totalSales := self totalSalesOf:anItem] with:[totalMoney := self totalMoneyRaisedBy: anItem]).
	multithreading run.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

Object subclass: #Multithread
	instanceVariableNames: 'colaborationsToRun semaforos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #Multithread category: 'TusLibros-Model' stamp: 'lp 6/17/2023 13:40:48'!
Object subclass: #Multithread
	instanceVariableNames: 'colaborationsToRun semaforos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'lp 6/17/2023 13:40:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:40:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'lp 6/17/2023 13:40:53'!
PASSED!

----SNAPSHOT----(17 June 2023 13:51:25) CuisUniversity-5706.image priorSource: 10867443!

----STARTUP---- (18 June 2023 14:39:03) as C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\CuisUniversity-5706.image!


TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!

TusLibrosClientTestWindow open!

self inform: 'paola'!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:19:32' prior: 50630797!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	[resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.]fork.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !

WebServer reset.!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:21:10' prior: 50672530!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	[resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict..
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]
	]fork! !

TusLibrosServerRestInterface installForDefaultSystem.!

WebServer reset.!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:23:08' prior: 50672549!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	[resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict..
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]
	]forkAndWait ! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:23:40' prior: 50672570!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict..
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]
	! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:26:53'!
xxx: aUrl yyy:arguments

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {arguments}.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:27:28' prior: 50630812!
createCartFor: aUser password: aPassword

	"| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]"
		
	self xxx: {'clientId'. aUser. 'password'. aPassword} yyy: 'createCart'! !

WebServer reset.
!

TusLibrosServerRestInterface installForDefaultSystem.
!

TusLibrosClientTestWindow open
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:28:27' prior: 50672616!
createCartFor: aUser password: aPassword

	"| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]"
		
	self xxx:  'createCart' yyy:{'clientId'. aUser. 'password'. aPassword}! !

TusLibrosClientTestWindow open
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:29:42' prior: 50672603!
xxx: aUrl yyy:arguments

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: arguments.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !

TusLibrosClientTestWindow open
!

TusLibrosClientTestWindow open
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:40:45' prior: 50672636!
createCartFor: aUser password: aPassword

	"| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]"
		
	^self xxx:  'createCart' yyy:{'clientId'. aUser. 'password'. aPassword}! !

WebServer reset.
!

TusLibrosServerRestInterface installForDefaultSystem.
!

TusLibrosClientTestWindow open
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:42:23'!
request: aUrl with:arguments

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: arguments.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'lp 6/18/2023 15:42:23' prior: 50672669!
createCartFor: aUser password: aPassword

	"| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]"
		
	^self request:  'createCart' with:{'clientId'. aUser. 'password'. aPassword}! !

!methodRemoval: TusLibrosClientRestInterface #xxx:yyy: stamp: 'lp 6/18/2023 15:42:23'!
xxx: aUrl yyy:arguments

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: arguments.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:42:35' prior: 50672702!
createCartFor: aUser password: aPassword
		
	^self request:  'createCart' with:{'clientId'. aUser. 'password'. aPassword}! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:43:11' prior: 50672587!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	"| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict..
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^ self request: 'addToCart' with: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.
	! !

WebServer reset.
!

TusLibrosServerRestInterface installForDefaultSystem.
!

TusLibrosClientTestWindow open
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:44:02' prior: 50672739!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	^ self request: 'addToCart' with: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:45:31'!
xxx: aHttpResponse
	^(WebUtils jsonDecode: ((aHttpResponse content) readStream))! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:46:13' prior: 50672689!
request: aUrl with:arguments

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: arguments.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^self xxx] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:46:18' prior: 50672776!
request: aUrl with:arguments

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: arguments.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^self xxx:resp] 
		ifFalse:[^self error: resp content]! !

TusLibrosServerRestInterface installForDefaultSystem 
!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:47:59'!
decode: aHttpResponse
	^(WebUtils jsonDecode: ((aHttpResponse content) readStream))! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'lp 6/18/2023 15:47:59' prior: 50672788!
request: aUrl with:arguments

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: arguments.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^self decode:resp] 
		ifFalse:[^self error: resp content]! !

!methodRemoval: TusLibrosClientRestInterface #xxx: stamp: 'lp 6/18/2023 15:47:59'!
xxx: aHttpResponse
	^(WebUtils jsonDecode: ((aHttpResponse content) readStream))!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:48:19'!
decodeAsOrderedCollection: aHttpResponse
	^(WebUtils jsonDecode: ((aHttpResponse content) readStream))! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:48:29' prior: 50672826!
decodeAsOrderedCollection: aHttpResponse
	^(WebUtils jsonDecode: ((aHttpResponse content) readStream)) asOrderedCollection! !
!TusLibrosClientRestInterface methodsFor: 'requestPrivate' stamp: 'lp 6/18/2023 15:51:40' prior: 50672833!
decodeAsOrderedCollection: aHttpResponse
	^self decode: aHttpResponse  asOrderedCollection ! !
!TusLibrosClientRestInterface methodsFor: 'requestPrivate' stamp: 'lp 6/18/2023 15:53:32' prior: 50672809!
request: aUrl with:arguments

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: arguments.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^self decode:resp] 
		ifFalse:[^self inform: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:55:14' prior: 50672762!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	^ [self request: 'addToCart' with: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.]fork
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:55:27' prior: 50672731!
createCartFor: aUser password: aPassword
		
	^[self request:  'createCart' with:{'clientId'. aUser. 'password'. aPassword}]fork! !

WebServer reset 
!

TusLibrosServerRestInterface installForDefaultSystem 
!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:56:47' prior: 50672869!
createCartFor: aUser password: aPassword
		
	^[[self request:  'createCart' with:{'clientId'. aUser. 'password'. aPassword}]fork]! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:57:34' prior: 50672880!
createCartFor: aUser password: aPassword
		
	[[self request:  'createCart' with:{'clientId'. aUser. 'password'. aPassword}]fork]! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:58:36' prior: 50672889!
createCartFor: aUser password: aPassword
	|semaphore|
	semaphore := Semaphore new.
	[[self request:  'createCart' with:{'clientId'. aUser. 'password'. aPassword}]fork]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:59:07' prior: 50672898!
createCartFor: aUser password: aPassword
	|semaphore|
	semaphore := Semaphore new.
	[[self request:  'createCart' with:{'clientId'. aUser. 'password'. aPassword}]fork].
	semaphore wait.
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 15:59:32' prior: 50672907!
createCartFor: aUser password: aPassword
	|semaphore|
	semaphore := Semaphore new.
	[[self request:  'createCart' with:{'clientId'. aUser. 'password'. aPassword}.
			semaphore signal ]fork].
	semaphore wait.
! !

TusLibrosClientTestWindow open!

----STARTUP---- (18 June 2023 16:00:22) as C:\Users\RYZEN\Desktop\matienzOS\isw1\windows64\CuisUniversity-5706.image!

!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:04:34' prior: 50630826!
listCart: cartId

	| fieldDict resp semaphore|
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	semaphore := Semaphore new.
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:04:57' prior: 50672932!
listCart: cartId

	| fieldDict resp semaphore|
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	semaphore := Semaphore new.
	[
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	semaphore signal
	] fork.
	semaphore wait.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]! !

TusLibrosServerRestInterface installForDefaultSystem .
!

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'NR 6/9/2022 08:11:24' prior: 50672947!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:29:45'!
xxx: aUrl yyy: aParamters

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:31:11' prior: 50630812!
createCartFor: aUser password: aPassword
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]."
	self xxx:'createCart' yyy:{'clientId'. aUser. 'password'. aPassword}.! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:31:33' prior: 50672993!
createCartFor: aUser password: aPassword
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]."
	^self xxx:'createCart' yyy:{'clientId'. aUser. 'password'. aPassword}.! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:32:00' prior: 50672979!
xxx: aUrl yyy: aParamters

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:33:14' prior: 50630797!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	self xxx:'addToCart' yyy: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:35:19' prior: 50672966!
listCart: cartId
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		self xxx:'listCart' yyy:{'cartId'. cartId. } asOrderedCollection! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:35:36' prior: 50673063!
listCart: cartId
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		(self xxx:'listCart' yyy:{'cartId'. cartId. }) asOrderedCollection! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:35:59' prior: 50673079!
listCart: cartId
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		^(self xxx:'listCart' yyy:{'cartId'. cartId. }) asOrderedCollection! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:37:03' prior: 50673095!
listCart: cartId
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		^(self xxx:'listCart' yyy:{'cartId'. 1000. }) asOrderedCollection! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:38:38' prior: 50673029!
xxx: aUrl yyy: aParamters

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self inform: resp content]! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:40:28' prior: 50673112!
listCart: cartId

	| resp |
	"
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		resp := (self xxx:'listCart' yyy:{'cartId'. 1000. }).
		^resp asOrderedCollection ! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:43:12' prior: 50673143!
listCart: cartId

	| resp |
	"
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		[resp := (self xxx:'listCart' yyy:{'cartId'. 1000. })] on: Exception do:[].
		^resp asOrderedCollection ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:43:19' prior: 50673129!
xxx: aUrl yyy: aParamters

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:43:44' prior: 50673177!
xxx: aUrl yyy: aParamters

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self inform: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:45:52'!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value] 
		ifFalse:[^self inform: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:47:01' prior: 50673160!
listCart: cartId

	| resp |
	"
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		^ self xxx:'listCart' yyy:{'cartId'. 1000. } onSucces:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:47:22' prior: 50673215!
listCart: cartId

	"
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		^ self xxx:'listCart' yyy:{'cartId'. 1000. } onSucces:[:resp | ^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:47:39' prior: 50673203!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[^self inform: resp content]! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:51:19' prior: 50673233!
listCart: cartId

	"
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		^ self xxx:'listCart' yyy:{'cartId'. 1000. } onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection]! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:54:20' prior: 50673250!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[^self error: resp content]! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:56:55' prior: 50673264!
listCart: cartId

	"
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		^[ self xxx:'listCart' yyy:{'cartId'. 1000. } onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection]]on: Error do:[self inform:1]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:57:35' prior: 50673297!
listCart: cartId

	"
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		^[ self xxx:'listCart' yyy:{'cartId'. 1000. } onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection]]on: Error do:[:anError | self inform: anError messageText ]! !

TusLibrosClientTestWindow open .!

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:59:33' prior: 50673315!
listCart: cartId

	"
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		^[ self xxx:'listCart' yyy:{'cartId'. 1000. } onSucces:[:resp | ^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection]]on: Error do:[:anError | self inform: anError messageText ]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 16:59:39' prior: 50673283!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[aBlock value:resp] 
		ifFalse:[^self error: resp content]! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:00:48' prior: 50673356!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:00:59' prior: 50673337!
listCart: cartId

	"
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		^[ self xxx:'listCart' yyy:{'cartId'. 1000. } onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection]]on: Error do:[:anError | self inform: anError messageText ]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:01:46' prior: 50673011!
createCartFor: aUser password: aPassword
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]."
	^self xxx:'createCart' yyy:{'clientId'. aUser. 'password'. aPassword} onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:02:24' prior: 50673043!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	self xxx:'addToCart' yyy: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ].! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:03:05' prior: 50673421!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	self xxx:'addToCart' yyy: {'cartId'. 1000. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ].! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:03:53' prior: 50673370!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[^self inform: resp content]! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:04:33' prior: 50673465!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[self inform: resp content]! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:05:23' prior: 50673443!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^self xxx:'addToCart' yyy: {'cartId'. 1000. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ].! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:06:09' prior: 50673493!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^self xxx:'addToCart' yyy: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ].! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:07:18' prior: 50673479!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[self inform: resp content asString]! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:07:33' prior: 50673515!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^self xxx:'addToCart' yyy: {'cartId'. 1000. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ].! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:07:57' prior: 50673537!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[^self inform: resp content asString]! !

TusLibrosClientTestWindow open .!

self inform:'hola'!

self inform:''!

self inform:''!

self inform:''!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:09:23' prior: 50673573!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[self halt.^self inform: resp content asString]! !

TusLibrosClientTestWindow open .
!

resp content asString!

resp content!

self inform: resp content!

self inform: resp content!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:12:22' prior: 50673589!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[self halt.^self inform: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:12:54' prior: 50673606!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[self inform: resp content. self halt.]! !

self inform: resp content. !

self inform: resp content.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:15:13' prior: 50673619!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[self error: resp content.]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:15:21' prior: 50673634!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[^self error: resp content.]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:16:09' prior: 50673551!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^[self xxx:'addToCart' yyy: {'cartId'. 1000. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ]] on: Error
	do:[self inform:'1'].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:16:40' prior: 50673660!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^[self xxx:'addToCart' yyy: {'cartId'. 1000. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ]] on: Error
	do:[:aError | self halt .self inform:'1'].! !

TusLibrosClientTestWindow open .
!

self inform:'1'!

self inform:aError!

self inform:aError asString!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:18:19' prior: 50673682!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^[self xxx:'addToCart' yyy: {'cartId'. 1000. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ]] on: Error
	do:[:aError |  self inform:aError asString].! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:18:53' prior: 50673708!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^[self xxx:'addToCart' yyy: {'cartId'. 1000. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ]] on: Error
	do:[:aError |  ^self inform:aError asString].! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 17:20:42' prior: 50630924!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self halt.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 17:22:20' prior: 50673756!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 17:24:18' prior: 50673771!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self halt.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 17:24:53' prior: 50673784!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:25:37' prior: 50673732!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^[self xxx:'addToCart' yyy: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ]] on: Error
	do:[:aError |  ^self inform:aError asString].! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 17:26:16' prior: 50673799!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self halt.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 17:35:07' prior: 50673837!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId] on: Error do:[self triggerEvent: #BookAddedToCart withArguments:(Array with:404)].
		self halt.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 17:35:18' prior: 50673852!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId] on: Error do:[^self triggerEvent: #BookAddedToCart withArguments:(Array with:404)].
		self halt.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:35:48' prior: 50673813!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^[self xxx:'addToCart' yyy: {'cartId'. 1000. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ]] on: Error
	do:[:aError |  ^self error: aError asString].! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 17:36:50' prior: 50673868!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId] on: Error do:[^self triggerEvent: #bookAddedToCart withArguments:(Array with:404)].
		self halt.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 17:37:59' prior: 50673908!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId] on: Error do:[^self triggerEvent: #bookAddedToCart withArguments:(Array with:'error' with:404)].
		self halt.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:39:59' prior: 50673884!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^[self xxx:'addToCart' yyy: {'cartId'. 1000. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ]] ! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:40:10' prior: 50673943!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^self xxx:'addToCart' yyy: {'cartId'. 1000. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ] ! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:43:24' prior: 50673383!
listCart: cartId

	"
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		^self xxx:'listCart' yyy:{'cartId'. 1000. }  asOrderedCollection! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:43:31' prior: 50673964!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^self xxx:'addToCart' yyy: {'cartId'. 1000. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 17:44:52' prior: 50673190!
xxx: aUrl yyy: aParamters

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'lp 6/18/2023 17:51:54' prior: 50630705!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage to: self.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 17:53:37' prior: 50673925!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId] on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(anError asString)].
		self halt.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'lp 6/18/2023 17:54:45'!
popErrorMessage
	self shouldBeImplemented.! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'lp 6/18/2023 17:55:05' prior: 50674075!
popErrorMessage
	self inform:1.! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'lp 6/18/2023 17:55:10' prior: 50674080!
popErrorMessage
	self inform:'1'.! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'lp 6/18/2023 17:55:54' prior: 50674035!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'lp 6/18/2023 17:56:28'!
popErrorMessage: arguments
	self inform:'1'.! !

!methodRemoval: TusLibrosClientTestWindow #popErrorMessage stamp: 'lp 6/18/2023 17:56:28'!
popErrorMessage
	self inform:'1'.!
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'lp 6/18/2023 17:57:00' prior: 50674112!
popErrorMessage: arguments
	self inform:arguments asString.! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'lp 6/18/2023 17:57:03' prior: 50674121!
popErrorMessage: arguments
	self inform:arguments .! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 17:58:34' prior: 50674058!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId] on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(anError messageText)].
		self halt.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !

----SNAPSHOT----(18 June 2023 17:58:46) CuisUniversity-5706.image priorSource: 10907741!

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:01:26' prior: 50674133!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId] on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
		self halt.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:02:43' prior: 50630937!
createCart

	| newCartId |
	
	[newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk']on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:02:56' prior: 50630946!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		[cartId := self selectedCartId]on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
		currentSelectedCartContent := restInterface listCart: cartId.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:03:30' prior: 50673402!
createCartFor: aUser password: aPassword
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]."
	^self xxx:'createCart' yyy:{'clientId'. 5. 'password'. aPassword} onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:03:49' prior: 50674199!
createCartFor: aUser password: aPassword
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]."
	^self xxx:'createCart' yyy:{'clientId'. aUser. 'password'. aPassword} onSucces:[:resp | (WebUtils jsonDecode: ((resp content) readStream)) ]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:03:55' prior: 50674001!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^self xxx:'addToCart' yyy: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}! !

TusLibrosClientTestWindow open .
!

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:10:27' prior: 50674021!
xxx: aUrl yyy: aParamters

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:["^self error: resp content"]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:10:49' prior: 50674154!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId] on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
		
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:12:06' prior: 50674219!
createCartFor: aUser password: aPassword
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]."
	^self xxx:'createCart' yyy:{'clientId'. aUser. 'password'. aPassword}! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:12:48' prior: 50674291!
createCartFor: aUser password: aPassword
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]."
	^self xxx:'createCart' yyy:{'clientId'. 5. 'password'. aPassword}! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:13:20' prior: 50674259!
xxx: aUrl yyy: aParamters

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:14:12' prior: 50674309!
createCartFor: aUser password: aPassword
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]."
	^self xxx:'createCart' yyy:{'clientId'. aUser. 'password'. aPassword}! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:15:37' prior: 50674185!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[currentSelectedCartContent := restInterface listCart: cartId]on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:16:30' prior: 50673986!
listCart: cartId

	"
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		^self xxx:'listCart' yyy:{'cartId'. cartId. }  asOrderedCollection! !

TusLibrosClientTestWindow open .
!

!methodRemoval: TusLibrosClientRestInterface #xxx:yyy:onSucces: stamp: 'lp 6/18/2023 18:18:26'!
xxx: aUrl yyy: aParamters onSucces: aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^aBlock value:resp] 
		ifFalse:[^self error: resp content.]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:18:58'!
request: aUrl withArguments: aParamters

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'lp 6/18/2023 18:18:58' prior: 50674374!
listCart: cartId

	"
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]"
		^self request:'listCart' withArguments:{'cartId'. cartId. }  asOrderedCollection! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'lp 6/18/2023 18:18:58' prior: 50674341!
createCartFor: aUser password: aPassword
"
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]."
	^self request:'createCart' withArguments:{'clientId'. aUser. 'password'. aPassword}! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'lp 6/18/2023 18:18:58' prior: 50674238!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

"	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]"
	^self request:'addToCart' withArguments: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}! !

!methodRemoval: TusLibrosClientRestInterface #xxx:yyy: stamp: 'lp 6/18/2023 18:18:58'!
xxx: aUrl yyy: aParamters

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: aParamters.		
	
	resp := WebClient htmlSubmit: (self url,'/', aUrl) fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:19:18' prior: 50674450!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId
	^self request:'addToCart' withArguments: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:19:23' prior: 50674432!
createCartFor: aUser password: aPassword

	^self request:'createCart' withArguments:{'clientId'. aUser. 'password'. aPassword}! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:19:29' prior: 50674416!
listCart: cartId

		^self request:'listCart' withArguments:{'cartId'. cartId. }  asOrderedCollection! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:19:40' prior: 50674498!
listCart: cartId
		^self request:'listCart' withArguments:{'cartId'. cartId. }  asOrderedCollection! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:22:19' prior: 50674273!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
			self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)
			] on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
		]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:22:39' prior: 50674481!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId
	^self request:'addToCart' withArguments: {'cartId'. 10000. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:24:07' prior: 50674172!
createCart

	| newCartId |
	
	[newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived.
		]
	
	on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:24:38' prior: 50674359!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[currentSelectedCartContent := restInterface listCart: cartId.
			self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId
			]on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
		 ].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:24:57' prior: 50674490!
createCartFor: aUser password: aPassword

	^self request:'createCart' withArguments:{'clientId'. 6. 'password'. aPassword}! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:25:31' prior: 50674567!
createCartFor: aUser password: aPassword

	^self request:'createCart' withArguments:{'clientId'. aUser. 'password'. aPassword}! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:25:47' prior: 50674576!
createCartFor: aUser password: aPassword

	^self request:'createCart' withArguments:{'clientId'. 5. 'password'. aPassword}! !

TusLibrosClientTestWindow open .!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:26:02' prior: 50674585!
createCartFor: aUser password: aPassword

	^self request:'createCart' withArguments:{'clientId'. aUser . 'password'. aPassword}! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'lp 6/18/2023 18:26:56' prior: 50674126!
popErrorMessage: anErrorDescriptions
	self inform:anErrorDescriptions .! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'lp 6/18/2023 18:27:02' prior: 50674603!
popErrorMessage: anErrorDescription
	self inform:anErrorDescription .! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:30:12' prior: 50674539!
createCart

	| newCartId |
	
	[newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		]
	
	on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:31:02'!
xxx:aBlock

	
	
	[aBlock value] on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:31:49' prior: 50674615!
createCart

	| newCartId |
	
	self xxx: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		].! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:40:49' prior: 50674552!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		self xxx: [currentSelectedCartContent := restInterface listCart: cartId.
			self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId
			]].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:41:03' prior: 50674512!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		self xxx:[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
			self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)
			] ]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:41:18' prior: 50674628!
xxx:aBlock
	[aBlock value] on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
	! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:41:58' prior: 50674529!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId
	^self request:'addToCart' withArguments: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 18:43:18'!
try:aBlock
	[aBlock value] on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'lp 6/18/2023 18:43:18' prior: 50674659!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		self try:[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
			self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)
			] ]! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'lp 6/18/2023 18:43:18' prior: 50674636!
createCart

	| newCartId |
	
	self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		].! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'lp 6/18/2023 18:43:18' prior: 50674647!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		self try: [currentSelectedCartContent := restInterface listCart: cartId.
			self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId
			]].! !

!methodRemoval: TusLibrosClientTestWindowModel #xxx: stamp: 'lp 6/18/2023 18:43:18'!
xxx:aBlock
	[aBlock value] on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
	!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:58:24' prior: 50674594!
createCartFor: aUser password: aPassword

	^[self request:'createCart' withArguments:{'clientId'. aUser . 'password'. aPassword}]fork! !

TusLibrosClientTestWindow open .
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:59:07' prior: 50674742!
createCartFor: aUser password: aPassword

	^self request:'createCart' withArguments:{'clientId'. aUser . 'password'. aPassword}! !

TusLibrosClientTestWindow open .
!

TusLibrosClientTestWindow open .
!

----SNAPSHOT----(18 June 2023 19:19:23) CuisUniversity-5706.image priorSource: 10959927!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 19:21:44' prior: 50674714!
createCart

	| newCartId semaphore|
	semaphore := Semaphore new.
	self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 19:24:01' prior: 50674764!
createCart

	| newCartId |
	self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		].! !

!classDefinition: #TusLibrosClientTestWindowModel category: 'TusLibrosREST' stamp: 'lp 6/18/2023 19:24:13'!
Object subclass: #TusLibrosClientTestWindowModel
	instanceVariableNames: 'cartIds selectedCartIdsIndex selectedBookCatalogIndex currentSelectedCartContent restInterface semaphore'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 19:24:11' prior: 50674775!
createCart

	| newCartId |
	semaphore := Semaphore new.
	self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 19:25:01' prior: 50674796!
createCart

	| newCartId |
	semaphore := Semaphore new.
	[self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		].]fork.
	semaphore  wait.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 19:25:19' prior: 50674807!
createCart

	| newCartId |
	semaphore := Semaphore new.
	[self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		].
	semaphore signal ]fork.
	semaphore  wait.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 19:25:39' prior: 50674818!
createCart

	| newCartId |
	semaphore := Semaphore new.
	[self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		].
	semaphore signal ]fork.! !

----SNAPSHOT----(18 June 2023 19:25:54) CuisUniversity-5706.image priorSource: 10979498!

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 19:28:06' prior: 50674700!
addToCart

	| cartId bookIsbn |

	[(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		self try:[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
			self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)
			] ]]fork.! !

----SNAPSHOT----(18 June 2023 19:28:10) CuisUniversity-5706.image priorSource: 10982065!

TusLibrosClientTestWindow open .
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'lp 6/18/2023 19:29:13' prior: 50674724!
listCart

	| cartId |
	
	[(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		self try: [currentSelectedCartContent := restInterface listCart: cartId.
			self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId
			]]]fork.! !

TusLibrosClientTestWindow open .
!

TusLibrosClientTestWindow open .
!

----SNAPSHOT----(18 June 2023 19:37:31) CuisUniversity-5706.image priorSource: 10982625!

----SNAPSHOT----(18 June 2023 19:49:17) CuisUniversity-5706.image priorSource: 10983206!

----STARTUP---- (18 June 2023 19:54:38) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64 - Copy\CuisUniversity-5706.image!


TusLibrosClientTestWindowModel subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #XXX category: 'TusLibrosREST' stamp: 'jb 6/18/2023 19:55:47'!
TusLibrosClientTestWindowModel subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #XXX category: 'TusLibrosREST' stamp: 'jb 6/18/2023 19:57:04'!
TusLibrosClientTestWindowModel subclass: #XXX
	instanceVariableNames: 'model'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!XXX methodsFor: 'nil' stamp: 'jb 6/18/2023 19:57:03' overrides: 50674845!
addToCart
	[ model addToCart ] fork.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 19:57:18' overrides: 50674830!
createCart
	[ model addToCart ] fork.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 19:57:35' overrides: 50674863!
listCart
	[ model addToCart ] fork.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 19:58:04'!
messageNotUnderstood
	self shouldBeImplemented  ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 19:58:18'!
messageNotUnderstand
	self shouldBeImplemented  ! !

!methodRemoval: XXX #messageNotUnderstood stamp: 'jb 6/18/2023 19:58:19'!
messageNotUnderstood
	self shouldBeImplemented  !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 19:59:26'!
doesNotUnderstand
	self shouldBeImplemented  ! !

!methodRemoval: XXX #messageNotUnderstand stamp: 'jb 6/18/2023 19:59:26'!
messageNotUnderstand
	self shouldBeImplemented  !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'jb 6/18/2023 20:00:10' prior: 50674090!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (XXX new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!
!XXX methodsFor: 'nil' stamp: 'jb 6/18/2023 20:02:21' overrides: 50630966!
initialize
	model:= TusLibrosClientTestWindowModel  new.! !

TusLibrosClientTestWindow open!

row!
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:04:59' overrides: 50337880!
doesNotUnderstand: aMessage 
	 aMessage  sendTo: model ! !

!methodRemoval: XXX #doesNotUnderstand stamp: 'jb 6/18/2023 20:05:44'!
doesNotUnderstand
	self shouldBeImplemented  !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:05:58' prior: 50674969 overrides: 50337880!
doesNotUnderstand: aMessage 
	 ^aMessage  sendTo: model ! !

TusLibrosClientTestWindow open!

TusLibrosClientTestWindow open!

WebServer reset.!

TusLibrosClientTestWindow open!

WebServer reset.!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!

row!

row!

anObject!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'jb 6/18/2023 20:09:51' prior: 50674845!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		self try:[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
			self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)
			] ].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'jb 6/18/2023 20:09:59' prior: 50674830!
createCart

	| newCartId |
	semaphore := Semaphore new.
	self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		].
	semaphore signal.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'jb 6/18/2023 20:10:06' prior: 50674863!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		self try: [currentSelectedCartContent := restInterface listCart: cartId.
			self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId
			]].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'jb 6/18/2023 20:10:39' prior: 50675006!
createCart

	| newCartId |
	semaphore := Semaphore new.
	self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		].
! !

TusLibrosClientTestWindow open!

WebServer reset.!

TusLibrosClientTestWindow open!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'lp 6/18/2023 17:55:54' prior: 50674940!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !

TusLibrosClientTestWindow open!
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:12:08'!
_doesNotUnderstand: aMessage 
	 ^aMessage  sendTo: model ! !

!methodRemoval: XXX #doesNotUnderstand: stamp: 'jb 6/18/2023 20:12:08'!
doesNotUnderstand: aMessage 
	 ^aMessage  sendTo: model !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'jb 6/18/2023 20:12:23' prior: 50675048!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (XXX new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !

	self model: (XXX new).!

TusLibrosClientTestWindow open!

Object subclass: #XXX
	instanceVariableNames: 'model'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #XXX category: 'TusLibrosREST' stamp: 'jb 6/18/2023 20:27:07'!
Object subclass: #XXX
	instanceVariableNames: 'model'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:27:21' overrides: 50337880!
doesNotUnderstand: aMessage 
	 ^aMessage  sendTo: model ! !

!methodRemoval: XXX #_doesNotUnderstand: stamp: 'jb 6/18/2023 20:27:21'!
_doesNotUnderstand: aMessage 
	 ^aMessage  sendTo: model !

TusLibrosClientTestWindow open!
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:28:24' prior: 50674910!
createCart
	[ model createCart  ] fork.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:28:32' prior: 50674915!
listCart
	[ model listCart ] fork.! !

TusLibrosClientTestWindow open!

TusLibrosClientTestWindow open!
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:30:12' prior: 50675124!
createCart
	[ model createCart. self halt  ] fork.! !

TusLibrosClientTestWindow open!
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:31:03' prior: 50675135!
createCart
	[ model createCart. ] fork.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'jb 6/18/2023 20:32:01' prior: 50675029!
createCart

	| newCartId |
	
	self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		].
! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'jb 6/18/2023 20:32:04' prior: 50675146!
createCart

	| newCartId |
	self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self triggerEvent: #newCartIdArrived.
		].
! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'jb 6/18/2023 20:33:22' prior: 50675156!
createCart

	| newCartId |
	self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		self halt.
		self triggerEvent: #newCartIdArrived.
		].
! !

		self halt.!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'jb 6/18/2023 20:34:45' prior: 50675166!
createCart

	| newCartId |
	self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		
		self triggerEvent: #newCartIdArrived.
		].
! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'jb 6/18/2023 20:34:58' prior: 50675080!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (XXX new).
	self halt.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !

	self halt.!

TusLibrosClientTestWindow open!
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:36:17' overrides: 16902008!
addDependent: anObject
	^model addDependent:  anObject! !

TusLibrosClientTestWindow open!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'jb 6/18/2023 20:36:36' prior: 50675188!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (XXX new).

	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !

TusLibrosClientTestWindow open!
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:37:00' prior: 50675211 overrides: 16902008!
addDependent: anObject
	^model addDependent:  anObject! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'jb 6/18/2023 20:40:07' prior: 50675178!
createCart

	| newCartId |
	self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		
		self triggerEvent: #newCartIdArrived.
		self halt.
		].
! !

TusLibrosClientTestWindow open!

(self actionForEvent: anEventSelector) value!
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:42:58' overrides: 16902331!
when: anEventSelector
send: aMessageSelector
to: anObject
 	
	^model when: anEventSelector
send: aMessageSelector
to: anObject
! !

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'jb 6/18/2023 20:43:23' prior: 50675248!
createCart

	| newCartId |
	self try: [newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
		cartIds add: newCartId.
		
		self triggerEvent: #newCartIdArrived.
	
		].
! !

TusLibrosClientTestWindow open!

!classDefinition: #TusLibrosClientTestWindowModelDecorator category: #'Kernel-Objects' stamp: 'jb 6/18/2023 20:46:47'!
Object subclass: #TusLibrosClientTestWindowModelDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Kernel-Objects'!

TusLibrosClientTestWindowModelDecorator subclass: #XXX
	instanceVariableNames: 'model'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #XXX category: 'TusLibrosREST' stamp: 'jb 6/18/2023 20:46:47'!
TusLibrosClientTestWindowModelDecorator subclass: #XXX
	instanceVariableNames: 'model'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

Object subclass: #TusLibrosClientTestWindowModelDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-TusLibrosREST'!

!classDefinition: #TusLibrosClientTestWindowModelDecorator category: 'TusLibros-TusLibrosREST' stamp: 'jb 6/18/2023 20:47:47'!
Object subclass: #TusLibrosClientTestWindowModelDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-TusLibrosREST'!

Object subclass: #TusLibrosClientTestWindowModelDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #TusLibrosClientTestWindowModelDecorator category: 'TusLibrosREST' stamp: 'jb 6/18/2023 20:48:00'!
Object subclass: #TusLibrosClientTestWindowModelDecorator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #XXX category: 'TusLibrosREST' stamp: 'jb 6/18/2023 20:48:30'!
TusLibrosClientTestWindowModelDecorator subclass: #XXX
	instanceVariableNames: 'model_'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:48:30' prior: 50675114 overrides: 50337880!
doesNotUnderstand: aMessage 
	 ^aMessage  sendTo: model_ ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:48:30' prior: 50674905!
addToCart
	[ model_ addToCart ] fork.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:48:30' prior: 50675242 overrides: 16902008!
addDependent: anObject
	^model_ addDependent:  anObject! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:48:30' prior: 50675141!
createCart
	[ model_ createCart. ] fork.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:48:30' prior: 50675260 overrides: 16902331!
when: anEventSelector
send: aMessageSelector
to: anObject
 	
	^model_ when: anEventSelector
send: aMessageSelector
to: anObject
! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:48:30' prior: 50675129!
listCart
	[ model_ listCart ] fork.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:48:30' prior: 50674963 overrides: 16920235!
initialize
	model_:= TusLibrosClientTestWindowModel  new.! !

Object subclass: #TusLibrosClientTestWindowModelDecorator
	instanceVariableNames: 'TusLibrosModel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #TusLibrosClientTestWindowModelDecorator category: 'TusLibrosREST' stamp: 'jb 6/18/2023 20:48:57'!
Object subclass: #TusLibrosClientTestWindowModelDecorator
	instanceVariableNames: 'TusLibrosModel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #TusLibrosClientTestWindowModelDecorator category: 'TusLibrosREST' stamp: 'jb 6/18/2023 20:49:21'!
Object subclass: #TusLibrosClientTestWindowModelDecorator
	instanceVariableNames: 'tusLibrosModel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:49:31' prior: 50675369 overrides: 16920235!
initialize
	tusLibrosModel = TusLibrosClientTestWindowModel  new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:49:44' prior: 50675347 overrides: 16902008!
addDependent: anObject
	^tusLibrosModel addDependent:  anObject! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:49:49' prior: 50675342!
addToCart
	[ tusLibrosModel  addToCart ] fork.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:49:53' prior: 50675352!
createCart
	[ tusLibrosModel  createCart. ] fork.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:49:57' prior: 50675337 overrides: 50337880!
doesNotUnderstand: aMessage 
	 ^aMessage  sendTo: tusLibrosModel  ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:49:59' prior: 50675364!
listCart
	[ tusLibrosModel  listCart ] fork.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:50:02' prior: 50675357 overrides: 16902331!
when: anEventSelector
send: aMessageSelector
to: anObject
 	
	^tusLibrosModel  when: anEventSelector
send: aMessageSelector
to: anObject
! !

!classDefinition: #XXX category: 'TusLibrosREST' stamp: 'jb 6/18/2023 20:50:11'!
TusLibrosClientTestWindowModelDecorator subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!TusLibrosClientTestWindowModelDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:50:19' overrides: 16902331!
when: anEventSelector
send: aMessageSelector
to: anObject
 	
	^tusLibrosModel  when: anEventSelector
send: aMessageSelector
to: anObject
! !

!methodRemoval: XXX #when:send:to: stamp: 'jb 6/18/2023 20:50:20'!
when: anEventSelector
send: aMessageSelector
to: anObject
 	
	^tusLibrosModel  when: anEventSelector
send: aMessageSelector
to: anObject
!
!TusLibrosClientTestWindowModelDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:50:25' overrides: 16920235!
initialize
	tusLibrosModel = TusLibrosClientTestWindowModel  new.! !

!methodRemoval: XXX #initialize stamp: 'jb 6/18/2023 20:50:26'!
initialize
	tusLibrosModel = TusLibrosClientTestWindowModel  new.!
!TusLibrosClientTestWindowModelDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:50:30' overrides: 50337880!
doesNotUnderstand: aMessage 
	 ^aMessage  sendTo: tusLibrosModel  ! !

!methodRemoval: XXX #doesNotUnderstand: stamp: 'jb 6/18/2023 20:50:30'!
doesNotUnderstand: aMessage 
	 ^aMessage  sendTo: tusLibrosModel  !
!TusLibrosClientTestWindowModelDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:50:36' overrides: 16902008!
addDependent: anObject
	^tusLibrosModel addDependent:  anObject! !

!methodRemoval: XXX #addDependent: stamp: 'jb 6/18/2023 20:50:36'!
addDependent: anObject
	^tusLibrosModel addDependent:  anObject!

!classRenamed: #XXX as: #TusLibrosModelAsincronic stamp: 'jb 6/18/2023 20:51:31'!
Smalltalk renameClassNamed: #XXX as: #TusLibrosModelAsincronic!
!TusLibrosClientTestWindow methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:51:32' prior: 50675219!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosModelAsincronic new).

	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !

TusLibrosClientTestWindowModelDecorator subclass: #TusLibrosErrorSignaling
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!

!classDefinition: #TusLibrosErrorSignaling category: 'TusLibrosREST' stamp: 'jb 6/18/2023 20:52:08'!
TusLibrosClientTestWindowModelDecorator subclass: #TusLibrosErrorSignaling
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!TusLibrosErrorSignaling methodsFor: 'no messages' stamp: 'jb 6/18/2023 20:52:27'!
addToCart
	[ tusLibrosModel  addToCart ] fork.! !
!TusLibrosErrorSignaling methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:52:39'!
createCart
	[ tusLibrosModel  createCart. ] fork.! !
!TusLibrosErrorSignaling methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:52:49'!
listCart
	[ tusLibrosModel  listCart ] fork.! !
!TusLibrosModelAsincronic methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:53:39'!
try:aBlock
	[aBlock value] on: Error do:[:anError | ^tusLibrosModel triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
	! !
!TusLibrosModelAsincronic methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:55:10' prior: 50675409!
addToCart
	self try: [ tusLibrosModel  addToCart ] .! !
!TusLibrosModelAsincronic methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:55:23' prior: 50675414!
createCart
	self try: [ tusLibrosModel  createCart. ] .! !
!TusLibrosModelAsincronic methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:55:30' prior: 50675424!
listCart
	self try:  [ tusLibrosModel  listCart ] .! !

!classRenamed: #TusLibrosErrorSignaling as: #TusLibrosErrorAsincronic_ stamp: 'jb 6/18/2023 20:56:42'!
Smalltalk renameClassNamed: #TusLibrosErrorSignaling as: #TusLibrosErrorAsincronic_!

!classRenamed: #TusLibrosModelAsincronic as: #TusLibrosModelErrorSignaling stamp: 'jb 6/18/2023 20:56:58'!
Smalltalk renameClassNamed: #TusLibrosModelAsincronic as: #TusLibrosModelErrorSignaling!
!TusLibrosClientTestWindow methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:56:59' prior: 50675497!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosModelErrorSignaling new).

	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'jb 6/18/2023 20:57:14' prior: 50675587!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosErrorAsincronic_ new).

	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !

!classRenamed: #TusLibrosErrorAsincronic_ as: #TusLibrosErrorAsincronic stamp: 'jb 6/18/2023 20:57:27'!
Smalltalk renameClassNamed: #TusLibrosErrorAsincronic_ as: #TusLibrosErrorAsincronic!
!TusLibrosClientTestWindow methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:57:27' prior: 50675609!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosErrorAsincronic new).

	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !

TusLibrosClientTestWindow open!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModelDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 20:58:47' prior: 50675460 overrides: 16920235!
initialize
	tusLibrosModel := TusLibrosClientTestWindowModel  new.! !

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModelDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:00:39'!
initializeWith: aModelToDecorate
	tusLibrosModel := aModelToDecorate.! !
!TusLibrosClientTestWindowModelDecorator class methodsFor: 'nil' stamp: 'jb 6/18/2023 21:01:03'!
to: aModelToDecorate
	self new initializeWith: aModelToDecorate ! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'jb 6/18/2023 21:01:59' prior: 50675637!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosErrorAsincronic to: TusLibrosModelErrorSignaling new   ).

	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'NR 6/13/2022 07:07:36' prior: 50674992!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'NR 6/9/2022 08:13:07' prior: 50675269!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'NR 6/13/2022 07:08:06' prior: 50675017!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !

----SNAPSHOT----(18 June 2023 21:03:39) CuisUniversity-5706.image priorSource: 10983296!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModelDecorator class methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:05:12' prior: 50675676!
to: aModelToDecorate
	''self new initializeWith: aModelToDecorate ! !
!TusLibrosClientTestWindowModelDecorator class methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:05:14' prior: 50675744!
to: aModelToDecorate
	self new initializeWith: aModelToDecorate ! !
!TusLibrosClientTestWindowModelDecorator class methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:05:22' prior: 50675751!
to: aModelToDecorate
	^self new initializeWith: aModelToDecorate ! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'jb 6/18/2023 21:06:50' prior: 50674505!
listCart: cartId
		^self request:'listCart' withArguments:{'cartId'. 1000. }  asOrderedCollection! !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:19:40' prior: 50675765!
listCart: cartId
		^self request:'listCart' withArguments:{'cartId'. cartId. }  asOrderedCollection! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'jb 6/18/2023 21:08:00' prior: 50675773!
listCart: cartId
		^self request:'listCart' withArguments:{'cartId'. 1000. }  asOrderedCollection! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'lp 6/18/2023 18:19:40' prior: 50675780!
listCart: cartId
		^self request:'listCart' withArguments:{'cartId'. cartId. }  asOrderedCollection! !

TusLibrosClientTestWindow open!

!classRenamed: #TusLibrosErrorAsincronic as: #TusLibrosModelAsincronicDecorator stamp: 'jb 6/18/2023 21:09:24'!
Smalltalk renameClassNamed: #TusLibrosErrorAsincronic as: #TusLibrosModelAsincronicDecorator!
!TusLibrosClientTestWindow methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:09:24' prior: 50675682!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosModelAsincronicDecorator to: TusLibrosModelErrorSignaling new   ).

	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !

!classRenamed: #TusLibrosModelErrorSignaling as: #TusLibrosModelErrorSignalingDecorator stamp: 'jb 6/18/2023 21:09:34'!
Smalltalk renameClassNamed: #TusLibrosModelErrorSignaling as: #TusLibrosModelErrorSignalingDecorator!
!TusLibrosClientTestWindow methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:09:34' prior: 50675802!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosModelAsincronicDecorator to: TusLibrosModelErrorSignalingDecorator new   ).

	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errorSignal send:#popErrorMessage: to: self.! !
!TusLibrosModelAsincronicDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:10:27'!
decorate:aBlock
	[ aBlock value ] fork.! !
!TusLibrosModelAsincronicDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:10:55' prior: 50675533!
addToCart
	self decorate: [ tusLibrosModel  addToCart ] .! !
!TusLibrosModelAsincronicDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:11:09' prior: 50675538!
createCart
	self decorate: [ tusLibrosModel  createCart. ] .! !
!TusLibrosModelAsincronicDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:11:21' prior: 50675543!
listCart
	self decorate: [ tusLibrosModel  listCart ] .! !
!TusLibrosModelErrorSignalingDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:12:03'!
decorate:aBlock
	[aBlock value] on: Error do:[:anError | ^tusLibrosModel triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
	! !
!TusLibrosModelErrorSignalingDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:12:03' prior: 50675569!
listCart
	self decorate:  [ tusLibrosModel  listCart ] .! !
!TusLibrosModelErrorSignalingDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:12:03' prior: 50675557!
addToCart
	self decorate: [ tusLibrosModel  addToCart ] .! !
!TusLibrosModelErrorSignalingDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:12:03' prior: 50675563!
createCart
	self decorate: [ tusLibrosModel  createCart. ] .! !

!methodRemoval: TusLibrosModelErrorSignalingDecorator #try: stamp: 'jb 6/18/2023 21:12:03'!
try:aBlock
	[aBlock value] on: Error do:[:anError | ^tusLibrosModel triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
	!
!TusLibrosClientTestWindowModelDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:12:14'!
addToCart
	self decorate: [ tusLibrosModel  addToCart ] .! !

!methodRemoval: TusLibrosModelErrorSignalingDecorator #addToCart stamp: 'jb 6/18/2023 21:12:14'!
addToCart
	self decorate: [ tusLibrosModel  addToCart ] .!
!TusLibrosClientTestWindowModelDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:12:18'!
createCart
	self decorate: [ tusLibrosModel  createCart. ] .! !

!methodRemoval: TusLibrosModelErrorSignalingDecorator #createCart stamp: 'jb 6/18/2023 21:12:18'!
createCart
	self decorate: [ tusLibrosModel  createCart. ] .!
!TusLibrosClientTestWindowModelDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:12:23'!
listCart
	self decorate:  [ tusLibrosModel  listCart ] .! !

!methodRemoval: TusLibrosModelErrorSignalingDecorator #listCart stamp: 'jb 6/18/2023 21:12:23'!
listCart
	self decorate:  [ tusLibrosModel  listCart ] .!

!methodRemoval: TusLibrosModelAsincronicDecorator #addToCart stamp: 'jb 6/18/2023 21:12:51'!
addToCart
	self decorate: [ tusLibrosModel  addToCart ] .!

!methodRemoval: TusLibrosModelAsincronicDecorator #createCart stamp: 'jb 6/18/2023 21:12:54'!
createCart
	self decorate: [ tusLibrosModel  createCart. ] .!

!methodRemoval: TusLibrosModelAsincronicDecorator #listCart stamp: 'jb 6/18/2023 21:12:56'!
listCart
	self decorate: [ tusLibrosModel  listCart ] .!
!TusLibrosClientTestWindowModelDecorator methodsFor: 'as yet unclassified' stamp: 'jb 6/18/2023 21:13:20'!
decorate: aBlock
	self subclassResponsibility ! !

TusLibrosClientTestWindow open!

!methodRemoval: TusLibrosClientTestWindowModel #try: stamp: 'jb 6/18/2023 21:15:52'!
try:aBlock
	[aBlock value] on: Error do:[:anError | ^self triggerEvent: #errorSignal withArguments:(Array with: anError messageText)].
	!

----SNAPSHOT----(18 June 2023 21:23:42) CuisUniversity-5706.image priorSource: 11010792!