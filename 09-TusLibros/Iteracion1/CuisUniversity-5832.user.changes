

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (6 June 2023 13:05:16) as C:\Users\juanb\Desktop\facultad\1C23\IS1\cuisUni\windows64\CuisUniversity-5832.image!


TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros01'!

!classDefinition: #ShoppingCartTest category: 'TusLibros01' stamp: 'JB 6/6/2023 13:05:50'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros01'!

!classDefinition: #ShoppingCart category: 'TusLibros01' stamp: 'JB 6/6/2023 13:07:14'!
Object subclass: #ShoppingCart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros01'!
!ShoppingCartTest methodsFor: 'nil' stamp: 'JB 6/6/2023 13:07:10'!
test01CreatingAShopingCartShouldBeEmpty
	self  assert:  ShoppingCart new isEmpty! !

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:07:18'!
ERROR!
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:07:26'!
isEmpty
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:07:37' prior: 50624396!
isEmpty
	^true! !

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:07:39'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:07:39'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:08:54'!
test02AShoppingCartWithABookShouldNotBeEmpty
|cart|
	cart := ShoppingCart new. 
	cart add: #Book. 	
	self  deny:  ShoppingCart new isEmpty! !

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:08:55'!
ERROR!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:10:17' prior: 50624410!
test02AShoppingCartWithABookShouldNotBeEmpty
|cart|
	cart := ShoppingCart new. 
	cart add: #Book  quantity: 1. 	
	self  deny:  ShoppingCart new isEmpty! !

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:10:20'!
ERROR!
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:10:25'!
add: aRenameMe1 quantity: aRenameMe2 
	self shouldBeImplemented.! !

!classDefinition: #ShoppingCart category: 'TusLibros01' stamp: 'JB 6/6/2023 13:10:48'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'book'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros01'!
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:10:46' prior: 50624433!
add: aBook quantity: aQuantity 
	book := aBook ! !

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:10:50'!
FAILURE!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:11:07' prior: 50624422!
test02AShoppingCartWithABookShouldNotBeEmpty
|cart|
	cart := ShoppingCart new. 
	cart add: #Book  quantity: 1. 	
	self  deny:  cart isEmpty! !

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:11:08'!
FAILURE!
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:11:54' prior: 50624400!
isEmpty

	book  ifNil:  [
			^true		
		].
	^false
! !

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:11:55'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:11:55'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:13:31'!
test03anEmptyShoppingCartShouldListAnEmptyList

	self  assert:  OrderedCollection  new equals: ShoppingCart new list! !

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:13:34'!
ERROR!
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:13:41'!
list
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:13:52' prior: 50624487!
list
	^OrderedCollection new! !

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:13:54'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:13:54'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:13:54'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:13:54'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:14:56'!
test04AShoppingCartWithABookShouldListACollectionWithABook
|cart|
	cart := ShoppingCart new. 
	cart add: #Book  quantity: 1. 	
	self  assert:   (OrderedCollection with: #Book) equals: cart list! !

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:14:58'!
FAILURE!

!classDefinition: #ShoppingCart category: 'TusLibros01' stamp: 'JB 6/6/2023 13:15:31'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'book books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros01'!
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:15:30' prior: 50624491!
list
	^books! !
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:15:54' overrides: 16920235!
initialize
	books :=  OrderedCollection new. ! !
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:16:13' prior: 50624445!
add: aBook quantity: aQuantity 
	books add: aBook ! !
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:16:27' prior: 50624465!
isEmpty

	^books isEmpty ! !

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:16:40'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:16:41'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:16:41'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:16:41'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:18:27'!
test04AShoppingCartWithManyBooksShouldListACollectionWithManyABook
|cart|
	cart := ShoppingCart new. 
	cart add: #Twilight  quantity: 1. 	
	cart add: #FullMoon  quantity: 1. 	
	self  assert:   (OrderedCollection with: #Twilight with: #FullMoon  ) equals: cart list! !

!testRun: #ShoppingCartTest #test04AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:18:28'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:18:28'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:18:28'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:18:28'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:18:28'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:18:28'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:19:04'!
test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook
|cart|
	cart := ShoppingCart new. 
	cart add: #Twilight  quantity: 1. 	
	cart add: #FullMoon  quantity: 1. 	
	self  assert:   (OrderedCollection with: #Twilight with: #FullMoon  ) equals: cart list! !

!methodRemoval: ShoppingCartTest #test04AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:19:04'!
test04AShoppingCartWithManyBooksShouldListACollectionWithManyABook
|cart|
	cart := ShoppingCart new. 
	cart add: #Twilight  quantity: 1. 	
	cart add: #FullMoon  quantity: 1. 	
	self  assert:   (OrderedCollection with: #Twilight with: #FullMoon  ) equals: cart list!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:23:02'!
test06addingABookOfAnotherEditorialShouldRaiseAnError
|cart|
	cart := ShoppingCart new. 
	cart add: #Twilight  quantity: 1. 	
	cart add: #FullMoon  quantity: 1. 	
	self  assert:   (OrderedCollection with: #Twilight with: #FullMoon  ) equals: cart list! !

!testRun: #ShoppingCartTest #test06addingABookOfAnotherEditorialShouldRaiseAnError stamp: 'JB 6/6/2023 13:23:05'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:23:05'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:23:05'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:23:05'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:23:05'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:23:05'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookOfAnotherEditorialShouldRaiseAnError stamp: 'JB 6/6/2023 13:23:05'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:30:06' prior: 50624622!
test06addingABookOfAnotherEditorialShouldRaiseAnError
|cart|
	cart := ShoppingCart new. 
	self should: [
		cart add: #ElCapital  quantity: 1. 	
		]
	
	 raise: Error
	withExceptionDo: [:anError |
		self assert: anError messageText  equals: ShoppingCart  bookFromAnotherEditorialErrorMessage
		
		]
	
	
		! !

!testRun: #ShoppingCartTest #test06addingABookOfAnotherEditorialShouldRaiseAnError stamp: 'JB 6/6/2023 13:30:08'!
FAILURE!
!ShoppingCart class methodsFor: 'no messages' stamp: 'JB 6/6/2023 13:30:44'!
bookFromAnotherEditorialErrorMessage
	^'mmhmh ' ! !

!testRun: #ShoppingCartTest #test06addingABookOfAnotherEditorialShouldRaiseAnError stamp: 'JB 6/6/2023 13:30:58'!
FAILURE!
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:32:48' prior: 50624539!
add: aBook quantity: aQuantity 	 
	books add: aBook ! !

!methodRemoval: ShoppingCartTest #test06addingABookOfAnotherEditorialShouldRaiseAnError stamp: 'JB 6/6/2023 13:32:55'!
test06addingABookOfAnotherEditorialShouldRaiseAnError
|cart|
	cart := ShoppingCart new. 
	self should: [
		cart add: #ElCapital  quantity: 1. 	
		]
	
	 raise: Error
	withExceptionDo: [:anError |
		self assert: anError messageText  equals: ShoppingCart  bookFromAnotherEditorialErrorMessage
		
		]
	
	
		!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:35:17'!
test06addingABookWithAnNegativeQuantityShouldRaisAnError
|cart|
	cart := ShoppingCart new. 
	
	self  should:[
		cart add: #Twilight  quantity: -1.	
		]  raise:  Error
			withExceptionDo: [ :anError|
				self assert:  anError messageText  equals: ShoppingCart negativeQuantityErrorMessage
				
				]
	 	! !
!ShoppingCart class methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:35:43'!
negativeQuantityErrorMessage
	^'No se puede poner cantidades negativas' ! !

!methodRemoval: ShoppingCart class #bookFromAnotherEditorialErrorMessage stamp: 'JB 6/6/2023 13:35:45'!
bookFromAnotherEditorialErrorMessage
	^'mmhmh ' !

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:35:52'!
FAILURE!
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:38:29' prior: 50624685!
add: aBook quantity: aQuantity 	
	aQuantity  = 0 ifTrue:  [
		self error: self class  zeroQuantityErrorMessage
		]. 
	aQuantity  < 0 ifTrue:  [
		self error: self class  negativeQuantityErrorMessage  
		]. 
 
	books add: aBook ! !

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:38:32'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:38:32'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:38:32'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:38:32'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:38:32'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:38:32'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:38:35'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:38:35'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:38:35'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:38:35'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:38:35'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:38:35'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:38:35'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:45:03'!
test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList
|cart|
	cart := ShoppingCart new. 
	cart add:  #Twilight  quantity: 	 	2. 
	self assert:  (OrderedCollection  with: #Twilight with: #Twilight ) equals: cart  list ! !

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:45:04'!
FAILURE!
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:45:51' prior: 50624730!
add: aBook quantity: aQuantity 	
	aQuantity  = 0 ifTrue:  [
		self error: self class  zeroQuantityErrorMessage
		]. 
	aQuantity  < 0 ifTrue:  [
		self error: self class  negativeQuantityErrorMessage  
		]. 
	1 to: aQuantity do: [
			books add: aBook 		
		]  


! !

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:45:53'!
ERROR!
!ShoppingCart methodsFor: 'category-name' stamp: 'JB 6/6/2023 13:46:24' prior: 50624806!
add: aBook quantity: aQuantity 	
	aQuantity  = 0 ifTrue:  [
		self error: self class  zeroQuantityErrorMessage
		]. 
	aQuantity  < 0 ifTrue:  [
		self error: self class  negativeQuantityErrorMessage  
		]. 
	1 to: aQuantity do: [:aNumberOfIteration |
			books add: aBook 		
		]  


! !

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:46:25'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:46:25'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:46:25'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:46:25'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:46:25'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:46:25'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:46:25'!
PASSED!

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:46:25'!
PASSED!
!ShoppingCart class methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:46:56'!
zeroQuantityErrorMessage
	^'No se puede poner cantidades nulas' ! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:00'!
creatEmptyCart

	^ ShoppingCart new! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:00' prior: 50624477!
test03anEmptyShoppingCartShouldListAnEmptyList

	self  assert:  OrderedCollection  new equals: self creatEmptyCart list! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:00' prior: 50624790!
test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList
|cart|
	cart := self creatEmptyCart. 
	cart add:  #Twilight  quantity: 	 	2. 
	self assert:  (OrderedCollection  with: #Twilight with: #Twilight ) equals: cart  list ! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:00' prior: 50624387!
test01CreatingAShopingCartShouldBeEmpty
	self  assert:  self creatEmptyCart isEmpty! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:00' prior: 50624454!
test02AShoppingCartWithABookShouldNotBeEmpty
|cart|
	cart := self creatEmptyCart. 
	cart add: #Book  quantity: 1. 	
	self  deny:  cart isEmpty! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:00' prior: 50624598!
test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook
|cart|
	cart := self creatEmptyCart. 
	cart add: #Twilight  quantity: 1. 	
	cart add: #FullMoon  quantity: 1. 	
	self  assert:   (OrderedCollection with: #Twilight with: #FullMoon  ) equals: cart list! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:00' prior: 50624703!
test06addingABookWithAnNegativeQuantityShouldRaisAnError
|cart|
	cart := self creatEmptyCart. 
	
	self  should:[
		cart add: #Twilight  quantity: -1.	
		]  raise:  Error
			withExceptionDo: [ :anError|
				self assert:  anError messageText  equals: ShoppingCart negativeQuantityErrorMessage
				
				]
	 	! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:00' prior: 50624509!
test04AShoppingCartWithABookShouldListACollectionWithABook
|cart|
	cart := self creatEmptyCart. 
	cart add: #Book  quantity: 1. 	
	self  assert:   (OrderedCollection with: #Book) equals: cart list! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:25'!
createEmptyCart

	^ ShoppingCart new! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:25' prior: 50624910!
test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook
|cart|
	cart := self createEmptyCart. 
	cart add: #Twilight  quantity: 1. 	
	cart add: #FullMoon  quantity: 1. 	
	self  assert:   (OrderedCollection with: #Twilight with: #FullMoon  ) equals: cart list! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:25' prior: 50624902!
test02AShoppingCartWithABookShouldNotBeEmpty
|cart|
	cart := self createEmptyCart. 
	cart add: #Book  quantity: 1. 	
	self  deny:  cart isEmpty! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:25' prior: 50624922!
test06addingABookWithAnNegativeQuantityShouldRaisAnError
|cart|
	cart := self createEmptyCart. 
	
	self  should:[
		cart add: #Twilight  quantity: -1.	
		]  raise:  Error
			withExceptionDo: [ :anError|
				self assert:  anError messageText  equals: ShoppingCart negativeQuantityErrorMessage
				
				]
	 	! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:25' prior: 50624935!
test04AShoppingCartWithABookShouldListACollectionWithABook
|cart|
	cart := self createEmptyCart. 
	cart add: #Book  quantity: 1. 	
	self  assert:   (OrderedCollection with: #Book) equals: cart list! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:25' prior: 50624896!
test01CreatingAShopingCartShouldBeEmpty
	self  assert:  self createEmptyCart isEmpty! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:25' prior: 50624877!
test03anEmptyShoppingCartShouldListAnEmptyList

	self  assert:  OrderedCollection  new equals: self createEmptyCart list! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:51:25' prior: 50624884!
test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList
|cart|
	cart := self createEmptyCart. 
	cart add:  #Twilight  quantity: 	 	2. 
	self assert:  (OrderedCollection  with: #Twilight with: #Twilight ) equals: cart  list ! !

!methodRemoval: ShoppingCartTest #creatEmptyCart stamp: 'JB 6/6/2023 13:51:25'!
creatEmptyCart

	^ ShoppingCart new!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:52:48' prior: 50624982!
test04AShoppingCartWithABookShouldListACollectionWithABook
|cart|
	cart := self createEmptyCart  add: #Book  quantity: 1. 	
	self  assert:   (OrderedCollection with: #Book) equals: cart list! !

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:52:49'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:52:49'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:52:49'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:52:49'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:52:49'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:52:49'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:52:49'!
PASSED!

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:52:49'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:53:13'!
createACartWithASingleBook

	^ self createEmptyCart  add: #Book  quantity: 1! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:53:14' prior: 50625020!
test04AShoppingCartWithABookShouldListACollectionWithABook
|cart|
	cart := self createACartWithASingleBook. 	
	self  assert:   (OrderedCollection with: #Book) equals: cart list! !

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:53:18'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:53:18'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:53:18'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:53:18'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:53:18'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:53:18'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:53:18'!
PASSED!

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:53:18'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:53:28' prior: 50624961!
test02AShoppingCartWithABookShouldNotBeEmpty
|cart|
	cart := self createACartWithASingleBook 
	self  deny:  cart isEmpty! !

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:53:34'!
ERROR!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:53:50' prior: 50625108!
test02AShoppingCartWithABookShouldNotBeEmpty

	self  deny:   self createACartWithASingleBook   isEmpty! !

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:53:51'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:53:51'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:53:51'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:53:51'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:53:51'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:53:51'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:53:51'!
PASSED!

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:53:51'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:54:09' prior: 50625067!
test04AShoppingCartWithABookShouldListACollectionWithABook

	self  assert:   (OrderedCollection with: #Book) equals: self createACartWithASingleBook  list! !

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:54:10'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:54:10'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:54:10'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:54:10'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:54:10'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:54:10'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:54:10'!
PASSED!

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:54:10'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:54:39' prior: 50624969!
test06addingABookWithAnNegativeQuantityShouldRaisAnError

	self  should:[
		self createEmptyCart  add: #Twilight  quantity: -1.	
		]  raise:  Error
			withExceptionDo: [ :anError|
				self assert:  anError messageText  equals: ShoppingCart negativeQuantityErrorMessage
				
				]
	 	! !

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:54:40'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:54:40'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:54:40'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:54:40'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:54:40'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:54:40'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:54:40'!
PASSED!

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:54:40'!
PASSED!

	^ self createEmptyCart  add: #Twilight  quantity: 1!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:55:57' prior: 50625061!
createACartWithASingleBook

	^ self createEmptyCart  add: #Twilight  quantity: 1! !

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:55:59'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:55:59'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:55:59'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:55:59'!
FAILURE!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:55:59'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:55:59'!
PASSED!

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:55:59'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:55:59'!
FAILURE!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:56:10' prior: 50625157!
test04AShoppingCartWithABookShouldListACollectionWithABook

	self  assert:   (OrderedCollection with: #Twilight) equals: self createACartWithASingleBook  list! !

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:56:11'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:56:43' prior: 50624949!
test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook
|cart|
	cart := self createACartWithASingleBook add: #FullMoon  quantity: 1. 	
	self  assert:   (OrderedCollection with: #Twilight with: #FullMoon  ) equals: cart list! !

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:56:44'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:56:44'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:56:44'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:56:44'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:56:44'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:56:44'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:56:44'!
PASSED!

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:56:44'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:57:00'!
createACartWithTwoBooks

	^ self createACartWithASingleBook add: #FullMoon  quantity: 1! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:57:00' prior: 50625294!
test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook
|cart|
	cart := self createACartWithTwoBooks. 	
	self  assert:   (OrderedCollection with: #Twilight with: #FullMoon  ) equals: cart list! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:57:14' prior: 50625342!
test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook

	self  assert:   (OrderedCollection with: #Twilight with: #FullMoon  ) equals:  self createACartWithTwoBooks list! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:58:25'!
createACartWithTwilightAndFullMoon

	^ self createACartWithASingleBook add: #FullMoon  quantity: 1! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:58:25' prior: 50625352!
test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook

	self  assert:   (OrderedCollection with: #Twilight with: #FullMoon  ) equals:  self createACartWithTwilightAndFullMoon list! !

!methodRemoval: ShoppingCartTest #createACartWithTwoBooks stamp: 'JB 6/6/2023 13:58:25'!
createACartWithTwoBooks

	^ self createACartWithASingleBook add: #FullMoon  quantity: 1!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:58:51'!
createACartWithASingleBookNamedTwilight

	^ self createEmptyCart  add: #Twilight  quantity: 1! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:58:51' prior: 50625281!
test04AShoppingCartWithABookShouldListACollectionWithABook

	self  assert:   (OrderedCollection with: #Twilight) equals: self createACartWithASingleBookNamedTwilight  list! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:58:51' prior: 50625361!
createACartWithTwilightAndFullMoon

	^ self createACartWithASingleBookNamedTwilight add: #FullMoon  quantity: 1! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:58:51' prior: 50625119!
test02AShoppingCartWithABookShouldNotBeEmpty

	self  deny:   self createACartWithASingleBookNamedTwilight   isEmpty! !

!methodRemoval: ShoppingCartTest #createACartWithASingleBook stamp: 'JB 6/6/2023 13:58:51'!
createACartWithASingleBook

	^ self createEmptyCart  add: #Twilight  quantity: 1!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:59:30' prior: 50625005!
test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList
|cart|
	cart := self createEmptyCart add:  #Twilight  quantity: 	 	2. 
	self assert:  (OrderedCollection  with: #Twilight with: #Twilight ) equals: cart  list ! !

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:59:31'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 13:59:32'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 13:59:32'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 13:59:32'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 13:59:32'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 13:59:32'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 13:59:32'!
PASSED!

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 13:59:32'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 13:59:59'!
createACartWithTwilightTwice

	^ self createEmptyCart add:  #Twilight  quantity: 	 	2! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 14:00:00' prior: 50625419!
test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList
|cart|
	cart := self createACartWithTwilightTwice. 
	self assert:  (OrderedCollection  with: #Twilight with: #Twilight ) equals: cart  list ! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 14:00:19' prior: 50625468!
test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList

	self assert:  (OrderedCollection  with: #Twilight with: #Twilight ) equals: self createACartWithTwilightTwice  list ! !

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 14:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 14:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 14:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 14:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 14:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 14:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 14:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 14:00:21'!
PASSED!
!ShoppingCart methodsFor: 'adding' stamp: 'JB 6/6/2023 14:03:54'!
checkIfTheQuantittyIsPositive: aQuantity

	aQuantity  = 0 ifTrue:  [
		self error: self class  zeroQuantityErrorMessage
		]. 
	aQuantity  < 0 ifTrue:  [
		self error: self class  negativeQuantityErrorMessage  
		]! !
!ShoppingCart methodsFor: 'adding' stamp: 'JB 6/6/2023 14:03:55' prior: 50624822!
add: aBook quantity: aQuantity 	
	self checkIfTheQuantittyIsPositive: aQuantity. 
	1 to: aQuantity do: [:aNumberOfIteration |
			books add: aBook 		
		]  


! !
!ShoppingCart methodsFor: 'adding' stamp: 'JB 6/6/2023 14:04:34'!
raiseAnErrorIfTheQuantityIsNonPositive: aQuantity

	aQuantity  = 0 ifTrue:  [
		self error: self class  zeroQuantityErrorMessage
		]. 
	aQuantity  < 0 ifTrue:  [
		self error: self class  negativeQuantityErrorMessage  
		]! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 14:04:34' prior: 50625531!
add: aBook quantity: aQuantity 	
	self raiseAnErrorIfTheQuantityIsNonPositive: aQuantity. 
	1 to: aQuantity do: [:aNumberOfIteration |
			books add: aBook 		
		]  


! !

!methodRemoval: ShoppingCart #checkIfTheQuantittyIsPositive: stamp: 'JB 6/6/2023 14:04:34'!
checkIfTheQuantittyIsPositive: aQuantity

	aQuantity  = 0 ifTrue:  [
		self error: self class  zeroQuantityErrorMessage
		]. 
	aQuantity  < 0 ifTrue:  [
		self error: self class  negativeQuantityErrorMessage  
		]!
!ShoppingCart methodsFor: 'adding private' stamp: 'JB 6/6/2023 14:06:13'!
assertCanAdd: aQuantity

	aQuantity  = 0 ifTrue:  [
		self error: self class  zeroQuantityErrorMessage
		]. 
	aQuantity  < 0 ifTrue:  [
		self error: self class  negativeQuantityErrorMessage  
		]! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'JB 6/6/2023 14:06:13' prior: 50625550!
add: aBook quantity: aQuantity 	
	self assertCanAdd: aQuantity. 
	1 to: aQuantity do: [:aNumberOfIteration |
			books add: aBook 		
		]  


! !

!methodRemoval: ShoppingCart #raiseAnErrorIfTheQuantityIsNonPositive: stamp: 'JB 6/6/2023 14:06:13'!
raiseAnErrorIfTheQuantityIsNonPositive: aQuantity

	aQuantity  = 0 ifTrue:  [
		self error: self class  zeroQuantityErrorMessage
		]. 
	aQuantity  < 0 ifTrue:  [
		self error: self class  negativeQuantityErrorMessage  
		]!
!ShoppingCart methodsFor: 'adding' stamp: 'JB 6/6/2023 14:08:45'!
addBookToTheShoppingCart: aBook   thisAmountOfTimes: aQuantity 
	1 to: aQuantity do: [:aNumberOfIteration |
			books add: aBook 		
		]  


! !
!ShoppingCart methodsFor: 'adding' stamp: 'JB 6/6/2023 14:09:07' prior: 50625578!
add: aBook quantity: aQuantity 	
	self assertCanAdd: aQuantity. 
	self addBookToTheShoppingCart:  aBook  thisAmountOfTimes: aQuantity 

! !

!testRun: #ShoppingCartTest #test01CreatingAShopingCartShouldBeEmpty stamp: 'JB 6/6/2023 14:09:08'!
PASSED!

!testRun: #ShoppingCartTest #test02AShoppingCartWithABookShouldNotBeEmpty stamp: 'JB 6/6/2023 14:09:08'!
PASSED!

!testRun: #ShoppingCartTest #test03anEmptyShoppingCartShouldListAnEmptyList stamp: 'JB 6/6/2023 14:09:08'!
PASSED!

!testRun: #ShoppingCartTest #test04AShoppingCartWithABookShouldListACollectionWithABook stamp: 'JB 6/6/2023 14:09:08'!
PASSED!

!testRun: #ShoppingCartTest #test05AShoppingCartWithManyBooksShouldListACollectionWithManyABook stamp: 'JB 6/6/2023 14:09:08'!
PASSED!

!testRun: #ShoppingCartTest #test06addingABookWithAnNegativeQuantityShouldRaisAnError stamp: 'JB 6/6/2023 14:09:08'!
PASSED!

!testRun: #ShoppingCartTest #test07addingAQuantityOfABookIntoAShoppingCartShouldAppearThatQuantityOfTimesInTheList stamp: 'JB 6/6/2023 14:09:08'!
PASSED!

----QUIT----(6 June 2023 14:09:25) CuisUniversity-5832.image priorSource: 9366758!